// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/super/compiler/ast"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 9, col: 1, offset: 93},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 103},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 103},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 103},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 10, col: 5, offset: 103},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 8, offset: 106},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 14, offset: 112},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 20, offset: 118},
									name: "EndQuery",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 11, col: 5, offset: 160},
						run: (*parser).callonstart8,
						expr: &seqExpr{
							pos: position{line: 11, col: 5, offset: 160},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 11, col: 5, offset: 160},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 11, col: 8, offset: 163},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 11, col: 12, offset: 167},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 11, col: 16, offset: 171},
									name: "EndQuery",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EndQuery",
			pos:  position{line: 13, col: 1, offset: 201},
			expr: &seqExpr{
				pos: position{line: 13, col: 12, offset: 212},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 13, col: 12, offset: 212},
						name: "__",
					},
					&zeroOrOneExpr{
						pos: position{line: 13, col: 15, offset: 215},
						expr: &litMatcher{
							pos:        position{line: 13, col: 15, offset: 215},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 13, col: 20, offset: 220},
						name: "__",
					},
					&ruleRefExpr{
						pos:  position{line: 13, col: 23, offset: 223},
						name: "EOF",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Scope",
			pos:  position{line: 15, col: 1, offset: 228},
			expr: &actionExpr{
				pos: position{line: 16, col: 5, offset: 238},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 16, col: 5, offset: 238},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 16, col: 5, offset: 238},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 16, col: 11, offset: 244},
								expr: &ruleRefExpr{
									pos:  position{line: 16, col: 11, offset: 244},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 16, col: 17, offset: 250},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 16, col: 22, offset: 255},
								name: "Seq",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Seq",
			pos:  position{line: 25, col: 1, offset: 428},
			expr: &actionExpr{
				pos: position{line: 26, col: 5, offset: 436},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 26, col: 5, offset: 436},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 26, col: 5, offset: 436},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 11, offset: 442},
								name: "LeanOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 26, col: 18, offset: 449},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 26, col: 23, offset: 454},
								expr: &ruleRefExpr{
									pos:  position{line: 26, col: 23, offset: 454},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SeqTail",
			pos:  position{line: 30, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 30, col: 11, offset: 521},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 30, col: 11, offset: 521},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 30, col: 11, offset: 521},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 30, col: 14, offset: 524},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 30, col: 19, offset: 529},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 30, col: 22, offset: 532},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 30, col: 24, offset: 534},
								name: "LeanOp",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Decl",
			pos:  position{line: 32, col: 1, offset: 560},
			expr: &actionExpr{
				pos: position{line: 33, col: 5, offset: 569},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 33, col: 5, offset: 569},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 33, col: 5, offset: 569},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 33, col: 8, offset: 572},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 33, col: 8, offset: 572},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 33, col: 20, offset: 584},
										name: "FuncDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 33, col: 31, offset: 595},
										name: "OpDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 33, col: 40, offset: 604},
										name: "TypeDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 50, offset: 614},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstDecl",
			pos:  position{line: 35, col: 1, offset: 635},
			expr: &actionExpr{
				pos: position{line: 36, col: 5, offset: 649},
				run: (*parser).callonConstDecl1,
				expr: &seqExpr{
					pos: position{line: 36, col: 5, offset: 649},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 36, col: 5, offset: 649},
							name: "CONST",
						},
						&ruleRefExpr{
							pos:  position{line: 36, col: 11, offset: 655},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 36, col: 13, offset: 657},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 18, offset: 662},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 36, col: 29, offset: 673},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 36, col: 32, offset: 676},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 36, col: 36, offset: 680},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 36, col: 39, offset: 683},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 44, offset: 688},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FuncDecl",
			pos:  position{line: 45, col: 1, offset: 861},
			expr: &actionExpr{
				pos: position{line: 46, col: 5, offset: 874},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 46, col: 5, offset: 874},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 46, col: 5, offset: 874},
							name: "FUNC",
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 10, offset: 879},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 12, offset: 881},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 17, offset: 886},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 28, offset: 897},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 46, col: 31, offset: 900},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 35, offset: 904},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 38, offset: 907},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 46, col: 45, offset: 914},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 45, offset: 914},
									name: "Identifiers",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 58, offset: 927},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 46, col: 61, offset: 930},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 65, offset: 934},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 46, col: 68, offset: 937},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 72, offset: 941},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 46, col: 75, offset: 944},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 79, offset: 948},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 82, offset: 951},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 87, offset: 956},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 92, offset: 961},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 46, col: 95, offset: 964},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OpDecl",
			pos:  position{line: 56, col: 1, offset: 1168},
			expr: &actionExpr{
				pos: position{line: 57, col: 5, offset: 1179},
				run: (*parser).callonOpDecl1,
				expr: &seqExpr{
					pos: position{line: 57, col: 5, offset: 1179},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 57, col: 5, offset: 1179},
							name: "OP",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 8, offset: 1182},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 10, offset: 1184},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 15, offset: 1189},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 26, offset: 1200},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 29, offset: 1203},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 33, offset: 1207},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 36, offset: 1210},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 57, col: 43, offset: 1217},
								expr: &ruleRefExpr{
									pos:  position{line: 57, col: 43, offset: 1217},
									name: "Identifiers",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 56, offset: 1230},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 59, offset: 1233},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 63, offset: 1237},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 66, offset: 1240},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 70, offset: 1244},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 73, offset: 1247},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 77, offset: 1251},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 80, offset: 1254},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 85, offset: 1259},
								name: "OpDeclBody",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 96, offset: 1270},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 99, offset: 1273},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OpDeclBody",
			pos:  position{line: 67, col: 1, offset: 1479},
			expr: &choiceExpr{
				pos: position{line: 68, col: 5, offset: 1494},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 1494},
						run: (*parser).callonOpDeclBody2,
						expr: &labeledExpr{
							pos:   position{line: 68, col: 5, offset: 1494},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 1500},
								name: "Scope",
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 1539},
						run: (*parser).callonOpDeclBody5,
						expr: &labeledExpr{
							pos:   position{line: 69, col: 5, offset: 1539},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 9, offset: 1543},
								name: "Seq",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeDecl",
			pos:  position{line: 71, col: 1, offset: 1568},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 1581},
				run: (*parser).callonTypeDecl1,
				expr: &seqExpr{
					pos: position{line: 72, col: 5, offset: 1581},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 72, col: 5, offset: 1581},
							name: "TYPE",
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 10, offset: 1586},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 12, offset: 1588},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 17, offset: 1593},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 28, offset: 1604},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 72, col: 31, offset: 1607},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 35, offset: 1611},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 38, offset: 1614},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 42, offset: 1618},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LeanOp",
			pos:  position{line: 85, col: 1, offset: 2018},
			expr: &choiceExpr{
				pos: position{line: 86, col: 5, offset: 2029},
				alternatives: []any{
					&labeledExpr{
						pos:   position{line: 86, col: 5, offset: 2029},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 86, col: 8, offset: 2032},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2045},
						run: (*parser).callonLeanOp4,
						expr: &seqExpr{
							pos: position{line: 87, col: 5, offset: 2045},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 87, col: 5, offset: 2045},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 87, col: 9, offset: 2049},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 87, col: 12, offset: 2052},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 18, offset: 2058},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 87, col: 24, offset: 2064},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 87, col: 27, offset: 2067},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 2097},
						run: (*parser).callonLeanOp12,
						expr: &seqExpr{
							pos: position{line: 88, col: 5, offset: 2097},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 88, col: 5, offset: 2097},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 7, offset: 2099},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 88, col: 20, offset: 2112},
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 21, offset: 2113},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2143},
						run: (*parser).callonLeanOp18,
						expr: &seqExpr{
							pos: position{line: 89, col: 5, offset: 2143},
							exprs: []any{
								&notExpr{
									pos: position{line: 89, col: 5, offset: 2143},
									expr: &seqExpr{
										pos: position{line: 89, col: 7, offset: 2145},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 89, col: 7, offset: 2145},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 89, col: 16, offset: 2154},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 89, col: 25, offset: 2163},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 89, col: 27, offset: 2165},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 89, col: 39, offset: 2177},
									expr: &ruleRefExpr{
										pos:  position{line: 89, col: 40, offset: 2178},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 90, col: 5, offset: 2208},
						run: (*parser).callonLeanOp28,
						expr: &labeledExpr{
							pos:   position{line: 90, col: 5, offset: 2208},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 10, offset: 2213},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 93, col: 5, offset: 2316},
						run: (*parser).callonLeanOp31,
						expr: &labeledExpr{
							pos:   position{line: 93, col: 5, offset: 2316},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 10, offset: 2321},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EndOfOp",
			pos:  position{line: 97, col: 1, offset: 2412},
			expr: &seqExpr{
				pos: position{line: 97, col: 11, offset: 2422},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 97, col: 11, offset: 2422},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 97, col: 15, offset: 2426},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 97, col: 15, offset: 2426},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 22, offset: 2433},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 97, col: 43, offset: 2454},
								val:        "=>",
								ignoreCase: false,
								want:       "\"=>\"",
							},
							&litMatcher{
								pos:        position{line: 97, col: 50, offset: 2461},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 56, offset: 2467},
								name: "EOF",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pipe",
			pos:  position{line: 98, col: 1, offset: 2472},
			expr: &choiceExpr{
				pos: position{line: 98, col: 8, offset: 2479},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 98, col: 8, offset: 2479},
						val:        "|>",
						ignoreCase: false,
						want:       "\"|>\"",
					},
					&seqExpr{
						pos: position{line: 98, col: 15, offset: 2486},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 98, col: 15, offset: 2486},
								val:        "|",
								ignoreCase: false,
								want:       "\"|\"",
							},
							&notExpr{
								pos: position{line: 98, col: 19, offset: 2490},
								expr: &choiceExpr{
									pos: position{line: 98, col: 21, offset: 2492},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 98, col: 21, offset: 2492},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&litMatcher{
											pos:        position{line: 98, col: 27, offset: 2498},
											val:        "[",
											ignoreCase: false,
											want:       "\"[\"",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExprGuard",
			pos:  position{line: 100, col: 1, offset: 2504},
			expr: &seqExpr{
				pos: position{line: 100, col: 13, offset: 2516},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 100, col: 13, offset: 2516},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 100, col: 17, offset: 2520},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 100, col: 18, offset: 2521},
								exprs: []any{
									&notExpr{
										pos: position{line: 100, col: 18, offset: 2521},
										expr: &litMatcher{
											pos:        position{line: 100, col: 19, offset: 2522},
											val:        "=>",
											ignoreCase: false,
											want:       "\"=>\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 24, offset: 2527},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 38, offset: 2541},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 57, offset: 2560},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 100, col: 82, offset: 2585},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&litMatcher{
								pos:        position{line: 100, col: 88, offset: 2591},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&litMatcher{
								pos:        position{line: 100, col: 94, offset: 2597},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
							&litMatcher{
								pos:        position{line: 100, col: 100, offset: 2603},
								val:        "~",
								ignoreCase: false,
								want:       "\"~\"",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Comparator",
			pos:  position{line: 102, col: 1, offset: 2609},
			expr: &actionExpr{
				pos: position{line: 102, col: 14, offset: 2622},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 102, col: 15, offset: 2623},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 102, col: 15, offset: 2623},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
						&litMatcher{
							pos:        position{line: 102, col: 22, offset: 2630},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&litMatcher{
							pos:        position{line: 102, col: 28, offset: 2636},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&litMatcher{
							pos:        position{line: 102, col: 35, offset: 2643},
							val:        "<>",
							ignoreCase: false,
							want:       "\"<>\"",
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 42, offset: 2650},
							name: "IN",
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 47, offset: 2655},
							name: "LIKE",
						},
						&litMatcher{
							pos:        position{line: 102, col: 54, offset: 2662},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
						&litMatcher{
							pos:        position{line: 102, col: 61, offset: 2669},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 102, col: 67, offset: 2675},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
						&litMatcher{
							pos:        position{line: 102, col: 74, offset: 2682},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 104, col: 1, offset: 2719},
			expr: &actionExpr{
				pos: position{line: 105, col: 5, offset: 2737},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 105, col: 5, offset: 2737},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 2737},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 11, offset: 2743},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 21, offset: 2753},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 26, offset: 2758},
								expr: &ruleRefExpr{
									pos:  position{line: 105, col: 26, offset: 2758},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 109, col: 1, offset: 2835},
			expr: &actionExpr{
				pos: position{line: 109, col: 16, offset: 2850},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 109, col: 16, offset: 2850},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 109, col: 16, offset: 2850},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 18, offset: 2852},
							name: "OR",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 21, offset: 2855},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 109, col: 23, offset: 2857},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 25, offset: 2859},
								name: "SearchAnd",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchAnd",
			pos:  position{line: 111, col: 1, offset: 2901},
			expr: &actionExpr{
				pos: position{line: 112, col: 5, offset: 2915},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 112, col: 5, offset: 2915},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 2915},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 11, offset: 2921},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 5, offset: 2938},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 10, offset: 2943},
								expr: &actionExpr{
									pos: position{line: 113, col: 11, offset: 2944},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 113, col: 11, offset: 2944},
										exprs: []any{
											&zeroOrOneExpr{
												pos: position{line: 113, col: 11, offset: 2944},
												expr: &seqExpr{
													pos: position{line: 113, col: 12, offset: 2945},
													exprs: []any{
														&ruleRefExpr{
															pos:  position{line: 113, col: 12, offset: 2945},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 14, offset: 2947},
															name: "AND",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 113, col: 20, offset: 2953},
												name: "_",
											},
											&notExpr{
												pos: position{line: 113, col: 22, offset: 2955},
												expr: &choiceExpr{
													pos: position{line: 113, col: 24, offset: 2957},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 113, col: 24, offset: 2957},
															name: "OR",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 29, offset: 2962},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 113, col: 49, offset: 2982},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 113, col: 54, offset: 2987},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 117, col: 1, offset: 3100},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3123},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 118, col: 5, offset: 3123},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 118, col: 5, offset: 3123},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 118, col: 16, offset: 3134},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 118, col: 19, offset: 3137},
								val:        "=>",
								ignoreCase: false,
								want:       "\"=>\"",
							},
							&ruleRefExpr{
								pos:  position{line: 118, col: 24, offset: 3142},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 119, col: 5, offset: 3149},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 119, col: 5, offset: 3149},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 119, col: 10, offset: 3154},
								name: "__",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchFactor",
			pos:  position{line: 121, col: 1, offset: 3158},
			expr: &choiceExpr{
				pos: position{line: 122, col: 5, offset: 3175},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 122, col: 5, offset: 3175},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 122, col: 5, offset: 3175},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 122, col: 6, offset: 3176},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 122, col: 6, offset: 3176},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 122, col: 6, offset: 3176},
													name: "NOT",
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 10, offset: 3180},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 122, col: 14, offset: 3184},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 122, col: 14, offset: 3184},
													val:        "!",
													ignoreCase: false,
													want:       "\"!\"",
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 18, offset: 3188},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 122, col: 22, offset: 3192},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 122, col: 24, offset: 3194},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 3365},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 130, col: 5, offset: 3365},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 130, col: 5, offset: 3365},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 130, col: 9, offset: 3369},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 130, col: 12, offset: 3372},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 17, offset: 3377},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 130, col: 31, offset: 3391},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 130, col: 34, offset: 3394},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 131, col: 5, offset: 3423},
						name: "SearchExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchExpr",
			pos:  position{line: 133, col: 1, offset: 3435},
			expr: &choiceExpr{
				pos: position{line: 134, col: 5, offset: 3450},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 134, col: 5, offset: 3450},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 135, col: 5, offset: 3461},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 3470},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 3470},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 136, col: 5, offset: 3470},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 7, offset: 3472},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 136, col: 20, offset: 3485},
									alternatives: []any{
										&notExpr{
											pos: position{line: 136, col: 20, offset: 3485},
											expr: &ruleRefExpr{
												pos:  position{line: 136, col: 21, offset: 3486},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 136, col: 33, offset: 3498},
											expr: &seqExpr{
												pos: position{line: 136, col: 35, offset: 3500},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 136, col: 35, offset: 3500},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 136, col: 37, offset: 3502},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 3659},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 3659},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 144, col: 5, offset: 3659},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 144, col: 9, offset: 3663},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 10, offset: 3664},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 147, col: 5, offset: 3772},
						name: "SearchPredicate",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 149, col: 1, offset: 3789},
			expr: &choiceExpr{
				pos: position{line: 150, col: 5, offset: 3809},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 3809},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 3809},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 150, col: 5, offset: 3809},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 9, offset: 3813},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 22, offset: 3826},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 150, col: 25, offset: 3829},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 28, offset: 3832},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 39, offset: 3843},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 150, col: 42, offset: 3846},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 46, offset: 3850},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 4050},
						run: (*parser).callonSearchPredicate12,
						expr: &labeledExpr{
							pos:   position{line: 159, col: 5, offset: 4050},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 159, col: 7, offset: 4052},
								name: "Function",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchValue",
			pos:  position{line: 161, col: 1, offset: 4080},
			expr: &choiceExpr{
				pos: position{line: 162, col: 5, offset: 4096},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 4096},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4108},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4108},
							exprs: []any{
								&notExpr{
									pos: position{line: 163, col: 5, offset: 4108},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 6, offset: 4109},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 20, offset: 4123},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 22, offset: 4125},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Glob",
			pos:  position{line: 167, col: 1, offset: 4198},
			expr: &actionExpr{
				pos: position{line: 168, col: 5, offset: 4207},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 168, col: 5, offset: 4207},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 168, col: 13, offset: 4215},
						name: "GlobPattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Regexp",
			pos:  position{line: 172, col: 1, offset: 4318},
			expr: &actionExpr{
				pos: position{line: 173, col: 5, offset: 4329},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 173, col: 5, offset: 4329},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 173, col: 13, offset: 4337},
						name: "RegexpPattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Aggregation",
			pos:  position{line: 179, col: 1, offset: 4470},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 4486},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 4486},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 4486},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 180, col: 5, offset: 4486},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 180, col: 15, offset: 4496},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 20, offset: 4501},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 32, offset: 4513},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 38, offset: 4519},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 4703},
						run: (*parser).callonAggregation9,
						expr: &seqExpr{
							pos: position{line: 188, col: 5, offset: 4703},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 188, col: 5, offset: 4703},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 15, offset: 4713},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 20, offset: 4718},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 188, col: 35, offset: 4733},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 188, col: 40, offset: 4738},
										expr: &seqExpr{
											pos: position{line: 188, col: 41, offset: 4739},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 188, col: 41, offset: 4739},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 188, col: 43, offset: 4741},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 188, col: 57, offset: 4755},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 63, offset: 4761},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Summarize",
			pos:  position{line: 201, col: 1, offset: 5044},
			expr: &choiceExpr{
				pos: position{line: 201, col: 13, offset: 5056},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 201, col: 13, offset: 5056},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 201, col: 13, offset: 5056},
								name: "AGGREGATE",
							},
							&ruleRefExpr{
								pos:  position{line: 201, col: 23, offset: 5066},
								name: "_",
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 201, col: 27, offset: 5070},
						expr: &seqExpr{
							pos: position{line: 201, col: 28, offset: 5071},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 201, col: 28, offset: 5071},
									name: "SUMMARIZE",
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 38, offset: 5081},
									name: "_",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 203, col: 1, offset: 5086},
			expr: &actionExpr{
				pos: position{line: 204, col: 5, offset: 5102},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 204, col: 5, offset: 5102},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 204, col: 5, offset: 5102},
							expr: &seqExpr{
								pos: position{line: 204, col: 6, offset: 5103},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 204, col: 6, offset: 5103},
										name: "GROUP",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 12, offset: 5109},
										name: "_",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 16, offset: 5113},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 19, offset: 5116},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 21, offset: 5118},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 29, offset: 5126},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LimitArg",
			pos:  position{line: 206, col: 1, offset: 5167},
			expr: &choiceExpr{
				pos: position{line: 207, col: 5, offset: 5180},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 5180},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 207, col: 5, offset: 5180},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 207, col: 5, offset: 5180},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 207, col: 7, offset: 5182},
									name: "WITH",
								},
								&ruleRefExpr{
									pos:  position{line: 207, col: 12, offset: 5187},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 207, col: 14, offset: 5189},
									val:        "-limit",
									ignoreCase: false,
									want:       "\"-limit\"",
								},
								&ruleRefExpr{
									pos:  position{line: 207, col: 23, offset: 5198},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 207, col: 25, offset: 5200},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 31, offset: 5206},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 5237},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 208, col: 5, offset: 5237},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 213, col: 1, offset: 5497},
			expr: &choiceExpr{
				pos: position{line: 214, col: 5, offset: 5516},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 5516},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 5531},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 215, col: 5, offset: 5531},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 10, offset: 5536},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 217, col: 1, offset: 5623},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 5643},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 5643},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 218, col: 5, offset: 5643},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 11, offset: 5649},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 26, offset: 5664},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 218, col: 31, offset: 5669},
								expr: &actionExpr{
									pos: position{line: 218, col: 32, offset: 5670},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 218, col: 32, offset: 5670},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 218, col: 32, offset: 5670},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 218, col: 35, offset: 5673},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 218, col: 39, offset: 5677},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 218, col: 42, offset: 5680},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 218, col: 47, offset: 5685},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AggAssignment",
			pos:  position{line: 222, col: 1, offset: 5771},
			expr: &choiceExpr{
				pos: position{line: 223, col: 5, offset: 5789},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 5789},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 5789},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 223, col: 5, offset: 5789},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 10, offset: 5794},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 15, offset: 5799},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 223, col: 18, offset: 5802},
									val:        ":=",
									ignoreCase: false,
									want:       "\":=\"",
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 23, offset: 5807},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 26, offset: 5810},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 30, offset: 5814},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 5932},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 226, col: 5, offset: 5932},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 9, offset: 5936},
								name: "Agg",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Agg",
			pos:  position{line: 230, col: 1, offset: 6031},
			expr: &actionExpr{
				pos: position{line: 231, col: 5, offset: 6039},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 231, col: 5, offset: 6039},
					exprs: []any{
						&notExpr{
							pos: position{line: 231, col: 5, offset: 6039},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 6, offset: 6040},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 16, offset: 6050},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 19, offset: 6053},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 27, offset: 6061},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 231, col: 30, offset: 6064},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 34, offset: 6068},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 231, col: 37, offset: 6071},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 42, offset: 6076},
								expr: &choiceExpr{
									pos: position{line: 231, col: 43, offset: 6077},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 231, col: 43, offset: 6077},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 231, col: 54, offset: 6088},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 61, offset: 6095},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 231, col: 64, offset: 6098},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&notExpr{
							pos: position{line: 231, col: 68, offset: 6102},
							expr: &seqExpr{
								pos: position{line: 231, col: 70, offset: 6104},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 231, col: 70, offset: 6104},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 231, col: 73, offset: 6107},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 78, offset: 6112},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 84, offset: 6118},
								expr: &ruleRefExpr{
									pos:  position{line: 231, col: 84, offset: 6118},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AggName",
			pos:  position{line: 246, col: 1, offset: 6403},
			expr: &choiceExpr{
				pos: position{line: 247, col: 5, offset: 6415},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 6415},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 6434},
						name: "AND",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 6442},
						name: "OR",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WhereClause",
			pos:  position{line: 251, col: 1, offset: 6446},
			expr: &actionExpr{
				pos: position{line: 251, col: 15, offset: 6460},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 251, col: 15, offset: 6460},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 251, col: 15, offset: 6460},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 17, offset: 6462},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 23, offset: 6468},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 6470},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 30, offset: 6475},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AggAssignments",
			pos:  position{line: 253, col: 1, offset: 6511},
			expr: &actionExpr{
				pos: position{line: 254, col: 5, offset: 6530},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 254, col: 5, offset: 6530},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 254, col: 5, offset: 6530},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 11, offset: 6536},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 254, col: 25, offset: 6550},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 254, col: 30, offset: 6555},
								expr: &seqExpr{
									pos: position{line: 254, col: 31, offset: 6556},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 254, col: 31, offset: 6556},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 254, col: 34, offset: 6559},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 254, col: 38, offset: 6563},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 254, col: 41, offset: 6566},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Operator",
			pos:  position{line: 264, col: 1, offset: 6763},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 6776},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 6776},
						name: "SelectOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 6789},
						name: "ForkOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 6800},
						name: "SwitchOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 6814},
						name: "FromForkOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 6829},
						name: "SearchOp",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 6842},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 5, offset: 6855},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 272, col: 5, offset: 6866},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 5, offset: 6876},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 5, offset: 6886},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 6897},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 6908},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 6919},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 6931},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 6942},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 6952},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 6965},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 6976},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 6988},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 6999},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 7012},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 7023},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 7034},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 7048},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 7060},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 7071},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 291, col: 5, offset: 7083},
						name: "LoadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 7094},
						name: "OutputOp",
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 7107},
						name: "DebugOp",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForkOp",
			pos:  position{line: 295, col: 2, offset: 7117},
			expr: &actionExpr{
				pos: position{line: 296, col: 4, offset: 7129},
				run: (*parser).callonForkOp1,
				expr: &seqExpr{
					pos: position{line: 296, col: 4, offset: 7129},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 296, col: 4, offset: 7129},
							name: "FORK",
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 9, offset: 7134},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 296, col: 12, offset: 7137},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 16, offset: 7141},
							label: "paths",
							expr: &oneOrMoreExpr{
								pos: position{line: 296, col: 22, offset: 7147},
								expr: &ruleRefExpr{
									pos:  position{line: 296, col: 22, offset: 7147},
									name: "Path",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 28, offset: 7153},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 296, col: 31, offset: 7156},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Path",
			pos:  position{line: 308, col: 1, offset: 7405},
			expr: &actionExpr{
				pos: position{line: 308, col: 8, offset: 7412},
				run: (*parser).callonPath1,
				expr: &seqExpr{
					pos: position{line: 308, col: 8, offset: 7412},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 308, col: 8, offset: 7412},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 308, col: 11, offset: 7415},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 16, offset: 7420},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 308, col: 19, offset: 7423},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 23, offset: 7427},
								name: "Seq",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SwitchOp",
			pos:  position{line: 310, col: 1, offset: 7452},
			expr: &choiceExpr{
				pos: position{line: 311, col: 5, offset: 7465},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 7465},
						run: (*parser).callonSwitchOp2,
						expr: &seqExpr{
							pos: position{line: 311, col: 5, offset: 7465},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 311, col: 5, offset: 7465},
									name: "SWITCH",
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 12, offset: 7472},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 311, col: 14, offset: 7474},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 19, offset: 7479},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 24, offset: 7484},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 311, col: 26, offset: 7486},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 311, col: 30, offset: 7490},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 311, col: 36, offset: 7496},
										expr: &ruleRefExpr{
											pos:  position{line: 311, col: 36, offset: 7496},
											name: "SwitchPath",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 48, offset: 7508},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 311, col: 51, offset: 7511},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 319, col: 5, offset: 7691},
						run: (*parser).callonSwitchOp15,
						expr: &seqExpr{
							pos: position{line: 319, col: 5, offset: 7691},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 319, col: 5, offset: 7691},
									name: "SWITCH",
								},
								&ruleRefExpr{
									pos:  position{line: 319, col: 12, offset: 7698},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 319, col: 15, offset: 7701},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 319, col: 19, offset: 7705},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 319, col: 25, offset: 7711},
										expr: &ruleRefExpr{
											pos:  position{line: 319, col: 25, offset: 7711},
											name: "SwitchPath",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 319, col: 37, offset: 7723},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 319, col: 40, offset: 7726},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SwitchPath",
			pos:  position{line: 327, col: 1, offset: 7870},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 7885},
				run: (*parser).callonSwitchPath1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 7885},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 328, col: 5, offset: 7885},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 8, offset: 7888},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 13, offset: 7893},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 18, offset: 7898},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 23, offset: 7903},
								name: "Path",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Case",
			pos:  position{line: 336, col: 1, offset: 8050},
			expr: &choiceExpr{
				pos: position{line: 337, col: 5, offset: 8059},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 8059},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 337, col: 5, offset: 8059},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 337, col: 5, offset: 8059},
									name: "CASE",
								},
								&ruleRefExpr{
									pos:  position{line: 337, col: 10, offset: 8064},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 337, col: 12, offset: 8066},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 337, col: 17, offset: 8071},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 338, col: 5, offset: 8101},
						run: (*parser).callonCase8,
						expr: &ruleRefExpr{
							pos:  position{line: 338, col: 5, offset: 8101},
							name: "DEFAULT",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FromForkOp",
			pos:  position{line: 340, col: 1, offset: 8130},
			expr: &actionExpr{
				pos: position{line: 341, col: 5, offset: 8145},
				run: (*parser).callonFromForkOp1,
				expr: &seqExpr{
					pos: position{line: 341, col: 5, offset: 8145},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 341, col: 5, offset: 8145},
							name: "FROM",
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 10, offset: 8150},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 341, col: 13, offset: 8153},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 17, offset: 8157},
							label: "trunks",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 24, offset: 8164},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 24, offset: 8164},
									name: "FromPath",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 34, offset: 8174},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 341, col: 37, offset: 8177},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FromPath",
			pos:  position{line: 349, col: 1, offset: 8325},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 8338},
				run: (*parser).callonFromPath1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 8338},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 350, col: 5, offset: 8338},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 8, offset: 8341},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 15, offset: 8348},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 26, offset: 8359},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 30, offset: 8363},
								expr: &actionExpr{
									pos: position{line: 350, col: 31, offset: 8364},
									run: (*parser).callonFromPath8,
									expr: &seqExpr{
										pos: position{line: 350, col: 31, offset: 8364},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 350, col: 31, offset: 8364},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 350, col: 34, offset: 8367},
												val:        "=>",
												ignoreCase: false,
												want:       "\"=>\"",
											},
											&ruleRefExpr{
												pos:  position{line: 350, col: 39, offset: 8372},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 350, col: 42, offset: 8375},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 350, col: 44, offset: 8377},
													name: "Seq",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FromSource",
			pos:  position{line: 358, col: 1, offset: 8557},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 8572},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 8572},
						run: (*parser).callonFromSource2,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 8572},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 359, col: 5, offset: 8572},
									name: "FromKeyWord",
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 17, offset: 8584},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 359, col: 19, offset: 8586},
									label: "elem",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 24, offset: 8591},
										name: "FromElem",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 5, offset: 8762},
						name: "PassOp",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SearchOp",
			pos:  position{line: 368, col: 1, offset: 8770},
			expr: &actionExpr{
				pos: position{line: 369, col: 5, offset: 8783},
				run: (*parser).callonSearchOp1,
				expr: &seqExpr{
					pos: position{line: 369, col: 5, offset: 8783},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 369, col: 5, offset: 8783},
							name: "SEARCH",
						},
						&ruleRefExpr{
							pos:  position{line: 369, col: 12, offset: 8790},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 369, col: 14, offset: 8792},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 19, offset: 8797},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssertOp",
			pos:  position{line: 373, col: 1, offset: 8897},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 8910},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 374, col: 5, offset: 8910},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 374, col: 5, offset: 8910},
							name: "ASSERT",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 12, offset: 8917},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 14, offset: 8919},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 374, col: 20, offset: 8925},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 374, col: 20, offset: 8925},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 374, col: 22, offset: 8927},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SortOp",
			pos:  position{line: 383, col: 1, offset: 9157},
			expr: &actionExpr{
				pos: position{line: 384, col: 5, offset: 9168},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 384, col: 5, offset: 9168},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 384, col: 5, offset: 9168},
							name: "SORT",
						},
						&andExpr{
							pos: position{line: 384, col: 10, offset: 9173},
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 11, offset: 9174},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 384, col: 16, offset: 9179},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 21, offset: 9184},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 384, col: 30, offset: 9193},
							label: "exprs",
							expr: &zeroOrOneExpr{
								pos: position{line: 384, col: 36, offset: 9199},
								expr: &actionExpr{
									pos: position{line: 384, col: 37, offset: 9200},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 384, col: 37, offset: 9200},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 384, col: 37, offset: 9200},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 384, col: 40, offset: 9203},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 42, offset: 9205},
													name: "SortExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SortArgs",
			pos:  position{line: 400, col: 1, offset: 9574},
			expr: &actionExpr{
				pos: position{line: 400, col: 12, offset: 9585},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 400, col: 12, offset: 9585},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 400, col: 17, offset: 9590},
						expr: &actionExpr{
							pos: position{line: 400, col: 18, offset: 9591},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 400, col: 18, offset: 9591},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 400, col: 18, offset: 9591},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 400, col: 20, offset: 9593},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 400, col: 22, offset: 9595},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SortArg",
			pos:  position{line: 402, col: 1, offset: 9652},
			expr: &choiceExpr{
				pos: position{line: 403, col: 5, offset: 9664},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 9664},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 403, col: 5, offset: 9664},
							val:        "-r",
							ignoreCase: false,
							want:       "\"-r\"",
						},
					},
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 9731},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 404, col: 5, offset: 9731},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 404, col: 5, offset: 9731},
									val:        "-nulls",
									ignoreCase: false,
									want:       "\"-nulls\"",
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 14, offset: 9740},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 404, col: 16, offset: 9742},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 404, col: 23, offset: 9749},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 404, col: 24, offset: 9750},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 404, col: 24, offset: 9750},
													val:        "first",
													ignoreCase: false,
													want:       "\"first\"",
												},
												&litMatcher{
													pos:        position{line: 404, col: 34, offset: 9760},
													val:        "last",
													ignoreCase: false,
													want:       "\"last\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TopOp",
			pos:  position{line: 408, col: 1, offset: 9879},
			expr: &actionExpr{
				pos: position{line: 409, col: 5, offset: 9889},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 409, col: 5, offset: 9889},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 409, col: 5, offset: 9889},
							name: "TOP",
						},
						&andExpr{
							pos: position{line: 409, col: 9, offset: 9893},
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 10, offset: 9894},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 15, offset: 9899},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 409, col: 21, offset: 9905},
								expr: &actionExpr{
									pos: position{line: 409, col: 22, offset: 9906},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 409, col: 22, offset: 9906},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 409, col: 22, offset: 9906},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 409, col: 24, offset: 9908},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 409, col: 26, offset: 9910},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 51, offset: 9935},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 409, col: 57, offset: 9941},
								expr: &seqExpr{
									pos: position{line: 409, col: 58, offset: 9942},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 409, col: 58, offset: 9942},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 409, col: 60, offset: 9944},
											val:        "-flush",
											ignoreCase: false,
											want:       "\"-flush\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 71, offset: 9955},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 409, col: 78, offset: 9962},
								expr: &actionExpr{
									pos: position{line: 409, col: 79, offset: 9963},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 409, col: 79, offset: 9963},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 409, col: 79, offset: 9963},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 409, col: 81, offset: 9965},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 409, col: 83, offset: 9967},
													name: "Lvals",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CutOp",
			pos:  position{line: 426, col: 1, offset: 10296},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 10306},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 10306},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 427, col: 5, offset: 10306},
							name: "CUT",
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 9, offset: 10310},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 11, offset: 10312},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 16, offset: 10317},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DropOp",
			pos:  position{line: 435, col: 1, offset: 10465},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 10476},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 10476},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 436, col: 5, offset: 10476},
							name: "DROP",
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 10, offset: 10481},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 12, offset: 10483},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 17, offset: 10488},
								name: "Lvals",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HeadOp",
			pos:  position{line: 444, col: 1, offset: 10628},
			expr: &choiceExpr{
				pos: position{line: 445, col: 5, offset: 10639},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 445, col: 5, offset: 10639},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 445, col: 5, offset: 10639},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 445, col: 5, offset: 10639},
									name: "HEAD",
								},
								&ruleRefExpr{
									pos:  position{line: 445, col: 10, offset: 10644},
									name: "_",
								},
								&notExpr{
									pos: position{line: 445, col: 12, offset: 10646},
									expr: &ruleRefExpr{
										pos:  position{line: 445, col: 13, offset: 10647},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 445, col: 21, offset: 10655},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 445, col: 27, offset: 10661},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 5, offset: 10791},
						run: (*parser).callonHeadOp10,
						expr: &seqExpr{
							pos: position{line: 452, col: 5, offset: 10791},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 452, col: 5, offset: 10791},
									name: "HEAD",
								},
								&notExpr{
									pos: position{line: 452, col: 10, offset: 10796},
									expr: &seqExpr{
										pos: position{line: 452, col: 12, offset: 10798},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 452, col: 12, offset: 10798},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 452, col: 15, offset: 10801},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 452, col: 20, offset: 10806},
									expr: &ruleRefExpr{
										pos:  position{line: 452, col: 21, offset: 10807},
										name: "EOKW",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TailOp",
			pos:  position{line: 459, col: 1, offset: 10901},
			expr: &choiceExpr{
				pos: position{line: 460, col: 5, offset: 10912},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 10912},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 460, col: 5, offset: 10912},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 460, col: 5, offset: 10912},
									name: "TAIL",
								},
								&ruleRefExpr{
									pos:  position{line: 460, col: 10, offset: 10917},
									name: "_",
								},
								&notExpr{
									pos: position{line: 460, col: 12, offset: 10919},
									expr: &ruleRefExpr{
										pos:  position{line: 460, col: 13, offset: 10920},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 460, col: 21, offset: 10928},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 460, col: 27, offset: 10934},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 11064},
						run: (*parser).callonTailOp10,
						expr: &seqExpr{
							pos: position{line: 467, col: 5, offset: 11064},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 467, col: 5, offset: 11064},
									name: "TAIL",
								},
								&notExpr{
									pos: position{line: 467, col: 10, offset: 11069},
									expr: &seqExpr{
										pos: position{line: 467, col: 12, offset: 11071},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 467, col: 12, offset: 11071},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 467, col: 15, offset: 11074},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 467, col: 20, offset: 11079},
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 21, offset: 11080},
										name: "EOKW",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WhereOp",
			pos:  position{line: 474, col: 1, offset: 11174},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 11186},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 11186},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 475, col: 5, offset: 11186},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 11, offset: 11192},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 475, col: 13, offset: 11194},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 18, offset: 11199},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UniqOp",
			pos:  position{line: 483, col: 1, offset: 11326},
			expr: &choiceExpr{
				pos: position{line: 484, col: 5, offset: 11337},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 484, col: 5, offset: 11337},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 484, col: 5, offset: 11337},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 484, col: 5, offset: 11337},
									name: "UNIQ",
								},
								&ruleRefExpr{
									pos:  position{line: 484, col: 10, offset: 11342},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 484, col: 12, offset: 11344},
									val:        "-c",
									ignoreCase: false,
									want:       "\"-c\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 487, col: 5, offset: 11429},
						run: (*parser).callonUniqOp7,
						expr: &seqExpr{
							pos: position{line: 487, col: 5, offset: 11429},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 487, col: 5, offset: 11429},
									name: "UNIQ",
								},
								&notExpr{
									pos: position{line: 487, col: 10, offset: 11434},
									expr: &seqExpr{
										pos: position{line: 487, col: 12, offset: 11436},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 487, col: 12, offset: 11436},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 487, col: 15, offset: 11439},
												val:        "(",
												ignoreCase: false,
												want:       "\"(\"",
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 487, col: 20, offset: 11444},
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 21, offset: 11445},
										name: "EOKW",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PutOp",
			pos:  position{line: 491, col: 1, offset: 11514},
			expr: &actionExpr{
				pos: position{line: 492, col: 5, offset: 11524},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 492, col: 5, offset: 11524},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 492, col: 5, offset: 11524},
							name: "PUT",
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 9, offset: 11528},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 492, col: 11, offset: 11530},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 16, offset: 11535},
								name: "Assignments",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RenameOp",
			pos:  position{line: 500, col: 1, offset: 11685},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 11698},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 11698},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 501, col: 5, offset: 11698},
							name: "RENAME",
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 12, offset: 11705},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 14, offset: 11707},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 20, offset: 11713},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 31, offset: 11724},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 501, col: 36, offset: 11729},
								expr: &actionExpr{
									pos: position{line: 501, col: 37, offset: 11730},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 501, col: 37, offset: 11730},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 501, col: 37, offset: 11730},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 501, col: 40, offset: 11733},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 501, col: 44, offset: 11737},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 501, col: 47, offset: 11740},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 501, col: 50, offset: 11743},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FuseOp",
			pos:  position{line: 514, col: 1, offset: 12208},
			expr: &actionExpr{
				pos: position{line: 515, col: 5, offset: 12219},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 515, col: 5, offset: 12219},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 515, col: 5, offset: 12219},
							name: "FUSE",
						},
						&notExpr{
							pos: position{line: 515, col: 10, offset: 12224},
							expr: &seqExpr{
								pos: position{line: 515, col: 12, offset: 12226},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 515, col: 12, offset: 12226},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 515, col: 15, offset: 12229},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 515, col: 20, offset: 12234},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 21, offset: 12235},
								name: "EOKW",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ShapeOp",
			pos:  position{line: 519, col: 1, offset: 12304},
			expr: &actionExpr{
				pos: position{line: 520, col: 5, offset: 12316},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 520, col: 5, offset: 12316},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 520, col: 5, offset: 12316},
							name: "SHAPE",
						},
						&notExpr{
							pos: position{line: 520, col: 11, offset: 12322},
							expr: &seqExpr{
								pos: position{line: 520, col: 13, offset: 12324},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 520, col: 13, offset: 12324},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 520, col: 16, offset: 12327},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 520, col: 21, offset: 12332},
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 22, offset: 12333},
								name: "EOKW",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "JoinOp",
			pos:  position{line: 524, col: 1, offset: 12404},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 12415},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 12415},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 525, col: 5, offset: 12415},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 11, offset: 12421},
								name: "JoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 21, offset: 12431},
							name: "JOIN",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 26, offset: 12436},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 37, offset: 12447},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 52, offset: 12462},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 55, offset: 12465},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 57, offset: 12467},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 61, offset: 12471},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 69, offset: 12479},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 76, offset: 12486},
								expr: &seqExpr{
									pos: position{line: 525, col: 77, offset: 12487},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 525, col: 77, offset: 12487},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 525, col: 81, offset: 12491},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 525, col: 81, offset: 12491},
													val:        "==",
													ignoreCase: false,
													want:       "\"==\"",
												},
												&litMatcher{
													pos:        position{line: 525, col: 88, offset: 12498},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 525, col: 93, offset: 12503},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 525, col: 96, offset: 12506},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 106, offset: 12516},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 114, offset: 12524},
								expr: &seqExpr{
									pos: position{line: 525, col: 115, offset: 12525},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 525, col: 115, offset: 12525},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 525, col: 117, offset: 12527},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "JoinStyle",
			pos:  position{line: 544, col: 1, offset: 12977},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 12991},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 12991},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 545, col: 5, offset: 12991},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 545, col: 5, offset: 12991},
									name: "ANTI",
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 10, offset: 12996},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 13026},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 546, col: 5, offset: 13026},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 546, col: 5, offset: 13026},
									name: "INNER",
								},
								&ruleRefExpr{
									pos:  position{line: 546, col: 11, offset: 13032},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 13062},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 547, col: 5, offset: 13062},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 547, col: 5, offset: 13062},
									name: "LEFT",
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 11, offset: 13068},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 548, col: 5, offset: 13097},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 548, col: 5, offset: 13097},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 548, col: 5, offset: 13097},
									name: "RIGHT",
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 11, offset: 13103},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 13133},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 549, col: 5, offset: 13133},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 551, col: 1, offset: 13168},
			expr: &choiceExpr{
				pos: position{line: 552, col: 5, offset: 13187},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 552, col: 5, offset: 13187},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 552, col: 5, offset: 13187},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 552, col: 5, offset: 13187},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 552, col: 8, offset: 13190},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 552, col: 12, offset: 13194},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 552, col: 15, offset: 13197},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 552, col: 17, offset: 13199},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 552, col: 21, offset: 13203},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 552, col: 24, offset: 13206},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&ruleRefExpr{
									pos:  position{line: 552, col: 28, offset: 13210},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 13235},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 553, col: 5, offset: 13235},
							name: "_",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "JoinKey",
			pos:  position{line: 555, col: 1, offset: 13258},
			expr: &choiceExpr{
				pos: position{line: 556, col: 5, offset: 13270},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 556, col: 5, offset: 13270},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 13279},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 557, col: 5, offset: 13279},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 557, col: 5, offset: 13279},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 557, col: 9, offset: 13283},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 557, col: 14, offset: 13288},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 557, col: 19, offset: 13293},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SampleOp",
			pos:  position{line: 559, col: 1, offset: 13319},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 13332},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 13332},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 560, col: 5, offset: 13332},
							name: "SAMPLE",
						},
						&andExpr{
							pos: position{line: 560, col: 12, offset: 13339},
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 13, offset: 13340},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 18, offset: 13345},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 560, col: 23, offset: 13350},
								expr: &actionExpr{
									pos: position{line: 560, col: 24, offset: 13351},
									run: (*parser).callonSampleOp8,
									expr: &seqExpr{
										pos: position{line: 560, col: 24, offset: 13351},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 560, col: 24, offset: 13351},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 26, offset: 13353},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 28, offset: 13355},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OpAssignment",
			pos:  position{line: 573, col: 1, offset: 13793},
			expr: &actionExpr{
				pos: position{line: 574, col: 5, offset: 13810},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 5, offset: 13810},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 574, col: 7, offset: 13812},
						name: "Assignments",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LoadOp",
			pos:  position{line: 582, col: 1, offset: 13984},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 13995},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 13995},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 583, col: 5, offset: 13995},
							name: "LOAD",
						},
						&ruleRefExpr{
							pos:  position{line: 583, col: 10, offset: 14000},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 12, offset: 14002},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 17, offset: 14007},
								name: "Name",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 22, offset: 14012},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 583, col: 29, offset: 14019},
								expr: &ruleRefExpr{
									pos:  position{line: 583, col: 29, offset: 14019},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 41, offset: 14031},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 583, col: 48, offset: 14038},
								expr: &ruleRefExpr{
									pos:  position{line: 583, col: 48, offset: 14038},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 59, offset: 14049},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 583, col: 67, offset: 14057},
								expr: &ruleRefExpr{
									pos:  position{line: 583, col: 67, offset: 14057},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 79, offset: 14069},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 583, col: 84, offset: 14074},
								expr: &ruleRefExpr{
									pos:  position{line: 583, col: 84, offset: 14074},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AuthorArg",
			pos:  position{line: 595, col: 1, offset: 14356},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 14370},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 14370},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 596, col: 5, offset: 14370},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 7, offset: 14372},
							name: "AUTHOR",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 14, offset: 14379},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 16, offset: 14381},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 18, offset: 14383},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MessageArg",
			pos:  position{line: 598, col: 1, offset: 14407},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 14422},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 14422},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 599, col: 5, offset: 14422},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 7, offset: 14424},
							name: "MESSAGE",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 15, offset: 14432},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 17, offset: 14434},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 19, offset: 14436},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MetaArg",
			pos:  position{line: 601, col: 1, offset: 14460},
			expr: &actionExpr{
				pos: position{line: 602, col: 5, offset: 14472},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 602, col: 5, offset: 14472},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 602, col: 5, offset: 14472},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 7, offset: 14474},
							name: "META",
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 12, offset: 14479},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 14, offset: 14481},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 16, offset: 14483},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PoolBranch",
			pos:  position{line: 604, col: 1, offset: 14507},
			expr: &actionExpr{
				pos: position{line: 605, col: 5, offset: 14522},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 605, col: 5, offset: 14522},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 605, col: 5, offset: 14522},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 9, offset: 14526},
							label: "branch",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 16, offset: 14533},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OutputOp",
			pos:  position{line: 607, col: 1, offset: 14562},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 14575},
				run: (*parser).callonOutputOp1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 14575},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 608, col: 5, offset: 14575},
							name: "OUTPUT",
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 12, offset: 14582},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 14, offset: 14584},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 19, offset: 14589},
								name: "Identifier",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DebugOp",
			pos:  position{line: 616, col: 1, offset: 14723},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 14735},
				run: (*parser).callonDebugOp1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 14735},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 617, col: 5, offset: 14735},
							name: "DEBUG",
						},
						&andExpr{
							pos: position{line: 617, col: 11, offset: 14741},
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 12, offset: 14742},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 17, offset: 14747},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 617, col: 22, offset: 14752},
								expr: &actionExpr{
									pos: position{line: 617, col: 23, offset: 14753},
									run: (*parser).callonDebugOp8,
									expr: &seqExpr{
										pos: position{line: 617, col: 23, offset: 14753},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 617, col: 23, offset: 14753},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 617, col: 25, offset: 14755},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 617, col: 27, offset: 14757},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FromOp",
			pos:  position{line: 628, col: 1, offset: 14950},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 14961},
				run: (*parser).callonFromOp1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 14961},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 629, col: 5, offset: 14961},
							name: "FromKeyWord",
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 17, offset: 14973},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 19, offset: 14975},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 25, offset: 14981},
								name: "FromElems",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FromKeyWord",
			pos:  position{line: 637, col: 1, offset: 15124},
			expr: &choiceExpr{
				pos: position{line: 638, col: 5, offset: 15140},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 638, col: 5, offset: 15140},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 639, col: 5, offset: 15149},
						name: "DeprecatedFroms",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DeprecatedFroms",
			pos:  position{line: 641, col: 1, offset: 15166},
			expr: &choiceExpr{
				pos: position{line: 641, col: 19, offset: 15184},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 641, col: 19, offset: 15184},
						val:        "get",
						ignoreCase: false,
						want:       "\"get\"",
					},
					&litMatcher{
						pos:        position{line: 641, col: 27, offset: 15192},
						val:        "file",
						ignoreCase: false,
						want:       "\"file\"",
					},
					&litMatcher{
						pos:        position{line: 641, col: 36, offset: 15201},
						val:        "pool",
						ignoreCase: false,
						want:       "\"pool\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FromElems",
			pos:  position{line: 643, col: 1, offset: 15209},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 15223},
				run: (*parser).callonFromElems1,
				expr: &seqExpr{
					pos: position{line: 644, col: 5, offset: 15223},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 15223},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 11, offset: 15229},
								name: "FromElem",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 20, offset: 15238},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 644, col: 25, offset: 15243},
								expr: &actionExpr{
									pos: position{line: 644, col: 27, offset: 15245},
									run: (*parser).callonFromElems7,
									expr: &seqExpr{
										pos: position{line: 644, col: 27, offset: 15245},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 644, col: 27, offset: 15245},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 644, col: 30, offset: 15248},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 644, col: 34, offset: 15252},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 644, col: 37, offset: 15255},
												label: "elem",
												expr: &ruleRefExpr{
													pos:  position{line: 644, col: 42, offset: 15260},
													name: "FromElem",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FromElem",
			pos:  position{line: 648, col: 1, offset: 15344},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 15357},
				run: (*parser).callonFromElem1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 15357},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 15357},
							label: "entity",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 12, offset: 15364},
								name: "FromEntity",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 23, offset: 15375},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 28, offset: 15380},
								name: "FromArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 37, offset: 15389},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 39, offset: 15391},
								name: "OptOrdinality",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 53, offset: 15405},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 59, offset: 15411},
								name: "OptAlias",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "FromEntity",
			pos:  position{line: 667, col: 1, offset: 15799},
			expr: &choiceExpr{
				pos: position{line: 668, col: 5, offset: 15814},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 15814},
						run: (*parser).callonFromEntity2,
						expr: &labeledExpr{
							pos:   position{line: 668, col: 5, offset: 15814},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 9, offset: 15818},
								name: "UnquotedURL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 675, col: 5, offset: 15950},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 676, col: 5, offset: 15961},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 15970},
						run: (*parser).callonFromEntity7,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 15970},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 677, col: 5, offset: 15970},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&notExpr{
									pos: position{line: 677, col: 9, offset: 15974},
									expr: &ruleRefExpr{
										pos:  position{line: 677, col: 10, offset: 15975},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 16056},
						run: (*parser).callonFromEntity12,
						expr: &labeledExpr{
							pos:   position{line: 678, col: 5, offset: 16056},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 7, offset: 16058},
								name: "Array",
							},
						},
					},
					&actionExpr{
						pos: position{line: 685, col: 5, offset: 16196},
						run: (*parser).callonFromEntity15,
						expr: &labeledExpr{
							pos:   position{line: 685, col: 5, offset: 16196},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 10, offset: 16201},
								name: "PoolMeta",
							},
						},
					},
					&actionExpr{
						pos: position{line: 692, col: 5, offset: 16344},
						run: (*parser).callonFromEntity18,
						expr: &seqExpr{
							pos: position{line: 692, col: 5, offset: 16344},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 692, col: 5, offset: 16344},
									label: "join",
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 10, offset: 16349},
										name: "JoinOperation",
									},
								},
								&notExpr{
									pos: position{line: 692, col: 24, offset: 16363},
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 25, offset: 16364},
										name: "AliasClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 693, col: 5, offset: 16399},
						run: (*parser).callonFromEntity24,
						expr: &seqExpr{
							pos: position{line: 693, col: 5, offset: 16399},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 693, col: 5, offset: 16399},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 9, offset: 16403},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 693, col: 12, offset: 16406},
									label: "join",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 17, offset: 16411},
										name: "JoinOperation",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 31, offset: 16425},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 693, col: 34, offset: 16428},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 694, col: 5, offset: 16457},
						run: (*parser).callonFromEntity32,
						expr: &seqExpr{
							pos: position{line: 694, col: 5, offset: 16457},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 694, col: 5, offset: 16457},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 9, offset: 16461},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 694, col: 12, offset: 16464},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 14, offset: 16466},
										name: "SQLPipe",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 22, offset: 16474},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 694, col: 25, offset: 16477},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 6, offset: 16514},
						run: (*parser).callonFromEntity40,
						expr: &labeledExpr{
							pos:   position{line: 697, col: 6, offset: 16514},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 11, offset: 16519},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "FromArgs",
			pos:  position{line: 700, col: 1, offset: 16617},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 16630},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 16630},
						run: (*parser).callonFromArgs2,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 16630},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 701, col: 5, offset: 16630},
									label: "commit",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 12, offset: 16637},
										name: "PoolCommit",
									},
								},
								&labeledExpr{
									pos:   position{line: 701, col: 23, offset: 16648},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 701, col: 28, offset: 16653},
										expr: &ruleRefExpr{
											pos:  position{line: 701, col: 28, offset: 16653},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 701, col: 38, offset: 16663},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 42, offset: 16667},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 710, col: 5, offset: 16871},
						run: (*parser).callonFromArgs11,
						expr: &seqExpr{
							pos: position{line: 710, col: 5, offset: 16871},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 710, col: 5, offset: 16871},
									label: "meta",
									expr: &ruleRefExpr{
										pos:  position{line: 710, col: 10, offset: 16876},
										name: "PoolMeta",
									},
								},
								&labeledExpr{
									pos:   position{line: 710, col: 19, offset: 16885},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 710, col: 23, offset: 16889},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 17055},
						run: (*parser).callonFromArgs17,
						expr: &seqExpr{
							pos: position{line: 718, col: 5, offset: 17055},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 718, col: 5, offset: 17055},
									label: "format",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 12, offset: 17062},
										name: "FormatArg",
									},
								},
								&notExpr{
									pos: position{line: 718, col: 22, offset: 17072},
									expr: &seqExpr{
										pos: position{line: 718, col: 24, offset: 17074},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 718, col: 24, offset: 17074},
												name: "_",
											},
											&choiceExpr{
												pos: position{line: 718, col: 27, offset: 17077},
												alternatives: []any{
													&ruleRefExpr{
														pos:  position{line: 718, col: 27, offset: 17077},
														name: "METHOD",
													},
													&ruleRefExpr{
														pos:  position{line: 718, col: 36, offset: 17086},
														name: "HEADERS",
													},
													&ruleRefExpr{
														pos:  position{line: 718, col: 46, offset: 17096},
														name: "BODY",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 725, col: 5, offset: 17241},
						run: (*parser).callonFromArgs28,
						expr: &seqExpr{
							pos: position{line: 725, col: 5, offset: 17241},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 725, col: 5, offset: 17241},
									label: "format",
									expr: &zeroOrOneExpr{
										pos: position{line: 725, col: 12, offset: 17248},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 12, offset: 17248},
											name: "FormatArg",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 725, col: 23, offset: 17259},
									label: "method",
									expr: &zeroOrOneExpr{
										pos: position{line: 725, col: 30, offset: 17266},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 30, offset: 17266},
											name: "MethodArg",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 725, col: 41, offset: 17277},
									label: "headers",
									expr: &zeroOrOneExpr{
										pos: position{line: 725, col: 49, offset: 17285},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 49, offset: 17285},
											name: "HeadersArg",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 725, col: 61, offset: 17297},
									label: "body",
									expr: &zeroOrOneExpr{
										pos: position{line: 725, col: 66, offset: 17302},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 66, offset: 17302},
											name: "BodyArg",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FormatArg",
			pos:  position{line: 742, col: 1, offset: 17718},
			expr: &actionExpr{
				pos: position{line: 742, col: 13, offset: 17730},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 742, col: 13, offset: 17730},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 742, col: 13, offset: 17730},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 15, offset: 17732},
							name: "FORMAT",
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 22, offset: 17739},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 742, col: 24, offset: 17741},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 26, offset: 17743},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MethodArg",
			pos:  position{line: 744, col: 1, offset: 17767},
			expr: &actionExpr{
				pos: position{line: 744, col: 13, offset: 17779},
				run: (*parser).callonMethodArg1,
				expr: &seqExpr{
					pos: position{line: 744, col: 13, offset: 17779},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 744, col: 13, offset: 17779},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 15, offset: 17781},
							name: "METHOD",
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 22, offset: 17788},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 744, col: 24, offset: 17790},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 26, offset: 17792},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HeadersArg",
			pos:  position{line: 746, col: 1, offset: 17816},
			expr: &actionExpr{
				pos: position{line: 746, col: 14, offset: 17829},
				run: (*parser).callonHeadersArg1,
				expr: &seqExpr{
					pos: position{line: 746, col: 14, offset: 17829},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 746, col: 14, offset: 17829},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 16, offset: 17831},
							name: "HEADERS",
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 24, offset: 17839},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 746, col: 26, offset: 17841},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 28, offset: 17843},
								name: "Record",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BodyArg",
			pos:  position{line: 748, col: 1, offset: 17869},
			expr: &actionExpr{
				pos: position{line: 748, col: 11, offset: 17879},
				run: (*parser).callonBodyArg1,
				expr: &seqExpr{
					pos: position{line: 748, col: 11, offset: 17879},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 748, col: 11, offset: 17879},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 13, offset: 17881},
							name: "BODY",
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 18, offset: 17886},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 20, offset: 17888},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 22, offset: 17890},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnquotedURL",
			pos:  position{line: 750, col: 1, offset: 17914},
			expr: &actionExpr{
				pos: position{line: 750, col: 15, offset: 17928},
				run: (*parser).callonUnquotedURL1,
				expr: &seqExpr{
					pos: position{line: 750, col: 15, offset: 17928},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 750, col: 16, offset: 17929},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 750, col: 16, offset: 17929},
									val:        "http://",
									ignoreCase: false,
									want:       "\"http://\"",
								},
								&litMatcher{
									pos:        position{line: 750, col: 28, offset: 17941},
									val:        "https://",
									ignoreCase: false,
									want:       "\"https://\"",
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 750, col: 40, offset: 17953},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 40, offset: 17953},
								name: "URLChar",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "URLChar",
			pos:  position{line: 752, col: 1, offset: 17994},
			expr: &charClassMatcher{
				pos:        position{line: 752, col: 11, offset: 18004},
				val:        "[0-9a-zA-Z!@$%&_=,./?:[\\]~+-]",
				chars:      []rune{'!', '@', '$', '%', '&', '_', '=', ',', '.', '/', '?', ':', '[', ']', '~', '+', '-'},
				ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PoolAt",
			pos:  position{line: 755, col: 1, offset: 18068},
			expr: &actionExpr{
				pos: position{line: 756, col: 5, offset: 18079},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 756, col: 5, offset: 18079},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 756, col: 5, offset: 18079},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 756, col: 7, offset: 18081},
							name: "AT",
						},
						&ruleRefExpr{
							pos:  position{line: 756, col: 10, offset: 18084},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 756, col: 12, offset: 18086},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 15, offset: 18089},
								name: "KSUID",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KSUID",
			pos:  position{line: 759, col: 1, offset: 18155},
			expr: &actionExpr{
				pos: position{line: 759, col: 9, offset: 18163},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 759, col: 9, offset: 18163},
					expr: &charClassMatcher{
						pos:        position{line: 759, col: 10, offset: 18164},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PoolCommit",
			pos:  position{line: 761, col: 1, offset: 18210},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 18225},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 762, col: 5, offset: 18225},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 762, col: 5, offset: 18225},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 762, col: 9, offset: 18229},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 11, offset: 18231},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PoolMeta",
			pos:  position{line: 764, col: 1, offset: 18255},
			expr: &actionExpr{
				pos: position{line: 765, col: 5, offset: 18268},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 765, col: 5, offset: 18268},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 765, col: 5, offset: 18268},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 765, col: 9, offset: 18272},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 11, offset: 18274},
								name: "Name",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SortExprs",
			pos:  position{line: 767, col: 1, offset: 18298},
			expr: &actionExpr{
				pos: position{line: 768, col: 5, offset: 18312},
				run: (*parser).callonSortExprs1,
				expr: &seqExpr{
					pos: position{line: 768, col: 5, offset: 18312},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 768, col: 5, offset: 18312},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 11, offset: 18318},
								name: "SortExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 768, col: 20, offset: 18327},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 768, col: 25, offset: 18332},
								expr: &actionExpr{
									pos: position{line: 768, col: 26, offset: 18333},
									run: (*parser).callonSortExprs7,
									expr: &seqExpr{
										pos: position{line: 768, col: 26, offset: 18333},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 768, col: 26, offset: 18333},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 768, col: 29, offset: 18336},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 768, col: 33, offset: 18340},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 768, col: 36, offset: 18343},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 768, col: 38, offset: 18345},
													name: "SortExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SortExpr",
			pos:  position{line: 772, col: 1, offset: 18422},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 18435},
				run: (*parser).callonSortExpr1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 18435},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 18435},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 7, offset: 18437},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 773, col: 12, offset: 18442},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 773, col: 18, offset: 18448},
								expr: &actionExpr{
									pos: position{line: 773, col: 19, offset: 18449},
									run: (*parser).callonSortExpr7,
									expr: &seqExpr{
										pos: position{line: 773, col: 19, offset: 18449},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 773, col: 19, offset: 18449},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 773, col: 21, offset: 18451},
												label: "o",
												expr: &ruleRefExpr{
													pos:  position{line: 773, col: 23, offset: 18453},
													name: "OrderSpec",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OrderSpec",
			pos:  position{line: 781, col: 1, offset: 18652},
			expr: &actionExpr{
				pos: position{line: 782, col: 5, offset: 18666},
				run: (*parser).callonOrderSpec1,
				expr: &labeledExpr{
					pos:   position{line: 782, col: 5, offset: 18666},
					label: "o",
					expr: &choiceExpr{
						pos: position{line: 782, col: 8, offset: 18669},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 782, col: 8, offset: 18669},
								name: "ASC",
							},
							&ruleRefExpr{
								pos:  position{line: 782, col: 14, offset: 18675},
								name: "DESC",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TapArg",
			pos:  position{line: 786, col: 1, offset: 18759},
			expr: &choiceExpr{
				pos: position{line: 787, col: 5, offset: 18770},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 18770},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 787, col: 5, offset: 18770},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 787, col: 5, offset: 18770},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 787, col: 7, offset: 18772},
									name: "TAP",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 18801},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 788, col: 5, offset: 18801},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PassOp",
			pos:  position{line: 790, col: 1, offset: 18827},
			expr: &actionExpr{
				pos: position{line: 791, col: 5, offset: 18838},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 791, col: 5, offset: 18838},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 791, col: 5, offset: 18838},
							name: "PASS",
						},
						&notExpr{
							pos: position{line: 791, col: 10, offset: 18843},
							expr: &seqExpr{
								pos: position{line: 791, col: 12, offset: 18845},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 791, col: 12, offset: 18845},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 791, col: 15, offset: 18848},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 791, col: 20, offset: 18853},
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 21, offset: 18854},
								name: "EOKW",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 797, col: 1, offset: 19045},
			expr: &actionExpr{
				pos: position{line: 798, col: 5, offset: 19059},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 798, col: 5, offset: 19059},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 798, col: 5, offset: 19059},
							name: "EXPLODE",
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 13, offset: 19067},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 798, col: 15, offset: 19069},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 20, offset: 19074},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 26, offset: 19080},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 30, offset: 19084},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 38, offset: 19092},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 798, col: 41, offset: 19095},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 41, offset: 19095},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MergeOp",
			pos:  position{line: 811, col: 1, offset: 19337},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 19349},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 812, col: 5, offset: 19349},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 812, col: 5, offset: 19349},
							name: "MERGE",
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 11, offset: 19355},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 812, col: 13, offset: 19357},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 18, offset: 19362},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OverOp",
			pos:  position{line: 820, col: 1, offset: 19489},
			expr: &actionExpr{
				pos: position{line: 821, col: 5, offset: 19500},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 821, col: 5, offset: 19500},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 821, col: 5, offset: 19500},
							name: "OVER",
						},
						&ruleRefExpr{
							pos:  position{line: 821, col: 10, offset: 19505},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 821, col: 12, offset: 19507},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 18, offset: 19513},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 24, offset: 19519},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 821, col: 31, offset: 19526},
								expr: &ruleRefExpr{
									pos:  position{line: 821, col: 31, offset: 19526},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 39, offset: 19534},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 821, col: 44, offset: 19539},
								expr: &ruleRefExpr{
									pos:  position{line: 821, col: 44, offset: 19539},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lateral",
			pos:  position{line: 836, col: 1, offset: 19864},
			expr: &choiceExpr{
				pos: position{line: 837, col: 5, offset: 19876},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 837, col: 5, offset: 19876},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 837, col: 5, offset: 19876},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 837, col: 5, offset: 19876},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 837, col: 8, offset: 19879},
									val:        "=>",
									ignoreCase: false,
									want:       "\"=>\"",
								},
								&ruleRefExpr{
									pos:  position{line: 837, col: 13, offset: 19884},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 837, col: 16, offset: 19887},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 837, col: 20, offset: 19891},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 837, col: 23, offset: 19894},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 837, col: 29, offset: 19900},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 837, col: 35, offset: 19906},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 837, col: 38, offset: 19909},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 19990},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 840, col: 5, offset: 19990},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 840, col: 5, offset: 19990},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 840, col: 8, offset: 19993},
									val:        "=>",
									ignoreCase: false,
									want:       "\"=>\"",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 13, offset: 19998},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 840, col: 16, offset: 20001},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 20, offset: 20005},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 840, col: 23, offset: 20008},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 27, offset: 20012},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 31, offset: 20016},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 840, col: 34, offset: 20019},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Locals",
			pos:  position{line: 844, col: 1, offset: 20075},
			expr: &actionExpr{
				pos: position{line: 845, col: 5, offset: 20086},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 845, col: 5, offset: 20086},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 845, col: 5, offset: 20086},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 7, offset: 20088},
							name: "WITH",
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 12, offset: 20093},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 845, col: 14, offset: 20095},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 20, offset: 20101},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 37, offset: 20118},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 845, col: 42, offset: 20123},
								expr: &actionExpr{
									pos: position{line: 845, col: 43, offset: 20124},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 845, col: 43, offset: 20124},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 845, col: 43, offset: 20124},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 845, col: 46, offset: 20127},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 845, col: 50, offset: 20131},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 845, col: 53, offset: 20134},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 845, col: 55, offset: 20136},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 849, col: 1, offset: 20221},
			expr: &actionExpr{
				pos: position{line: 850, col: 5, offset: 20242},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 850, col: 5, offset: 20242},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 850, col: 5, offset: 20242},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 10, offset: 20247},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 21, offset: 20258},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 25, offset: 20262},
								expr: &seqExpr{
									pos: position{line: 850, col: 26, offset: 20263},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 850, col: 26, offset: 20263},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 850, col: 29, offset: 20266},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
										&ruleRefExpr{
											pos:  position{line: 850, col: 33, offset: 20270},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 850, col: 36, offset: 20273},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "YieldOp",
			pos:  position{line: 862, col: 1, offset: 20497},
			expr: &actionExpr{
				pos: position{line: 863, col: 5, offset: 20509},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 863, col: 5, offset: 20509},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 863, col: 5, offset: 20509},
							name: "YIELD",
						},
						&ruleRefExpr{
							pos:  position{line: 863, col: 11, offset: 20515},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 863, col: 13, offset: 20517},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 19, offset: 20523},
								name: "Exprs",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeArg",
			pos:  position{line: 871, col: 1, offset: 20667},
			expr: &actionExpr{
				pos: position{line: 872, col: 5, offset: 20679},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 872, col: 5, offset: 20679},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 872, col: 5, offset: 20679},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 7, offset: 20681},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 10, offset: 20684},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 12, offset: 20686},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 16, offset: 20690},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AsArg",
			pos:  position{line: 874, col: 1, offset: 20716},
			expr: &actionExpr{
				pos: position{line: 875, col: 5, offset: 20726},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 875, col: 5, offset: 20726},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 875, col: 5, offset: 20726},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 875, col: 7, offset: 20728},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 875, col: 10, offset: 20731},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 875, col: 12, offset: 20733},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 16, offset: 20737},
								name: "Lval",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lval",
			pos:  position{line: 879, col: 1, offset: 20788},
			expr: &ruleRefExpr{
				pos:  position{line: 879, col: 8, offset: 20795},
				name: "DerefExpr",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lvals",
			pos:  position{line: 881, col: 1, offset: 20806},
			expr: &actionExpr{
				pos: position{line: 882, col: 5, offset: 20816},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 882, col: 5, offset: 20816},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 882, col: 5, offset: 20816},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 11, offset: 20822},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 882, col: 16, offset: 20827},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 882, col: 21, offset: 20832},
								expr: &actionExpr{
									pos: position{line: 882, col: 22, offset: 20833},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 882, col: 22, offset: 20833},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 882, col: 22, offset: 20833},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 882, col: 25, offset: 20836},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 882, col: 29, offset: 20840},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 882, col: 32, offset: 20843},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 882, col: 37, offset: 20848},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assignments",
			pos:  position{line: 886, col: 1, offset: 20924},
			expr: &actionExpr{
				pos: position{line: 887, col: 5, offset: 20940},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 887, col: 5, offset: 20940},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 887, col: 5, offset: 20940},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 11, offset: 20946},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 887, col: 22, offset: 20957},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 887, col: 27, offset: 20962},
								expr: &actionExpr{
									pos: position{line: 887, col: 28, offset: 20963},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 887, col: 28, offset: 20963},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 887, col: 28, offset: 20963},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 887, col: 31, offset: 20966},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 35, offset: 20970},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 887, col: 38, offset: 20973},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 887, col: 40, offset: 20975},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assignment",
			pos:  position{line: 891, col: 1, offset: 21050},
			expr: &actionExpr{
				pos: position{line: 892, col: 5, offset: 21065},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 892, col: 5, offset: 21065},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 892, col: 5, offset: 21065},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 9, offset: 21069},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 892, col: 14, offset: 21074},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 892, col: 17, offset: 21077},
							val:        ":=",
							ignoreCase: false,
							want:       "\":=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 892, col: 22, offset: 21082},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 892, col: 25, offset: 21085},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 29, offset: 21089},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 901, col: 1, offset: 21260},
			expr: &ruleRefExpr{
				pos:  position{line: 901, col: 8, offset: 21267},
				name: "ConditionalExpr",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 903, col: 1, offset: 21284},
			expr: &actionExpr{
				pos: position{line: 904, col: 5, offset: 21304},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 904, col: 5, offset: 21304},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 904, col: 5, offset: 21304},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 10, offset: 21309},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 904, col: 24, offset: 21323},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 904, col: 28, offset: 21327},
								expr: &seqExpr{
									pos: position{line: 904, col: 29, offset: 21328},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 904, col: 29, offset: 21328},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 904, col: 32, offset: 21331},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
										&ruleRefExpr{
											pos:  position{line: 904, col: 36, offset: 21335},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 904, col: 39, offset: 21338},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 904, col: 44, offset: 21343},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 904, col: 47, offset: 21346},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
										&ruleRefExpr{
											pos:  position{line: 904, col: 51, offset: 21350},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 904, col: 54, offset: 21353},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 918, col: 1, offset: 21674},
			expr: &actionExpr{
				pos: position{line: 919, col: 5, offset: 21692},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 919, col: 5, offset: 21692},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 919, col: 5, offset: 21692},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 11, offset: 21698},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 920, col: 5, offset: 21717},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 920, col: 10, offset: 21722},
								expr: &actionExpr{
									pos: position{line: 920, col: 11, offset: 21723},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 920, col: 11, offset: 21723},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 920, col: 11, offset: 21723},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 920, col: 14, offset: 21726},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 920, col: 17, offset: 21729},
													name: "OR",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 920, col: 20, offset: 21732},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 920, col: 23, offset: 21735},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 920, col: 28, offset: 21740},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 924, col: 1, offset: 21854},
			expr: &actionExpr{
				pos: position{line: 925, col: 5, offset: 21873},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 925, col: 5, offset: 21873},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 21873},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 21879},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 926, col: 5, offset: 21891},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 926, col: 10, offset: 21896},
								expr: &actionExpr{
									pos: position{line: 926, col: 11, offset: 21897},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 926, col: 11, offset: 21897},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 926, col: 11, offset: 21897},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 926, col: 14, offset: 21900},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 926, col: 17, offset: 21903},
													name: "AND",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 926, col: 21, offset: 21907},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 926, col: 24, offset: 21910},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 926, col: 29, offset: 21915},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NotExpr",
			pos:  position{line: 930, col: 1, offset: 22022},
			expr: &choiceExpr{
				pos: position{line: 931, col: 5, offset: 22034},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 22034},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 22034},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 931, col: 6, offset: 22035},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 931, col: 6, offset: 22035},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 931, col: 6, offset: 22035},
													name: "NOT",
												},
												&ruleRefExpr{
													pos:  position{line: 931, col: 10, offset: 22039},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 931, col: 14, offset: 22043},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 931, col: 14, offset: 22043},
													val:        "!",
													ignoreCase: false,
													want:       "\"!\"",
												},
												&ruleRefExpr{
													pos:  position{line: 931, col: 18, offset: 22047},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 931, col: 22, offset: 22051},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 24, offset: 22053},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 939, col: 5, offset: 22219},
						name: "BetweenExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BetweenExpr",
			pos:  position{line: 941, col: 1, offset: 22234},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 22250},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 22250},
						run: (*parser).callonBetweenExpr2,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 22250},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 22250},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 10, offset: 22255},
										name: "ComparisonExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 25, offset: 22270},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 27, offset: 22272},
									name: "BETWEEN",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 35, offset: 22280},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 942, col: 37, offset: 22282},
									label: "lower",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 43, offset: 22288},
										name: "BetweenExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 55, offset: 22300},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 57, offset: 22302},
									name: "AND",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 61, offset: 22306},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 942, col: 63, offset: 22308},
									label: "upper",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 69, offset: 22314},
										name: "BetweenExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 22500},
						name: "ComparisonExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 952, col: 1, offset: 22516},
			expr: &actionExpr{
				pos: position{line: 953, col: 5, offset: 22535},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 953, col: 5, offset: 22535},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 953, col: 5, offset: 22535},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 9, offset: 22539},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 953, col: 22, offset: 22552},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 953, col: 31, offset: 22561},
								expr: &choiceExpr{
									pos: position{line: 953, col: 32, offset: 22562},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 953, col: 32, offset: 22562},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 953, col: 32, offset: 22562},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 953, col: 35, offset: 22565},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 953, col: 46, offset: 22576},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 953, col: 49, offset: 22579},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 953, col: 64, offset: 22594},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 953, col: 64, offset: 22594},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 953, col: 68, offset: 22598},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 953, col: 68, offset: 22598},
														val:        "~",
														ignoreCase: false,
														want:       "\"~\"",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 953, col: 104, offset: 22634},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 953, col: 107, offset: 22637},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 966, col: 1, offset: 22922},
			expr: &actionExpr{
				pos: position{line: 967, col: 5, offset: 22939},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 967, col: 5, offset: 22939},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 967, col: 5, offset: 22939},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 11, offset: 22945},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 968, col: 5, offset: 22968},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 968, col: 10, offset: 22973},
								expr: &actionExpr{
									pos: position{line: 968, col: 11, offset: 22974},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 968, col: 11, offset: 22974},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 968, col: 11, offset: 22974},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 968, col: 14, offset: 22977},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 968, col: 17, offset: 22980},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 34, offset: 22997},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 968, col: 37, offset: 23000},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 968, col: 42, offset: 23005},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 972, col: 1, offset: 23123},
			expr: &actionExpr{
				pos: position{line: 972, col: 20, offset: 23142},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 972, col: 21, offset: 23143},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 972, col: 21, offset: 23143},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&litMatcher{
							pos:        position{line: 972, col: 27, offset: 23149},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 974, col: 1, offset: 23186},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 23209},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 975, col: 5, offset: 23209},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 975, col: 5, offset: 23209},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 11, offset: 23215},
								name: "ConcatExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 5, offset: 23230},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 976, col: 10, offset: 23235},
								expr: &actionExpr{
									pos: position{line: 976, col: 11, offset: 23236},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 976, col: 11, offset: 23236},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 976, col: 11, offset: 23236},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 976, col: 14, offset: 23239},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 976, col: 17, offset: 23242},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 40, offset: 23265},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 976, col: 43, offset: 23268},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 976, col: 48, offset: 23273},
													name: "ConcatExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 980, col: 1, offset: 23383},
			expr: &actionExpr{
				pos: position{line: 980, col: 26, offset: 23408},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 980, col: 27, offset: 23409},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 980, col: 27, offset: 23409},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&litMatcher{
							pos:        position{line: 980, col: 33, offset: 23415},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&litMatcher{
							pos:        position{line: 980, col: 39, offset: 23421},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConcatExpr",
			pos:  position{line: 982, col: 1, offset: 23458},
			expr: &actionExpr{
				pos: position{line: 983, col: 5, offset: 23474},
				run: (*parser).callonConcatExpr1,
				expr: &seqExpr{
					pos: position{line: 983, col: 5, offset: 23474},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 983, col: 5, offset: 23474},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 983, col: 11, offset: 23480},
								name: "UnaryMinusExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 984, col: 5, offset: 23499},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 984, col: 10, offset: 23504},
								expr: &actionExpr{
									pos: position{line: 984, col: 11, offset: 23505},
									run: (*parser).callonConcatExpr7,
									expr: &seqExpr{
										pos: position{line: 984, col: 11, offset: 23505},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 984, col: 11, offset: 23505},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 984, col: 14, offset: 23508},
												val:        "||",
												ignoreCase: false,
												want:       "\"||\"",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 19, offset: 23513},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 984, col: 22, offset: 23516},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 984, col: 27, offset: 23521},
													name: "UnaryMinusExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnaryMinusExpr",
			pos:  position{line: 988, col: 1, offset: 23637},
			expr: &choiceExpr{
				pos: position{line: 989, col: 5, offset: 23656},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 23656},
						run: (*parser).callonUnaryMinusExpr2,
						expr: &seqExpr{
							pos: position{line: 989, col: 5, offset: 23656},
							exprs: []any{
								&notExpr{
									pos: position{line: 989, col: 5, offset: 23656},
									expr: &ruleRefExpr{
										pos:  position{line: 989, col: 6, offset: 23657},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 989, col: 14, offset: 23665},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&ruleRefExpr{
									pos:  position{line: 989, col: 18, offset: 23669},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 989, col: 21, offset: 23672},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 989, col: 23, offset: 23674},
										name: "UnaryMinusExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 5, offset: 23847},
						name: "DerefExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DerefExpr",
			pos:  position{line: 999, col: 1, offset: 23858},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 5, offset: 23872},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 23872},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 1000, col: 5, offset: 23872},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1000, col: 5, offset: 23872},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1000, col: 10, offset: 23877},
										name: "DerefExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 20, offset: 23887},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1000, col: 24, offset: 23891},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 27, offset: 23894},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 1000, col: 32, offset: 23899},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1000, col: 45, offset: 23912},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1000, col: 48, offset: 23915},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1000, col: 52, offset: 23919},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 55, offset: 23922},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 1000, col: 58, offset: 23925},
										expr: &ruleRefExpr{
											pos:  position{line: 1000, col: 58, offset: 23925},
											name: "AdditiveExpr",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1000, col: 72, offset: 23939},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1000, col: 75, offset: 23942},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 24181},
						run: (*parser).callonDerefExpr18,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 24181},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1012, col: 5, offset: 24181},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 10, offset: 24186},
										name: "DerefExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 20, offset: 24196},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 24, offset: 24200},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1012, col: 27, offset: 24203},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 31, offset: 24207},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 34, offset: 24210},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 37, offset: 24213},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 50, offset: 24226},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 24390},
						run: (*parser).callonDerefExpr29,
						expr: &seqExpr{
							pos: position{line: 1020, col: 5, offset: 24390},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1020, col: 5, offset: 24390},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 10, offset: 24395},
										name: "DerefExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 20, offset: 24405},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 24, offset: 24409},
									label: "index",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 30, offset: 24415},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 35, offset: 24420},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 24590},
						run: (*parser).callonDerefExpr37,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 24590},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1028, col: 5, offset: 24590},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 10, offset: 24595},
										name: "DerefExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 1028, col: 20, offset: 24605},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 24, offset: 24609},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 27, offset: 24612},
										name: "Identifier",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 5, offset: 24802},
						name: "FuncExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 24815},
						name: "Primary",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "FuncExpr",
			pos:  position{line: 1040, col: 1, offset: 24824},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 24837},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 24837},
						name: "Cast",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 24846},
						name: "Function",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FuncGuard",
			pos:  position{line: 1044, col: 1, offset: 24856},
			expr: &seqExpr{
				pos: position{line: 1044, col: 13, offset: 24868},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1044, col: 13, offset: 24868},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 22, offset: 24877},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 1044, col: 25, offset: 24880},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NotFuncs",
			pos:  position{line: 1046, col: 1, offset: 24885},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 5, offset: 24898},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 24898},
						name: "NOT",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 5, offset: 24906},
						name: "SELECT",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Cast",
			pos:  position{line: 1050, col: 1, offset: 24914},
			expr: &actionExpr{
				pos: position{line: 1051, col: 5, offset: 24923},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 1051, col: 5, offset: 24923},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1051, col: 5, offset: 24923},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1051, col: 9, offset: 24927},
								name: "TypeLiteral",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1051, col: 21, offset: 24939},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1051, col: 24, offset: 24942},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1051, col: 28, offset: 24946},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1051, col: 31, offset: 24949},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 1051, col: 37, offset: 24955},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1051, col: 37, offset: 24955},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 1051, col: 48, offset: 24966},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1051, col: 54, offset: 24972},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1051, col: 57, offset: 24975},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Function",
			pos:  position{line: 1055, col: 1, offset: 25088},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 5, offset: 25101},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1056, col: 5, offset: 25101},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 25188},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 1058, col: 5, offset: 25188},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1058, col: 5, offset: 25188},
									name: "REGEXP",
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 12, offset: 25195},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1058, col: 15, offset: 25198},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 19, offset: 25202},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 22, offset: 25205},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 27, offset: 25210},
										name: "RegexpPrimitive",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 43, offset: 25226},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1058, col: 46, offset: 25229},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 50, offset: 25233},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 53, offset: 25236},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 58, offset: 25241},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 63, offset: 25246},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1058, col: 66, offset: 25249},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 70, offset: 25253},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 1058, col: 76, offset: 25259},
										expr: &ruleRefExpr{
											pos:  position{line: 1058, col: 76, offset: 25259},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 25438},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 25438},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1062, col: 5, offset: 25438},
									name: "REGEXP_REPLACE",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 20, offset: 25453},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1062, col: 23, offset: 25456},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 27, offset: 25460},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 30, offset: 25463},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 35, offset: 25468},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 40, offset: 25473},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1062, col: 43, offset: 25476},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 47, offset: 25480},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 50, offset: 25483},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 55, offset: 25488},
										name: "RegexpPrimitive",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 71, offset: 25504},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1062, col: 74, offset: 25507},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 78, offset: 25511},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 81, offset: 25514},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 86, offset: 25519},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 91, offset: 25524},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1062, col: 94, offset: 25527},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 98, offset: 25531},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 1062, col: 104, offset: 25537},
										expr: &ruleRefExpr{
											pos:  position{line: 1062, col: 104, offset: 25537},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 25731},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 1066, col: 5, offset: 25731},
							exprs: []any{
								&notExpr{
									pos: position{line: 1066, col: 5, offset: 25731},
									expr: &ruleRefExpr{
										pos:  position{line: 1066, col: 6, offset: 25732},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 16, offset: 25742},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 1066, col: 19, offset: 25745},
										name: "Identifier",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1066, col: 30, offset: 25756},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1066, col: 33, offset: 25759},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1066, col: 37, offset: 25763},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 40, offset: 25766},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 1066, col: 45, offset: 25771},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1066, col: 58, offset: 25784},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1066, col: 61, offset: 25787},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 65, offset: 25791},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 1066, col: 71, offset: 25797},
										expr: &ruleRefExpr{
											pos:  position{line: 1066, col: 71, offset: 25797},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RegexpPrimitive",
			pos:  position{line: 1070, col: 1, offset: 25865},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 25885},
				run: (*parser).callonRegexpPrimitive1,
				expr: &labeledExpr{
					pos:   position{line: 1071, col: 5, offset: 25885},
					label: "pat",
					expr: &ruleRefExpr{
						pos:  position{line: 1071, col: 9, offset: 25889},
						name: "RegexpPattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 1073, col: 1, offset: 25960},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 25977},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 25977},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 1074, col: 5, offset: 25977},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 7, offset: 25979},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 5, offset: 26017},
						name: "OptionalExprs",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Grep",
			pos:  position{line: 1077, col: 1, offset: 26032},
			expr: &actionExpr{
				pos: position{line: 1078, col: 5, offset: 26041},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 5, offset: 26041},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1078, col: 5, offset: 26041},
							name: "GREP",
						},
						&ruleRefExpr{
							pos:  position{line: 1078, col: 10, offset: 26046},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1078, col: 13, offset: 26049},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1078, col: 17, offset: 26053},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 20, offset: 26056},
							label: "pattern",
							expr: &choiceExpr{
								pos: position{line: 1078, col: 29, offset: 26065},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1078, col: 29, offset: 26065},
										name: "Regexp",
									},
									&ruleRefExpr{
										pos:  position{line: 1078, col: 38, offset: 26074},
										name: "Glob",
									},
									&ruleRefExpr{
										pos:  position{line: 1078, col: 45, offset: 26081},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1078, col: 51, offset: 26087},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 54, offset: 26090},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1078, col: 58, offset: 26094},
								expr: &actionExpr{
									pos: position{line: 1078, col: 59, offset: 26095},
									run: (*parser).callonGrep15,
									expr: &seqExpr{
										pos: position{line: 1078, col: 59, offset: 26095},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 1078, col: 59, offset: 26095},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1078, col: 63, offset: 26099},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1078, col: 66, offset: 26102},
												label: "e",
												expr: &choiceExpr{
													pos: position{line: 1078, col: 69, offset: 26105},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 1078, col: 69, offset: 26105},
															name: "OverExpr",
														},
														&ruleRefExpr{
															pos:  position{line: 1078, col: 80, offset: 26116},
															name: "Expr",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1078, col: 86, offset: 26122},
												name: "__",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1078, col: 109, offset: 26145},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 1090, col: 1, offset: 26358},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 5, offset: 26376},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1091, col: 5, offset: 26376},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 1092, col: 5, offset: 26386},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 1092, col: 5, offset: 26386},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Exprs",
			pos:  position{line: 1094, col: 1, offset: 26414},
			expr: &actionExpr{
				pos: position{line: 1095, col: 5, offset: 26424},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 5, offset: 26424},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 26424},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1095, col: 11, offset: 26430},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 16, offset: 26435},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1095, col: 21, offset: 26440},
								expr: &actionExpr{
									pos: position{line: 1095, col: 22, offset: 26441},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 1095, col: 22, offset: 26441},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1095, col: 22, offset: 26441},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1095, col: 25, offset: 26444},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1095, col: 29, offset: 26448},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1095, col: 32, offset: 26451},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 1095, col: 34, offset: 26453},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Primary",
			pos:  position{line: 1099, col: 1, offset: 26526},
			expr: &choiceExpr{
				pos: position{line: 1100, col: 5, offset: 26538},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1100, col: 5, offset: 26538},
						name: "CaseExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 5, offset: 26551},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 5, offset: 26562},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 5, offset: 26572},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 5, offset: 26580},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 5, offset: 26588},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 5, offset: 26600},
						name: "Identifier",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 5, offset: 26615},
						name: "Tuple",
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 26625},
						run: (*parser).callonPrimary10,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 26625},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1108, col: 5, offset: 26625},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 9, offset: 26629},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 12, offset: 26632},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 17, offset: 26637},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 26, offset: 26646},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1108, col: 29, offset: 26649},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 26678},
						run: (*parser).callonPrimary18,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 26678},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1109, col: 5, offset: 26678},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 9, offset: 26682},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 12, offset: 26685},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 17, offset: 26690},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 22, offset: 26695},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1109, col: 25, offset: 26698},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CaseExpr",
			pos:  position{line: 1111, col: 1, offset: 26724},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 26737},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 26737},
						run: (*parser).callonCaseExpr2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 26737},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1112, col: 5, offset: 26737},
									name: "CASE",
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 10, offset: 26742},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 1112, col: 16, offset: 26748},
										expr: &ruleRefExpr{
											pos:  position{line: 1112, col: 16, offset: 26748},
											name: "When",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 22, offset: 26754},
									label: "else_",
									expr: &zeroOrOneExpr{
										pos: position{line: 1112, col: 28, offset: 26760},
										expr: &seqExpr{
											pos: position{line: 1112, col: 29, offset: 26761},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1112, col: 29, offset: 26761},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 1112, col: 31, offset: 26763},
													val:        "else",
													ignoreCase: false,
													want:       "\"else\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1112, col: 38, offset: 26770},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 1112, col: 40, offset: 26772},
													name: "Expr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 47, offset: 26779},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 49, offset: 26781},
									name: "END",
								},
								&zeroOrOneExpr{
									pos: position{line: 1112, col: 53, offset: 26785},
									expr: &seqExpr{
										pos: position{line: 1112, col: 54, offset: 26786},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1112, col: 54, offset: 26786},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 1112, col: 56, offset: 26788},
												name: "CASE",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 27437},
						run: (*parser).callonCaseExpr21,
						expr: &seqExpr{
							pos: position{line: 1136, col: 5, offset: 27437},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1136, col: 5, offset: 27437},
									name: "CASE",
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 10, offset: 27442},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 12, offset: 27444},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 17, offset: 27449},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 22, offset: 27454},
									label: "whens",
									expr: &oneOrMoreExpr{
										pos: position{line: 1136, col: 28, offset: 27460},
										expr: &ruleRefExpr{
											pos:  position{line: 1136, col: 28, offset: 27460},
											name: "When",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 34, offset: 27466},
									label: "else_",
									expr: &zeroOrOneExpr{
										pos: position{line: 1136, col: 40, offset: 27472},
										expr: &seqExpr{
											pos: position{line: 1136, col: 41, offset: 27473},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1136, col: 41, offset: 27473},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 1136, col: 43, offset: 27475},
													val:        "else",
													ignoreCase: false,
													want:       "\"else\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1136, col: 50, offset: 27482},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 1136, col: 52, offset: 27484},
													name: "Expr",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 59, offset: 27491},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 61, offset: 27493},
									name: "END",
								},
								&zeroOrOneExpr{
									pos: position{line: 1136, col: 65, offset: 27497},
									expr: &seqExpr{
										pos: position{line: 1136, col: 66, offset: 27498},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1136, col: 66, offset: 27498},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 1136, col: 68, offset: 27500},
												name: "CASE",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "When",
			pos:  position{line: 1149, col: 1, offset: 27806},
			expr: &actionExpr{
				pos: position{line: 1150, col: 5, offset: 27815},
				run: (*parser).callonWhen1,
				expr: &seqExpr{
					pos: position{line: 1150, col: 5, offset: 27815},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1150, col: 5, offset: 27815},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 7, offset: 27817},
							name: "WHEN",
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 12, offset: 27822},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 14, offset: 27824},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 1150, col: 19, offset: 27829},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 24, offset: 27834},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 26, offset: 27836},
							name: "THEN",
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 31, offset: 27841},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 33, offset: 27843},
							label: "then",
							expr: &ruleRefExpr{
								pos:  position{line: 1150, col: 38, offset: 27848},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OverExpr",
			pos:  position{line: 1159, col: 1, offset: 28007},
			expr: &actionExpr{
				pos: position{line: 1160, col: 5, offset: 28020},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 5, offset: 28020},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1160, col: 5, offset: 28020},
							name: "OVER",
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 10, offset: 28025},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 12, offset: 28027},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 18, offset: 28033},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 24, offset: 28039},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 1160, col: 31, offset: 28046},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 31, offset: 28046},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 39, offset: 28054},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 42, offset: 28057},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 47, offset: 28062},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 50, offset: 28065},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 55, offset: 28070},
								name: "Seq",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Record",
			pos:  position{line: 1170, col: 1, offset: 28301},
			expr: &actionExpr{
				pos: position{line: 1171, col: 5, offset: 28312},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 5, offset: 28312},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1171, col: 5, offset: 28312},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1171, col: 9, offset: 28316},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1171, col: 12, offset: 28319},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 1171, col: 18, offset: 28325},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1171, col: 30, offset: 28337},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1171, col: 33, offset: 28340},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RecordElems",
			pos:  position{line: 1179, col: 1, offset: 28498},
			expr: &choiceExpr{
				pos: position{line: 1180, col: 5, offset: 28514},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1180, col: 5, offset: 28514},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 1180, col: 5, offset: 28514},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1180, col: 5, offset: 28514},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 28520},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 22, offset: 28531},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1180, col: 27, offset: 28536},
										expr: &ruleRefExpr{
											pos:  position{line: 1180, col: 27, offset: 28536},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1183, col: 5, offset: 28599},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 1183, col: 5, offset: 28599},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 1185, col: 1, offset: 28623},
			expr: &actionExpr{
				pos: position{line: 1185, col: 18, offset: 28640},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 18, offset: 28640},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1185, col: 18, offset: 28640},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1185, col: 21, offset: 28643},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 25, offset: 28647},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 28, offset: 28650},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 33, offset: 28655},
								name: "RecordElem",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RecordElem",
			pos:  position{line: 1187, col: 1, offset: 28688},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 5, offset: 28703},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1188, col: 5, offset: 28703},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 5, offset: 28714},
						name: "FieldExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 5, offset: 28728},
						name: "Identifier",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Spread",
			pos:  position{line: 1192, col: 1, offset: 28740},
			expr: &actionExpr{
				pos: position{line: 1193, col: 5, offset: 28751},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 5, offset: 28751},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1193, col: 5, offset: 28751},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1193, col: 11, offset: 28757},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 14, offset: 28760},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1193, col: 19, offset: 28765},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FieldExpr",
			pos:  position{line: 1197, col: 1, offset: 28861},
			expr: &actionExpr{
				pos: position{line: 1198, col: 5, offset: 28875},
				run: (*parser).callonFieldExpr1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 5, offset: 28875},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1198, col: 5, offset: 28875},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 10, offset: 28880},
								name: "Name",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1198, col: 15, offset: 28885},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1198, col: 18, offset: 28888},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1198, col: 22, offset: 28892},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1198, col: 25, offset: 28895},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 31, offset: 28901},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Array",
			pos:  position{line: 1207, col: 1, offset: 29070},
			expr: &actionExpr{
				pos: position{line: 1208, col: 5, offset: 29080},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 5, offset: 29080},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1208, col: 5, offset: 29080},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1208, col: 9, offset: 29084},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 12, offset: 29087},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 18, offset: 29093},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1208, col: 30, offset: 29105},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1208, col: 33, offset: 29108},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Set",
			pos:  position{line: 1216, col: 1, offset: 29264},
			expr: &actionExpr{
				pos: position{line: 1217, col: 5, offset: 29272},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 5, offset: 29272},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1217, col: 5, offset: 29272},
							val:        "|[",
							ignoreCase: false,
							want:       "\"|[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1217, col: 10, offset: 29277},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 13, offset: 29280},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 1217, col: 19, offset: 29286},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1217, col: 31, offset: 29298},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1217, col: 34, offset: 29301},
							val:        "]|",
							ignoreCase: false,
							want:       "\"]|\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VectorElems",
			pos:  position{line: 1225, col: 1, offset: 29454},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 5, offset: 29470},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1226, col: 5, offset: 29470},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 1226, col: 5, offset: 29470},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1226, col: 5, offset: 29470},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 11, offset: 29476},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 1226, col: 22, offset: 29487},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1226, col: 27, offset: 29492},
										expr: &actionExpr{
											pos: position{line: 1226, col: 28, offset: 29493},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 1226, col: 28, offset: 29493},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 1226, col: 28, offset: 29493},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 1226, col: 31, offset: 29496},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&ruleRefExpr{
														pos:  position{line: 1226, col: 35, offset: 29500},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 1226, col: 38, offset: 29503},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 1226, col: 40, offset: 29505},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 29587},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 1229, col: 5, offset: 29587},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VectorElem",
			pos:  position{line: 1231, col: 1, offset: 29611},
			expr: &choiceExpr{
				pos: position{line: 1232, col: 5, offset: 29626},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1232, col: 5, offset: 29626},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 1233, col: 5, offset: 29637},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 1233, col: 5, offset: 29637},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 7, offset: 29639},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Map",
			pos:  position{line: 1235, col: 1, offset: 29730},
			expr: &actionExpr{
				pos: position{line: 1236, col: 5, offset: 29738},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 5, offset: 29738},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1236, col: 5, offset: 29738},
							val:        "|{",
							ignoreCase: false,
							want:       "\"|{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1236, col: 10, offset: 29743},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1236, col: 13, offset: 29746},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 19, offset: 29752},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1236, col: 27, offset: 29760},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1236, col: 30, offset: 29763},
							val:        "}|",
							ignoreCase: false,
							want:       "\"}|\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Entries",
			pos:  position{line: 1244, col: 1, offset: 29917},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 5, offset: 29929},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 29929},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 29929},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1245, col: 5, offset: 29929},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 29935},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 17, offset: 29941},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1245, col: 22, offset: 29946},
										expr: &ruleRefExpr{
											pos:  position{line: 1245, col: 22, offset: 29946},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 30004},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 1248, col: 5, offset: 30004},
							name: "__",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EntryTail",
			pos:  position{line: 1251, col: 1, offset: 30029},
			expr: &actionExpr{
				pos: position{line: 1251, col: 13, offset: 30041},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 13, offset: 30041},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1251, col: 13, offset: 30041},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1251, col: 16, offset: 30044},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1251, col: 20, offset: 30048},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 23, offset: 30051},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 25, offset: 30053},
								name: "Entry",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Entry",
			pos:  position{line: 1253, col: 1, offset: 30078},
			expr: &actionExpr{
				pos: position{line: 1254, col: 5, offset: 30088},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 1254, col: 5, offset: 30088},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1254, col: 5, offset: 30088},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 1254, col: 9, offset: 30092},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1254, col: 14, offset: 30097},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1254, col: 17, offset: 30100},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1254, col: 21, offset: 30104},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1254, col: 24, offset: 30107},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1254, col: 30, offset: 30113},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Tuple",
			pos:  position{line: 1258, col: 1, offset: 30216},
			expr: &actionExpr{
				pos: position{line: 1259, col: 5, offset: 30226},
				run: (*parser).callonTuple1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 5, offset: 30226},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1259, col: 5, offset: 30226},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1259, col: 9, offset: 30230},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 12, offset: 30233},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 18, offset: 30239},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 23, offset: 30244},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1259, col: 28, offset: 30249},
								expr: &actionExpr{
									pos: position{line: 1259, col: 29, offset: 30250},
									run: (*parser).callonTuple9,
									expr: &seqExpr{
										pos: position{line: 1259, col: 29, offset: 30250},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1259, col: 29, offset: 30250},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1259, col: 32, offset: 30253},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1259, col: 36, offset: 30257},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1259, col: 39, offset: 30260},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 1259, col: 41, offset: 30262},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1259, col: 66, offset: 30287},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1259, col: 69, offset: 30290},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Literal",
			pos:  position{line: 1269, col: 1, offset: 30471},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 5, offset: 30483},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1270, col: 5, offset: 30483},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 5, offset: 30499},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 5, offset: 30517},
						name: "FString",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 5, offset: 30529},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 5, offset: 30547},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 5, offset: 30566},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 5, offset: 30583},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 5, offset: 30596},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 5, offset: 30605},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1279, col: 5, offset: 30622},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 5, offset: 30641},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 5, offset: 30660},
						name: "NullLiteral",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1283, col: 1, offset: 30673},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 5, offset: 30691},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1284, col: 5, offset: 30691},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1284, col: 5, offset: 30691},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1284, col: 5, offset: 30691},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 7, offset: 30693},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1284, col: 14, offset: 30700},
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 15, offset: 30701},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 30781},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1287, col: 5, offset: 30781},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 7, offset: 30783},
								name: "IP4Net",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1291, col: 1, offset: 30852},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 5, offset: 30871},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1292, col: 5, offset: 30871},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1292, col: 5, offset: 30871},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1292, col: 5, offset: 30871},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 7, offset: 30873},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1292, col: 11, offset: 30877},
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 12, offset: 30878},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1295, col: 5, offset: 30957},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1295, col: 5, offset: 30957},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1295, col: 7, offset: 30959},
								name: "IP",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1299, col: 1, offset: 31023},
			expr: &actionExpr{
				pos: position{line: 1300, col: 5, offset: 31040},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1300, col: 5, offset: 31040},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1300, col: 7, offset: 31042},
						name: "FloatString",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1304, col: 1, offset: 31120},
			expr: &actionExpr{
				pos: position{line: 1305, col: 5, offset: 31139},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1305, col: 5, offset: 31139},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1305, col: 7, offset: 31141},
						name: "IntString",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1309, col: 1, offset: 31215},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 31234},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 31234},
						run: (*parser).callonBooleanLiteral2,
						expr: &ruleRefExpr{
							pos:  position{line: 1310, col: 5, offset: 31234},
							name: "TRUE",
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 31292},
						run: (*parser).callonBooleanLiteral4,
						expr: &ruleRefExpr{
							pos:  position{line: 1311, col: 5, offset: 31292},
							name: "FALSE",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1313, col: 1, offset: 31348},
			expr: &actionExpr{
				pos: position{line: 1314, col: 5, offset: 31364},
				run: (*parser).callonNullLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 1314, col: 5, offset: 31364},
					name: "NULL",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1316, col: 1, offset: 31414},
			expr: &actionExpr{
				pos: position{line: 1317, col: 5, offset: 31431},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 5, offset: 31431},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1317, col: 5, offset: 31431},
							val:        "0x",
							ignoreCase: false,
							want:       "\"0x\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1317, col: 10, offset: 31436},
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 10, offset: 31436},
								name: "HexDigit",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1321, col: 1, offset: 31510},
			expr: &actionExpr{
				pos: position{line: 1322, col: 5, offset: 31526},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 5, offset: 31526},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1322, col: 5, offset: 31526},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 9, offset: 31530},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 13, offset: 31534},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1322, col: 18, offset: 31539},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 1330, col: 1, offset: 31672},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 5, offset: 31681},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 5, offset: 31681},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 5, offset: 31699},
						name: "ComplexType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1334, col: 1, offset: 31712},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 5, offset: 31730},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1335, col: 5, offset: 31730},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1335, col: 5, offset: 31730},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1335, col: 5, offset: 31730},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 10, offset: 31735},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1335, col: 24, offset: 31749},
									expr: &ruleRefExpr{
										pos:  position{line: 1335, col: 25, offset: 31750},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1336, col: 5, offset: 31790},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1336, col: 5, offset: 31790},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1336, col: 5, offset: 31790},
									name: "ERROR",
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 11, offset: 31796},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1336, col: 14, offset: 31799},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 18, offset: 31803},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1336, col: 21, offset: 31806},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1336, col: 23, offset: 31808},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1336, col: 28, offset: 31813},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1336, col: 31, offset: 31816},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1343, col: 5, offset: 31956},
						run: (*parser).callonAmbiguousType18,
						expr: &seqExpr{
							pos: position{line: 1343, col: 5, offset: 31956},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1343, col: 5, offset: 31956},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1343, col: 10, offset: 31961},
										name: "Name",
									},
								},
								&labeledExpr{
									pos:   position{line: 1343, col: 15, offset: 31966},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1343, col: 19, offset: 31970},
										expr: &seqExpr{
											pos: position{line: 1343, col: 20, offset: 31971},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 1343, col: 20, offset: 31971},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1343, col: 23, offset: 31974},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1343, col: 27, offset: 31978},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1343, col: 30, offset: 31981},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1354, col: 5, offset: 32306},
						run: (*parser).callonAmbiguousType29,
						expr: &seqExpr{
							pos: position{line: 1354, col: 5, offset: 32306},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1354, col: 5, offset: 32306},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1354, col: 9, offset: 32310},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1354, col: 12, offset: 32313},
									label: "types",
									expr: &ruleRefExpr{
										pos:  position{line: 1354, col: 18, offset: 32319},
										name: "TypeList",
									},
								},
								&litMatcher{
									pos:        position{line: 1354, col: 27, offset: 32328},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeList",
			pos:  position{line: 1362, col: 1, offset: 32472},
			expr: &actionExpr{
				pos: position{line: 1363, col: 5, offset: 32485},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 5, offset: 32485},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1363, col: 5, offset: 32485},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 11, offset: 32491},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 16, offset: 32496},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1363, col: 21, offset: 32501},
								expr: &ruleRefExpr{
									pos:  position{line: 1363, col: 21, offset: 32501},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1367, col: 1, offset: 32559},
			expr: &actionExpr{
				pos: position{line: 1367, col: 16, offset: 32574},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1367, col: 16, offset: 32574},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1367, col: 16, offset: 32574},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1367, col: 19, offset: 32577},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1367, col: 23, offset: 32581},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 26, offset: 32584},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1367, col: 30, offset: 32588},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ComplexType",
			pos:  position{line: 1369, col: 1, offset: 32614},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 5, offset: 32630},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1370, col: 5, offset: 32630},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1370, col: 5, offset: 32630},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1370, col: 5, offset: 32630},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1370, col: 9, offset: 32634},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1370, col: 12, offset: 32637},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1370, col: 19, offset: 32644},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1370, col: 33, offset: 32658},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1370, col: 36, offset: 32661},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1377, col: 5, offset: 32823},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1377, col: 5, offset: 32823},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1377, col: 5, offset: 32823},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1377, col: 9, offset: 32827},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1377, col: 12, offset: 32830},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1377, col: 16, offset: 32834},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1377, col: 21, offset: 32839},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1377, col: 24, offset: 32842},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1384, col: 5, offset: 32984},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1384, col: 5, offset: 32984},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1384, col: 5, offset: 32984},
									val:        "|[",
									ignoreCase: false,
									want:       "\"|[\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1384, col: 10, offset: 32989},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1384, col: 13, offset: 32992},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1384, col: 17, offset: 32996},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1384, col: 22, offset: 33001},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1384, col: 25, offset: 33004},
									val:        "]|",
									ignoreCase: false,
									want:       "\"]|\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1391, col: 5, offset: 33143},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1391, col: 5, offset: 33143},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1391, col: 5, offset: 33143},
									val:        "|{",
									ignoreCase: false,
									want:       "\"|{\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 10, offset: 33148},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1391, col: 13, offset: 33151},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 21, offset: 33159},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 26, offset: 33164},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1391, col: 29, offset: 33167},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 33, offset: 33171},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1391, col: 36, offset: 33174},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 44, offset: 33182},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 49, offset: 33187},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1391, col: 52, offset: 33190},
									val:        "}|",
									ignoreCase: false,
									want:       "\"}|\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1400, col: 1, offset: 33364},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 5, offset: 33382},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1401, col: 5, offset: 33382},
						run: (*parser).callonStringLiteral2,
						expr: &seqExpr{
							pos: position{line: 1401, col: 5, offset: 33382},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1401, col: 5, offset: 33382},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1401, col: 9, offset: 33386},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1401, col: 11, offset: 33388},
										expr: &ruleRefExpr{
											pos:  position{line: 1401, col: 11, offset: 33388},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1401, col: 29, offset: 33406},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 33470},
						run: (*parser).callonStringLiteral9,
						expr: &seqExpr{
							pos: position{line: 1402, col: 5, offset: 33470},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1402, col: 5, offset: 33470},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1402, col: 9, offset: 33474},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1402, col: 11, offset: 33476},
										expr: &ruleRefExpr{
											pos:  position{line: 1402, col: 11, offset: 33476},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 29, offset: 33494},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FString",
			pos:  position{line: 1404, col: 1, offset: 33555},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 5, offset: 33567},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1405, col: 5, offset: 33567},
						run: (*parser).callonFString2,
						expr: &seqExpr{
							pos: position{line: 1405, col: 5, offset: 33567},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1405, col: 5, offset: 33567},
									val:        "f\"",
									ignoreCase: false,
									want:       "\"f\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1405, col: 11, offset: 33573},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1405, col: 13, offset: 33575},
										expr: &ruleRefExpr{
											pos:  position{line: 1405, col: 13, offset: 33575},
											name: "FStringDoubleQuotedElem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1405, col: 38, offset: 33600},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1412, col: 5, offset: 33746},
						run: (*parser).callonFString9,
						expr: &seqExpr{
							pos: position{line: 1412, col: 5, offset: 33746},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1412, col: 5, offset: 33746},
									val:        "f'",
									ignoreCase: false,
									want:       "\"f'\"",
								},
								&labeledExpr{
									pos:   position{line: 1412, col: 10, offset: 33751},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1412, col: 12, offset: 33753},
										expr: &ruleRefExpr{
											pos:  position{line: 1412, col: 12, offset: 33753},
											name: "FStringSingleQuotedElem",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 37, offset: 33778},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FStringDoubleQuotedElem",
			pos:  position{line: 1420, col: 1, offset: 33921},
			expr: &choiceExpr{
				pos: position{line: 1421, col: 5, offset: 33949},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1421, col: 5, offset: 33949},
						name: "FStringExpr",
					},
					&actionExpr{
						pos: position{line: 1422, col: 5, offset: 33965},
						run: (*parser).callonFStringDoubleQuotedElem3,
						expr: &labeledExpr{
							pos:   position{line: 1422, col: 5, offset: 33965},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1422, col: 7, offset: 33967},
								expr: &ruleRefExpr{
									pos:  position{line: 1422, col: 7, offset: 33967},
									name: "FStringDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FStringDoubleQuotedChar",
			pos:  position{line: 1426, col: 1, offset: 34090},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 5, offset: 34118},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 34118},
						run: (*parser).callonFStringDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1427, col: 5, offset: 34118},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1427, col: 5, offset: 34118},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 10, offset: 34123},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1427, col: 12, offset: 34125},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 34151},
						run: (*parser).callonFStringDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1428, col: 5, offset: 34151},
							exprs: []any{
								&notExpr{
									pos: position{line: 1428, col: 5, offset: 34151},
									expr: &litMatcher{
										pos:        position{line: 1428, col: 7, offset: 34153},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1428, col: 12, offset: 34158},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 14, offset: 34160},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FStringSingleQuotedElem",
			pos:  position{line: 1430, col: 1, offset: 34196},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 5, offset: 34224},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1431, col: 5, offset: 34224},
						name: "FStringExpr",
					},
					&actionExpr{
						pos: position{line: 1432, col: 5, offset: 34240},
						run: (*parser).callonFStringSingleQuotedElem3,
						expr: &labeledExpr{
							pos:   position{line: 1432, col: 5, offset: 34240},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1432, col: 7, offset: 34242},
								expr: &ruleRefExpr{
									pos:  position{line: 1432, col: 7, offset: 34242},
									name: "FStringSingleQuotedChar",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FStringSingleQuotedChar",
			pos:  position{line: 1436, col: 1, offset: 34365},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 5, offset: 34393},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1437, col: 5, offset: 34393},
						run: (*parser).callonFStringSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1437, col: 5, offset: 34393},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1437, col: 5, offset: 34393},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1437, col: 10, offset: 34398},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1437, col: 12, offset: 34400},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1438, col: 5, offset: 34426},
						run: (*parser).callonFStringSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1438, col: 5, offset: 34426},
							exprs: []any{
								&notExpr{
									pos: position{line: 1438, col: 5, offset: 34426},
									expr: &litMatcher{
										pos:        position{line: 1438, col: 7, offset: 34428},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1438, col: 12, offset: 34433},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1438, col: 14, offset: 34435},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FStringExpr",
			pos:  position{line: 1440, col: 1, offset: 34471},
			expr: &actionExpr{
				pos: position{line: 1441, col: 5, offset: 34487},
				run: (*parser).callonFStringExpr1,
				expr: &seqExpr{
					pos: position{line: 1441, col: 5, offset: 34487},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1441, col: 5, offset: 34487},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1441, col: 9, offset: 34491},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1441, col: 12, offset: 34494},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1441, col: 14, offset: 34496},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1441, col: 19, offset: 34501},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1441, col: 22, offset: 34504},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1449, col: 1, offset: 34639},
			expr: &actionExpr{
				pos: position{line: 1450, col: 5, offset: 34657},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1450, col: 9, offset: 34661},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 1450, col: 9, offset: 34661},
							val:        "uint8",
							ignoreCase: false,
							want:       "\"uint8\"",
						},
						&litMatcher{
							pos:        position{line: 1450, col: 19, offset: 34671},
							val:        "uint16",
							ignoreCase: false,
							want:       "\"uint16\"",
						},
						&litMatcher{
							pos:        position{line: 1450, col: 30, offset: 34682},
							val:        "uint32",
							ignoreCase: false,
							want:       "\"uint32\"",
						},
						&litMatcher{
							pos:        position{line: 1450, col: 41, offset: 34693},
							val:        "uint64",
							ignoreCase: false,
							want:       "\"uint64\"",
						},
						&litMatcher{
							pos:        position{line: 1451, col: 9, offset: 34710},
							val:        "int8",
							ignoreCase: false,
							want:       "\"int8\"",
						},
						&litMatcher{
							pos:        position{line: 1451, col: 18, offset: 34719},
							val:        "int16",
							ignoreCase: false,
							want:       "\"int16\"",
						},
						&litMatcher{
							pos:        position{line: 1451, col: 28, offset: 34729},
							val:        "int32",
							ignoreCase: false,
							want:       "\"int32\"",
						},
						&litMatcher{
							pos:        position{line: 1451, col: 38, offset: 34739},
							val:        "int64",
							ignoreCase: false,
							want:       "\"int64\"",
						},
						&litMatcher{
							pos:        position{line: 1452, col: 9, offset: 34755},
							val:        "float16",
							ignoreCase: false,
							want:       "\"float16\"",
						},
						&litMatcher{
							pos:        position{line: 1452, col: 21, offset: 34767},
							val:        "float32",
							ignoreCase: false,
							want:       "\"float32\"",
						},
						&litMatcher{
							pos:        position{line: 1452, col: 33, offset: 34779},
							val:        "float64",
							ignoreCase: false,
							want:       "\"float64\"",
						},
						&litMatcher{
							pos:        position{line: 1453, col: 9, offset: 34797},
							val:        "bool",
							ignoreCase: false,
							want:       "\"bool\"",
						},
						&litMatcher{
							pos:        position{line: 1453, col: 18, offset: 34806},
							val:        "string",
							ignoreCase: false,
							want:       "\"string\"",
						},
						&litMatcher{
							pos:        position{line: 1454, col: 9, offset: 34823},
							val:        "duration",
							ignoreCase: false,
							want:       "\"duration\"",
						},
						&litMatcher{
							pos:        position{line: 1454, col: 22, offset: 34836},
							val:        "time",
							ignoreCase: false,
							want:       "\"time\"",
						},
						&litMatcher{
							pos:        position{line: 1455, col: 9, offset: 34851},
							val:        "bytes",
							ignoreCase: false,
							want:       "\"bytes\"",
						},
						&litMatcher{
							pos:        position{line: 1456, col: 9, offset: 34867},
							val:        "ip",
							ignoreCase: false,
							want:       "\"ip\"",
						},
						&litMatcher{
							pos:        position{line: 1456, col: 16, offset: 34874},
							val:        "net",
							ignoreCase: false,
							want:       "\"net\"",
						},
						&litMatcher{
							pos:        position{line: 1457, col: 9, offset: 34888},
							val:        "type",
							ignoreCase: false,
							want:       "\"type\"",
						},
						&litMatcher{
							pos:        position{line: 1457, col: 18, offset: 34897},
							val:        "null",
							ignoreCase: false,
							want:       "\"null\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1465, col: 1, offset: 35082},
			expr: &choiceExpr{
				pos: position{line: 1466, col: 5, offset: 35100},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1466, col: 5, offset: 35100},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1466, col: 5, offset: 35100},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1466, col: 5, offset: 35100},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1466, col: 11, offset: 35106},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1466, col: 21, offset: 35116},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1466, col: 26, offset: 35121},
										expr: &ruleRefExpr{
											pos:  position{line: 1466, col: 26, offset: 35121},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1469, col: 5, offset: 35187},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1469, col: 5, offset: 35187},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1471, col: 1, offset: 35211},
			expr: &actionExpr{
				pos: position{line: 1471, col: 21, offset: 35231},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 21, offset: 35231},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1471, col: 21, offset: 35231},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1471, col: 24, offset: 35234},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1471, col: 28, offset: 35238},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 31, offset: 35241},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1471, col: 35, offset: 35245},
								name: "TypeField",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeField",
			pos:  position{line: 1473, col: 1, offset: 35276},
			expr: &actionExpr{
				pos: position{line: 1474, col: 5, offset: 35290},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 5, offset: 35290},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1474, col: 5, offset: 35290},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 10, offset: 35295},
								name: "Name",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1474, col: 15, offset: 35300},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1474, col: 18, offset: 35303},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1474, col: 22, offset: 35307},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 25, offset: 35310},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 29, offset: 35314},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Name",
			pos:  position{line: 1482, col: 1, offset: 35463},
			expr: &choiceExpr{
				pos: position{line: 1483, col: 5, offset: 35472},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1483, col: 5, offset: 35472},
						run: (*parser).callonName2,
						expr: &labeledExpr{
							pos:   position{line: 1483, col: 5, offset: 35472},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 1483, col: 7, offset: 35474},
								name: "DottedIDs",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1484, col: 5, offset: 35563},
						run: (*parser).callonName5,
						expr: &labeledExpr{
							pos:   position{line: 1484, col: 5, offset: 35563},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 1484, col: 7, offset: 35565},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1485, col: 5, offset: 35654},
						run: (*parser).callonName8,
						expr: &labeledExpr{
							pos:   position{line: 1485, col: 5, offset: 35654},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 7, offset: 35656},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1486, col: 5, offset: 35745},
						run: (*parser).callonName11,
						expr: &labeledExpr{
							pos:   position{line: 1486, col: 5, offset: 35745},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 1486, col: 7, offset: 35747},
								name: "KSUID",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DottedIDs",
			pos:  position{line: 1488, col: 1, offset: 35833},
			expr: &actionExpr{
				pos: position{line: 1489, col: 5, offset: 35847},
				run: (*parser).callonDottedIDs1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 5, offset: 35847},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 1489, col: 6, offset: 35848},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1489, col: 6, offset: 35848},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 1489, col: 24, offset: 35866},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1489, col: 29, offset: 35871},
							expr: &choiceExpr{
								pos: position{line: 1489, col: 30, offset: 35872},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1489, col: 30, offset: 35872},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 1489, col: 47, offset: 35889},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Identifier",
			pos:  position{line: 1491, col: 1, offset: 35927},
			expr: &actionExpr{
				pos: position{line: 1492, col: 5, offset: 35942},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1492, col: 5, offset: 35942},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1492, col: 8, offset: 35945},
						name: "IdentifierName",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Identifiers",
			pos:  position{line: 1500, col: 1, offset: 36078},
			expr: &actionExpr{
				pos: position{line: 1501, col: 5, offset: 36094},
				run: (*parser).callonIdentifiers1,
				expr: &seqExpr{
					pos: position{line: 1501, col: 5, offset: 36094},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1501, col: 5, offset: 36094},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1501, col: 11, offset: 36100},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 1501, col: 22, offset: 36111},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1501, col: 27, offset: 36116},
								expr: &actionExpr{
									pos: position{line: 1501, col: 28, offset: 36117},
									run: (*parser).callonIdentifiers7,
									expr: &seqExpr{
										pos: position{line: 1501, col: 28, offset: 36117},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1501, col: 28, offset: 36117},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1501, col: 31, offset: 36120},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1501, col: 35, offset: 36124},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1501, col: 38, offset: 36127},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 1501, col: 43, offset: 36132},
													name: "Identifier",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1505, col: 1, offset: 36210},
			expr: &choiceExpr{
				pos: position{line: 1506, col: 5, offset: 36229},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1506, col: 5, offset: 36229},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1506, col: 5, offset: 36229},
							exprs: []any{
								&notExpr{
									pos: position{line: 1506, col: 5, offset: 36229},
									expr: &seqExpr{
										pos: position{line: 1506, col: 7, offset: 36231},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1506, col: 7, offset: 36231},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1506, col: 15, offset: 36239},
												expr: &ruleRefExpr{
													pos:  position{line: 1506, col: 16, offset: 36240},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1506, col: 32, offset: 36256},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1506, col: 48, offset: 36272},
									expr: &ruleRefExpr{
										pos:  position{line: 1506, col: 48, offset: 36272},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1507, col: 5, offset: 36323},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1507, col: 5, offset: 36323},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
					},
					&actionExpr{
						pos: position{line: 1508, col: 5, offset: 36362},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1508, col: 5, offset: 36362},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1508, col: 5, offset: 36362},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1508, col: 10, offset: 36367},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1508, col: 13, offset: 36370},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1510, col: 5, offset: 36461},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1510, col: 5, offset: 36461},
							val:        "type",
							ignoreCase: false,
							want:       "\"type\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1512, col: 1, offset: 36500},
			expr: &choiceExpr{
				pos: position{line: 1513, col: 5, offset: 36520},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1513, col: 5, offset: 36520},
						name: "UnicodeLetter",
					},
					&litMatcher{
						pos:        position{line: 1514, col: 5, offset: 36538},
						val:        "$",
						ignoreCase: false,
						want:       "\"$\"",
					},
					&litMatcher{
						pos:        position{line: 1515, col: 5, offset: 36546},
						val:        "_",
						ignoreCase: false,
						want:       "\"_\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1517, col: 1, offset: 36551},
			expr: &choiceExpr{
				pos: position{line: 1518, col: 5, offset: 36570},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1518, col: 5, offset: 36570},
						name: "IdentifierStart",
					},
					&ruleRefExpr{
						pos:  position{line: 1519, col: 5, offset: 36590},
						name: "UnicodeCombiningMark",
					},
					&ruleRefExpr{
						pos:  position{line: 1520, col: 5, offset: 36615},
						name: "UnicodeDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 1521, col: 5, offset: 36632},
						name: "UnicodeConnectorPunctuation",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IDGuard",
			pos:  position{line: 1523, col: 1, offset: 36661},
			expr: &choiceExpr{
				pos: position{line: 1524, col: 5, offset: 36673},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1524, col: 5, offset: 36673},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1525, col: 5, offset: 36692},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 5, offset: 36708},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1527, col: 5, offset: 36716},
						name: "Infinity",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Time",
			pos:  position{line: 1529, col: 1, offset: 36726},
			expr: &actionExpr{
				pos: position{line: 1530, col: 5, offset: 36735},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1530, col: 5, offset: 36735},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1530, col: 5, offset: 36735},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1530, col: 14, offset: 36744},
							val:        "T",
							ignoreCase: false,
							want:       "\"T\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1530, col: 18, offset: 36748},
							name: "FullTime",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FullDate",
			pos:  position{line: 1534, col: 1, offset: 36824},
			expr: &seqExpr{
				pos: position{line: 1534, col: 12, offset: 36835},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1534, col: 12, offset: 36835},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1534, col: 15, offset: 36838},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1534, col: 19, offset: 36842},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1534, col: 22, offset: 36845},
						val:        "-",
						ignoreCase: false,
						want:       "\"-\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1534, col: 26, offset: 36849},
						name: "D2",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "D4",
			pos:  position{line: 1536, col: 1, offset: 36853},
			expr: &seqExpr{
				pos: position{line: 1536, col: 6, offset: 36858},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1536, col: 6, offset: 36858},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1536, col: 11, offset: 36863},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1536, col: 16, offset: 36868},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1536, col: 21, offset: 36873},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "D2",
			pos:  position{line: 1537, col: 1, offset: 36879},
			expr: &seqExpr{
				pos: position{line: 1537, col: 6, offset: 36884},
				exprs: []any{
					&charClassMatcher{
						pos:        position{line: 1537, col: 6, offset: 36884},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1537, col: 11, offset: 36889},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FullTime",
			pos:  position{line: 1539, col: 1, offset: 36896},
			expr: &seqExpr{
				pos: position{line: 1539, col: 12, offset: 36907},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1539, col: 12, offset: 36907},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1539, col: 24, offset: 36919},
						name: "TimeOffset",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PartialTime",
			pos:  position{line: 1541, col: 1, offset: 36931},
			expr: &seqExpr{
				pos: position{line: 1541, col: 15, offset: 36945},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1541, col: 15, offset: 36945},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1541, col: 18, offset: 36948},
						val:        ":",
						ignoreCase: false,
						want:       "\":\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1541, col: 22, offset: 36952},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1541, col: 25, offset: 36955},
						val:        ":",
						ignoreCase: false,
						want:       "\":\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1541, col: 29, offset: 36959},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1541, col: 32, offset: 36962},
						expr: &seqExpr{
							pos: position{line: 1541, col: 33, offset: 36963},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1541, col: 33, offset: 36963},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 1541, col: 37, offset: 36967},
									expr: &charClassMatcher{
										pos:        position{line: 1541, col: 37, offset: 36967},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1543, col: 1, offset: 36977},
			expr: &choiceExpr{
				pos: position{line: 1544, col: 5, offset: 36992},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1544, col: 5, offset: 36992},
						val:        "Z",
						ignoreCase: false,
						want:       "\"Z\"",
					},
					&seqExpr{
						pos: position{line: 1545, col: 5, offset: 37000},
						exprs: []any{
							&choiceExpr{
								pos: position{line: 1545, col: 6, offset: 37001},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 1545, col: 6, offset: 37001},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 1545, col: 12, offset: 37007},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1545, col: 17, offset: 37012},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1545, col: 20, offset: 37015},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&ruleRefExpr{
								pos:  position{line: 1545, col: 24, offset: 37019},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1545, col: 27, offset: 37022},
								expr: &seqExpr{
									pos: position{line: 1545, col: 28, offset: 37023},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 1545, col: 28, offset: 37023},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 1545, col: 32, offset: 37027},
											expr: &charClassMatcher{
												pos:        position{line: 1545, col: 32, offset: 37027},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Duration",
			pos:  position{line: 1547, col: 1, offset: 37037},
			expr: &actionExpr{
				pos: position{line: 1548, col: 5, offset: 37050},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 5, offset: 37050},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 1548, col: 5, offset: 37050},
							expr: &litMatcher{
								pos:        position{line: 1548, col: 5, offset: 37050},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1548, col: 10, offset: 37055},
							expr: &seqExpr{
								pos: position{line: 1548, col: 11, offset: 37056},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 1548, col: 11, offset: 37056},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1548, col: 19, offset: 37064},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Decimal",
			pos:  position{line: 1552, col: 1, offset: 37146},
			expr: &seqExpr{
				pos: position{line: 1552, col: 11, offset: 37156},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 1552, col: 11, offset: 37156},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1552, col: 16, offset: 37161},
						expr: &seqExpr{
							pos: position{line: 1552, col: 17, offset: 37162},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1552, col: 17, offset: 37162},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1552, col: 21, offset: 37166},
									name: "UInt",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1554, col: 1, offset: 37174},
			expr: &choiceExpr{
				pos: position{line: 1555, col: 5, offset: 37187},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1555, col: 5, offset: 37187},
						val:        "ns",
						ignoreCase: false,
						want:       "\"ns\"",
					},
					&litMatcher{
						pos:        position{line: 1556, col: 5, offset: 37196},
						val:        "us",
						ignoreCase: false,
						want:       "\"us\"",
					},
					&litMatcher{
						pos:        position{line: 1557, col: 5, offset: 37205},
						val:        "ms",
						ignoreCase: false,
						want:       "\"ms\"",
					},
					&litMatcher{
						pos:        position{line: 1558, col: 5, offset: 37214},
						val:        "s",
						ignoreCase: false,
						want:       "\"s\"",
					},
					&litMatcher{
						pos:        position{line: 1559, col: 5, offset: 37222},
						val:        "m",
						ignoreCase: false,
						want:       "\"m\"",
					},
					&litMatcher{
						pos:        position{line: 1560, col: 5, offset: 37230},
						val:        "h",
						ignoreCase: false,
						want:       "\"h\"",
					},
					&litMatcher{
						pos:        position{line: 1561, col: 5, offset: 37238},
						val:        "d",
						ignoreCase: false,
						want:       "\"d\"",
					},
					&litMatcher{
						pos:        position{line: 1562, col: 5, offset: 37246},
						val:        "w",
						ignoreCase: false,
						want:       "\"w\"",
					},
					&litMatcher{
						pos:        position{line: 1563, col: 5, offset: 37254},
						val:        "y",
						ignoreCase: false,
						want:       "\"y\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IP",
			pos:  position{line: 1565, col: 1, offset: 37259},
			expr: &actionExpr{
				pos: position{line: 1566, col: 5, offset: 37266},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 5, offset: 37266},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1566, col: 5, offset: 37266},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1566, col: 10, offset: 37271},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1566, col: 14, offset: 37275},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1566, col: 19, offset: 37280},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1566, col: 23, offset: 37284},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1566, col: 28, offset: 37289},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1566, col: 32, offset: 37293},
							name: "UInt",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IP6",
			pos:  position{line: 1568, col: 1, offset: 37330},
			expr: &actionExpr{
				pos: position{line: 1569, col: 5, offset: 37338},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1569, col: 5, offset: 37338},
					exprs: []any{
						&notExpr{
							pos: position{line: 1569, col: 5, offset: 37338},
							expr: &seqExpr{
								pos: position{line: 1569, col: 7, offset: 37340},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 1569, col: 7, offset: 37340},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1569, col: 11, offset: 37344},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
									&ruleRefExpr{
										pos:  position{line: 1569, col: 15, offset: 37348},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1569, col: 19, offset: 37352},
										expr: &choiceExpr{
											pos: position{line: 1569, col: 21, offset: 37354},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 1569, col: 21, offset: 37354},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1569, col: 32, offset: 37365},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 38, offset: 37371},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1569, col: 40, offset: 37373},
								name: "IP6Variations",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1573, col: 1, offset: 37537},
			expr: &choiceExpr{
				pos: position{line: 1574, col: 5, offset: 37555},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1574, col: 5, offset: 37555},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1574, col: 5, offset: 37555},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1574, col: 5, offset: 37555},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1574, col: 7, offset: 37557},
										expr: &ruleRefExpr{
											pos:  position{line: 1574, col: 7, offset: 37557},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1574, col: 17, offset: 37567},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1574, col: 19, offset: 37569},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1577, col: 5, offset: 37633},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1577, col: 5, offset: 37633},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1577, col: 5, offset: 37633},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1577, col: 7, offset: 37635},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1577, col: 11, offset: 37639},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1577, col: 13, offset: 37641},
										expr: &ruleRefExpr{
											pos:  position{line: 1577, col: 13, offset: 37641},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1577, col: 23, offset: 37651},
									val:        "::",
									ignoreCase: false,
									want:       "\"::\"",
								},
								&labeledExpr{
									pos:   position{line: 1577, col: 28, offset: 37656},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1577, col: 30, offset: 37658},
										expr: &ruleRefExpr{
											pos:  position{line: 1577, col: 30, offset: 37658},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1577, col: 40, offset: 37668},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1577, col: 42, offset: 37670},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1580, col: 5, offset: 37769},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1580, col: 5, offset: 37769},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1580, col: 5, offset: 37769},
									val:        "::",
									ignoreCase: false,
									want:       "\"::\"",
								},
								&labeledExpr{
									pos:   position{line: 1580, col: 10, offset: 37774},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1580, col: 12, offset: 37776},
										expr: &ruleRefExpr{
											pos:  position{line: 1580, col: 12, offset: 37776},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1580, col: 22, offset: 37786},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1580, col: 24, offset: 37788},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1583, col: 5, offset: 37859},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1583, col: 5, offset: 37859},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 1583, col: 5, offset: 37859},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1583, col: 7, offset: 37861},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1583, col: 11, offset: 37865},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1583, col: 13, offset: 37867},
										expr: &ruleRefExpr{
											pos:  position{line: 1583, col: 13, offset: 37867},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1583, col: 23, offset: 37877},
									val:        "::",
									ignoreCase: false,
									want:       "\"::\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1586, col: 5, offset: 37945},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1586, col: 5, offset: 37945},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1590, col: 1, offset: 37982},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 5, offset: 37994},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1591, col: 5, offset: 37994},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1592, col: 5, offset: 38001},
						name: "Hex",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ColonHex",
			pos:  position{line: 1594, col: 1, offset: 38006},
			expr: &actionExpr{
				pos: position{line: 1594, col: 12, offset: 38017},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1594, col: 12, offset: 38017},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1594, col: 12, offset: 38017},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 16, offset: 38021},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 18, offset: 38023},
								name: "Hex",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HexColon",
			pos:  position{line: 1596, col: 1, offset: 38061},
			expr: &actionExpr{
				pos: position{line: 1596, col: 12, offset: 38072},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 12, offset: 38072},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1596, col: 12, offset: 38072},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 14, offset: 38074},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1596, col: 18, offset: 38078},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IP4Net",
			pos:  position{line: 1598, col: 1, offset: 38116},
			expr: &actionExpr{
				pos: position{line: 1599, col: 5, offset: 38127},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1599, col: 5, offset: 38127},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1599, col: 5, offset: 38127},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 7, offset: 38129},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1599, col: 10, offset: 38132},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 14, offset: 38136},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 16, offset: 38138},
								name: "UIntString",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IP6Net",
			pos:  position{line: 1603, col: 1, offset: 38206},
			expr: &actionExpr{
				pos: position{line: 1604, col: 5, offset: 38217},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1604, col: 5, offset: 38217},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1604, col: 5, offset: 38217},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1604, col: 7, offset: 38219},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1604, col: 11, offset: 38223},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 15, offset: 38227},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1604, col: 17, offset: 38229},
								name: "UIntString",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UInt",
			pos:  position{line: 1608, col: 1, offset: 38297},
			expr: &actionExpr{
				pos: position{line: 1609, col: 4, offset: 38305},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1609, col: 4, offset: 38305},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1609, col: 6, offset: 38307},
						name: "UIntString",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IntString",
			pos:  position{line: 1611, col: 1, offset: 38347},
			expr: &choiceExpr{
				pos: position{line: 1612, col: 5, offset: 38361},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1612, col: 5, offset: 38361},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1613, col: 5, offset: 38376},
						name: "MinusIntString",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UIntString",
			pos:  position{line: 1615, col: 1, offset: 38392},
			expr: &actionExpr{
				pos: position{line: 1615, col: 14, offset: 38405},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1615, col: 14, offset: 38405},
					expr: &charClassMatcher{
						pos:        position{line: 1615, col: 14, offset: 38405},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1617, col: 1, offset: 38444},
			expr: &actionExpr{
				pos: position{line: 1618, col: 5, offset: 38463},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1618, col: 5, offset: 38463},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1618, col: 5, offset: 38463},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1618, col: 9, offset: 38467},
							name: "UIntString",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FloatString",
			pos:  position{line: 1620, col: 1, offset: 38510},
			expr: &choiceExpr{
				pos: position{line: 1621, col: 5, offset: 38526},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1621, col: 5, offset: 38526},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1621, col: 5, offset: 38526},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 1621, col: 5, offset: 38526},
									expr: &litMatcher{
										pos:        position{line: 1621, col: 5, offset: 38526},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1621, col: 10, offset: 38531},
									expr: &charClassMatcher{
										pos:        position{line: 1621, col: 10, offset: 38531},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1621, col: 17, offset: 38538},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1621, col: 21, offset: 38542},
									expr: &charClassMatcher{
										pos:        position{line: 1621, col: 21, offset: 38542},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1621, col: 28, offset: 38549},
									expr: &ruleRefExpr{
										pos:  position{line: 1621, col: 28, offset: 38549},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1622, col: 5, offset: 38598},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1622, col: 5, offset: 38598},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 1622, col: 5, offset: 38598},
									expr: &litMatcher{
										pos:        position{line: 1622, col: 5, offset: 38598},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1622, col: 10, offset: 38603},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 1622, col: 14, offset: 38607},
									expr: &charClassMatcher{
										pos:        position{line: 1622, col: 14, offset: 38607},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1622, col: 21, offset: 38614},
									expr: &ruleRefExpr{
										pos:  position{line: 1622, col: 21, offset: 38614},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1623, col: 5, offset: 38663},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1623, col: 6, offset: 38664},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 1623, col: 6, offset: 38664},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1623, col: 12, offset: 38670},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1626, col: 1, offset: 38713},
			expr: &seqExpr{
				pos: position{line: 1626, col: 16, offset: 38728},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1626, col: 16, offset: 38728},
						val:        "e",
						ignoreCase: true,
						want:       "\"e\"i",
					},
					&zeroOrOneExpr{
						pos: position{line: 1626, col: 21, offset: 38733},
						expr: &charClassMatcher{
							pos:        position{line: 1626, col: 21, offset: 38733},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1626, col: 27, offset: 38739},
						name: "UIntString",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NaN",
			pos:  position{line: 1628, col: 1, offset: 38751},
			expr: &litMatcher{
				pos:        position{line: 1628, col: 7, offset: 38757},
				val:        "NaN",
				ignoreCase: false,
				want:       "\"NaN\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Infinity",
			pos:  position{line: 1630, col: 1, offset: 38764},
			expr: &seqExpr{
				pos: position{line: 1630, col: 12, offset: 38775},
				exprs: []any{
					&zeroOrOneExpr{
						pos: position{line: 1630, col: 12, offset: 38775},
						expr: &choiceExpr{
							pos: position{line: 1630, col: 13, offset: 38776},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 1630, col: 13, offset: 38776},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&litMatcher{
									pos:        position{line: 1630, col: 19, offset: 38782},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1630, col: 25, offset: 38788},
						val:        "Inf",
						ignoreCase: false,
						want:       "\"Inf\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Hex",
			pos:  position{line: 1632, col: 1, offset: 38795},
			expr: &actionExpr{
				pos: position{line: 1632, col: 7, offset: 38801},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1632, col: 7, offset: 38801},
					expr: &ruleRefExpr{
						pos:  position{line: 1632, col: 7, offset: 38801},
						name: "HexDigit",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HexDigit",
			pos:  position{line: 1634, col: 1, offset: 38843},
			expr: &charClassMatcher{
				pos:        position{line: 1634, col: 12, offset: 38854},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "QuotedString",
			pos:  position{line: 1636, col: 1, offset: 38867},
			expr: &choiceExpr{
				pos: position{line: 1637, col: 5, offset: 38884},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1637, col: 5, offset: 38884},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1637, col: 5, offset: 38884},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1637, col: 5, offset: 38884},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 1637, col: 9, offset: 38888},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1637, col: 11, offset: 38890},
										expr: &ruleRefExpr{
											pos:  position{line: 1637, col: 11, offset: 38890},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1637, col: 29, offset: 38908},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1638, col: 5, offset: 38945},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1638, col: 5, offset: 38945},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1638, col: 5, offset: 38945},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&labeledExpr{
									pos:   position{line: 1638, col: 9, offset: 38949},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1638, col: 11, offset: 38951},
										expr: &ruleRefExpr{
											pos:  position{line: 1638, col: 11, offset: 38951},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1638, col: 29, offset: 38969},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1640, col: 1, offset: 39003},
			expr: &choiceExpr{
				pos: position{line: 1641, col: 5, offset: 39024},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1641, col: 5, offset: 39024},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1641, col: 5, offset: 39024},
							exprs: []any{
								&notExpr{
									pos: position{line: 1641, col: 5, offset: 39024},
									expr: &choiceExpr{
										pos: position{line: 1641, col: 7, offset: 39026},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1641, col: 7, offset: 39026},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1641, col: 13, offset: 39032},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1641, col: 26, offset: 39045,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1642, col: 5, offset: 39082},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1642, col: 5, offset: 39082},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1642, col: 5, offset: 39082},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1642, col: 10, offset: 39087},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1642, col: 12, offset: 39089},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyWord",
			pos:  position{line: 1644, col: 1, offset: 39123},
			expr: &actionExpr{
				pos: position{line: 1645, col: 5, offset: 39135},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1645, col: 5, offset: 39135},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1645, col: 5, offset: 39135},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1645, col: 10, offset: 39140},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1645, col: 23, offset: 39153},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1645, col: 28, offset: 39158},
								expr: &ruleRefExpr{
									pos:  position{line: 1645, col: 28, offset: 39158},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1647, col: 1, offset: 39220},
			expr: &choiceExpr{
				pos: position{line: 1648, col: 5, offset: 39237},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1648, col: 5, offset: 39237},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1649, col: 5, offset: 39254},
						name: "KeyWordEsc",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1651, col: 1, offset: 39266},
			expr: &choiceExpr{
				pos: position{line: 1652, col: 5, offset: 39282},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1652, col: 5, offset: 39282},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1653, col: 5, offset: 39299},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1655, col: 1, offset: 39306},
			expr: &actionExpr{
				pos: position{line: 1655, col: 16, offset: 39321},
				run: (*parser).callonKeyWordChars1,
				expr: &choiceExpr{
					pos: position{line: 1655, col: 17, offset: 39322},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 1655, col: 17, offset: 39322},
							name: "UnicodeLetter",
						},
						&charClassMatcher{
							pos:        position{line: 1655, col: 33, offset: 39338},
							val:        "[_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1657, col: 1, offset: 39382},
			expr: &actionExpr{
				pos: position{line: 1657, col: 14, offset: 39395},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1657, col: 14, offset: 39395},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1657, col: 14, offset: 39395},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 1657, col: 19, offset: 39400},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1657, col: 22, offset: 39403},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1657, col: 22, offset: 39403},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1657, col: 38, offset: 39419},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1659, col: 1, offset: 39454},
			expr: &actionExpr{
				pos: position{line: 1660, col: 5, offset: 39470},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1660, col: 5, offset: 39470},
					exprs: []any{
						&andExpr{
							pos: position{line: 1660, col: 5, offset: 39470},
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 6, offset: 39471},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1660, col: 22, offset: 39487},
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 23, offset: 39488},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 35, offset: 39500},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 40, offset: 39505},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 50, offset: 39515},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1660, col: 55, offset: 39520},
								expr: &ruleRefExpr{
									pos:  position{line: 1660, col: 55, offset: 39520},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1664, col: 1, offset: 39589},
			expr: &choiceExpr{
				pos: position{line: 1664, col: 19, offset: 39607},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1664, col: 19, offset: 39607},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1664, col: 34, offset: 39622},
						exprs: []any{
							&oneOrMoreExpr{
								pos: position{line: 1664, col: 34, offset: 39622},
								expr: &litMatcher{
									pos:        position{line: 1664, col: 34, offset: 39622},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1664, col: 39, offset: 39627},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1665, col: 1, offset: 39639},
			expr: &seqExpr{
				pos: position{line: 1665, col: 15, offset: 39653},
				exprs: []any{
					&zeroOrMoreExpr{
						pos: position{line: 1665, col: 15, offset: 39653},
						expr: &ruleRefExpr{
							pos:  position{line: 1665, col: 15, offset: 39653},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1665, col: 28, offset: 39666},
						val:        "*",
						ignoreCase: false,
						want:       "\"*\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GlobStart",
			pos:  position{line: 1667, col: 1, offset: 39671},
			expr: &choiceExpr{
				pos: position{line: 1668, col: 5, offset: 39685},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1668, col: 5, offset: 39685},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1669, col: 5, offset: 39702},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1670, col: 5, offset: 39714},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1670, col: 5, offset: 39714},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GlobRest",
			pos:  position{line: 1672, col: 1, offset: 39739},
			expr: &choiceExpr{
				pos: position{line: 1673, col: 5, offset: 39752},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1673, col: 5, offset: 39752},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1674, col: 5, offset: 39766},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1676, col: 1, offset: 39773},
			expr: &actionExpr{
				pos: position{line: 1676, col: 11, offset: 39783},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 11, offset: 39783},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1676, col: 11, offset: 39783},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 16, offset: 39788},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1676, col: 19, offset: 39791},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1676, col: 19, offset: 39791},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1676, col: 32, offset: 39804},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1678, col: 1, offset: 39839},
			expr: &choiceExpr{
				pos: position{line: 1679, col: 5, offset: 39854},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1679, col: 5, offset: 39854},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1679, col: 5, offset: 39854},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1680, col: 5, offset: 39882},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1680, col: 5, offset: 39882},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&charClassMatcher{
						pos:        position{line: 1681, col: 5, offset: 39912},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1683, col: 1, offset: 39918},
			expr: &choiceExpr{
				pos: position{line: 1684, col: 5, offset: 39939},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1684, col: 5, offset: 39939},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1684, col: 5, offset: 39939},
							exprs: []any{
								&notExpr{
									pos: position{line: 1684, col: 5, offset: 39939},
									expr: &choiceExpr{
										pos: position{line: 1684, col: 7, offset: 39941},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 1684, col: 7, offset: 39941},
												val:        "'",
												ignoreCase: false,
												want:       "\"'\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1684, col: 13, offset: 39947},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1684, col: 26, offset: 39960,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1685, col: 5, offset: 39997},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1685, col: 5, offset: 39997},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1685, col: 5, offset: 39997},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1685, col: 10, offset: 40002},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1685, col: 12, offset: 40004},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1687, col: 1, offset: 40038},
			expr: &choiceExpr{
				pos: position{line: 1688, col: 5, offset: 40057},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1688, col: 5, offset: 40057},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1689, col: 5, offset: 40078},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1691, col: 1, offset: 40093},
			expr: &choiceExpr{
				pos: position{line: 1692, col: 5, offset: 40114},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1692, col: 5, offset: 40114},
						val:        "'",
						ignoreCase: false,
						want:       "\"'\"",
					},
					&actionExpr{
						pos: position{line: 1693, col: 5, offset: 40122},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1693, col: 5, offset: 40122},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
					&litMatcher{
						pos:        position{line: 1694, col: 5, offset: 40162},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&actionExpr{
						pos: position{line: 1695, col: 5, offset: 40171},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1695, col: 5, offset: 40171},
							val:        "b",
							ignoreCase: false,
							want:       "\"b\"",
						},
					},
					&actionExpr{
						pos: position{line: 1696, col: 5, offset: 40200},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1696, col: 5, offset: 40200},
							val:        "f",
							ignoreCase: false,
							want:       "\"f\"",
						},
					},
					&actionExpr{
						pos: position{line: 1697, col: 5, offset: 40229},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1697, col: 5, offset: 40229},
							val:        "n",
							ignoreCase: false,
							want:       "\"n\"",
						},
					},
					&actionExpr{
						pos: position{line: 1698, col: 5, offset: 40258},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1698, col: 5, offset: 40258},
							val:        "r",
							ignoreCase: false,
							want:       "\"r\"",
						},
					},
					&actionExpr{
						pos: position{line: 1699, col: 5, offset: 40287},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1699, col: 5, offset: 40287},
							val:        "t",
							ignoreCase: false,
							want:       "\"t\"",
						},
					},
					&actionExpr{
						pos: position{line: 1700, col: 5, offset: 40316},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1700, col: 5, offset: 40316},
							val:        "v",
							ignoreCase: false,
							want:       "\"v\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1702, col: 1, offset: 40342},
			expr: &choiceExpr{
				pos: position{line: 1703, col: 5, offset: 40360},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1703, col: 5, offset: 40360},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1703, col: 5, offset: 40360},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&actionExpr{
						pos: position{line: 1704, col: 5, offset: 40388},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1704, col: 5, offset: 40388},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&charClassMatcher{
						pos:        position{line: 1705, col: 5, offset: 40416},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1707, col: 1, offset: 40422},
			expr: &choiceExpr{
				pos: position{line: 1708, col: 5, offset: 40440},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1708, col: 5, offset: 40440},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1708, col: 5, offset: 40440},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1708, col: 5, offset: 40440},
									val:        "u",
									ignoreCase: false,
									want:       "\"u\"",
								},
								&labeledExpr{
									pos:   position{line: 1708, col: 9, offset: 40444},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1708, col: 16, offset: 40451},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1708, col: 16, offset: 40451},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1708, col: 25, offset: 40460},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1708, col: 34, offset: 40469},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1708, col: 43, offset: 40478},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1711, col: 5, offset: 40541},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1711, col: 5, offset: 40541},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 1711, col: 5, offset: 40541},
									val:        "u",
									ignoreCase: false,
									want:       "\"u\"",
								},
								&litMatcher{
									pos:        position{line: 1711, col: 9, offset: 40545},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&labeledExpr{
									pos:   position{line: 1711, col: 13, offset: 40549},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1711, col: 20, offset: 40556},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1711, col: 20, offset: 40556},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1711, col: 29, offset: 40565},
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 29, offset: 40565},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1711, col: 39, offset: 40575},
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 39, offset: 40575},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1711, col: 49, offset: 40585},
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 49, offset: 40585},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1711, col: 59, offset: 40595},
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 59, offset: 40595},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1711, col: 69, offset: 40605},
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 69, offset: 40605},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1711, col: 80, offset: 40616},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1715, col: 1, offset: 40670},
			expr: &actionExpr{
				pos: position{line: 1716, col: 5, offset: 40688},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 5, offset: 40688},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 1716, col: 5, offset: 40688},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 9, offset: 40692},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 14, offset: 40697},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1716, col: 25, offset: 40708},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&notExpr{
							pos: position{line: 1716, col: 29, offset: 40712},
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 30, offset: 40713},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1718, col: 1, offset: 40748},
			expr: &actionExpr{
				pos: position{line: 1719, col: 5, offset: 40763},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1719, col: 5, offset: 40763},
					expr: &choiceExpr{
						pos: position{line: 1719, col: 6, offset: 40764},
						alternatives: []any{
							&charClassMatcher{
								pos:        position{line: 1719, col: 6, offset: 40764},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1719, col: 15, offset: 40773},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 1719, col: 15, offset: 40773},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
									&anyMatcher{
										line: 1719, col: 20, offset: 40778,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1721, col: 1, offset: 40814},
			expr: &charClassMatcher{
				pos:        position{line: 1722, col: 5, offset: 40830},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "_",
			pos:  position{line: 1724, col: 1, offset: 40845},
			expr: &oneOrMoreExpr{
				pos: position{line: 1724, col: 5, offset: 40849},
				expr: &ruleRefExpr{
					pos:  position{line: 1724, col: 5, offset: 40849},
					name: "AnySpace",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "__",
			pos:  position{line: 1726, col: 1, offset: 40860},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1726, col: 6, offset: 40865},
				expr: &ruleRefExpr{
					pos:  position{line: 1726, col: 6, offset: 40865},
					name: "AnySpace",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AnySpace",
			pos:  position{line: 1728, col: 1, offset: 40876},
			expr: &choiceExpr{
				pos: position{line: 1729, col: 5, offset: 40889},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1729, col: 5, offset: 40889},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1730, col: 5, offset: 40904},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1731, col: 5, offset: 40923},
						name: "Comment",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeLetter",
			pos:  position{line: 1733, col: 1, offset: 40932},
			expr: &choiceExpr{
				pos: position{line: 1734, col: 5, offset: 40950},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1734, col: 5, offset: 40950},
						name: "Lu",
					},
					&ruleRefExpr{
						pos:  position{line: 1735, col: 5, offset: 40957},
						name: "Ll",
					},
					&ruleRefExpr{
						pos:  position{line: 1736, col: 5, offset: 40964},
						name: "Lt",
					},
					&ruleRefExpr{
						pos:  position{line: 1737, col: 5, offset: 40971},
						name: "Lm",
					},
					&ruleRefExpr{
						pos:  position{line: 1738, col: 5, offset: 40978},
						name: "Lo",
					},
					&ruleRefExpr{
						pos:  position{line: 1739, col: 5, offset: 40985},
						name: "Nl",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeCombiningMark",
			pos:  position{line: 1741, col: 1, offset: 40989},
			expr: &choiceExpr{
				pos: position{line: 1742, col: 5, offset: 41014},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1742, col: 5, offset: 41014},
						name: "Mn",
					},
					&ruleRefExpr{
						pos:  position{line: 1743, col: 5, offset: 41021},
						name: "Mc",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeDigit",
			pos:  position{line: 1745, col: 1, offset: 41025},
			expr: &ruleRefExpr{
				pos:  position{line: 1746, col: 5, offset: 41042},
				name: "Nd",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeConnectorPunctuation",
			pos:  position{line: 1748, col: 1, offset: 41046},
			expr: &ruleRefExpr{
				pos:  position{line: 1749, col: 5, offset: 41078},
				name: "Pc",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Ll",
			pos:  position{line: 1755, col: 1, offset: 41259},
			expr: &charClassMatcher{
				pos:        position{line: 1755, col: 6, offset: 41264},
				val:        "[\\u0061-\\u007A\\u00B5\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137-\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148-\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C-\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA-\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9-\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC-\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF-\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F-\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0-\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB-\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE-\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0560-\\u0588\\u10D0-\\u10FA\\u10FD-\\u10FF\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6-\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FC7\\u1FD0-\\u1FD3\\u1FD6-\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6-\\u1FF7\\u210A\\u210E-\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C-\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65-\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73-\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3-\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7AF\\uA7B5\\uA7B7\\uA7B9\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]",
				chars:      []rune{'µ', 'ā', 'ă', 'ą', 'ć', 'ĉ', 'ċ', 'č', 'ď', 'đ', 'ē', 'ĕ', 'ė', 'ę', 'ě', 'ĝ', 'ğ', 'ġ', 'ģ', 'ĥ', 'ħ', 'ĩ', 'ī', 'ĭ', 'į', 'ı', 'ĳ', 'ĵ', 'ĺ', 'ļ', 'ľ', 'ŀ', 'ł', 'ń', 'ņ', 'ŋ', 'ō', 'ŏ', 'ő', 'œ', 'ŕ', 'ŗ', 'ř', 'ś', 'ŝ', 'ş', 'š', 'ţ', 'ť', 'ŧ', 'ũ', 'ū', 'ŭ', 'ů', 'ű', 'ų', 'ŵ', 'ŷ', 'ź', 'ż', 'ƃ', 'ƅ', 'ƈ', 'ƒ', 'ƕ', 'ƞ', 'ơ', 'ƣ', 'ƥ', 'ƨ', 'ƭ', 'ư', 'ƴ', 'ƶ', 'ǆ', 'ǉ', 'ǌ', 'ǎ', 'ǐ', 'ǒ', 'ǔ', 'ǖ', 'ǘ', 'ǚ', 'ǟ', 'ǡ', 'ǣ', 'ǥ', 'ǧ', 'ǩ', 'ǫ', 'ǭ', 'ǳ', 'ǵ', 'ǹ', 'ǻ', 'ǽ', 'ǿ', 'ȁ', 'ȃ', 'ȅ', 'ȇ', 'ȉ', 'ȋ', 'ȍ', 'ȏ', 'ȑ', 'ȓ', 'ȕ', 'ȗ', 'ș', 'ț', 'ȝ', 'ȟ', 'ȡ', 'ȣ', 'ȥ', 'ȧ', 'ȩ', 'ȫ', 'ȭ', 'ȯ', 'ȱ', 'ȼ', 'ɂ', 'ɇ', 'ɉ', 'ɋ', 'ɍ', 'ͱ', 'ͳ', 'ͷ', 'ΐ', 'ϙ', 'ϛ', 'ϝ', 'ϟ', 'ϡ', 'ϣ', 'ϥ', 'ϧ', 'ϩ', 'ϫ', 'ϭ', 'ϵ', 'ϸ', 'ѡ', 'ѣ', 'ѥ', 'ѧ', 'ѩ', 'ѫ', 'ѭ', 'ѯ', 'ѱ', 'ѳ', 'ѵ', 'ѷ', 'ѹ', 'ѻ', 'ѽ', 'ѿ', 'ҁ', 'ҋ', 'ҍ', 'ҏ', 'ґ', 'ғ', 'ҕ', 'җ', 'ҙ', 'қ', 'ҝ', 'ҟ', 'ҡ', 'ң', 'ҥ', 'ҧ', 'ҩ', 'ҫ', 'ҭ', 'ү', 'ұ', 'ҳ', 'ҵ', 'ҷ', 'ҹ', 'һ', 'ҽ', 'ҿ', 'ӂ', 'ӄ', 'ӆ', 'ӈ', 'ӊ', 'ӌ', 'ӑ', 'ӓ', 'ӕ', 'ӗ', 'ә', 'ӛ', 'ӝ', 'ӟ', 'ӡ', 'ӣ', 'ӥ', 'ӧ', 'ө', 'ӫ', 'ӭ', 'ӯ', 'ӱ', 'ӳ', 'ӵ', 'ӷ', 'ӹ', 'ӻ', 'ӽ', 'ӿ', 'ԁ', 'ԃ', 'ԅ', 'ԇ', 'ԉ', 'ԋ', 'ԍ', 'ԏ', 'ԑ', 'ԓ', 'ԕ', 'ԗ', 'ԙ', 'ԛ', 'ԝ', 'ԟ', 'ԡ', 'ԣ', 'ԥ', 'ԧ', 'ԩ', 'ԫ', 'ԭ', 'ԯ', 'ḁ', 'ḃ', 'ḅ', 'ḇ', 'ḉ', 'ḋ', 'ḍ', 'ḏ', 'ḑ', 'ḓ', 'ḕ', 'ḗ', 'ḙ', 'ḛ', 'ḝ', 'ḟ', 'ḡ', 'ḣ', 'ḥ', 'ḧ', 'ḩ', 'ḫ', 'ḭ', 'ḯ', 'ḱ', 'ḳ', 'ḵ', 'ḷ', 'ḹ', 'ḻ', 'ḽ', 'ḿ', 'ṁ', 'ṃ', 'ṅ', 'ṇ', 'ṉ', 'ṋ', 'ṍ', 'ṏ', 'ṑ', 'ṓ', 'ṕ', 'ṗ', 'ṙ', 'ṛ', 'ṝ', 'ṟ', 'ṡ', 'ṣ', 'ṥ', 'ṧ', 'ṩ', 'ṫ', 'ṭ', 'ṯ', 'ṱ', 'ṳ', 'ṵ', 'ṷ', 'ṹ', 'ṻ', 'ṽ', 'ṿ', 'ẁ', 'ẃ', 'ẅ', 'ẇ', 'ẉ', 'ẋ', 'ẍ', 'ẏ', 'ẑ', 'ẓ', 'ẟ', 'ạ', 'ả', 'ấ', 'ầ', 'ẩ', 'ẫ', 'ậ', 'ắ', 'ằ', 'ẳ', 'ẵ', 'ặ', 'ẹ', 'ẻ', 'ẽ', 'ế', 'ề', 'ể', 'ễ', 'ệ', 'ỉ', 'ị', 'ọ', 'ỏ', 'ố', 'ồ', 'ổ', 'ỗ', 'ộ', 'ớ', 'ờ', 'ở', 'ỡ', 'ợ', 'ụ', 'ủ', 'ứ', 'ừ', 'ử', 'ữ', 'ự', 'ỳ', 'ỵ', 'ỷ', 'ỹ', 'ỻ', 'ỽ', 'ι', 'ℊ', 'ℓ', 'ℯ', 'ℴ', 'ℹ', 'ⅎ', 'ↄ', 'ⱡ', 'ⱨ', 'ⱪ', 'ⱬ', 'ⱱ', 'ⲁ', 'ⲃ', 'ⲅ', 'ⲇ', 'ⲉ', 'ⲋ', 'ⲍ', 'ⲏ', 'ⲑ', 'ⲓ', 'ⲕ', 'ⲗ', 'ⲙ', 'ⲛ', 'ⲝ', 'ⲟ', 'ⲡ', 'ⲣ', 'ⲥ', 'ⲧ', 'ⲩ', 'ⲫ', 'ⲭ', 'ⲯ', 'ⲱ', 'ⲳ', 'ⲵ', 'ⲷ', 'ⲹ', 'ⲻ', 'ⲽ', 'ⲿ', 'ⳁ', 'ⳃ', 'ⳅ', 'ⳇ', 'ⳉ', 'ⳋ', 'ⳍ', 'ⳏ', 'ⳑ', 'ⳓ', 'ⳕ', 'ⳗ', 'ⳙ', 'ⳛ', 'ⳝ', 'ⳟ', 'ⳡ', 'ⳬ', 'ⳮ', 'ⳳ', 'ⴧ', 'ⴭ', 'ꙁ', 'ꙃ', 'ꙅ', 'ꙇ', 'ꙉ', 'ꙋ', 'ꙍ', 'ꙏ', 'ꙑ', 'ꙓ', 'ꙕ', 'ꙗ', 'ꙙ', 'ꙛ', 'ꙝ', 'ꙟ', 'ꙡ', 'ꙣ', 'ꙥ', 'ꙧ', 'ꙩ', 'ꙫ', 'ꙭ', 'ꚁ', 'ꚃ', 'ꚅ', 'ꚇ', 'ꚉ', 'ꚋ', 'ꚍ', 'ꚏ', 'ꚑ', 'ꚓ', 'ꚕ', 'ꚗ', 'ꚙ', 'ꚛ', 'ꜣ', 'ꜥ', 'ꜧ', 'ꜩ', 'ꜫ', 'ꜭ', 'ꜳ', 'ꜵ', 'ꜷ', 'ꜹ', 'ꜻ', 'ꜽ', 'ꜿ', 'ꝁ', 'ꝃ', 'ꝅ', 'ꝇ', 'ꝉ', 'ꝋ', 'ꝍ', 'ꝏ', 'ꝑ', 'ꝓ', 'ꝕ', 'ꝗ', 'ꝙ', 'ꝛ', 'ꝝ', 'ꝟ', 'ꝡ', 'ꝣ', 'ꝥ', 'ꝧ', 'ꝩ', 'ꝫ', 'ꝭ', 'ꝯ', 'ꝺ', 'ꝼ', 'ꝿ', 'ꞁ', 'ꞃ', 'ꞅ', 'ꞇ', 'ꞌ', 'ꞎ', 'ꞑ', 'ꞗ', 'ꞙ', 'ꞛ', 'ꞝ', 'ꞟ', 'ꞡ', 'ꞣ', 'ꞥ', 'ꞧ', 'ꞩ', 'ꞯ', 'ꞵ', 'ꞷ', 'ꞹ', 'ꟺ'},
				ranges:     []rune{'a', 'z', 'ß', 'ö', 'ø', 'ÿ', 'ķ', 'ĸ', 'ň', 'ŉ', 'ž', 'ƀ', 'ƌ', 'ƍ', 'ƙ', 'ƛ', 'ƪ', 'ƫ', 'ƹ', 'ƺ', 'ƽ', 'ƿ', 'ǜ', 'ǝ', 'ǯ', 'ǰ', 'ȳ', 'ȹ', 'ȿ', 'ɀ', 'ɏ', 'ʓ', 'ʕ', 'ʯ', 'ͻ', 'ͽ', 'ά', 'ώ', 'ϐ', 'ϑ', 'ϕ', 'ϗ', 'ϯ', 'ϳ', 'ϻ', 'ϼ', 'а', 'џ', 'ӎ', 'ӏ', 'ՠ', 'ֈ', 'ა', 'ჺ', 'ჽ', 'ჿ', 'ᏸ', 'ᏽ', 'ᲀ', 'ᲈ', 'ᴀ', 'ᴫ', 'ᵫ', 'ᵷ', 'ᵹ', 'ᶚ', 'ẕ', 'ẝ', 'ỿ', 'ἇ', 'ἐ', 'ἕ', 'ἠ', 'ἧ', 'ἰ', 'ἷ', 'ὀ', 'ὅ', 'ὐ', 'ὗ', 'ὠ', 'ὧ', 'ὰ', 'ώ', 'ᾀ', 'ᾇ', 'ᾐ', 'ᾗ', 'ᾠ', 'ᾧ', 'ᾰ', 'ᾴ', 'ᾶ', 'ᾷ', 'ῂ', 'ῄ', 'ῆ', 'ῇ', 'ῐ', 'ΐ', 'ῖ', 'ῗ', 'ῠ', 'ῧ', 'ῲ', 'ῴ', 'ῶ', 'ῷ', 'ℎ', 'ℏ', 'ℼ', 'ℽ', 'ⅆ', 'ⅉ', 'ⰰ', 'ⱞ', 'ⱥ', 'ⱦ', 'ⱳ', 'ⱴ', 'ⱶ', 'ⱻ', 'ⳣ', 'ⳤ', 'ⴀ', 'ⴥ', 'ꜯ', 'ꜱ', 'ꝱ', 'ꝸ', 'ꞓ', 'ꞕ', 'ꬰ', 'ꭚ', 'ꭠ', 'ꭥ', 'ꭰ', 'ꮿ', 'ﬀ', 'ﬆ', 'ﬓ', 'ﬗ', 'ａ', 'ｚ'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lm",
			pos:  position{line: 1758, col: 1, offset: 45416},
			expr: &charClassMatcher{
				pos:        position{line: 1758, col: 6, offset: 45421},
				val:        "[\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5-\\u06E6\\u07F4-\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C-\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D-\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C-\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8-\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3-\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E-\\uFF9F]",
				chars:      []rune{'ˬ', 'ˮ', 'ʹ', 'ͺ', 'ՙ', 'ـ', 'ߺ', 'ࠚ', 'ࠤ', 'ࠨ', 'ॱ', 'ๆ', 'ໆ', 'ჼ', 'ៗ', 'ᡃ', 'ᪧ', 'ᵸ', 'ⁱ', 'ⁿ', 'ⵯ', 'ⸯ', '々', '〻', 'ꀕ', 'ꘌ', 'ꙿ', 'ꝰ', 'ꞈ', 'ꧏ', 'ꧦ', 'ꩰ', 'ꫝ', 'ｰ'},
				ranges:     []rune{'ʰ', 'ˁ', 'ˆ', 'ˑ', 'ˠ', 'ˤ', 'ۥ', 'ۦ', 'ߴ', 'ߵ', 'ᱸ', 'ᱽ', 'ᴬ', 'ᵪ', 'ᶛ', 'ᶿ', 'ₐ', 'ₜ', 'ⱼ', 'ⱽ', '〱', '〵', 'ゝ', 'ゞ', 'ー', 'ヾ', 'ꓸ', 'ꓽ', 'ꚜ', 'ꚝ', 'ꜗ', 'ꜟ', 'ꟸ', 'ꟹ', 'ꫳ', 'ꫴ', 'ꭜ', 'ꭟ', 'ﾞ', 'ﾟ'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lo",
			pos:  position{line: 1761, col: 1, offset: 45906},
			expr: &charClassMatcher{
				pos:        position{line: 1761, col: 6, offset: 45911},
				val:        "[\\u00AA\\u00BA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60-\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0CF1-\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5-\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A-\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD-\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]",
				chars:      []rune{'ª', 'º', 'ƻ', 'ʔ', 'ە', 'ۿ', 'ܐ', 'ޱ', 'ऽ', 'ॐ', 'ল', 'ঽ', 'ৎ', 'ৼ', 'ਫ਼', 'ઽ', 'ૐ', 'ૹ', 'ଽ', 'ୱ', 'ஃ', 'ஜ', 'ௐ', 'ఽ', 'ಀ', 'ಽ', 'ೞ', 'ഽ', 'ൎ', 'ල', 'ຄ', 'ຊ', 'ຍ', 'ລ', 'ວ', 'ຽ', 'ༀ', 'ဿ', 'ၡ', 'ႎ', 'ቘ', 'ዀ', 'ៜ', 'ᢪ', '〆', '〼', 'ゟ', 'ヿ', 'ꙮ', 'ꞏ', 'ꟷ', 'ꣻ', 'ꩺ', 'ꪱ', 'ꫀ', 'ꫂ', 'ꫲ', 'יִ', 'מּ'},
				ranges:     []rune{'ǀ', 'ǃ', 'א', 'ת', 'ׯ', 'ײ', 'ؠ', 'ؿ', 'ف', 'ي', 'ٮ', 'ٯ', 'ٱ', 'ۓ', 'ۮ', 'ۯ', 'ۺ', 'ۼ', 'ܒ', 'ܯ', 'ݍ', 'ޥ', 'ߊ', 'ߪ', 'ࠀ', 'ࠕ', 'ࡀ', 'ࡘ', 'ࡠ', 'ࡪ', 'ࢠ', 'ࢴ', 'ࢶ', 'ࢽ', 'ऄ', 'ह', 'क़', 'ॡ', 'ॲ', 'ঀ', 'অ', 'ঌ', 'এ', 'ঐ', 'ও', 'ন', 'প', 'র', 'শ', 'হ', 'ড়', 'ঢ়', 'য়', 'ৡ', 'ৰ', 'ৱ', 'ਅ', 'ਊ', 'ਏ', 'ਐ', 'ਓ', 'ਨ', 'ਪ', 'ਰ', 'ਲ', 'ਲ਼', 'ਵ', 'ਸ਼', 'ਸ', 'ਹ', 'ਖ਼', 'ੜ', 'ੲ', 'ੴ', 'અ', 'ઍ', 'એ', 'ઑ', 'ઓ', 'ન', 'પ', 'ર', 'લ', 'ળ', 'વ', 'હ', 'ૠ', 'ૡ', 'ଅ', 'ଌ', 'ଏ', 'ଐ', 'ଓ', 'ନ', 'ପ', 'ର', 'ଲ', 'ଳ', 'ଵ', 'ହ', 'ଡ଼', 'ଢ଼', 'ୟ', 'ୡ', 'அ', 'ஊ', 'எ', 'ஐ', 'ஒ', 'க', 'ங', 'ச', 'ஞ', 'ட', 'ண', 'த', 'ந', 'ப', 'ம', 'ஹ', 'అ', 'ఌ', 'ఎ', 'ఐ', 'ఒ', 'న', 'ప', 'హ', 'ౘ', 'ౚ', 'ౠ', 'ౡ', 'ಅ', 'ಌ', 'ಎ', 'ಐ', 'ಒ', 'ನ', 'ಪ', 'ಳ', 'ವ', 'ಹ', 'ೠ', 'ೡ', 'ೱ', 'ೲ', 'അ', 'ഌ', 'എ', 'ഐ', 'ഒ', 'ഺ', 'ൔ', 'ൖ', 'ൟ', 'ൡ', 'ൺ', 'ൿ', 'අ', 'ඖ', 'ක', 'න', 'ඳ', 'ර', 'ව', 'ෆ', 'ก', 'ะ', 'า', 'ำ', 'เ', 'ๅ', 'ກ', 'ຂ', 'ງ', 'ຈ', 'ດ', 'ທ', 'ນ', 'ຟ', 'ມ', 'ຣ', 'ສ', 'ຫ', 'ອ', 'ະ', 'າ', 'ຳ', 'ເ', 'ໄ', 'ໜ', 'ໟ', 'ཀ', 'ཇ', 'ཉ', 'ཬ', 'ྈ', 'ྌ', 'က', 'ဪ', 'ၐ', 'ၕ', 'ၚ', 'ၝ', 'ၥ', 'ၦ', 'ၮ', 'ၰ', 'ၵ', 'ႁ', 'ᄀ', 'ቈ', 'ቊ', 'ቍ', 'ቐ', 'ቖ', 'ቚ', 'ቝ', 'በ', 'ኈ', 'ኊ', 'ኍ', 'ነ', 'ኰ', 'ኲ', 'ኵ', 'ኸ', 'ኾ', 'ዂ', 'ዅ', 'ወ', 'ዖ', 'ዘ', 'ጐ', 'ጒ', 'ጕ', 'ጘ', 'ፚ', 'ᎀ', 'ᎏ', 'ᐁ', 'ᙬ', 'ᙯ', 'ᙿ', 'ᚁ', 'ᚚ', 'ᚠ', 'ᛪ', 'ᛱ', 'ᛸ', 'ᜀ', 'ᜌ', 'ᜎ', 'ᜑ', 'ᜠ', 'ᜱ', 'ᝀ', 'ᝑ', 'ᝠ', 'ᝬ', 'ᝮ', 'ᝰ', 'ក', 'ឳ', 'ᠠ', 'ᡂ', 'ᡄ', 'ᡸ', 'ᢀ', 'ᢄ', 'ᢇ', 'ᢨ', 'ᢰ', 'ᣵ', 'ᤀ', 'ᤞ', 'ᥐ', 'ᥭ', 'ᥰ', 'ᥴ', 'ᦀ', 'ᦫ', 'ᦰ', 'ᧉ', 'ᨀ', 'ᨖ', 'ᨠ', 'ᩔ', 'ᬅ', 'ᬳ', 'ᭅ', 'ᭋ', 'ᮃ', 'ᮠ', 'ᮮ', 'ᮯ', 'ᮺ', 'ᯥ', 'ᰀ', 'ᰣ', 'ᱍ', 'ᱏ', 'ᱚ', 'ᱷ', 'ᳩ', 'ᳬ', 'ᳮ', 'ᳱ', 'ᳵ', 'ᳶ', 'ℵ', 'ℸ', 'ⴰ', 'ⵧ', 'ⶀ', 'ⶖ', 'ⶠ', 'ⶦ', 'ⶨ', 'ⶮ', 'ⶰ', 'ⶶ', 'ⶸ', 'ⶾ', 'ⷀ', 'ⷆ', 'ⷈ', 'ⷎ', 'ⷐ', 'ⷖ', 'ⷘ', 'ⷞ', 'ぁ', 'ゖ', 'ァ', 'ヺ', 'ㄅ', 'ㄯ', 'ㄱ', 'ㆎ', 'ㆠ', 'ㆺ', 'ㇰ', 'ㇿ', '㐀', '䶵', '一', '鿯', 'ꀀ', 'ꀔ', 'ꀖ', 'ꒌ', 'ꓐ', 'ꓷ', 'ꔀ', 'ꘋ', 'ꘐ', 'ꘟ', 'ꘪ', 'ꘫ', 'ꚠ', 'ꛥ', 'ꟻ', 'ꠁ', 'ꠃ', 'ꠅ', 'ꠇ', 'ꠊ', 'ꠌ', 'ꠢ', 'ꡀ', 'ꡳ', 'ꢂ', 'ꢳ', 'ꣲ', 'ꣷ', 'ꣽ', 'ꣾ', 'ꤊ', 'ꤥ', 'ꤰ', 'ꥆ', 'ꥠ', 'ꥼ', 'ꦄ', 'ꦲ', 'ꧠ', 'ꧤ', 'ꧧ', 'ꧯ', 'ꧺ', 'ꧾ', 'ꨀ', 'ꨨ', 'ꩀ', 'ꩂ', 'ꩄ', 'ꩋ', 'ꩠ', 'ꩯ', 'ꩱ', 'ꩶ', 'ꩾ', 'ꪯ', 'ꪵ', 'ꪶ', 'ꪹ', 'ꪽ', 'ꫛ', 'ꫜ', 'ꫠ', 'ꫪ', 'ꬁ', 'ꬆ', 'ꬉ', 'ꬎ', 'ꬑ', 'ꬖ', 'ꬠ', 'ꬦ', 'ꬨ', 'ꬮ', 'ꯀ', 'ꯢ', '가', '힣', 'ힰ', 'ퟆ', 'ퟋ', 'ퟻ', '豈', '舘', '並', '龎', 'ײַ', 'ﬨ', 'שׁ', 'זּ', 'טּ', 'לּ', 'נּ', 'סּ', 'ףּ', 'פּ', 'צּ', 'ﮱ', 'ﯓ', 'ﴽ', 'ﵐ', 'ﶏ', 'ﶒ', 'ﷇ', 'ﷰ', 'ﷻ', 'ﹰ', 'ﹴ', 'ﹶ', 'ﻼ', 'ｦ', 'ｯ', 'ｱ', 'ﾝ', 'ﾠ', 'ﾾ', 'ￂ', 'ￇ', 'ￊ', 'ￏ', 'ￒ', 'ￗ', 'ￚ', 'ￜ'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lt",
			pos:  position{line: 1764, col: 1, offset: 49358},
			expr: &charClassMatcher{
				pos:        position{line: 1764, col: 6, offset: 49363},
				val:        "[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC]",
				chars:      []rune{'ǅ', 'ǈ', 'ǋ', 'ǲ', 'ᾼ', 'ῌ', 'ῼ'},
				ranges:     []rune{'ᾈ', 'ᾏ', 'ᾘ', 'ᾟ', 'ᾨ', 'ᾯ'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lu",
			pos:  position{line: 1767, col: 1, offset: 49469},
			expr: &charClassMatcher{
				pos:        position{line: 1767, col: 6, offset: 49474},
				val:        "[\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178-\\u0179\\u017B\\u017D\\u0181-\\u0182\\u0184\\u0186-\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019C-\\u019D\\u019F-\\u01A0\\u01A2\\u01A4\\u01A6-\\u01A7\\u01A9\\u01AC\\u01AE-\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7-\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A-\\u023B\\u023D-\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9-\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0-\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E-\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D-\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uA7B8\\uFF21-\\uFF3A]",
				chars:      []rune{'Ā', 'Ă', 'Ą', 'Ć', 'Ĉ', 'Ċ', 'Č', 'Ď', 'Đ', 'Ē', 'Ĕ', 'Ė', 'Ę', 'Ě', 'Ĝ', 'Ğ', 'Ġ', 'Ģ', 'Ĥ', 'Ħ', 'Ĩ', 'Ī', 'Ĭ', 'Į', 'İ', 'Ĳ', 'Ĵ', 'Ķ', 'Ĺ', 'Ļ', 'Ľ', 'Ŀ', 'Ł', 'Ń', 'Ņ', 'Ň', 'Ŋ', 'Ō', 'Ŏ', 'Ő', 'Œ', 'Ŕ', 'Ŗ', 'Ř', 'Ś', 'Ŝ', 'Ş', 'Š', 'Ţ', 'Ť', 'Ŧ', 'Ũ', 'Ū', 'Ŭ', 'Ů', 'Ű', 'Ų', 'Ŵ', 'Ŷ', 'Ż', 'Ž', 'Ƅ', 'Ƣ', 'Ƥ', 'Ʃ', 'Ƭ', 'Ƶ', 'Ƽ', 'Ǆ', 'Ǉ', 'Ǌ', 'Ǎ', 'Ǐ', 'Ǒ', 'Ǔ', 'Ǖ', 'Ǘ', 'Ǚ', 'Ǜ', 'Ǟ', 'Ǡ', 'Ǣ', 'Ǥ', 'Ǧ', 'Ǩ', 'Ǫ', 'Ǭ', 'Ǯ', 'Ǳ', 'Ǵ', 'Ǻ', 'Ǽ', 'Ǿ', 'Ȁ', 'Ȃ', 'Ȅ', 'Ȇ', 'Ȉ', 'Ȋ', 'Ȍ', 'Ȏ', 'Ȑ', 'Ȓ', 'Ȕ', 'Ȗ', 'Ș', 'Ț', 'Ȝ', 'Ȟ', 'Ƞ', 'Ȣ', 'Ȥ', 'Ȧ', 'Ȩ', 'Ȫ', 'Ȭ', 'Ȯ', 'Ȱ', 'Ȳ', 'Ɂ', 'Ɉ', 'Ɋ', 'Ɍ', 'Ɏ', 'Ͱ', 'Ͳ', 'Ͷ', 'Ϳ', 'Ά', 'Ό', 'Ϗ', 'Ϙ', 'Ϛ', 'Ϝ', 'Ϟ', 'Ϡ', 'Ϣ', 'Ϥ', 'Ϧ', 'Ϩ', 'Ϫ', 'Ϭ', 'Ϯ', 'ϴ', 'Ϸ', 'Ѡ', 'Ѣ', 'Ѥ', 'Ѧ', 'Ѩ', 'Ѫ', 'Ѭ', 'Ѯ', 'Ѱ', 'Ѳ', 'Ѵ', 'Ѷ', 'Ѹ', 'Ѻ', 'Ѽ', 'Ѿ', 'Ҁ', 'Ҋ', 'Ҍ', 'Ҏ', 'Ґ', 'Ғ', 'Ҕ', 'Җ', 'Ҙ', 'Қ', 'Ҝ', 'Ҟ', 'Ҡ', 'Ң', 'Ҥ', 'Ҧ', 'Ҩ', 'Ҫ', 'Ҭ', 'Ү', 'Ұ', 'Ҳ', 'Ҵ', 'Ҷ', 'Ҹ', 'Һ', 'Ҽ', 'Ҿ', 'Ӄ', 'Ӆ', 'Ӈ', 'Ӊ', 'Ӌ', 'Ӎ', 'Ӑ', 'Ӓ', 'Ӕ', 'Ӗ', 'Ә', 'Ӛ', 'Ӝ', 'Ӟ', 'Ӡ', 'Ӣ', 'Ӥ', 'Ӧ', 'Ө', 'Ӫ', 'Ӭ', 'Ӯ', 'Ӱ', 'Ӳ', 'Ӵ', 'Ӷ', 'Ӹ', 'Ӻ', 'Ӽ', 'Ӿ', 'Ԁ', 'Ԃ', 'Ԅ', 'Ԇ', 'Ԉ', 'Ԋ', 'Ԍ', 'Ԏ', 'Ԑ', 'Ԓ', 'Ԕ', 'Ԗ', 'Ԙ', 'Ԛ', 'Ԝ', 'Ԟ', 'Ԡ', 'Ԣ', 'Ԥ', 'Ԧ', 'Ԩ', 'Ԫ', 'Ԭ', 'Ԯ', 'Ⴧ', 'Ⴭ', 'Ḁ', 'Ḃ', 'Ḅ', 'Ḇ', 'Ḉ', 'Ḋ', 'Ḍ', 'Ḏ', 'Ḑ', 'Ḓ', 'Ḕ', 'Ḗ', 'Ḙ', 'Ḛ', 'Ḝ', 'Ḟ', 'Ḡ', 'Ḣ', 'Ḥ', 'Ḧ', 'Ḩ', 'Ḫ', 'Ḭ', 'Ḯ', 'Ḱ', 'Ḳ', 'Ḵ', 'Ḷ', 'Ḹ', 'Ḻ', 'Ḽ', 'Ḿ', 'Ṁ', 'Ṃ', 'Ṅ', 'Ṇ', 'Ṉ', 'Ṋ', 'Ṍ', 'Ṏ', 'Ṑ', 'Ṓ', 'Ṕ', 'Ṗ', 'Ṙ', 'Ṛ', 'Ṝ', 'Ṟ', 'Ṡ', 'Ṣ', 'Ṥ', 'Ṧ', 'Ṩ', 'Ṫ', 'Ṭ', 'Ṯ', 'Ṱ', 'Ṳ', 'Ṵ', 'Ṷ', 'Ṹ', 'Ṻ', 'Ṽ', 'Ṿ', 'Ẁ', 'Ẃ', 'Ẅ', 'Ẇ', 'Ẉ', 'Ẋ', 'Ẍ', 'Ẏ', 'Ẑ', 'Ẓ', 'Ẕ', 'ẞ', 'Ạ', 'Ả', 'Ấ', 'Ầ', 'Ẩ', 'Ẫ', 'Ậ', 'Ắ', 'Ằ', 'Ẳ', 'Ẵ', 'Ặ', 'Ẹ', 'Ẻ', 'Ẽ', 'Ế', 'Ề', 'Ể', 'Ễ', 'Ệ', 'Ỉ', 'Ị', 'Ọ', 'Ỏ', 'Ố', 'Ồ', 'Ổ', 'Ỗ', 'Ộ', 'Ớ', 'Ờ', 'Ở', 'Ỡ', 'Ợ', 'Ụ', 'Ủ', 'Ứ', 'Ừ', 'Ử', 'Ữ', 'Ự', 'Ỳ', 'Ỵ', 'Ỷ', 'Ỹ', 'Ỻ', 'Ỽ', 'Ỿ', 'Ὑ', 'Ὓ', 'Ὕ', 'Ὗ', 'ℂ', 'ℇ', 'ℕ', 'ℤ', 'Ω', 'ℨ', 'ⅅ', 'Ↄ', 'Ⱡ', 'Ⱨ', 'Ⱪ', 'Ⱬ', 'Ⱳ', 'Ⱶ', 'Ⲃ', 'Ⲅ', 'Ⲇ', 'Ⲉ', 'Ⲋ', 'Ⲍ', 'Ⲏ', 'Ⲑ', 'Ⲓ', 'Ⲕ', 'Ⲗ', 'Ⲙ', 'Ⲛ', 'Ⲝ', 'Ⲟ', 'Ⲡ', 'Ⲣ', 'Ⲥ', 'Ⲧ', 'Ⲩ', 'Ⲫ', 'Ⲭ', 'Ⲯ', 'Ⲱ', 'Ⲳ', 'Ⲵ', 'Ⲷ', 'Ⲹ', 'Ⲻ', 'Ⲽ', 'Ⲿ', 'Ⳁ', 'Ⳃ', 'Ⳅ', 'Ⳇ', 'Ⳉ', 'Ⳋ', 'Ⳍ', 'Ⳏ', 'Ⳑ', 'Ⳓ', 'Ⳕ', 'Ⳗ', 'Ⳙ', 'Ⳛ', 'Ⳝ', 'Ⳟ', 'Ⳡ', 'Ⳣ', 'Ⳬ', 'Ⳮ', 'Ⳳ', 'Ꙁ', 'Ꙃ', 'Ꙅ', 'Ꙇ', 'Ꙉ', 'Ꙋ', 'Ꙍ', 'Ꙏ', 'Ꙑ', 'Ꙓ', 'Ꙕ', 'Ꙗ', 'Ꙙ', 'Ꙛ', 'Ꙝ', 'Ꙟ', 'Ꙡ', 'Ꙣ', 'Ꙥ', 'Ꙧ', 'Ꙩ', 'Ꙫ', 'Ꙭ', 'Ꚁ', 'Ꚃ', 'Ꚅ', 'Ꚇ', 'Ꚉ', 'Ꚋ', 'Ꚍ', 'Ꚏ', 'Ꚑ', 'Ꚓ', 'Ꚕ', 'Ꚗ', 'Ꚙ', 'Ꚛ', 'Ꜣ', 'Ꜥ', 'Ꜧ', 'Ꜩ', 'Ꜫ', 'Ꜭ', 'Ꜯ', 'Ꜳ', 'Ꜵ', 'Ꜷ', 'Ꜹ', 'Ꜻ', 'Ꜽ', 'Ꜿ', 'Ꝁ', 'Ꝃ', 'Ꝅ', 'Ꝇ', 'Ꝉ', 'Ꝋ', 'Ꝍ', 'Ꝏ', 'Ꝑ', 'Ꝓ', 'Ꝕ', 'Ꝗ', 'Ꝙ', 'Ꝛ', 'Ꝝ', 'Ꝟ', 'Ꝡ', 'Ꝣ', 'Ꝥ', 'Ꝧ', 'Ꝩ', 'Ꝫ', 'Ꝭ', 'Ꝯ', 'Ꝺ', 'Ꝼ', 'Ꞁ', 'Ꞃ', 'Ꞅ', 'Ꞇ', 'Ꞌ', 'Ɥ', 'Ꞑ', 'Ꞓ', 'Ꞗ', 'Ꞙ', 'Ꞛ', 'Ꞝ', 'Ꞟ', 'Ꞡ', 'Ꞣ', 'Ꞥ', 'Ꞧ', 'Ꞩ', 'Ꞷ', 'Ꞹ'},
				ranges:     []rune{'A', 'Z', 'À', 'Ö', 'Ø', 'Þ', 'Ÿ', 'Ź', 'Ɓ', 'Ƃ', 'Ɔ', 'Ƈ', 'Ɖ', 'Ƌ', 'Ǝ', 'Ƒ', 'Ɠ', 'Ɣ', 'Ɩ', 'Ƙ', 'Ɯ', 'Ɲ', 'Ɵ', 'Ơ', 'Ʀ', 'Ƨ', 'Ʈ', 'Ư', 'Ʊ', 'Ƴ', 'Ʒ', 'Ƹ', 'Ƕ', 'Ǹ', 'Ⱥ', 'Ȼ', 'Ƚ', 'Ⱦ', 'Ƀ', 'Ɇ', 'Έ', 'Ί', 'Ύ', 'Ώ', 'Α', 'Ρ', 'Σ', 'Ϋ', 'ϒ', 'ϔ', 'Ϲ', 'Ϻ', 'Ͻ', 'Я', 'Ӏ', 'Ӂ', 'Ա', 'Ֆ', 'Ⴀ', 'Ⴥ', 'Ꭰ', 'Ᏽ', 'Ა', 'Ჺ', 'Ჽ', 'Ჿ', 'Ἀ', 'Ἇ', 'Ἐ', 'Ἕ', 'Ἠ', 'Ἧ', 'Ἰ', 'Ἷ', 'Ὀ', 'Ὅ', 'Ὠ', 'Ὧ', 'Ᾰ', 'Ά', 'Ὲ', 'Ή', 'Ῐ', 'Ί', 'Ῠ', 'Ῥ', 'Ὸ', 'Ώ', 'ℋ', 'ℍ', 'ℐ', 'ℒ', 'ℙ', 'ℝ', 'K', 'ℭ', 'ℰ', 'ℳ', 'ℾ', 'ℿ', 'Ⰰ', 'Ⱞ', 'Ɫ', 'Ɽ', 'Ɑ', 'Ɒ', 'Ȿ', 'Ⲁ', 'Ᵹ', 'Ꝿ', 'Ɦ', 'Ɪ', 'Ʞ', 'Ꞵ', 'Ａ', 'Ｚ'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Mc",
			pos:  position{line: 1770, col: 1, offset: 53475},
			expr: &charClassMatcher{
				pos:        position{line: 1770, col: 6, offset: 53480},
				val:        "[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BE-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B3E\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0B57\\u0BBE-\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0CD5-\\u0CD6\\u0D02-\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82-\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0F3E-\\u0F3F\\u0F7F\\u102B-\\u102C\\u1031\\u1038\\u103B-\\u103C\\u1056-\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083-\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63-\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF2-\\u1CF3\\u1CF7\\u302E-\\u302F\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BD-\\uA9C0\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\uABEC]",
				chars:      []rune{'ः', 'ऻ', 'ৗ', 'ਃ', 'ઃ', 'ૉ', 'ା', 'ୀ', 'ୗ', 'ௗ', 'ಾ', 'ൗ', 'ཿ', 'ေ', 'း', 'ႏ', 'ា', 'ᩕ', 'ᩗ', 'ᩡ', 'ᬄ', 'ᬵ', 'ᬻ', 'ᮂ', 'ᮡ', '᮪', 'ᯧ', 'ᯮ', '᳡', '᳷', 'ꠧ', 'ꦃ', 'ꩍ', 'ꩻ', 'ꩽ', 'ꫫ', 'ꫵ', '꯬'},
				ranges:     []rune{'ा', 'ी', 'ॉ', 'ौ', 'ॎ', 'ॏ', 'ং', 'ঃ', 'া', 'ী', 'ে', 'ৈ', 'ো', 'ৌ', 'ਾ', 'ੀ', 'ા', 'ી', 'ો', 'ૌ', 'ଂ', 'ଃ', 'େ', 'ୈ', 'ୋ', 'ୌ', 'ா', 'ி', 'ு', 'ூ', 'ெ', 'ை', 'ொ', 'ௌ', 'ఁ', 'ః', 'ు', 'ౄ', 'ಂ', 'ಃ', 'ೀ', 'ೄ', 'ೇ', 'ೈ', 'ೊ', 'ೋ', 'ೕ', 'ೖ', 'ം', 'ഃ', 'ാ', 'ീ', 'െ', 'ൈ', 'ൊ', 'ൌ', 'ං', 'ඃ', 'ා', 'ෑ', 'ෘ', 'ෟ', 'ෲ', 'ෳ', '༾', '༿', 'ါ', 'ာ', 'ျ', 'ြ', 'ၖ', 'ၗ', 'ၢ', 'ၤ', 'ၧ', 'ၭ', 'ႃ', 'ႄ', 'ႇ', 'ႌ', 'ႚ', 'ႜ', 'ើ', 'ៅ', 'ះ', 'ៈ', 'ᤣ', 'ᤦ', 'ᤩ', 'ᤫ', 'ᤰ', 'ᤱ', 'ᤳ', 'ᤸ', 'ᨙ', 'ᨚ', 'ᩣ', 'ᩤ', 'ᩭ', 'ᩲ', 'ᬽ', 'ᭁ', 'ᭃ', '᭄', 'ᮦ', 'ᮧ', 'ᯪ', 'ᯬ', '᯲', '᯳', 'ᰤ', 'ᰫ', 'ᰴ', 'ᰵ', 'ᳲ', 'ᳳ', '〮', '〯', 'ꠣ', 'ꠤ', 'ꢀ', 'ꢁ', 'ꢴ', 'ꣃ', 'ꥒ', '꥓', 'ꦴ', 'ꦵ', 'ꦺ', 'ꦻ', 'ꦽ', '꧀', 'ꨯ', 'ꨰ', 'ꨳ', 'ꨴ', 'ꫮ', 'ꫯ', 'ꯣ', 'ꯤ', 'ꯦ', 'ꯧ', 'ꯩ', 'ꯪ'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Mn",
			pos:  position{line: 1773, col: 1, offset: 54668},
			expr: &charClassMatcher{
				pos:        position{line: 1773, col: 6, offset: 54673},
				val:        "[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962-\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2-\\u09E3\\u09FE\\u0A01-\\u0A02\\u0A3C\\u0A41-\\u0A42\\u0A47-\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70-\\u0A71\\u0A75\\u0A81-\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7-\\u0AC8\\u0ACD\\u0AE2-\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62-\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55-\\u0C56\\u0C62-\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC-\\u0CCD\\u0CE2-\\u0CE3\\u0D00-\\u0D01\\u0D3B-\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62-\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86-\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039-\\u103A\\u103D-\\u103E\\u1058-\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085-\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773\\u17B4-\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885-\\u1886\\u18A9\\u1920-\\u1922\\u1927-\\u1928\\u1932\\u1939-\\u193B\\u1A17-\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80-\\u1B81\\u1BA2-\\u1BA5\\u1BA8-\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8-\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099-\\u309A\\uA66F\\uA674-\\uA67D\\uA69E-\\uA69F\\uA6F0-\\uA6F1\\uA802\\uA806\\uA80B\\uA825-\\uA826\\uA8C4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31-\\uAA32\\uAA35-\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7-\\uAAB8\\uAABE-\\uAABF\\uAAC1\\uAAEC-\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]",
				chars:      []rune{'ֿ', 'ׇ', 'ٰ', 'ܑ', '߽', 'ऺ', '़', '्', 'ঁ', '়', '্', '৾', '਼', 'ੑ', 'ੵ', '઼', '્', 'ଁ', '଼', 'ି', '୍', 'ୖ', 'ஂ', 'ீ', '்', 'ఀ', 'ఄ', 'ಁ', '಼', 'ಿ', 'ೆ', '്', '්', 'ූ', 'ั', 'ັ', '༵', '༷', '༹', '࿆', 'ႂ', 'ႍ', 'ႝ', 'ំ', '៝', 'ᢩ', 'ᤲ', 'ᨛ', 'ᩖ', '᩠', 'ᩢ', '᩿', '᬴', 'ᬼ', 'ᭂ', '᯦', 'ᯭ', '᳭', '᳴', '⃡', '⵿', '꙯', 'ꠂ', '꠆', 'ꠋ', 'ꣿ', '꦳', 'ꦼ', 'ꧥ', 'ꩃ', 'ꩌ', 'ꩼ', 'ꪰ', '꫁', '꫶', 'ꯥ', 'ꯨ', '꯭', 'ﬞ'},
				ranges:     []rune{'̀', 'ͯ', '҃', '҇', '֑', 'ֽ', 'ׁ', 'ׂ', 'ׄ', 'ׅ', 'ؐ', 'ؚ', 'ً', 'ٟ', 'ۖ', 'ۜ', '۟', 'ۤ', 'ۧ', 'ۨ', '۪', 'ۭ', 'ܰ', '݊', 'ަ', 'ް', '߫', '߳', 'ࠖ', '࠙', 'ࠛ', 'ࠣ', 'ࠥ', 'ࠧ', 'ࠩ', '࠭', '࡙', '࡛', '࣓', '࣡', 'ࣣ', 'ं', 'ु', 'ै', '॑', 'ॗ', 'ॢ', 'ॣ', 'ু', 'ৄ', 'ৢ', 'ৣ', 'ਁ', 'ਂ', 'ੁ', 'ੂ', 'ੇ', 'ੈ', 'ੋ', '੍', 'ੰ', 'ੱ', 'ઁ', 'ં', 'ુ', 'ૅ', 'ે', 'ૈ', 'ૢ', 'ૣ', 'ૺ', '૿', 'ୁ', 'ୄ', 'ୢ', 'ୣ', 'ా', 'ీ', 'ె', 'ై', 'ొ', '్', 'ౕ', 'ౖ', 'ౢ', 'ౣ', 'ೌ', '್', 'ೢ', 'ೣ', 'ഀ', 'ഁ', '഻', '഼', 'ു', 'ൄ', 'ൢ', 'ൣ', 'ි', 'ු', 'ิ', 'ฺ', '็', '๎', 'ິ', 'ູ', 'ົ', 'ຼ', '່', 'ໍ', '༘', '༙', 'ཱ', 'ཾ', 'ྀ', '྄', '྆', '྇', 'ྍ', 'ྗ', 'ྙ', 'ྼ', 'ိ', 'ူ', 'ဲ', '့', '္', '်', 'ွ', 'ှ', 'ၘ', 'ၙ', 'ၞ', 'ၠ', 'ၱ', 'ၴ', 'ႅ', 'ႆ', '፝', '፟', 'ᜒ', '᜔', 'ᜲ', '᜴', 'ᝒ', 'ᝓ', 'ᝲ', 'ᝳ', '឴', '឵', 'ិ', 'ួ', '៉', '៓', '᠋', '᠍', 'ᢅ', 'ᢆ', 'ᤠ', 'ᤢ', 'ᤧ', 'ᤨ', '᤹', '᤻', 'ᨗ', 'ᨘ', 'ᩘ', 'ᩞ', 'ᩥ', 'ᩬ', 'ᩳ', '᩼', '᪰', '᪽', 'ᬀ', 'ᬃ', 'ᬶ', 'ᬺ', '᭫', '᭳', 'ᮀ', 'ᮁ', 'ᮢ', 'ᮥ', 'ᮨ', 'ᮩ', '᮫', 'ᮭ', 'ᯨ', 'ᯩ', 'ᯯ', 'ᯱ', 'ᰬ', 'ᰳ', 'ᰶ', '᰷', '᳐', '᳒', '᳔', '᳠', '᳢', '᳨', '᳸', '᳹', '᷀', '᷹', '᷻', '᷿', '⃐', '⃜', '⃥', '⃰', '⳯', '⳱', 'ⷠ', 'ⷿ', '〪', '〭', '゙', '゚', 'ꙴ', '꙽', 'ꚞ', 'ꚟ', '꛰', '꛱', 'ꠥ', 'ꠦ', '꣄', 'ꣅ', '꣠', '꣱', 'ꤦ', '꤭', 'ꥇ', 'ꥑ', 'ꦀ', 'ꦂ', 'ꦶ', 'ꦹ', 'ꨩ', 'ꨮ', 'ꨱ', 'ꨲ', 'ꨵ', 'ꨶ', 'ꪲ', 'ꪴ', 'ꪷ', 'ꪸ', 'ꪾ', '꪿', 'ꫬ', 'ꫭ', '︀', '️', '︠', '︯'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Nd",
			pos:  position{line: 1776, col: 1, offset: 56853},
			expr: &charClassMatcher{
				pos:        position{line: 1776, col: 6, offset: 56858},
				val:        "[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]",
				ranges:     []rune{'0', '9', '٠', '٩', '۰', '۹', '߀', '߉', '०', '९', '০', '৯', '੦', '੯', '૦', '૯', '୦', '୯', '௦', '௯', '౦', '౯', '೦', '೯', '൦', '൯', '෦', '෯', '๐', '๙', '໐', '໙', '༠', '༩', '၀', '၉', '႐', '႙', '០', '៩', '᠐', '᠙', '᥆', '᥏', '᧐', '᧙', '᪀', '᪉', '᪐', '᪙', '᭐', '᭙', '᮰', '᮹', '᱀', '᱉', '᱐', '᱙', '꘠', '꘩', '꣐', '꣙', '꤀', '꤉', '꧐', '꧙', '꧰', '꧹', '꩐', '꩙', '꯰', '꯹', '０', '９'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Nl",
			pos:  position{line: 1779, col: 1, offset: 57361},
			expr: &charClassMatcher{
				pos:        position{line: 1779, col: 6, offset: 57366},
				val:        "[\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]",
				chars:      []rune{'〇'},
				ranges:     []rune{'ᛮ', 'ᛰ', 'Ⅰ', 'ↂ', 'ↅ', 'ↈ', '〡', '〩', '〸', '〺', 'ꛦ', 'ꛯ'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pc",
			pos:  position{line: 1782, col: 1, offset: 57480},
			expr: &charClassMatcher{
				pos:        position{line: 1782, col: 6, offset: 57485},
				val:        "[\\u005F\\u203F-\\u2040\\u2054\\uFE33-\\uFE34\\uFE4D-\\uFE4F\\uFF3F]",
				chars:      []rune{'_', '⁔', '＿'},
				ranges:     []rune{'‿', '⁀', '︳', '︴', '﹍', '﹏'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Zs",
			pos:  position{line: 1785, col: 1, offset: 57566},
			expr: &charClassMatcher{
				pos:        position{line: 1785, col: 6, offset: 57571},
				val:        "[\\u0020\\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]",
				chars:      []rune{' ', '\u00a0', '\u1680', '\u202f', '\u205f', '\u3000'},
				ranges:     []rune{'\u2000', '\u200a'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1787, col: 1, offset: 57624},
			expr: &anyMatcher{
				line: 1788, col: 5, offset: 57644,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1790, col: 1, offset: 57647},
			expr: &choiceExpr{
				pos: position{line: 1791, col: 5, offset: 57675},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 1791, col: 5, offset: 57675},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
					&litMatcher{
						pos:        position{line: 1792, col: 5, offset: 57684},
						val:        "\v",
						ignoreCase: false,
						want:       "\"\\v\"",
					},
					&litMatcher{
						pos:        position{line: 1793, col: 5, offset: 57693},
						val:        "\f",
						ignoreCase: false,
						want:       "\"\\f\"",
					},
					&litMatcher{
						pos:        position{line: 1794, col: 5, offset: 57702},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 1795, col: 5, offset: 57710},
						val:        "\u00a0",
						ignoreCase: false,
						want:       "\"\\u00a0\"",
					},
					&litMatcher{
						pos:        position{line: 1796, col: 5, offset: 57723},
						val:        "\ufeff",
						ignoreCase: false,
						want:       "\"\\ufeff\"",
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 5, offset: 57736},
						name: "Zs",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1799, col: 1, offset: 57740},
			expr: &charClassMatcher{
				pos:        position{line: 1800, col: 5, offset: 57759},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1806, col: 1, offset: 58089},
			expr: &ruleRefExpr{
				pos:  position{line: 1809, col: 5, offset: 58160},
				name: "SingleLineComment",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1811, col: 1, offset: 58179},
			expr: &seqExpr{
				pos: position{line: 1812, col: 5, offset: 58200},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 1812, col: 5, offset: 58200},
						val:        "/*",
						ignoreCase: false,
						want:       "\"/*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1812, col: 10, offset: 58205},
						expr: &seqExpr{
							pos: position{line: 1812, col: 11, offset: 58206},
							exprs: []any{
								&notExpr{
									pos: position{line: 1812, col: 11, offset: 58206},
									expr: &litMatcher{
										pos:        position{line: 1812, col: 12, offset: 58207},
										val:        "*/",
										ignoreCase: false,
										want:       "\"*/\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1812, col: 17, offset: 58212},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1812, col: 35, offset: 58230},
						val:        "*/",
						ignoreCase: false,
						want:       "\"*/\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1814, col: 1, offset: 58236},
			expr: &choiceExpr{
				pos: position{line: 1815, col: 5, offset: 58258},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1815, col: 5, offset: 58258},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1815, col: 5, offset: 58258},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1815, col: 10, offset: 58263},
								expr: &seqExpr{
									pos: position{line: 1815, col: 11, offset: 58264},
									exprs: []any{
										&notExpr{
											pos: position{line: 1815, col: 11, offset: 58264},
											expr: &ruleRefExpr{
												pos:  position{line: 1815, col: 12, offset: 58265},
												name: "LineTerminator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1815, col: 27, offset: 58280},
											name: "SourceCharacter",
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1816, col: 5, offset: 58302},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 1816, col: 5, offset: 58302},
								val:        "--",
								ignoreCase: false,
								want:       "\"--\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1816, col: 10, offset: 58307},
								expr: &seqExpr{
									pos: position{line: 1816, col: 11, offset: 58308},
									exprs: []any{
										&notExpr{
											pos: position{line: 1816, col: 11, offset: 58308},
											expr: &ruleRefExpr{
												pos:  position{line: 1816, col: 12, offset: 58309},
												name: "LineTerminator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1816, col: 27, offset: 58324},
											name: "SourceCharacter",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EOL",
			pos:  position{line: 1818, col: 1, offset: 58343},
			expr: &seqExpr{
				pos: position{line: 1818, col: 7, offset: 58349},
				exprs: []any{
					&zeroOrMoreExpr{
						pos: position{line: 1818, col: 7, offset: 58349},
						expr: &ruleRefExpr{
							pos:  position{line: 1818, col: 7, offset: 58349},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 19, offset: 58361},
						name: "LineTerminator",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EOT",
			pos:  position{line: 1820, col: 1, offset: 58377},
			expr: &choiceExpr{
				pos: position{line: 1820, col: 7, offset: 58383},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1820, col: 7, offset: 58383},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1820, col: 11, offset: 58387},
						name: "EOF",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EOF",
			pos:  position{line: 1822, col: 1, offset: 58392},
			expr: &notExpr{
				pos: position{line: 1822, col: 7, offset: 58398},
				expr: &anyMatcher{
					line: 1822, col: 8, offset: 58399,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EOKW",
			pos:  position{line: 1824, col: 1, offset: 58402},
			expr: &notExpr{
				pos: position{line: 1824, col: 8, offset: 58409},
				expr: &ruleRefExpr{
					pos:  position{line: 1824, col: 9, offset: 58410},
					name: "KeyWordChars",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SQLPipe",
			pos:  position{line: 1828, col: 1, offset: 58446},
			expr: &actionExpr{
				pos: position{line: 1829, col: 5, offset: 58459},
				run: (*parser).callonSQLPipe1,
				expr: &labeledExpr{
					pos:   position{line: 1829, col: 5, offset: 58459},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1829, col: 7, offset: 58461},
						name: "Seq",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectOp",
			pos:  position{line: 1837, col: 1, offset: 58607},
			expr: &actionExpr{
				pos: position{line: 1837, col: 12, offset: 58618},
				run: (*parser).callonSelectOp1,
				expr: &seqExpr{
					pos: position{line: 1837, col: 12, offset: 58618},
					exprs: []any{
						&notExpr{
							pos: position{line: 1837, col: 12, offset: 58618},
							expr: &litMatcher{
								pos:        position{line: 1837, col: 13, offset: 58619},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1837, col: 17, offset: 58623},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 1837, col: 20, offset: 58626},
								name: "SelectExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectExpr",
			pos:  position{line: 1839, col: 1, offset: 58656},
			expr: &actionExpr{
				pos: position{line: 1840, col: 5, offset: 58672},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 1840, col: 5, offset: 58672},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1840, col: 5, offset: 58672},
							label: "with",
							expr: &ruleRefExpr{
								pos:  position{line: 1840, col: 10, offset: 58677},
								name: "OptWithClause",
							},
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 5, offset: 58695},
							label: "body",
							expr: &choiceExpr{
								pos: position{line: 1842, col: 9, offset: 58710},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 1842, col: 9, offset: 58710},
										name: "SetOperation",
									},
									&ruleRefExpr{
										pos:  position{line: 1843, col: 9, offset: 58731},
										name: "Select",
									},
									&actionExpr{
										pos: position{line: 1844, col: 9, offset: 58746},
										run: (*parser).callonSelectExpr9,
										expr: &seqExpr{
											pos: position{line: 1844, col: 9, offset: 58746},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 1844, col: 9, offset: 58746},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
												&ruleRefExpr{
													pos:  position{line: 1844, col: 13, offset: 58750},
													name: "__",
												},
												&labeledExpr{
													pos:   position{line: 1844, col: 16, offset: 58753},
													label: "s",
													expr: &ruleRefExpr{
														pos:  position{line: 1844, col: 18, offset: 58755},
														name: "SQLPipe",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1844, col: 26, offset: 58763},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1844, col: 28, offset: 58765},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1846, col: 5, offset: 58802},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 1846, col: 13, offset: 58810},
								name: "OptOrderByClause",
							},
						},
						&labeledExpr{
							pos:   position{line: 1847, col: 5, offset: 58831},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 1847, col: 11, offset: 58837},
								name: "OptLimitClause",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "Select",
			pos:  position{line: 1867, col: 1, offset: 59223},
			expr: &actionExpr{
				pos: position{line: 1868, col: 5, offset: 59235},
				run: (*parser).callonSelect1,
				expr: &seqExpr{
					pos: position{line: 1868, col: 5, offset: 59235},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1868, col: 5, offset: 59235},
							name: "SELECT",
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 5, offset: 59247},
							label: "distinct",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 14, offset: 59256},
								name: "OptDistinct",
							},
						},
						&labeledExpr{
							pos:   position{line: 1870, col: 5, offset: 59272},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1870, col: 11, offset: 59278},
								name: "OptSelectValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1873, col: 5, offset: 59418},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1873, col: 7, offset: 59420},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 1873, col: 17, offset: 59430},
								name: "Selection",
							},
						},
						&labeledExpr{
							pos:   position{line: 1874, col: 5, offset: 59444},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 1874, col: 10, offset: 59449},
								name: "OptFromClause",
							},
						},
						&labeledExpr{
							pos:   position{line: 1875, col: 5, offset: 59467},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 1875, col: 11, offset: 59473},
								name: "OptWhereClause",
							},
						},
						&labeledExpr{
							pos:   position{line: 1876, col: 5, offset: 59492},
							label: "group",
							expr: &ruleRefExpr{
								pos:  position{line: 1876, col: 11, offset: 59498},
								name: "OptGroupClause",
							},
						},
						&labeledExpr{
							pos:   position{line: 1877, col: 5, offset: 59517},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 1877, col: 12, offset: 59524},
								name: "OptHavingClause",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptDistinct",
			pos:  position{line: 1903, col: 1, offset: 60130},
			expr: &choiceExpr{
				pos: position{line: 1904, col: 5, offset: 60146},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1904, col: 5, offset: 60146},
						run: (*parser).callonOptDistinct2,
						expr: &seqExpr{
							pos: position{line: 1904, col: 5, offset: 60146},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1904, col: 5, offset: 60146},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 7, offset: 60148},
									name: "ALL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1905, col: 5, offset: 60185},
						run: (*parser).callonOptDistinct6,
						expr: &seqExpr{
							pos: position{line: 1905, col: 5, offset: 60185},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1905, col: 5, offset: 60185},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1905, col: 7, offset: 60187},
									name: "DISTINCT",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1906, col: 5, offset: 60223},
						run: (*parser).callonOptDistinct10,
						expr: &litMatcher{
							pos:        position{line: 1906, col: 5, offset: 60223},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptSelectValue",
			pos:  position{line: 1908, col: 1, offset: 60262},
			expr: &choiceExpr{
				pos: position{line: 1909, col: 5, offset: 60281},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1909, col: 5, offset: 60281},
						run: (*parser).callonOptSelectValue2,
						expr: &seqExpr{
							pos: position{line: 1909, col: 5, offset: 60281},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1909, col: 5, offset: 60281},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1909, col: 7, offset: 60283},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 1909, col: 10, offset: 60286},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1909, col: 12, offset: 60288},
									name: "VALUE",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1910, col: 5, offset: 60320},
						run: (*parser).callonOptSelectValue8,
						expr: &seqExpr{
							pos: position{line: 1910, col: 5, offset: 60320},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1910, col: 5, offset: 60320},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1910, col: 7, offset: 60322},
									name: "VALUE",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1911, col: 5, offset: 60393},
						run: (*parser).callonOptSelectValue12,
						expr: &litMatcher{
							pos:        position{line: 1911, col: 5, offset: 60393},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptWithClause",
			pos:  position{line: 1913, col: 1, offset: 60436},
			expr: &choiceExpr{
				pos: position{line: 1914, col: 5, offset: 60455},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1914, col: 5, offset: 60455},
						name: "WithClause",
					},
					&actionExpr{
						pos: position{line: 1915, col: 5, offset: 60471},
						run: (*parser).callonOptWithClause3,
						expr: &litMatcher{
							pos:        position{line: 1915, col: 5, offset: 60471},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WithClause",
			pos:  position{line: 1917, col: 1, offset: 60504},
			expr: &actionExpr{
				pos: position{line: 1918, col: 5, offset: 60520},
				run: (*parser).callonWithClause1,
				expr: &seqExpr{
					pos: position{line: 1918, col: 5, offset: 60520},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1918, col: 5, offset: 60520},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1918, col: 7, offset: 60522},
							name: "WITH",
						},
						&labeledExpr{
							pos:   position{line: 1918, col: 12, offset: 60527},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 1918, col: 14, offset: 60529},
								name: "OptRecursive",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1918, col: 27, offset: 60542},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1918, col: 29, offset: 60544},
							label: "ctes",
							expr: &ruleRefExpr{
								pos:  position{line: 1918, col: 34, offset: 60549},
								name: "CteList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptRecursive",
			pos:  position{line: 1927, col: 1, offset: 60734},
			expr: &choiceExpr{
				pos: position{line: 1928, col: 5, offset: 60752},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1928, col: 5, offset: 60752},
						run: (*parser).callonOptRecursive2,
						expr: &seqExpr{
							pos: position{line: 1928, col: 5, offset: 60752},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1928, col: 5, offset: 60752},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1928, col: 7, offset: 60754},
									name: "RECURSIVE",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1929, col: 5, offset: 60790},
						run: (*parser).callonOptRecursive6,
						expr: &litMatcher{
							pos:        position{line: 1929, col: 5, offset: 60790},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CteList",
			pos:  position{line: 1931, col: 1, offset: 60829},
			expr: &actionExpr{
				pos: position{line: 1931, col: 11, offset: 60839},
				run: (*parser).callonCteList1,
				expr: &seqExpr{
					pos: position{line: 1931, col: 11, offset: 60839},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1931, col: 11, offset: 60839},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1931, col: 17, offset: 60845},
								name: "Cte",
							},
						},
						&labeledExpr{
							pos:   position{line: 1931, col: 21, offset: 60849},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1931, col: 26, offset: 60854},
								expr: &actionExpr{
									pos: position{line: 1931, col: 28, offset: 60856},
									run: (*parser).callonCteList7,
									expr: &seqExpr{
										pos: position{line: 1931, col: 28, offset: 60856},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1931, col: 28, offset: 60856},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1931, col: 31, offset: 60859},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1931, col: 35, offset: 60863},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1931, col: 38, offset: 60866},
												label: "cte",
												expr: &ruleRefExpr{
													pos:  position{line: 1931, col: 42, offset: 60870},
													name: "Cte",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Cte",
			pos:  position{line: 1935, col: 1, offset: 60939},
			expr: &actionExpr{
				pos: position{line: 1936, col: 5, offset: 60947},
				run: (*parser).callonCte1,
				expr: &seqExpr{
					pos: position{line: 1936, col: 5, offset: 60947},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1936, col: 5, offset: 60947},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1936, col: 10, offset: 60952},
								name: "AliasName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1936, col: 20, offset: 60962},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1936, col: 22, offset: 60964},
							name: "AS",
						},
						&labeledExpr{
							pos:   position{line: 1936, col: 25, offset: 60967},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1936, col: 27, offset: 60969},
								name: "OptMaterialized",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1936, col: 43, offset: 60985},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1936, col: 46, offset: 60988},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 1936, col: 50, offset: 60992},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1936, col: 53, offset: 60995},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 1936, col: 55, offset: 60997},
								name: "SQLPipe",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1936, col: 63, offset: 61005},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1936, col: 66, offset: 61008},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AliasName",
			pos:  position{line: 1945, col: 1, offset: 61183},
			expr: &ruleRefExpr{
				pos:  position{line: 1945, col: 13, offset: 61195},
				name: "Identifier",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptMaterialized",
			pos:  position{line: 1947, col: 1, offset: 61207},
			expr: &choiceExpr{
				pos: position{line: 1948, col: 5, offset: 61228},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1948, col: 5, offset: 61228},
						run: (*parser).callonOptMaterialized2,
						expr: &seqExpr{
							pos: position{line: 1948, col: 5, offset: 61228},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1948, col: 5, offset: 61228},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1948, col: 7, offset: 61230},
									name: "MATERIALIZED",
								},
								&ruleRefExpr{
									pos:  position{line: 1948, col: 20, offset: 61243},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1949, col: 5, offset: 61282},
						run: (*parser).callonOptMaterialized7,
						expr: &seqExpr{
							pos: position{line: 1949, col: 5, offset: 61282},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1949, col: 5, offset: 61282},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1949, col: 7, offset: 61284},
									name: "NOT",
								},
								&ruleRefExpr{
									pos:  position{line: 1949, col: 11, offset: 61288},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1949, col: 13, offset: 61290},
									name: "MATERIALIZED",
								},
								&ruleRefExpr{
									pos:  position{line: 1949, col: 26, offset: 61303},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1950, col: 5, offset: 61334},
						run: (*parser).callonOptMaterialized14,
						expr: &litMatcher{
							pos:        position{line: 1950, col: 5, offset: 61334},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptAllClause",
			pos:  position{line: 1952, col: 1, offset: 61389},
			expr: &choiceExpr{
				pos: position{line: 1953, col: 5, offset: 61406},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 1953, col: 5, offset: 61406},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 1953, col: 5, offset: 61406},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 1953, col: 7, offset: 61408},
								name: "ALL",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1954, col: 5, offset: 61417},
						val:        "",
						ignoreCase: false,
						want:       "\"\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptFromClause",
			pos:  position{line: 1956, col: 1, offset: 61421},
			expr: &choiceExpr{
				pos: position{line: 1957, col: 5, offset: 61439},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1957, col: 5, offset: 61439},
						run: (*parser).callonOptFromClause2,
						expr: &seqExpr{
							pos: position{line: 1957, col: 5, offset: 61439},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1957, col: 5, offset: 61439},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1957, col: 7, offset: 61441},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 1957, col: 12, offset: 61446},
										name: "FromOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1960, col: 5, offset: 61488},
						run: (*parser).callonOptFromClause7,
						expr: &litMatcher{
							pos:        position{line: 1960, col: 5, offset: 61488},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptWhereClause",
			pos:  position{line: 1962, col: 1, offset: 61529},
			expr: &choiceExpr{
				pos: position{line: 1963, col: 5, offset: 61548},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1963, col: 5, offset: 61548},
						run: (*parser).callonOptWhereClause2,
						expr: &labeledExpr{
							pos:   position{line: 1963, col: 5, offset: 61548},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 1963, col: 11, offset: 61554},
								name: "WhereClause",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1964, col: 5, offset: 61596},
						run: (*parser).callonOptWhereClause5,
						expr: &litMatcher{
							pos:        position{line: 1964, col: 5, offset: 61596},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptGroupClause",
			pos:  position{line: 1966, col: 1, offset: 61641},
			expr: &choiceExpr{
				pos: position{line: 1967, col: 5, offset: 61660},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1967, col: 5, offset: 61660},
						run: (*parser).callonOptGroupClause2,
						expr: &seqExpr{
							pos: position{line: 1967, col: 5, offset: 61660},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1967, col: 5, offset: 61660},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1967, col: 7, offset: 61662},
									label: "group",
									expr: &ruleRefExpr{
										pos:  position{line: 1967, col: 13, offset: 61668},
										name: "GroupClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1968, col: 5, offset: 61706},
						run: (*parser).callonOptGroupClause7,
						expr: &litMatcher{
							pos:        position{line: 1968, col: 5, offset: 61706},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GroupClause",
			pos:  position{line: 1970, col: 1, offset: 61747},
			expr: &actionExpr{
				pos: position{line: 1971, col: 5, offset: 61763},
				run: (*parser).callonGroupClause1,
				expr: &seqExpr{
					pos: position{line: 1971, col: 5, offset: 61763},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1971, col: 5, offset: 61763},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 1971, col: 11, offset: 61769},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1971, col: 13, offset: 61771},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 1971, col: 16, offset: 61774},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1971, col: 18, offset: 61776},
							label: "list",
							expr: &ruleRefExpr{
								pos:  position{line: 1971, col: 23, offset: 61781},
								name: "GroupByList",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GroupByList",
			pos:  position{line: 1973, col: 1, offset: 61815},
			expr: &actionExpr{
				pos: position{line: 1974, col: 5, offset: 61832},
				run: (*parser).callonGroupByList1,
				expr: &seqExpr{
					pos: position{line: 1974, col: 5, offset: 61832},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1974, col: 5, offset: 61832},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1974, col: 11, offset: 61838},
								name: "GroupByItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 23, offset: 61850},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1974, col: 28, offset: 61855},
								expr: &actionExpr{
									pos: position{line: 1974, col: 30, offset: 61857},
									run: (*parser).callonGroupByList7,
									expr: &seqExpr{
										pos: position{line: 1974, col: 30, offset: 61857},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 1974, col: 30, offset: 61857},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1974, col: 33, offset: 61860},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1974, col: 37, offset: 61864},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1974, col: 40, offset: 61867},
												label: "g",
												expr: &ruleRefExpr{
													pos:  position{line: 1974, col: 42, offset: 61869},
													name: "GroupByItem",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GroupByItem",
			pos:  position{line: 1978, col: 1, offset: 61950},
			expr: &ruleRefExpr{
				pos:  position{line: 1978, col: 15, offset: 61964},
				name: "Expr",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptHavingClause",
			pos:  position{line: 1980, col: 1, offset: 61970},
			expr: &choiceExpr{
				pos: position{line: 1981, col: 5, offset: 61990},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 1981, col: 5, offset: 61990},
						run: (*parser).callonOptHavingClause2,
						expr: &seqExpr{
							pos: position{line: 1981, col: 5, offset: 61990},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 1981, col: 5, offset: 61990},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1981, col: 7, offset: 61992},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 1981, col: 9, offset: 61994},
										name: "HavingClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1982, col: 5, offset: 62029},
						run: (*parser).callonOptHavingClause7,
						expr: &litMatcher{
							pos:        position{line: 1982, col: 5, offset: 62029},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HavingClause",
			pos:  position{line: 1984, col: 1, offset: 62053},
			expr: &actionExpr{
				pos: position{line: 1985, col: 5, offset: 62070},
				run: (*parser).callonHavingClause1,
				expr: &seqExpr{
					pos: position{line: 1985, col: 5, offset: 62070},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 1985, col: 5, offset: 62070},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 1985, col: 12, offset: 62077},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1985, col: 14, offset: 62079},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1985, col: 16, offset: 62081},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "JoinOperation",
			pos:  position{line: 1987, col: 1, offset: 62105},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 5, offset: 62123},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 1988, col: 5, offset: 62123},
						name: "CrossJoin",
					},
					&ruleRefExpr{
						pos:  position{line: 1989, col: 5, offset: 62137},
						name: "ConditionJoin",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CrossJoin",
			pos:  position{line: 1991, col: 1, offset: 62152},
			expr: &actionExpr{
				pos: position{line: 1992, col: 5, offset: 62166},
				run: (*parser).callonCrossJoin1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 5, offset: 62166},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 1992, col: 5, offset: 62166},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 1992, col: 10, offset: 62171},
								name: "FromElem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1992, col: 19, offset: 62180},
							name: "CrossJoinOp",
						},
						&labeledExpr{
							pos:   position{line: 1992, col: 31, offset: 62192},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 1992, col: 37, offset: 62198},
								name: "FromElem",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "CrossJoinOp",
			pos:  position{line: 2001, col: 1, offset: 62400},
			expr: &choiceExpr{
				pos: position{line: 2002, col: 5, offset: 62417},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 2002, col: 5, offset: 62417},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 2002, col: 5, offset: 62417},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 2002, col: 8, offset: 62420},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
							&ruleRefExpr{
								pos:  position{line: 2002, col: 12, offset: 62424},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 2003, col: 5, offset: 62432},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 2003, col: 5, offset: 62432},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 2003, col: 7, offset: 62434},
								name: "CROSS",
							},
							&ruleRefExpr{
								pos:  position{line: 2003, col: 13, offset: 62440},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 2003, col: 15, offset: 62442},
								name: "JOIN",
							},
							&ruleRefExpr{
								pos:  position{line: 2003, col: 20, offset: 62447},
								name: "_",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConditionJoin",
			pos:  position{line: 2005, col: 1, offset: 62451},
			expr: &actionExpr{
				pos: position{line: 2006, col: 5, offset: 62469},
				run: (*parser).callonConditionJoin1,
				expr: &seqExpr{
					pos: position{line: 2006, col: 5, offset: 62469},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2006, col: 5, offset: 62469},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 2006, col: 10, offset: 62474},
								name: "FromElem",
							},
						},
						&labeledExpr{
							pos:   position{line: 2006, col: 19, offset: 62483},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 2006, col: 25, offset: 62489},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2006, col: 38, offset: 62502},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 2006, col: 40, offset: 62504},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 2006, col: 46, offset: 62510},
								name: "FromElem",
							},
						},
						&labeledExpr{
							pos:   position{line: 2006, col: 55, offset: 62519},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 2006, col: 57, offset: 62521},
								name: "JoinExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 2017, col: 1, offset: 62790},
			expr: &choiceExpr{
				pos: position{line: 2018, col: 5, offset: 62808},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2018, col: 5, offset: 62808},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 2018, col: 5, offset: 62808},
							exprs: []any{
								&zeroOrOneExpr{
									pos: position{line: 2018, col: 5, offset: 62808},
									expr: &seqExpr{
										pos: position{line: 2018, col: 6, offset: 62809},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 2018, col: 6, offset: 62809},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 2018, col: 8, offset: 62811},
												name: "INNER",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2018, col: 16, offset: 62819},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2018, col: 18, offset: 62821},
									name: "JOIN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2019, col: 5, offset: 62866},
						run: (*parser).callonSQLJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 2019, col: 5, offset: 62866},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2019, col: 5, offset: 62866},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2019, col: 7, offset: 62868},
									name: "FULL",
								},
								&zeroOrOneExpr{
									pos: position{line: 2019, col: 12, offset: 62873},
									expr: &seqExpr{
										pos: position{line: 2019, col: 13, offset: 62874},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 2019, col: 13, offset: 62874},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 2019, col: 15, offset: 62876},
												name: "OUTER",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2019, col: 23, offset: 62884},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2019, col: 25, offset: 62886},
									name: "JOIN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2020, col: 5, offset: 62920},
						run: (*parser).callonSQLJoinStyle20,
						expr: &seqExpr{
							pos: position{line: 2020, col: 5, offset: 62920},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2020, col: 5, offset: 62920},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2020, col: 7, offset: 62922},
									name: "LEFT",
								},
								&zeroOrOneExpr{
									pos: position{line: 2020, col: 12, offset: 62927},
									expr: &seqExpr{
										pos: position{line: 2020, col: 13, offset: 62928},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 2020, col: 13, offset: 62928},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 2020, col: 15, offset: 62930},
												name: "OUTER",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2020, col: 23, offset: 62938},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2020, col: 25, offset: 62940},
									name: "JOIN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2021, col: 5, offset: 62974},
						run: (*parser).callonSQLJoinStyle30,
						expr: &seqExpr{
							pos: position{line: 2021, col: 5, offset: 62974},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2021, col: 5, offset: 62974},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2021, col: 7, offset: 62976},
									name: "RIGHT",
								},
								&zeroOrOneExpr{
									pos: position{line: 2021, col: 13, offset: 62982},
									expr: &seqExpr{
										pos: position{line: 2021, col: 14, offset: 62983},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 2021, col: 14, offset: 62983},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 2021, col: 16, offset: 62985},
												name: "OUTER",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2021, col: 24, offset: 62993},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2021, col: 26, offset: 62995},
									name: "JOIN",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "JoinExpr",
			pos:  position{line: 2023, col: 1, offset: 63027},
			expr: &choiceExpr{
				pos: position{line: 2024, col: 5, offset: 63041},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2024, col: 5, offset: 63041},
						run: (*parser).callonJoinExpr2,
						expr: &seqExpr{
							pos: position{line: 2024, col: 5, offset: 63041},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2024, col: 5, offset: 63041},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2024, col: 7, offset: 63043},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 2024, col: 10, offset: 63046},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 2024, col: 12, offset: 63048},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 2024, col: 14, offset: 63050},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2030, col: 5, offset: 63172},
						run: (*parser).callonJoinExpr9,
						expr: &seqExpr{
							pos: position{line: 2030, col: 5, offset: 63172},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2030, col: 5, offset: 63172},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2030, col: 7, offset: 63174},
									name: "USING",
								},
								&ruleRefExpr{
									pos:  position{line: 2030, col: 13, offset: 63180},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 2030, col: 16, offset: 63183},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 2030, col: 20, offset: 63187},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 2030, col: 23, offset: 63190},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 2030, col: 30, offset: 63197},
										name: "FieldExprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2030, col: 41, offset: 63208},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 2030, col: 44, offset: 63211},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptOrdinality",
			pos:  position{line: 2037, col: 1, offset: 63348},
			expr: &choiceExpr{
				pos: position{line: 2038, col: 5, offset: 63367},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2038, col: 5, offset: 63367},
						run: (*parser).callonOptOrdinality2,
						expr: &seqExpr{
							pos: position{line: 2038, col: 5, offset: 63367},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2038, col: 5, offset: 63367},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 7, offset: 63369},
									name: "WITH",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 12, offset: 63374},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2038, col: 14, offset: 63376},
									name: "ORDINALITY",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2044, col: 5, offset: 63505},
						run: (*parser).callonOptOrdinality8,
						expr: &litMatcher{
							pos:        position{line: 2044, col: 5, offset: 63505},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptAlias",
			pos:  position{line: 2046, col: 1, offset: 63554},
			expr: &choiceExpr{
				pos: position{line: 2047, col: 5, offset: 63567},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2047, col: 5, offset: 63567},
						run: (*parser).callonOptAlias2,
						expr: &seqExpr{
							pos: position{line: 2047, col: 5, offset: 63567},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2047, col: 5, offset: 63567},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 2047, col: 7, offset: 63569},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 2047, col: 9, offset: 63571},
										name: "AliasClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2048, col: 5, offset: 63605},
						run: (*parser).callonOptAlias7,
						expr: &litMatcher{
							pos:        position{line: 2048, col: 5, offset: 63605},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AliasClause",
			pos:  position{line: 2050, col: 1, offset: 63642},
			expr: &actionExpr{
				pos: position{line: 2051, col: 5, offset: 63659},
				run: (*parser).callonAliasClause1,
				expr: &seqExpr{
					pos: position{line: 2051, col: 5, offset: 63659},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 2051, col: 5, offset: 63659},
							expr: &seqExpr{
								pos: position{line: 2051, col: 6, offset: 63660},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 2051, col: 6, offset: 63660},
										name: "AS",
									},
									&ruleRefExpr{
										pos:  position{line: 2051, col: 9, offset: 63663},
										name: "_",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2051, col: 13, offset: 63667},
							expr: &choiceExpr{
								pos: position{line: 2051, col: 15, offset: 63669},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 2051, col: 15, offset: 63669},
										name: "SQLGuard",
									},
									&ruleRefExpr{
										pos:  position{line: 2051, col: 26, offset: 63680},
										name: "DeprecatedFroms",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2051, col: 43, offset: 63697},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 2051, col: 48, offset: 63702},
								name: "IdentifierName",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Selection",
			pos:  position{line: 2055, col: 1, offset: 63835},
			expr: &actionExpr{
				pos: position{line: 2056, col: 5, offset: 63849},
				run: (*parser).callonSelection1,
				expr: &seqExpr{
					pos: position{line: 2056, col: 5, offset: 63849},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2056, col: 5, offset: 63849},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2056, col: 11, offset: 63855},
								name: "SelectElem",
							},
						},
						&labeledExpr{
							pos:   position{line: 2056, col: 22, offset: 63866},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2056, col: 27, offset: 63871},
								expr: &actionExpr{
									pos: position{line: 2056, col: 29, offset: 63873},
									run: (*parser).callonSelection7,
									expr: &seqExpr{
										pos: position{line: 2056, col: 29, offset: 63873},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 2056, col: 29, offset: 63873},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 2056, col: 32, offset: 63876},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 2056, col: 36, offset: 63880},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 2056, col: 39, offset: 63883},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 2056, col: 41, offset: 63885},
													name: "SelectElem",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectElem",
			pos:  position{line: 2065, col: 1, offset: 64111},
			expr: &choiceExpr{
				pos: position{line: 2066, col: 5, offset: 64127},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2066, col: 5, offset: 64127},
						run: (*parser).callonSelectElem2,
						expr: &seqExpr{
							pos: position{line: 2066, col: 5, offset: 64127},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2066, col: 5, offset: 64127},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 2066, col: 7, offset: 64129},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 2066, col: 12, offset: 64134},
									label: "as",
									expr: &ruleRefExpr{
										pos:  position{line: 2066, col: 15, offset: 64137},
										name: "OptAsClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2077, col: 5, offset: 64353},
						run: (*parser).callonSelectElem8,
						expr: &litMatcher{
							pos:        position{line: 2077, col: 5, offset: 64353},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptAsClause",
			pos:  position{line: 2082, col: 1, offset: 64455},
			expr: &choiceExpr{
				pos: position{line: 2083, col: 5, offset: 64472},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2083, col: 5, offset: 64472},
						run: (*parser).callonOptAsClause2,
						expr: &seqExpr{
							pos: position{line: 2083, col: 5, offset: 64472},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2083, col: 5, offset: 64472},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2083, col: 7, offset: 64474},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 2083, col: 10, offset: 64477},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 2083, col: 12, offset: 64479},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 2083, col: 15, offset: 64482},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2084, col: 5, offset: 64516},
						run: (*parser).callonOptAsClause9,
						expr: &litMatcher{
							pos:        position{line: 2084, col: 5, offset: 64516},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptOrderByClause",
			pos:  position{line: 2086, col: 1, offset: 64541},
			expr: &choiceExpr{
				pos: position{line: 2087, col: 5, offset: 64563},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2087, col: 5, offset: 64563},
						run: (*parser).callonOptOrderByClause2,
						expr: &seqExpr{
							pos: position{line: 2087, col: 5, offset: 64563},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2087, col: 5, offset: 64563},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2087, col: 7, offset: 64565},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 2087, col: 13, offset: 64571},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2087, col: 15, offset: 64573},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 2087, col: 18, offset: 64576},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 2087, col: 20, offset: 64578},
									label: "list",
									expr: &ruleRefExpr{
										pos:  position{line: 2087, col: 25, offset: 64583},
										name: "OrderByList",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2094, col: 5, offset: 64742},
						run: (*parser).callonOptOrderByClause11,
						expr: &litMatcher{
							pos:        position{line: 2094, col: 5, offset: 64742},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OrderByList",
			pos:  position{line: 2096, col: 1, offset: 64775},
			expr: &actionExpr{
				pos: position{line: 2097, col: 5, offset: 64792},
				run: (*parser).callonOrderByList1,
				expr: &seqExpr{
					pos: position{line: 2097, col: 5, offset: 64792},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2097, col: 5, offset: 64792},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 2097, col: 11, offset: 64798},
								name: "OrderByItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 2097, col: 23, offset: 64810},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2097, col: 28, offset: 64815},
								expr: &actionExpr{
									pos: position{line: 2097, col: 30, offset: 64817},
									run: (*parser).callonOrderByList7,
									expr: &seqExpr{
										pos: position{line: 2097, col: 30, offset: 64817},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 2097, col: 30, offset: 64817},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 2097, col: 33, offset: 64820},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 2097, col: 37, offset: 64824},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 2097, col: 40, offset: 64827},
												label: "o",
												expr: &ruleRefExpr{
													pos:  position{line: 2097, col: 42, offset: 64829},
													name: "OrderByItem",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OrderByItem",
			pos:  position{line: 2101, col: 1, offset: 64930},
			expr: &actionExpr{
				pos: position{line: 2102, col: 5, offset: 64946},
				run: (*parser).callonOrderByItem1,
				expr: &seqExpr{
					pos: position{line: 2102, col: 5, offset: 64946},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2102, col: 5, offset: 64946},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 2102, col: 7, offset: 64948},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2102, col: 12, offset: 64953},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 2102, col: 18, offset: 64959},
								name: "OptAscDesc",
							},
						},
						&labeledExpr{
							pos:   position{line: 2102, col: 29, offset: 64970},
							label: "nulls",
							expr: &ruleRefExpr{
								pos:  position{line: 2102, col: 35, offset: 64976},
								name: "OptNullsOrder",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptAscDesc",
			pos:  position{line: 2113, col: 1, offset: 65226},
			expr: &choiceExpr{
				pos: position{line: 2114, col: 5, offset: 65241},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2114, col: 5, offset: 65241},
						run: (*parser).callonOptAscDesc2,
						expr: &seqExpr{
							pos: position{line: 2114, col: 5, offset: 65241},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2114, col: 5, offset: 65241},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2114, col: 7, offset: 65243},
									name: "ASC",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2115, col: 5, offset: 65315},
						run: (*parser).callonOptAscDesc6,
						expr: &seqExpr{
							pos: position{line: 2115, col: 5, offset: 65315},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2115, col: 5, offset: 65315},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2115, col: 7, offset: 65317},
									name: "DESC",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2116, col: 5, offset: 65389},
						run: (*parser).callonOptAscDesc10,
						expr: &litMatcher{
							pos:        position{line: 2116, col: 5, offset: 65389},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptNullsOrder",
			pos:  position{line: 2118, col: 1, offset: 65421},
			expr: &choiceExpr{
				pos: position{line: 2119, col: 5, offset: 65439},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2119, col: 5, offset: 65439},
						run: (*parser).callonOptNullsOrder2,
						expr: &seqExpr{
							pos: position{line: 2119, col: 5, offset: 65439},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2119, col: 5, offset: 65439},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2119, col: 7, offset: 65441},
									name: "NULLS",
								},
								&ruleRefExpr{
									pos:  position{line: 2119, col: 13, offset: 65447},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2119, col: 15, offset: 65449},
									name: "FIRST",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2120, col: 5, offset: 65525},
						run: (*parser).callonOptNullsOrder8,
						expr: &seqExpr{
							pos: position{line: 2120, col: 5, offset: 65525},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2120, col: 5, offset: 65525},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2120, col: 7, offset: 65527},
									name: "NULLS",
								},
								&ruleRefExpr{
									pos:  position{line: 2120, col: 13, offset: 65533},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2120, col: 15, offset: 65535},
									name: "LAST",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2121, col: 5, offset: 65610},
						run: (*parser).callonOptNullsOrder14,
						expr: &litMatcher{
							pos:        position{line: 2121, col: 5, offset: 65610},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectLimit",
			pos:  position{line: 2123, col: 1, offset: 65655},
			expr: &choiceExpr{
				pos: position{line: 2124, col: 5, offset: 65671},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2124, col: 5, offset: 65671},
						run: (*parser).callonSelectLimit2,
						expr: &seqExpr{
							pos: position{line: 2124, col: 5, offset: 65671},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2124, col: 5, offset: 65671},
									label: "l",
									expr: &ruleRefExpr{
										pos:  position{line: 2124, col: 7, offset: 65673},
										name: "LimitClause",
									},
								},
								&labeledExpr{
									pos:   position{line: 2124, col: 19, offset: 65685},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 2124, col: 21, offset: 65687},
										name: "OptOffsetClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2131, col: 5, offset: 65833},
						run: (*parser).callonSelectLimit8,
						expr: &seqExpr{
							pos: position{line: 2131, col: 5, offset: 65833},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 2131, col: 5, offset: 65833},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 2131, col: 7, offset: 65835},
										name: "OffsetClause",
									},
								},
								&labeledExpr{
									pos:   position{line: 2131, col: 20, offset: 65848},
									label: "l",
									expr: &ruleRefExpr{
										pos:  position{line: 2131, col: 22, offset: 65850},
										name: "OptLimitClause",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptLimitClause",
			pos:  position{line: 2144, col: 1, offset: 66122},
			expr: &choiceExpr{
				pos: position{line: 2145, col: 5, offset: 66142},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2145, col: 5, offset: 66142},
						run: (*parser).callonOptLimitClause2,
						expr: &seqExpr{
							pos: position{line: 2145, col: 5, offset: 66142},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2145, col: 5, offset: 66142},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 2145, col: 7, offset: 66144},
									label: "l",
									expr: &ruleRefExpr{
										pos:  position{line: 2145, col: 9, offset: 66146},
										name: "LimitClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2146, col: 5, offset: 66180},
						run: (*parser).callonOptLimitClause7,
						expr: &litMatcher{
							pos:        position{line: 2146, col: 5, offset: 66180},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LimitClause",
			pos:  position{line: 2148, col: 1, offset: 66217},
			expr: &choiceExpr{
				pos: position{line: 2149, col: 5, offset: 66234},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2149, col: 5, offset: 66234},
						run: (*parser).callonLimitClause2,
						expr: &seqExpr{
							pos: position{line: 2149, col: 5, offset: 66234},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2149, col: 5, offset: 66234},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 2149, col: 11, offset: 66240},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2149, col: 13, offset: 66242},
									name: "ALL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2150, col: 5, offset: 66304},
						run: (*parser).callonLimitClause7,
						expr: &seqExpr{
							pos: position{line: 2150, col: 5, offset: 66304},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2150, col: 5, offset: 66304},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 2150, col: 11, offset: 66310},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 2150, col: 13, offset: 66312},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 2150, col: 15, offset: 66314},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OptOffsetClause",
			pos:  position{line: 2158, col: 1, offset: 66439},
			expr: &choiceExpr{
				pos: position{line: 2159, col: 5, offset: 66460},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2159, col: 5, offset: 66460},
						run: (*parser).callonOptOffsetClause2,
						expr: &seqExpr{
							pos: position{line: 2159, col: 5, offset: 66460},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2159, col: 5, offset: 66460},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 2159, col: 7, offset: 66462},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 2159, col: 9, offset: 66464},
										name: "OffsetClause",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2160, col: 5, offset: 66500},
						run: (*parser).callonOptOffsetClause7,
						expr: &litMatcher{
							pos:        position{line: 2160, col: 5, offset: 66500},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OffsetClause",
			pos:  position{line: 2162, col: 1, offset: 66525},
			expr: &actionExpr{
				pos: position{line: 2163, col: 5, offset: 66543},
				run: (*parser).callonOffsetClause1,
				expr: &seqExpr{
					pos: position{line: 2163, col: 5, offset: 66543},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 2163, col: 5, offset: 66543},
							name: "OFFSET",
						},
						&ruleRefExpr{
							pos:  position{line: 2163, col: 12, offset: 66550},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 2163, col: 14, offset: 66552},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 2163, col: 16, offset: 66554},
								name: "Expr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SetOperation",
			pos:  position{line: 2165, col: 1, offset: 66579},
			expr: &actionExpr{
				pos: position{line: 2166, col: 5, offset: 66596},
				run: (*parser).callonSetOperation1,
				expr: &seqExpr{
					pos: position{line: 2166, col: 5, offset: 66596},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 2166, col: 5, offset: 66596},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 2166, col: 10, offset: 66601},
								name: "SelectExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 2166, col: 21, offset: 66612},
							label: "distinct",
							expr: &ruleRefExpr{
								pos:  position{line: 2166, col: 30, offset: 66621},
								name: "SetOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2166, col: 36, offset: 66627},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 2166, col: 38, offset: 66629},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 2166, col: 44, offset: 66635},
								name: "SelectExpr",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "SetOp",
			pos:  position{line: 2176, col: 1, offset: 66856},
			expr: &choiceExpr{
				pos: position{line: 2177, col: 5, offset: 66867},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 2177, col: 5, offset: 66867},
						run: (*parser).callonSetOp2,
						expr: &seqExpr{
							pos: position{line: 2177, col: 5, offset: 66867},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2177, col: 5, offset: 66867},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2177, col: 7, offset: 66869},
									name: "UNION",
								},
								&ruleRefExpr{
									pos:  position{line: 2177, col: 13, offset: 66875},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2177, col: 15, offset: 66877},
									name: "ALL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2178, col: 5, offset: 66913},
						run: (*parser).callonSetOp8,
						expr: &seqExpr{
							pos: position{line: 2178, col: 5, offset: 66913},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 2178, col: 5, offset: 66913},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2178, col: 7, offset: 66915},
									name: "UNION",
								},
								&ruleRefExpr{
									pos:  position{line: 2178, col: 13, offset: 66921},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 2178, col: 15, offset: 66923},
									name: "DISTINCT",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2179, col: 5, offset: 66958},
						run: (*parser).callonSetOp14,
						expr: &litMatcher{
							pos:        position{line: 2179, col: 5, offset: 66958},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SQLGuard",
			pos:  position{line: 2182, col: 1, offset: 67021},
			expr: &choiceExpr{
				pos: position{line: 2183, col: 5, offset: 67036},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 2183, col: 5, offset: 67036},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 2183, col: 12, offset: 67043},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 2183, col: 20, offset: 67051},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 2183, col: 29, offset: 67060},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 2183, col: 38, offset: 67069},
						name: "RECURSIVE",
					},
					&ruleRefExpr{
						pos:  position{line: 2184, col: 5, offset: 67083},
						name: "INNER",
					},
					&ruleRefExpr{
						pos:  position{line: 2184, col: 13, offset: 67091},
						name: "LEFT",
					},
					&ruleRefExpr{
						pos:  position{line: 2184, col: 20, offset: 67098},
						name: "RIGHT",
					},
					&ruleRefExpr{
						pos:  position{line: 2184, col: 28, offset: 67106},
						name: "OUTER",
					},
					&ruleRefExpr{
						pos:  position{line: 2184, col: 36, offset: 67114},
						name: "CROSS",
					},
					&ruleRefExpr{
						pos:  position{line: 2184, col: 44, offset: 67122},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 2185, col: 5, offset: 67131},
						name: "UNION",
					},
					&ruleRefExpr{
						pos:  position{line: 2186, col: 5, offset: 67141},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 2187, col: 5, offset: 67151},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 2188, col: 5, offset: 67161},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 2189, col: 5, offset: 67172},
						name: "WITH",
					},
					&ruleRefExpr{
						pos:  position{line: 2190, col: 5, offset: 67181},
						name: "USING",
					},
					&ruleRefExpr{
						pos:  position{line: 2191, col: 5, offset: 67191},
						name: "ON",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AGGREGATE",
			pos:  position{line: 2193, col: 1, offset: 67195},
			expr: &seqExpr{
				pos: position{line: 2193, col: 14, offset: 67208},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2193, col: 14, offset: 67208},
						val:        "aggregate",
						ignoreCase: true,
						want:       "\"AGGREGATE\"i",
					},
					&notExpr{
						pos: position{line: 2193, col: 33, offset: 67227},
						expr: &ruleRefExpr{
							pos:  position{line: 2193, col: 34, offset: 67228},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ALL",
			pos:  position{line: 2194, col: 1, offset: 67243},
			expr: &seqExpr{
				pos: position{line: 2194, col: 14, offset: 67256},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2194, col: 14, offset: 67256},
						val:        "all",
						ignoreCase: true,
						want:       "\"ALL\"i",
					},
					&notExpr{
						pos: position{line: 2194, col: 33, offset: 67275},
						expr: &ruleRefExpr{
							pos:  position{line: 2194, col: 34, offset: 67276},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AND",
			pos:  position{line: 2195, col: 1, offset: 67291},
			expr: &actionExpr{
				pos: position{line: 2195, col: 14, offset: 67304},
				run: (*parser).callonAND1,
				expr: &seqExpr{
					pos: position{line: 2195, col: 14, offset: 67304},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2195, col: 14, offset: 67304},
							val:        "and",
							ignoreCase: true,
							want:       "\"AND\"i",
						},
						&notExpr{
							pos: position{line: 2195, col: 33, offset: 67323},
							expr: &ruleRefExpr{
								pos:  position{line: 2195, col: 34, offset: 67324},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ANTI",
			pos:  position{line: 2196, col: 1, offset: 67361},
			expr: &seqExpr{
				pos: position{line: 2196, col: 14, offset: 67374},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2196, col: 14, offset: 67374},
						val:        "anti",
						ignoreCase: true,
						want:       "\"ANTI\"i",
					},
					&notExpr{
						pos: position{line: 2196, col: 33, offset: 67393},
						expr: &ruleRefExpr{
							pos:  position{line: 2196, col: 34, offset: 67394},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AS",
			pos:  position{line: 2197, col: 1, offset: 67409},
			expr: &seqExpr{
				pos: position{line: 2197, col: 14, offset: 67422},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2197, col: 14, offset: 67422},
						val:        "as",
						ignoreCase: true,
						want:       "\"AS\"i",
					},
					&notExpr{
						pos: position{line: 2197, col: 33, offset: 67441},
						expr: &ruleRefExpr{
							pos:  position{line: 2197, col: 34, offset: 67442},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ASC",
			pos:  position{line: 2198, col: 1, offset: 67457},
			expr: &actionExpr{
				pos: position{line: 2198, col: 14, offset: 67470},
				run: (*parser).callonASC1,
				expr: &seqExpr{
					pos: position{line: 2198, col: 14, offset: 67470},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2198, col: 14, offset: 67470},
							val:        "asc",
							ignoreCase: true,
							want:       "\"ASC\"i",
						},
						&notExpr{
							pos: position{line: 2198, col: 33, offset: 67489},
							expr: &ruleRefExpr{
								pos:  position{line: 2198, col: 34, offset: 67490},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ASSERT",
			pos:  position{line: 2199, col: 1, offset: 67527},
			expr: &seqExpr{
				pos: position{line: 2199, col: 14, offset: 67540},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2199, col: 14, offset: 67540},
						val:        "assert",
						ignoreCase: true,
						want:       "\"ASSERT\"i",
					},
					&notExpr{
						pos: position{line: 2199, col: 33, offset: 67559},
						expr: &ruleRefExpr{
							pos:  position{line: 2199, col: 34, offset: 67560},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AT",
			pos:  position{line: 2200, col: 1, offset: 67575},
			expr: &seqExpr{
				pos: position{line: 2200, col: 14, offset: 67588},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2200, col: 14, offset: 67588},
						val:        "at",
						ignoreCase: true,
						want:       "\"AT\"i",
					},
					&notExpr{
						pos: position{line: 2200, col: 33, offset: 67607},
						expr: &ruleRefExpr{
							pos:  position{line: 2200, col: 34, offset: 67608},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AUTHOR",
			pos:  position{line: 2201, col: 1, offset: 67623},
			expr: &seqExpr{
				pos: position{line: 2201, col: 14, offset: 67636},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2201, col: 14, offset: 67636},
						val:        "author",
						ignoreCase: true,
						want:       "\"AUTHOR\"i",
					},
					&notExpr{
						pos: position{line: 2201, col: 33, offset: 67655},
						expr: &ruleRefExpr{
							pos:  position{line: 2201, col: 34, offset: 67656},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BETWEEN",
			pos:  position{line: 2202, col: 1, offset: 67671},
			expr: &seqExpr{
				pos: position{line: 2202, col: 14, offset: 67684},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2202, col: 14, offset: 67684},
						val:        "between",
						ignoreCase: true,
						want:       "\"BETWEEN\"i",
					},
					&notExpr{
						pos: position{line: 2202, col: 33, offset: 67703},
						expr: &ruleRefExpr{
							pos:  position{line: 2202, col: 34, offset: 67704},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BODY",
			pos:  position{line: 2203, col: 1, offset: 67719},
			expr: &seqExpr{
				pos: position{line: 2203, col: 14, offset: 67732},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2203, col: 14, offset: 67732},
						val:        "body",
						ignoreCase: true,
						want:       "\"BODY\"i",
					},
					&notExpr{
						pos: position{line: 2203, col: 33, offset: 67751},
						expr: &ruleRefExpr{
							pos:  position{line: 2203, col: 34, offset: 67752},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BY",
			pos:  position{line: 2204, col: 1, offset: 67767},
			expr: &seqExpr{
				pos: position{line: 2204, col: 14, offset: 67780},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2204, col: 14, offset: 67780},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
					&notExpr{
						pos: position{line: 2204, col: 33, offset: 67799},
						expr: &ruleRefExpr{
							pos:  position{line: 2204, col: 34, offset: 67800},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CASE",
			pos:  position{line: 2205, col: 1, offset: 67815},
			expr: &seqExpr{
				pos: position{line: 2205, col: 14, offset: 67828},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2205, col: 14, offset: 67828},
						val:        "case",
						ignoreCase: true,
						want:       "\"CASE\"i",
					},
					&notExpr{
						pos: position{line: 2205, col: 33, offset: 67847},
						expr: &ruleRefExpr{
							pos:  position{line: 2205, col: 34, offset: 67848},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CONST",
			pos:  position{line: 2206, col: 1, offset: 67863},
			expr: &seqExpr{
				pos: position{line: 2206, col: 14, offset: 67876},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2206, col: 14, offset: 67876},
						val:        "const",
						ignoreCase: true,
						want:       "\"CONST\"i",
					},
					&notExpr{
						pos: position{line: 2206, col: 33, offset: 67895},
						expr: &ruleRefExpr{
							pos:  position{line: 2206, col: 34, offset: 67896},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CROSS",
			pos:  position{line: 2207, col: 1, offset: 67911},
			expr: &seqExpr{
				pos: position{line: 2207, col: 14, offset: 67924},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2207, col: 14, offset: 67924},
						val:        "cross",
						ignoreCase: true,
						want:       "\"CROSS\"i",
					},
					&notExpr{
						pos: position{line: 2207, col: 33, offset: 67943},
						expr: &ruleRefExpr{
							pos:  position{line: 2207, col: 34, offset: 67944},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CUT",
			pos:  position{line: 2208, col: 1, offset: 67959},
			expr: &seqExpr{
				pos: position{line: 2208, col: 14, offset: 67972},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2208, col: 14, offset: 67972},
						val:        "cut",
						ignoreCase: true,
						want:       "\"CUT\"i",
					},
					&notExpr{
						pos: position{line: 2208, col: 33, offset: 67991},
						expr: &ruleRefExpr{
							pos:  position{line: 2208, col: 34, offset: 67992},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DEBUG",
			pos:  position{line: 2209, col: 1, offset: 68007},
			expr: &seqExpr{
				pos: position{line: 2209, col: 14, offset: 68020},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2209, col: 14, offset: 68020},
						val:        "debug",
						ignoreCase: true,
						want:       "\"DEBUG\"i",
					},
					&notExpr{
						pos: position{line: 2209, col: 33, offset: 68039},
						expr: &ruleRefExpr{
							pos:  position{line: 2209, col: 34, offset: 68040},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DEFAULT",
			pos:  position{line: 2210, col: 1, offset: 68055},
			expr: &seqExpr{
				pos: position{line: 2210, col: 14, offset: 68068},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2210, col: 14, offset: 68068},
						val:        "default",
						ignoreCase: true,
						want:       "\"DEFAULT\"i",
					},
					&notExpr{
						pos: position{line: 2210, col: 33, offset: 68087},
						expr: &ruleRefExpr{
							pos:  position{line: 2210, col: 34, offset: 68088},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DESC",
			pos:  position{line: 2211, col: 1, offset: 68103},
			expr: &actionExpr{
				pos: position{line: 2211, col: 14, offset: 68116},
				run: (*parser).callonDESC1,
				expr: &seqExpr{
					pos: position{line: 2211, col: 14, offset: 68116},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2211, col: 14, offset: 68116},
							val:        "desc",
							ignoreCase: true,
							want:       "\"DESC\"i",
						},
						&notExpr{
							pos: position{line: 2211, col: 33, offset: 68135},
							expr: &ruleRefExpr{
								pos:  position{line: 2211, col: 34, offset: 68136},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DISTINCT",
			pos:  position{line: 2212, col: 1, offset: 68174},
			expr: &seqExpr{
				pos: position{line: 2212, col: 14, offset: 68187},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2212, col: 14, offset: 68187},
						val:        "distinct",
						ignoreCase: true,
						want:       "\"DISTINCT\"i",
					},
					&notExpr{
						pos: position{line: 2212, col: 33, offset: 68206},
						expr: &ruleRefExpr{
							pos:  position{line: 2212, col: 34, offset: 68207},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DROP",
			pos:  position{line: 2213, col: 1, offset: 68222},
			expr: &seqExpr{
				pos: position{line: 2213, col: 14, offset: 68235},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2213, col: 14, offset: 68235},
						val:        "drop",
						ignoreCase: true,
						want:       "\"DROP\"i",
					},
					&notExpr{
						pos: position{line: 2213, col: 33, offset: 68254},
						expr: &ruleRefExpr{
							pos:  position{line: 2213, col: 34, offset: 68255},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "END",
			pos:  position{line: 2214, col: 1, offset: 68271},
			expr: &seqExpr{
				pos: position{line: 2214, col: 14, offset: 68284},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2214, col: 14, offset: 68284},
						val:        "end",
						ignoreCase: true,
						want:       "\"END\"i",
					},
					&notExpr{
						pos: position{line: 2214, col: 33, offset: 68303},
						expr: &ruleRefExpr{
							pos:  position{line: 2214, col: 34, offset: 68304},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ERROR",
			pos:  position{line: 2215, col: 1, offset: 68319},
			expr: &seqExpr{
				pos: position{line: 2215, col: 14, offset: 68332},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2215, col: 14, offset: 68332},
						val:        "error",
						ignoreCase: true,
						want:       "\"ERROR\"i",
					},
					&notExpr{
						pos: position{line: 2215, col: 33, offset: 68351},
						expr: &ruleRefExpr{
							pos:  position{line: 2215, col: 34, offset: 68352},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EXPLODE",
			pos:  position{line: 2216, col: 1, offset: 68367},
			expr: &seqExpr{
				pos: position{line: 2216, col: 14, offset: 68380},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2216, col: 14, offset: 68380},
						val:        "explode",
						ignoreCase: true,
						want:       "\"EXPLODE\"i",
					},
					&notExpr{
						pos: position{line: 2216, col: 33, offset: 68399},
						expr: &ruleRefExpr{
							pos:  position{line: 2216, col: 34, offset: 68400},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FALSE",
			pos:  position{line: 2217, col: 1, offset: 68415},
			expr: &seqExpr{
				pos: position{line: 2217, col: 14, offset: 68428},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2217, col: 14, offset: 68428},
						val:        "false",
						ignoreCase: true,
						want:       "\"FALSE\"i",
					},
					&notExpr{
						pos: position{line: 2217, col: 33, offset: 68447},
						expr: &ruleRefExpr{
							pos:  position{line: 2217, col: 34, offset: 68448},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FIRST",
			pos:  position{line: 2218, col: 1, offset: 68463},
			expr: &seqExpr{
				pos: position{line: 2218, col: 14, offset: 68476},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2218, col: 14, offset: 68476},
						val:        "first",
						ignoreCase: true,
						want:       "\"FIRST\"i",
					},
					&notExpr{
						pos: position{line: 2218, col: 33, offset: 68495},
						expr: &ruleRefExpr{
							pos:  position{line: 2218, col: 34, offset: 68496},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FORK",
			pos:  position{line: 2219, col: 1, offset: 68511},
			expr: &seqExpr{
				pos: position{line: 2219, col: 14, offset: 68524},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2219, col: 14, offset: 68524},
						val:        "fork",
						ignoreCase: true,
						want:       "\"FORK\"i",
					},
					&notExpr{
						pos: position{line: 2219, col: 33, offset: 68543},
						expr: &ruleRefExpr{
							pos:  position{line: 2219, col: 34, offset: 68544},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FORMAT",
			pos:  position{line: 2220, col: 1, offset: 68559},
			expr: &seqExpr{
				pos: position{line: 2220, col: 14, offset: 68572},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2220, col: 14, offset: 68572},
						val:        "format",
						ignoreCase: true,
						want:       "\"FORMAT\"i",
					},
					&notExpr{
						pos: position{line: 2220, col: 33, offset: 68591},
						expr: &ruleRefExpr{
							pos:  position{line: 2220, col: 34, offset: 68592},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FROM",
			pos:  position{line: 2221, col: 1, offset: 68607},
			expr: &seqExpr{
				pos: position{line: 2221, col: 14, offset: 68620},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2221, col: 14, offset: 68620},
						val:        "from",
						ignoreCase: true,
						want:       "\"FROM\"i",
					},
					&notExpr{
						pos: position{line: 2221, col: 33, offset: 68639},
						expr: &ruleRefExpr{
							pos:  position{line: 2221, col: 34, offset: 68640},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FULL",
			pos:  position{line: 2222, col: 1, offset: 68655},
			expr: &seqExpr{
				pos: position{line: 2222, col: 14, offset: 68668},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2222, col: 14, offset: 68668},
						val:        "full",
						ignoreCase: true,
						want:       "\"FULL\"i",
					},
					&notExpr{
						pos: position{line: 2222, col: 33, offset: 68687},
						expr: &ruleRefExpr{
							pos:  position{line: 2222, col: 34, offset: 68688},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FUNC",
			pos:  position{line: 2223, col: 1, offset: 68703},
			expr: &seqExpr{
				pos: position{line: 2223, col: 14, offset: 68716},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2223, col: 14, offset: 68716},
						val:        "func",
						ignoreCase: true,
						want:       "\"FUNC\"i",
					},
					&notExpr{
						pos: position{line: 2223, col: 33, offset: 68735},
						expr: &ruleRefExpr{
							pos:  position{line: 2223, col: 34, offset: 68736},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FUSE",
			pos:  position{line: 2224, col: 1, offset: 68751},
			expr: &seqExpr{
				pos: position{line: 2224, col: 14, offset: 68764},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2224, col: 14, offset: 68764},
						val:        "fuse",
						ignoreCase: true,
						want:       "\"FUSE\"i",
					},
					&notExpr{
						pos: position{line: 2224, col: 33, offset: 68783},
						expr: &ruleRefExpr{
							pos:  position{line: 2224, col: 34, offset: 68784},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GREP",
			pos:  position{line: 2225, col: 1, offset: 68799},
			expr: &seqExpr{
				pos: position{line: 2225, col: 14, offset: 68812},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2225, col: 14, offset: 68812},
						val:        "grep",
						ignoreCase: true,
						want:       "\"GREP\"i",
					},
					&notExpr{
						pos: position{line: 2225, col: 33, offset: 68831},
						expr: &ruleRefExpr{
							pos:  position{line: 2225, col: 34, offset: 68832},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GROUP",
			pos:  position{line: 2226, col: 1, offset: 68847},
			expr: &seqExpr{
				pos: position{line: 2226, col: 14, offset: 68860},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2226, col: 14, offset: 68860},
						val:        "group",
						ignoreCase: true,
						want:       "\"GROUP\"i",
					},
					&notExpr{
						pos: position{line: 2226, col: 33, offset: 68879},
						expr: &ruleRefExpr{
							pos:  position{line: 2226, col: 34, offset: 68880},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HAVING",
			pos:  position{line: 2227, col: 1, offset: 68895},
			expr: &seqExpr{
				pos: position{line: 2227, col: 14, offset: 68908},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2227, col: 14, offset: 68908},
						val:        "having",
						ignoreCase: true,
						want:       "\"HAVING\"i",
					},
					&notExpr{
						pos: position{line: 2227, col: 33, offset: 68927},
						expr: &ruleRefExpr{
							pos:  position{line: 2227, col: 34, offset: 68928},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HEAD",
			pos:  position{line: 2228, col: 1, offset: 68943},
			expr: &seqExpr{
				pos: position{line: 2228, col: 14, offset: 68956},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2228, col: 14, offset: 68956},
						val:        "head",
						ignoreCase: true,
						want:       "\"HEAD\"i",
					},
					&notExpr{
						pos: position{line: 2228, col: 33, offset: 68975},
						expr: &ruleRefExpr{
							pos:  position{line: 2228, col: 34, offset: 68976},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HEADERS",
			pos:  position{line: 2229, col: 1, offset: 68992},
			expr: &seqExpr{
				pos: position{line: 2229, col: 14, offset: 69005},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2229, col: 14, offset: 69005},
						val:        "headers",
						ignoreCase: true,
						want:       "\"HEADERS\"i",
					},
					&notExpr{
						pos: position{line: 2229, col: 33, offset: 69024},
						expr: &ruleRefExpr{
							pos:  position{line: 2229, col: 34, offset: 69025},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IN",
			pos:  position{line: 2230, col: 1, offset: 69040},
			expr: &seqExpr{
				pos: position{line: 2230, col: 14, offset: 69053},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2230, col: 14, offset: 69053},
						val:        "in",
						ignoreCase: true,
						want:       "\"IN\"i",
					},
					&notExpr{
						pos: position{line: 2230, col: 33, offset: 69072},
						expr: &ruleRefExpr{
							pos:  position{line: 2230, col: 34, offset: 69073},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "INNER",
			pos:  position{line: 2231, col: 1, offset: 69088},
			expr: &seqExpr{
				pos: position{line: 2231, col: 14, offset: 69101},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2231, col: 14, offset: 69101},
						val:        "inner",
						ignoreCase: true,
						want:       "\"INNER\"i",
					},
					&notExpr{
						pos: position{line: 2231, col: 33, offset: 69120},
						expr: &ruleRefExpr{
							pos:  position{line: 2231, col: 34, offset: 69121},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "JOIN",
			pos:  position{line: 2232, col: 1, offset: 69136},
			expr: &seqExpr{
				pos: position{line: 2232, col: 14, offset: 69149},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2232, col: 14, offset: 69149},
						val:        "join",
						ignoreCase: true,
						want:       "\"JOIN\"i",
					},
					&notExpr{
						pos: position{line: 2232, col: 33, offset: 69168},
						expr: &ruleRefExpr{
							pos:  position{line: 2232, col: 34, offset: 69169},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LAST",
			pos:  position{line: 2233, col: 1, offset: 69184},
			expr: &seqExpr{
				pos: position{line: 2233, col: 14, offset: 69197},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2233, col: 14, offset: 69197},
						val:        "last",
						ignoreCase: true,
						want:       "\"LAST\"i",
					},
					&notExpr{
						pos: position{line: 2233, col: 33, offset: 69216},
						expr: &ruleRefExpr{
							pos:  position{line: 2233, col: 34, offset: 69217},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LEFT",
			pos:  position{line: 2234, col: 1, offset: 69232},
			expr: &seqExpr{
				pos: position{line: 2234, col: 14, offset: 69245},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2234, col: 14, offset: 69245},
						val:        "left",
						ignoreCase: true,
						want:       "\"LEFT\"i",
					},
					&notExpr{
						pos: position{line: 2234, col: 33, offset: 69264},
						expr: &ruleRefExpr{
							pos:  position{line: 2234, col: 34, offset: 69265},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LIKE",
			pos:  position{line: 2235, col: 1, offset: 69280},
			expr: &seqExpr{
				pos: position{line: 2235, col: 14, offset: 69293},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2235, col: 14, offset: 69293},
						val:        "like",
						ignoreCase: true,
						want:       "\"LIKE\"i",
					},
					&notExpr{
						pos: position{line: 2235, col: 32, offset: 69311},
						expr: &ruleRefExpr{
							pos:  position{line: 2235, col: 33, offset: 69312},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LIMIT",
			pos:  position{line: 2236, col: 1, offset: 69327},
			expr: &seqExpr{
				pos: position{line: 2236, col: 14, offset: 69340},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2236, col: 14, offset: 69340},
						val:        "limit",
						ignoreCase: true,
						want:       "\"LIMIT\"i",
					},
					&notExpr{
						pos: position{line: 2236, col: 33, offset: 69359},
						expr: &ruleRefExpr{
							pos:  position{line: 2236, col: 34, offset: 69360},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LOAD",
			pos:  position{line: 2237, col: 1, offset: 69375},
			expr: &seqExpr{
				pos: position{line: 2237, col: 14, offset: 69388},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2237, col: 14, offset: 69388},
						val:        "load",
						ignoreCase: true,
						want:       "\"LOAD\"i",
					},
					&notExpr{
						pos: position{line: 2237, col: 33, offset: 69407},
						expr: &ruleRefExpr{
							pos:  position{line: 2237, col: 34, offset: 69408},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MATERIALIZED",
			pos:  position{line: 2238, col: 1, offset: 69423},
			expr: &seqExpr{
				pos: position{line: 2238, col: 16, offset: 69438},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2238, col: 16, offset: 69438},
						val:        "materialized",
						ignoreCase: true,
						want:       "\"MATERIALIZED\"i",
					},
					&notExpr{
						pos: position{line: 2238, col: 33, offset: 69455},
						expr: &ruleRefExpr{
							pos:  position{line: 2238, col: 34, offset: 69456},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MERGE",
			pos:  position{line: 2239, col: 1, offset: 69471},
			expr: &seqExpr{
				pos: position{line: 2239, col: 14, offset: 69484},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2239, col: 14, offset: 69484},
						val:        "merge",
						ignoreCase: true,
						want:       "\"MERGE\"i",
					},
					&notExpr{
						pos: position{line: 2239, col: 33, offset: 69503},
						expr: &ruleRefExpr{
							pos:  position{line: 2239, col: 34, offset: 69504},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MESSAGE",
			pos:  position{line: 2240, col: 1, offset: 69519},
			expr: &seqExpr{
				pos: position{line: 2240, col: 14, offset: 69532},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2240, col: 14, offset: 69532},
						val:        "message",
						ignoreCase: true,
						want:       "\"MESSAGE\"i",
					},
					&notExpr{
						pos: position{line: 2240, col: 33, offset: 69551},
						expr: &ruleRefExpr{
							pos:  position{line: 2240, col: 34, offset: 69552},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "META",
			pos:  position{line: 2241, col: 1, offset: 69567},
			expr: &seqExpr{
				pos: position{line: 2241, col: 14, offset: 69580},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2241, col: 14, offset: 69580},
						val:        "meta",
						ignoreCase: true,
						want:       "\"META\"i",
					},
					&notExpr{
						pos: position{line: 2241, col: 33, offset: 69599},
						expr: &ruleRefExpr{
							pos:  position{line: 2241, col: 34, offset: 69600},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "METHOD",
			pos:  position{line: 2242, col: 1, offset: 69615},
			expr: &seqExpr{
				pos: position{line: 2242, col: 14, offset: 69628},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2242, col: 14, offset: 69628},
						val:        "method",
						ignoreCase: true,
						want:       "\"METHOD\"i",
					},
					&notExpr{
						pos: position{line: 2242, col: 33, offset: 69647},
						expr: &ruleRefExpr{
							pos:  position{line: 2242, col: 34, offset: 69648},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NOT",
			pos:  position{line: 2243, col: 1, offset: 69663},
			expr: &seqExpr{
				pos: position{line: 2243, col: 14, offset: 69676},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2243, col: 14, offset: 69676},
						val:        "not",
						ignoreCase: true,
						want:       "\"NOT\"i",
					},
					&notExpr{
						pos: position{line: 2243, col: 33, offset: 69695},
						expr: &ruleRefExpr{
							pos:  position{line: 2243, col: 34, offset: 69696},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NULL",
			pos:  position{line: 2244, col: 1, offset: 69711},
			expr: &seqExpr{
				pos: position{line: 2244, col: 14, offset: 69724},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2244, col: 14, offset: 69724},
						val:        "null",
						ignoreCase: true,
						want:       "\"NULL\"i",
					},
					&notExpr{
						pos: position{line: 2244, col: 33, offset: 69743},
						expr: &ruleRefExpr{
							pos:  position{line: 2244, col: 34, offset: 69744},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NULLS",
			pos:  position{line: 2245, col: 1, offset: 69759},
			expr: &seqExpr{
				pos: position{line: 2245, col: 14, offset: 69772},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2245, col: 14, offset: 69772},
						val:        "nulls",
						ignoreCase: true,
						want:       "\"NULLS\"i",
					},
					&notExpr{
						pos: position{line: 2245, col: 33, offset: 69791},
						expr: &ruleRefExpr{
							pos:  position{line: 2245, col: 34, offset: 69792},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OFFSET",
			pos:  position{line: 2246, col: 1, offset: 69807},
			expr: &seqExpr{
				pos: position{line: 2246, col: 14, offset: 69820},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2246, col: 14, offset: 69820},
						val:        "offset",
						ignoreCase: true,
						want:       "\"OFFSET\"i",
					},
					&notExpr{
						pos: position{line: 2246, col: 33, offset: 69839},
						expr: &ruleRefExpr{
							pos:  position{line: 2246, col: 34, offset: 69840},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ON",
			pos:  position{line: 2247, col: 1, offset: 69855},
			expr: &seqExpr{
				pos: position{line: 2247, col: 14, offset: 69868},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2247, col: 14, offset: 69868},
						val:        "on",
						ignoreCase: true,
						want:       "\"ON\"i",
					},
					&notExpr{
						pos: position{line: 2247, col: 33, offset: 69887},
						expr: &ruleRefExpr{
							pos:  position{line: 2247, col: 34, offset: 69888},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OP",
			pos:  position{line: 2248, col: 1, offset: 69903},
			expr: &seqExpr{
				pos: position{line: 2248, col: 14, offset: 69916},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2248, col: 14, offset: 69916},
						val:        "op",
						ignoreCase: true,
						want:       "\"OP\"i",
					},
					&notExpr{
						pos: position{line: 2248, col: 33, offset: 69935},
						expr: &ruleRefExpr{
							pos:  position{line: 2248, col: 34, offset: 69936},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OR",
			pos:  position{line: 2249, col: 1, offset: 69951},
			expr: &actionExpr{
				pos: position{line: 2249, col: 14, offset: 69964},
				run: (*parser).callonOR1,
				expr: &seqExpr{
					pos: position{line: 2249, col: 14, offset: 69964},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 2249, col: 14, offset: 69964},
							val:        "or",
							ignoreCase: true,
							want:       "\"OR\"i",
						},
						&notExpr{
							pos: position{line: 2249, col: 33, offset: 69983},
							expr: &ruleRefExpr{
								pos:  position{line: 2249, col: 34, offset: 69984},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ORDER",
			pos:  position{line: 2250, col: 1, offset: 70020},
			expr: &seqExpr{
				pos: position{line: 2250, col: 14, offset: 70033},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2250, col: 14, offset: 70033},
						val:        "order",
						ignoreCase: true,
						want:       "\"ORDER\"i",
					},
					&notExpr{
						pos: position{line: 2250, col: 33, offset: 70052},
						expr: &ruleRefExpr{
							pos:  position{line: 2250, col: 34, offset: 70053},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ORDINALITY",
			pos:  position{line: 2251, col: 1, offset: 70068},
			expr: &seqExpr{
				pos: position{line: 2251, col: 14, offset: 70081},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2251, col: 14, offset: 70081},
						val:        "ordinality",
						ignoreCase: true,
						want:       "\"ORDINALITY\"i",
					},
					&notExpr{
						pos: position{line: 2251, col: 33, offset: 70100},
						expr: &ruleRefExpr{
							pos:  position{line: 2251, col: 34, offset: 70101},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OUTER",
			pos:  position{line: 2252, col: 1, offset: 70116},
			expr: &seqExpr{
				pos: position{line: 2252, col: 14, offset: 70129},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2252, col: 14, offset: 70129},
						val:        "outer",
						ignoreCase: true,
						want:       "\"OUTER\"i",
					},
					&notExpr{
						pos: position{line: 2252, col: 33, offset: 70148},
						expr: &ruleRefExpr{
							pos:  position{line: 2252, col: 34, offset: 70149},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OUTPUT",
			pos:  position{line: 2253, col: 1, offset: 70164},
			expr: &seqExpr{
				pos: position{line: 2253, col: 14, offset: 70177},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2253, col: 14, offset: 70177},
						val:        "output",
						ignoreCase: true,
						want:       "\"OUTPUT\"i",
					},
					&notExpr{
						pos: position{line: 2253, col: 33, offset: 70196},
						expr: &ruleRefExpr{
							pos:  position{line: 2253, col: 34, offset: 70197},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OVER",
			pos:  position{line: 2254, col: 1, offset: 70212},
			expr: &seqExpr{
				pos: position{line: 2254, col: 14, offset: 70225},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2254, col: 14, offset: 70225},
						val:        "over",
						ignoreCase: true,
						want:       "\"OVER\"i",
					},
					&notExpr{
						pos: position{line: 2254, col: 33, offset: 70244},
						expr: &ruleRefExpr{
							pos:  position{line: 2254, col: 34, offset: 70245},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PASS",
			pos:  position{line: 2255, col: 1, offset: 70260},
			expr: &seqExpr{
				pos: position{line: 2255, col: 14, offset: 70273},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2255, col: 14, offset: 70273},
						val:        "pass",
						ignoreCase: true,
						want:       "\"PASS\"i",
					},
					&notExpr{
						pos: position{line: 2255, col: 33, offset: 70292},
						expr: &ruleRefExpr{
							pos:  position{line: 2255, col: 34, offset: 70293},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PUT",
			pos:  position{line: 2256, col: 1, offset: 70308},
			expr: &seqExpr{
				pos: position{line: 2256, col: 14, offset: 70321},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2256, col: 14, offset: 70321},
						val:        "put",
						ignoreCase: true,
						want:       "\"PUT\"i",
					},
					&notExpr{
						pos: position{line: 2256, col: 33, offset: 70340},
						expr: &ruleRefExpr{
							pos:  position{line: 2256, col: 34, offset: 70341},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RECURSIVE",
			pos:  position{line: 2257, col: 1, offset: 70356},
			expr: &seqExpr{
				pos: position{line: 2257, col: 14, offset: 70369},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2257, col: 14, offset: 70369},
						val:        "RECURSIVE",
						ignoreCase: false,
						want:       "\"RECURSIVE\"",
					},
					&notExpr{
						pos: position{line: 2257, col: 33, offset: 70388},
						expr: &ruleRefExpr{
							pos:  position{line: 2257, col: 34, offset: 70389},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "REGEXP",
			pos:  position{line: 2258, col: 1, offset: 70404},
			expr: &seqExpr{
				pos: position{line: 2258, col: 14, offset: 70417},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2258, col: 14, offset: 70417},
						val:        "regexp",
						ignoreCase: true,
						want:       "\"REGEXP\"i",
					},
					&notExpr{
						pos: position{line: 2258, col: 33, offset: 70436},
						expr: &ruleRefExpr{
							pos:  position{line: 2258, col: 34, offset: 70437},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "REGEXP_REPLACE",
			pos:  position{line: 2259, col: 1, offset: 70452},
			expr: &seqExpr{
				pos: position{line: 2259, col: 18, offset: 70469},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2259, col: 18, offset: 70469},
						val:        "regexp_replace",
						ignoreCase: true,
						want:       "\"REGEXP_REPLACE\"i",
					},
					&notExpr{
						pos: position{line: 2259, col: 36, offset: 70487},
						expr: &ruleRefExpr{
							pos:  position{line: 2259, col: 37, offset: 70488},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RENAME",
			pos:  position{line: 2260, col: 1, offset: 70503},
			expr: &seqExpr{
				pos: position{line: 2260, col: 14, offset: 70516},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2260, col: 14, offset: 70516},
						val:        "rename",
						ignoreCase: true,
						want:       "\"RENAME\"i",
					},
					&notExpr{
						pos: position{line: 2260, col: 33, offset: 70535},
						expr: &ruleRefExpr{
							pos:  position{line: 2260, col: 34, offset: 70536},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RIGHT",
			pos:  position{line: 2261, col: 1, offset: 70551},
			expr: &seqExpr{
				pos: position{line: 2261, col: 14, offset: 70564},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2261, col: 14, offset: 70564},
						val:        "right",
						ignoreCase: true,
						want:       "\"RIGHT\"i",
					},
					&notExpr{
						pos: position{line: 2261, col: 33, offset: 70583},
						expr: &ruleRefExpr{
							pos:  position{line: 2261, col: 34, offset: 70584},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SAMPLE",
			pos:  position{line: 2262, col: 1, offset: 70599},
			expr: &seqExpr{
				pos: position{line: 2262, col: 14, offset: 70612},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2262, col: 14, offset: 70612},
						val:        "sample",
						ignoreCase: true,
						want:       "\"SAMPLE\"i",
					},
					&notExpr{
						pos: position{line: 2262, col: 33, offset: 70631},
						expr: &ruleRefExpr{
							pos:  position{line: 2262, col: 34, offset: 70632},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SEARCH",
			pos:  position{line: 2263, col: 1, offset: 70647},
			expr: &seqExpr{
				pos: position{line: 2263, col: 14, offset: 70660},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2263, col: 14, offset: 70660},
						val:        "search",
						ignoreCase: true,
						want:       "\"SEARCH\"i",
					},
					&notExpr{
						pos: position{line: 2263, col: 33, offset: 70679},
						expr: &ruleRefExpr{
							pos:  position{line: 2263, col: 34, offset: 70680},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SELECT",
			pos:  position{line: 2264, col: 1, offset: 70695},
			expr: &seqExpr{
				pos: position{line: 2264, col: 14, offset: 70708},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2264, col: 14, offset: 70708},
						val:        "select",
						ignoreCase: true,
						want:       "\"SELECT\"i",
					},
					&notExpr{
						pos: position{line: 2264, col: 33, offset: 70727},
						expr: &ruleRefExpr{
							pos:  position{line: 2264, col: 34, offset: 70728},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SHAPE",
			pos:  position{line: 2265, col: 1, offset: 70743},
			expr: &seqExpr{
				pos: position{line: 2265, col: 14, offset: 70756},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2265, col: 14, offset: 70756},
						val:        "shape",
						ignoreCase: true,
						want:       "\"SHAPE\"i",
					},
					&notExpr{
						pos: position{line: 2265, col: 33, offset: 70775},
						expr: &ruleRefExpr{
							pos:  position{line: 2265, col: 34, offset: 70776},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SORT",
			pos:  position{line: 2266, col: 1, offset: 70791},
			expr: &seqExpr{
				pos: position{line: 2266, col: 14, offset: 70804},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2266, col: 14, offset: 70804},
						val:        "sort",
						ignoreCase: true,
						want:       "\"SORT\"i",
					},
					&notExpr{
						pos: position{line: 2266, col: 33, offset: 70823},
						expr: &ruleRefExpr{
							pos:  position{line: 2266, col: 34, offset: 70824},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SUMMARIZE",
			pos:  position{line: 2267, col: 1, offset: 70839},
			expr: &seqExpr{
				pos: position{line: 2267, col: 14, offset: 70852},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2267, col: 14, offset: 70852},
						val:        "summarize",
						ignoreCase: true,
						want:       "\"SUMMARIZE\"i",
					},
					&notExpr{
						pos: position{line: 2267, col: 33, offset: 70871},
						expr: &ruleRefExpr{
							pos:  position{line: 2267, col: 34, offset: 70872},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SWITCH",
			pos:  position{line: 2268, col: 1, offset: 70887},
			expr: &seqExpr{
				pos: position{line: 2268, col: 14, offset: 70900},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2268, col: 14, offset: 70900},
						val:        "switch",
						ignoreCase: true,
						want:       "\"SWITCH\"i",
					},
					&notExpr{
						pos: position{line: 2268, col: 33, offset: 70919},
						expr: &ruleRefExpr{
							pos:  position{line: 2268, col: 34, offset: 70920},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TAIL",
			pos:  position{line: 2269, col: 1, offset: 70935},
			expr: &seqExpr{
				pos: position{line: 2269, col: 14, offset: 70948},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2269, col: 14, offset: 70948},
						val:        "tail",
						ignoreCase: true,
						want:       "\"TAIL\"i",
					},
					&notExpr{
						pos: position{line: 2269, col: 33, offset: 70967},
						expr: &ruleRefExpr{
							pos:  position{line: 2269, col: 34, offset: 70968},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TAP",
			pos:  position{line: 2270, col: 1, offset: 70984},
			expr: &seqExpr{
				pos: position{line: 2270, col: 14, offset: 70997},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2270, col: 14, offset: 70997},
						val:        "tap",
						ignoreCase: true,
						want:       "\"TAP\"i",
					},
					&notExpr{
						pos: position{line: 2270, col: 33, offset: 71016},
						expr: &ruleRefExpr{
							pos:  position{line: 2270, col: 34, offset: 71017},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "THEN",
			pos:  position{line: 2271, col: 1, offset: 71032},
			expr: &seqExpr{
				pos: position{line: 2271, col: 14, offset: 71045},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2271, col: 14, offset: 71045},
						val:        "then",
						ignoreCase: true,
						want:       "\"THEN\"i",
					},
					&notExpr{
						pos: position{line: 2271, col: 33, offset: 71064},
						expr: &ruleRefExpr{
							pos:  position{line: 2271, col: 34, offset: 71065},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TOP",
			pos:  position{line: 2272, col: 1, offset: 71080},
			expr: &seqExpr{
				pos: position{line: 2272, col: 14, offset: 71093},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2272, col: 14, offset: 71093},
						val:        "top",
						ignoreCase: true,
						want:       "\"TOP\"i",
					},
					&notExpr{
						pos: position{line: 2272, col: 33, offset: 71112},
						expr: &ruleRefExpr{
							pos:  position{line: 2272, col: 34, offset: 71113},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TRUE",
			pos:  position{line: 2273, col: 1, offset: 71128},
			expr: &seqExpr{
				pos: position{line: 2273, col: 14, offset: 71141},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2273, col: 14, offset: 71141},
						val:        "true",
						ignoreCase: true,
						want:       "\"TRUE\"i",
					},
					&notExpr{
						pos: position{line: 2273, col: 33, offset: 71160},
						expr: &ruleRefExpr{
							pos:  position{line: 2273, col: 34, offset: 71161},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TYPE",
			pos:  position{line: 2274, col: 1, offset: 71176},
			expr: &seqExpr{
				pos: position{line: 2274, col: 14, offset: 71189},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2274, col: 14, offset: 71189},
						val:        "type",
						ignoreCase: true,
						want:       "\"TYPE\"i",
					},
					&notExpr{
						pos: position{line: 2274, col: 33, offset: 71208},
						expr: &ruleRefExpr{
							pos:  position{line: 2274, col: 34, offset: 71209},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UNION",
			pos:  position{line: 2275, col: 1, offset: 71224},
			expr: &seqExpr{
				pos: position{line: 2275, col: 14, offset: 71237},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2275, col: 14, offset: 71237},
						val:        "union",
						ignoreCase: true,
						want:       "\"UNION\"i",
					},
					&notExpr{
						pos: position{line: 2275, col: 33, offset: 71256},
						expr: &ruleRefExpr{
							pos:  position{line: 2275, col: 34, offset: 71257},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UNIQ",
			pos:  position{line: 2276, col: 1, offset: 71272},
			expr: &seqExpr{
				pos: position{line: 2276, col: 14, offset: 71285},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2276, col: 14, offset: 71285},
						val:        "uniq",
						ignoreCase: true,
						want:       "\"UNIQ\"i",
					},
					&notExpr{
						pos: position{line: 2276, col: 33, offset: 71304},
						expr: &ruleRefExpr{
							pos:  position{line: 2276, col: 34, offset: 71305},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "USING",
			pos:  position{line: 2277, col: 1, offset: 71321},
			expr: &seqExpr{
				pos: position{line: 2277, col: 14, offset: 71334},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2277, col: 14, offset: 71334},
						val:        "using",
						ignoreCase: true,
						want:       "\"USING\"i",
					},
					&notExpr{
						pos: position{line: 2277, col: 33, offset: 71353},
						expr: &ruleRefExpr{
							pos:  position{line: 2277, col: 34, offset: 71354},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VALUE",
			pos:  position{line: 2278, col: 1, offset: 71369},
			expr: &seqExpr{
				pos: position{line: 2278, col: 14, offset: 71382},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2278, col: 14, offset: 71382},
						val:        "value",
						ignoreCase: true,
						want:       "\"VALUE\"i",
					},
					&notExpr{
						pos: position{line: 2278, col: 33, offset: 71401},
						expr: &ruleRefExpr{
							pos:  position{line: 2278, col: 34, offset: 71402},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WHEN",
			pos:  position{line: 2279, col: 1, offset: 71417},
			expr: &seqExpr{
				pos: position{line: 2279, col: 14, offset: 71430},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2279, col: 14, offset: 71430},
						val:        "when",
						ignoreCase: true,
						want:       "\"WHEN\"i",
					},
					&notExpr{
						pos: position{line: 2279, col: 33, offset: 71449},
						expr: &ruleRefExpr{
							pos:  position{line: 2279, col: 34, offset: 71450},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WHERE",
			pos:  position{line: 2280, col: 1, offset: 71465},
			expr: &seqExpr{
				pos: position{line: 2280, col: 14, offset: 71478},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2280, col: 14, offset: 71478},
						val:        "where",
						ignoreCase: true,
						want:       "\"WHERE\"i",
					},
					&notExpr{
						pos: position{line: 2280, col: 33, offset: 71497},
						expr: &ruleRefExpr{
							pos:  position{line: 2280, col: 34, offset: 71498},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WITH",
			pos:  position{line: 2281, col: 1, offset: 71513},
			expr: &seqExpr{
				pos: position{line: 2281, col: 14, offset: 71526},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2281, col: 14, offset: 71526},
						val:        "with",
						ignoreCase: true,
						want:       "\"WITH\"i",
					},
					&notExpr{
						pos: position{line: 2281, col: 33, offset: 71545},
						expr: &ruleRefExpr{
							pos:  position{line: 2281, col: 34, offset: 71546},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "YIELD",
			pos:  position{line: 2282, col: 1, offset: 71561},
			expr: &seqExpr{
				pos: position{line: 2282, col: 14, offset: 71574},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 2282, col: 14, offset: 71574},
						val:        "yield",
						ignoreCase: true,
						want:       "\"YIELD\"i",
					},
					&notExpr{
						pos: position{line: 2282, col: 33, offset: 71593},
						expr: &ruleRefExpr{
							pos:  position{line: 2282, col: 34, offset: 71594},
							name: "IdentifierRest",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onstart2(scope any) (any, error) {
	return []any{scope}, nil
}

func (p *parser) callonstart2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart8(seq any) (any, error) {
	return seq, nil
}

func (p *parser) callonstart8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart8(stack["seq"])
}

func (c *current) onScope1(decls, body any) (any, error) {
	return &ast.Scope{
		Kind:  "Scope",
		Decls: sliceOf[ast.Decl](decls),
		Body:  sliceOf[ast.Op](body),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonScope1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonSeq1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o any) (any, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v any) (any, error) {
	return v, nil
}

func (p *parser) callonDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl1(name, expr any) (any, error) {
	return &ast.ConstDecl{
		Kind: "ConstDecl",
		Name: name.(*ast.ID),
		Expr: expr.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonConstDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl1(stack["name"], stack["expr"])
}

func (c *current) onFuncDecl1(name, params, expr any) (any, error) {
	return &ast.FuncDecl{
		Kind:   "FuncDecl",
		Name:   name.(*ast.ID),
		Params: sliceOf[*ast.ID](params),
		Expr:   expr.(ast.Expr),
		Loc:    loc(c),
	}, nil

}

func (p *parser) callonFuncDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["name"], stack["params"], stack["expr"])
}

func (c *current) onOpDecl1(name, params, body any) (any, error) {
	return &ast.OpDecl{
		Kind:   "OpDecl",
		Name:   name.(*ast.ID),
		Params: sliceOf[*ast.ID](params),
		Body:   sliceOf[ast.Op](body),
		Loc:    loc(c),
	}, nil

}

func (p *parser) callonOpDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDecl1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onOpDeclBody2(scope any) (any, error) {
	return []any{scope}, nil
}

func (p *parser) callonOpDeclBody2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDeclBody2(stack["scope"])
}

func (c *current) onOpDeclBody5(seq any) (any, error) {
	return seq, nil
}

func (p *parser) callonOpDeclBody5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDeclBody5(stack["seq"])
}

func (c *current) onTypeDecl1(name, typ any) (any, error) {
	return &ast.TypeDecl{
		Kind: "TypeDecl",
		Name: name.(*ast.ID),
		Type: typ.(ast.Type),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonTypeDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeDecl1(stack["name"], stack["typ"])
}

func (c *current) onLeanOp4(scope any) (any, error) {
	return scope, nil
}

func (p *parser) callonLeanOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeanOp4(stack["scope"])
}

func (c *current) onLeanOp12(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLeanOp12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeanOp12(stack["a"])
}

func (c *current) onLeanOp18(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLeanOp18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeanOp18(stack["a"])
}

func (c *current) onLeanOp28(expr any) (any, error) {
	return &ast.OpExpr{Kind: "OpExpr", Expr: expr.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonLeanOp28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeanOp28(stack["expr"])
}

func (c *current) onLeanOp31(expr any) (any, error) {
	return &ast.OpExpr{Kind: "OpExpr", Expr: expr.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonLeanOp31() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeanOp31(stack["expr"])
}

func (c *current) onComparator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest any) (any, error) {
	return makeBinaryExprChain(first, rest, c), nil

}

func (p *parser) callonSearchBoolean1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t any) (any, error) {
	return []any{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr any) (any, error) {
	return []any{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest any) (any, error) {
	return makeBinaryExprChain(first, rest, c), nil

}

func (p *parser) callonSearchAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e any) (any, error) {
	return &ast.UnaryExpr{
		Kind:    "UnaryExpr",
		Op:      "!",
		Operand: e.(ast.Expr),
		Loc:     loc(c),
	}, nil

}

func (p *parser) callonSearchFactor2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v any) (any, error) {
	return &ast.Term{
		Kind:  "Term",
		Text:  string(c.text),
		Value: v.(ast.Any),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonSearchExpr4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (any, error) {
	return &ast.Primitive{Kind: "Primitive", Type: "bool", Text: "true", Loc: loc(c)}, nil

}

func (p *parser) callonSearchExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs any) (any, error) {
	return &ast.BinaryExpr{
		Kind: "BinaryExpr",
		Op:   op.(string),
		LHS:  lhs.(ast.Expr),
		RHS:  rhs.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonSearchPredicate2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(f any) (any, error) {
	return f, nil
}

func (p *parser) callonSearchPredicate12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["f"])
}

func (c *current) onSearchValue3(v any) (any, error) {
	return newPrimitive(c, "string", v.(string)), nil

}

func (p *parser) callonSearchValue3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern any) (any, error) {
	return &ast.Glob{Kind: "Glob", Pattern: pattern.(string), Loc: loc(c)}, nil

}

func (p *parser) callonGlob1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern any) (any, error) {
	return &ast.Regexp{Kind: "Regexp", Pattern: pattern.(string), Loc: loc(c)}, nil

}

func (p *parser) callonRegexp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit any) (any, error) {
	return &ast.Summarize{
		Kind:  "Summarize",
		Keys:  sliceOf[ast.Assignment](keys),
		Limit: limit.(int),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonAggregation2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation9(aggs, keys, limit any) (any, error) {
	s := &ast.Summarize{
		Kind:  "Summarize",
		Aggs:  sliceOf[ast.Assignment](aggs),
		Limit: limit.(int),
		Loc:   loc(c),
	}
	if keys != nil {
		s.Keys = sliceOf[ast.Assignment](keys.([]any)[1])
	}
	return s, nil

}

func (p *parser) callonAggregation9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation9(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns any) (any, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit any) (any, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (any, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr any) (any, error) {
	return ast.Assignment{Kind: "Assignment", RHS: expr.(ast.Expr), Loc: loc(c)}, nil
}

func (p *parser) callonFlexAssignment3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonFlexAssignments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg any) (any, error) {
	return ast.Assignment{Kind: "Assignment", LHS: lval.(ast.Expr), RHS: agg.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonAggAssignment2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg any) (any, error) {
	return ast.Assignment{Kind: "Assignment", RHS: agg.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonAggAssignment11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where any) (any, error) {
	agg := &ast.Agg{
		Kind: "Agg",
		Name: op.(string),
		Loc:  loc(c),
	}
	if expr != nil {
		agg.Expr = expr.(ast.Expr)
	}
	if where != nil {
		agg.Where = where.(ast.Expr)
	}
	return agg, nil

}

func (p *parser) callonAgg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest any) (any, error) {
	result := []any{first}
	for _, r := range rest.([]any) {
		result = append(result, r.([]any)[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onForkOp1(paths any) (any, error) {
	var seqs []ast.Seq
	for _, p := range paths.([]any) {
		seqs = append(seqs, sliceOf[ast.Op](p))
	}
	return &ast.Parallel{
		Kind:  "Parallel",
		Paths: seqs,
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonForkOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForkOp1(stack["paths"])
}

func (c *current) onPath1(seq any) (any, error) {
	return seq, nil
}

func (p *parser) callonPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath1(stack["seq"])
}

func (c *current) onSwitchOp2(expr, cases any) (any, error) {
	return &ast.Switch{
		Kind:  "Switch",
		Expr:  expr.(ast.Expr),
		Cases: sliceOf[ast.Case](cases),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonSwitchOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchOp2(stack["expr"], stack["cases"])
}

func (c *current) onSwitchOp15(cases any) (any, error) {
	return &ast.Switch{
		Kind:  "Switch",
		Cases: sliceOf[ast.Case](cases),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonSwitchOp15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchOp15(stack["cases"])
}

func (c *current) onSwitchPath1(expr, path any) (any, error) {
	l := ast.Case{Path: sliceOf[ast.Op](path)}
	if expr != nil {
		l.Expr = expr.(ast.Expr)
	}
	return l, nil

}

func (p *parser) callonSwitchPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchPath1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonCase2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (any, error) {
	return nil, nil
}

func (p *parser) callonCase8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromForkOp1(trunks any) (any, error) {
	return &ast.Parallel{
		Kind:  "Parallel",
		Paths: sliceOf[ast.Seq](trunks),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonFromForkOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromForkOp1(stack["trunks"])
}

func (c *current) onFromPath8(s any) (any, error) {
	return s, nil
}

func (p *parser) callonFromPath8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromPath8(stack["s"])
}

func (c *current) onFromPath1(source, seq any) (any, error) {
	ops := []any{source}
	if seq != nil {
		ops = append(ops, seq.([]any)...)
	}
	return ast.Seq(sliceOf[ast.Op](ops)), nil

}

func (p *parser) callonFromPath1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromPath1(stack["source"], stack["seq"])
}

func (c *current) onFromSource2(elem any) (any, error) {
	return &ast.From{
		Kind:  "From",
		Elems: []*ast.FromElem{elem.(*ast.FromElem)},
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonFromSource2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromSource2(stack["elem"])
}

func (c *current) onSearchOp1(expr any) (any, error) {
	return &ast.Search{Kind: "Search", Expr: expr.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonSearchOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOp1(stack["expr"])
}

func (c *current) onAssertOp6(e any) (any, error) {
	return []any{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr any) (any, error) {
	return &ast.Assert{
		Kind: "Assert",
		Expr: expr.([]any)[0].(ast.Expr),
		Text: expr.([]any)[1].(string),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonAssertOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(e any) (any, error) {
	return e, nil
}

func (p *parser) callonSortOp10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["e"])
}

func (c *current) onSortOp1(args, exprs any) (any, error) {
	o := &ast.Sort{
		Kind: "Sort",
		Args: sliceOf[ast.SortExpr](exprs),
		Loc:  loc(c),
	}
	argm := args.(map[string]any)
	if _, ok := argm["r"]; ok {
		o.Reverse = true
	}
	if n, ok := argm["nulls"]; ok && n == "first" {
		o.NullsFirst = true
	}
	return o, nil

}

func (p *parser) callonSortOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["exprs"])
}

func (c *current) onSortArgs4(a any) (any, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args any) (any, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (any, error) {
	return map[string]any{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where any) (any, error) {
	return map[string]any{"name": "nulls", "value": where}, nil

}

func (p *parser) callonSortArg4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(e any) (any, error) {
	return e, nil
}

func (p *parser) callonTopOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["e"])
}

func (c *current) onTopOp20(f any) (any, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields any) (any, error) {
	op := &ast.Top{
		Kind: "Top",
		Loc:  loc(c),
	}
	if limit != nil {
		op.Limit = limit.(ast.Expr)
	}
	if fields != nil {
		op.Args = sliceOf[ast.Expr](fields)
	}
	if flush != nil {
		op.Flush = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args any) (any, error) {
	return &ast.Cut{
		Kind: "Cut",
		Args: sliceOf[ast.Assignment](args),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonCutOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args any) (any, error) {
	return &ast.Drop{
		Kind: "Drop",
		Args: sliceOf[ast.Expr](args),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonDropOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count any) (any, error) {
	return &ast.Head{
		Kind:  "Head",
		Count: count.(ast.Expr),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonHeadOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (any, error) {
	return &ast.Head{
		Kind: "Head",
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonHeadOp10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count any) (any, error) {
	return &ast.Tail{
		Kind:  "Tail",
		Count: count.(ast.Expr),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonTailOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (any, error) {
	return &ast.Tail{
		Kind: "Tail",
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonTailOp10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr any) (any, error) {
	return &ast.Where{
		Kind: "Where",
		Expr: expr.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonWhereOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (any, error) {
	return &ast.Uniq{Kind: "Uniq", Cflag: true, Loc: loc(c)}, nil

}

func (p *parser) callonUniqOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (any, error) {
	return &ast.Uniq{Kind: "Uniq", Loc: loc(c)}, nil

}

func (p *parser) callonUniqOp7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args any) (any, error) {
	return &ast.Put{
		Kind: "Put",
		Args: sliceOf[ast.Assignment](args),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonPutOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl any) (any, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest any) (any, error) {
	args := append([]any{first}, rest.([]any)...)
	return &ast.Rename{
		Kind: "Rename",
		Args: sliceOf[ast.Assignment](args),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonRenameOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (any, error) {
	return &ast.Fuse{Kind: "Fuse", Loc: loc(c)}, nil

}

func (p *parser) callonFuseOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (any, error) {
	return &ast.Shape{Kind: "Shape", Loc: loc(c)}, nil

}

func (p *parser) callonShapeOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs any) (any, error) {
	o := &ast.Join{
		Kind:    "Join",
		Style:   style.(string),
		LeftKey: key.(ast.Expr),
		Loc:     loc(c),
	}
	if rightInput != nil {
		o.RightInput = sliceOf[ast.Op](rightInput)
	}
	if optKey != nil {
		o.RightKey = optKey.([]any)[3].(ast.Expr)
	}
	if optArgs != nil {
		o.Args = sliceOf[ast.Assignment](optArgs.([]any)[1])
	}
	return o, nil

}

func (p *parser) callonJoinOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (any, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (any, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (any, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (any, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (any, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s any) (any, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (any, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp8(e any) (any, error) {
	return e, nil
}

func (p *parser) callonSampleOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp8(stack["e"])
}

func (c *current) onSampleOp1(expr any) (any, error) {
	o := &ast.Sample{Kind: "Sample", Loc: loc(c)}
	if expr != nil {
		o.Expr = expr.(ast.Expr)
	}
	return o, nil

}

func (p *parser) callonSampleOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["expr"])
}

func (c *current) onOpAssignment1(a any) (any, error) {
	return &ast.OpAssignment{
		Kind:        "OpAssignment",
		Assignments: sliceOf[ast.Assignment](a),
		Loc:         loc(c),
	}, nil

}

func (p *parser) callonOpAssignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onLoadOp1(pool, branch, author, message, meta any) (any, error) {
	return &ast.Load{
		Kind:    "Load",
		Pool:    nullableName(pool),
		Branch:  nullableName(branch),
		Author:  nullableName(author),
		Message: nullableName(message),
		Meta:    nullableName(meta),
		Loc:     loc(c),
	}, nil

}

func (p *parser) callonLoadOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonAuthorArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["n"])
}

func (c *current) onMessageArg1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonMessageArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["n"])
}

func (c *current) onMetaArg1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonMetaArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["n"])
}

func (c *current) onPoolBranch1(branch any) (any, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onOutputOp1(name any) (any, error) {
	return &ast.Output{
		Kind: "Output",
		Name: name.(*ast.ID),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonOutputOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOutputOp1(stack["name"])
}

func (c *current) onDebugOp8(e any) (any, error) {
	return e, nil
}

func (p *parser) callonDebugOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDebugOp8(stack["e"])
}

func (c *current) onDebugOp1(expr any) (any, error) {
	d := &ast.Debug{
		Kind: "Debug",
		Loc:  loc(c),
	}
	if expr != nil {
		d.Expr = expr.(ast.Expr)
	}
	return d, nil

}

func (p *parser) callonDebugOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDebugOp1(stack["expr"])
}

func (c *current) onFromOp1(elems any) (any, error) {
	return &ast.From{
		Kind:  "From",
		Elems: sliceOf[*ast.FromElem](elems),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonFromOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["elems"])
}

func (c *current) onFromElems7(elem any) (any, error) {
	return elem, nil
}

func (p *parser) callonFromElems7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromElems7(stack["elem"])
}

func (c *current) onFromElems1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonFromElems1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromElems1(stack["first"], stack["rest"])
}

func (c *current) onFromElem1(entity, args, o, alias any) (any, error) {
	elem := &ast.FromElem{
		Kind:   "FromElem",
		Entity: entity.(ast.FromEntity),
		Loc:    loc(c),
	}
	if args != nil {
		elem.Args = args.(ast.FromArgs)
	}
	if o != nil {
		elem.Ordinality = o.(*ast.Ordinality)
	}
	if alias != nil {
		elem.Alias = alias.(*ast.Name)
	}
	return elem, nil

}

func (p *parser) callonFromElem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromElem1(stack["entity"], stack["args"], stack["o"], stack["alias"])
}

func (c *current) onFromEntity2(url any) (any, error) {
	return &ast.Name{
		Kind: "Name",
		Text: url.(string),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonFromEntity2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity2(stack["url"])
}

func (c *current) onFromEntity7() (any, error) {
	return &ast.Glob{Kind: "Glob", Pattern: "*", Loc: loc(c)}, nil
}

func (p *parser) callonFromEntity7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity7()
}

func (c *current) onFromEntity12(e any) (any, error) {
	return &ast.ExprEntity{
		Kind: "ExprEntity",
		Expr: e.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonFromEntity12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity12(stack["e"])
}

func (c *current) onFromEntity15(meta any) (any, error) {
	return &ast.LakeMeta{
		Kind: "LakeMeta",
		Meta: nullableName(meta),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonFromEntity15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity15(stack["meta"])
}

func (c *current) onFromEntity18(join any) (any, error) {
	return join, nil
}

func (p *parser) callonFromEntity18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity18(stack["join"])
}

func (c *current) onFromEntity24(join any) (any, error) {
	return join, nil
}

func (p *parser) callonFromEntity24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity24(stack["join"])
}

func (c *current) onFromEntity32(s any) (any, error) {
	return s, nil

}

func (p *parser) callonFromEntity32() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity32(stack["s"])
}

func (c *current) onFromEntity40(name any) (any, error) {
	return name, nil
}

func (p *parser) callonFromEntity40() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromEntity40(stack["name"])
}

func (c *current) onFromArgs2(commit, meta, tap any) (any, error) {
	return &ast.PoolArgs{
		Kind:   "PoolArgs",
		Commit: nullableName(commit),
		Meta:   nullableName(meta),
		Tap:    tap.(bool),
		Loc:    loc(c),
	}, nil

}

func (p *parser) callonFromArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromArgs2(stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onFromArgs11(meta, tap any) (any, error) {
	return &ast.PoolArgs{
		Kind: "PoolArgs",
		Meta: nullableName(meta),
		Tap:  tap.(bool),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonFromArgs11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromArgs11(stack["meta"], stack["tap"])
}

func (c *current) onFromArgs17(format any) (any, error) {
	return &ast.FormatArg{
		Kind:   "FormatArg",
		Format: nullableName(format),
		Loc:    loc(c),
	}, nil

}

func (p *parser) callonFromArgs17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromArgs17(stack["format"])
}

func (c *current) onFromArgs28(format, method, headers, body any) (any, error) {
	if format == nil && method == nil && headers == nil && body == nil {
		return nil, nil
	}
	h := &ast.HTTPArgs{
		Kind:   "HTTPArgs",
		Format: nullableName(format),
		Method: nullableName(method),
		Body:   nullableName(body),
		Loc:    loc(c),
	}
	if headers != nil {
		h.Headers = headers.(*ast.RecordExpr)
	}
	return h, nil

}

func (p *parser) callonFromArgs28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromArgs28(stack["format"], stack["method"], stack["headers"], stack["body"])
}

func (c *current) onFormatArg1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonFormatArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["n"])
}

func (c *current) onMethodArg1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonMethodArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodArg1(stack["n"])
}

func (c *current) onHeadersArg1(v any) (any, error) {
	return v, nil
}

func (p *parser) callonHeadersArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadersArg1(stack["v"])
}

func (c *current) onBodyArg1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonBodyArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBodyArg1(stack["n"])
}

func (c *current) onUnquotedURL1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUnquotedURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedURL1()
}

func (c *current) onPoolAt1(id any) (any, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolCommit1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonPoolCommit1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["n"])
}

func (c *current) onPoolMeta1(n any) (any, error) {
	return n, nil
}

func (p *parser) callonPoolMeta1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["n"])
}

func (c *current) onSortExprs7(s any) (any, error) {
	return s, nil
}

func (p *parser) callonSortExprs7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortExprs7(stack["s"])
}

func (c *current) onSortExprs1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonSortExprs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortExprs1(stack["first"], stack["rest"])
}

func (c *current) onSortExpr7(o any) (any, error) {
	return o, nil
}

func (p *parser) callonSortExpr7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortExpr7(stack["o"])
}

func (c *current) onSortExpr1(e, order any) (any, error) {
	s := ast.SortExpr{Kind: "SortExpr", Expr: e.(ast.Expr), Loc: loc(c)}
	if order != nil {
		s.Order = order.(*ast.ID)
	}
	return s, nil

}

func (p *parser) callonSortExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortExpr1(stack["e"], stack["order"])
}

func (c *current) onOrderSpec1(o any) (any, error) {
	return &ast.ID{Kind: "ID", Name: o.(string), Loc: loc(c)}, nil

}

func (p *parser) callonOrderSpec1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSpec1(stack["o"])
}

func (c *current) onTapArg2() (any, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (any, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onPassOp1() (any, error) {
	return &ast.Pass{Kind: "Pass", Loc: loc(c)}, nil

}

func (p *parser) callonPassOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as any) (any, error) {
	o := &ast.Explode{
		Kind: "Explode",
		Args: sliceOf[ast.Expr](args),
		Type: typ.(ast.Type),
		Loc:  loc(c),
	}
	if as != nil {
		o.As = as.(ast.Expr)
	}
	return o, nil

}

func (p *parser) callonExplodeOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr any) (any, error) {
	return &ast.Merge{
		Kind: "Merge",
		Expr: expr.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonMergeOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body any) (any, error) {
	o := &ast.Over{
		Kind:   "Over",
		Exprs:  sliceOf[ast.Expr](exprs),
		Locals: sliceOf[ast.Def](locals),
		Loc:    loc(c),
	}
	if body != nil {
		o.Body = sliceOf[ast.Op](body.([]any)[0])
	}
	return o, nil

}

func (p *parser) callonOverOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope any) (any, error) {
	return []any{[]any{scope.(*ast.Scope)}, loc(c).End()}, nil

}

func (p *parser) callonLateral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq any) (any, error) {
	return []any{seq, loc(c).End()}, nil

}

func (p *parser) callonLateral13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLocals10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonLocals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt any) (any, error) {
	def := ast.Def{
		Name: name.(*ast.ID),
		Expr: name.(*ast.ID),
		Loc:  loc(c),
	}
	if opt != nil {
		def.Expr = opt.([]any)[3].(ast.Expr)
	}
	return def, nil

}

func (p *parser) callonLocalsAssignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs any) (any, error) {
	return &ast.Yield{
		Kind:  "Yield",
		Exprs: sliceOf[ast.Expr](exprs),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonYieldOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ any) (any, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs any) (any, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval any) (any, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonLvals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonAssignments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs any) (any, error) {
	return ast.Assignment{
		Kind: "Assignment",
		LHS:  lhs.(ast.Expr),
		RHS:  rhs.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonAssignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt any) (any, error) {
	if opt != nil {
		t, e := opt.([]any)[3], opt.([]any)[7]
		return &ast.Conditional{
			Kind: "Conditional",
			Cond: cond.(ast.Expr),
			Then: t.(ast.Expr),
			Else: e.(ast.Expr),
			Loc:  loc(c),
		}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr any) (any, error) {
	return []any{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest any) (any, error) {
	return makeBinaryExprChain(first, rest, c), nil

}

func (p *parser) callonLogicalOrExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr any) (any, error) {
	return []any{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest any) (any, error) {
	return makeBinaryExprChain(first, rest, c), nil

}

func (p *parser) callonLogicalAndExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onNotExpr2(e any) (any, error) {
	return &ast.UnaryExpr{
		Kind:    "UnaryExpr",
		Op:      "!",
		Operand: e.(ast.Expr),
		Loc:     loc(c),
	}, nil

}

func (p *parser) callonNotExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onBetweenExpr2(expr, lower, upper any) (any, error) {
	return &ast.Between{
		Kind:  "Between",
		Expr:  expr.(ast.Expr),
		Lower: lower.(ast.Expr),
		Upper: upper.(ast.Expr),
	}, nil

}

func (p *parser) callonBetweenExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBetweenExpr2(stack["expr"], stack["lower"], stack["upper"])
}

func (c *current) onComparisonExpr15() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS any) (any, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	return &ast.BinaryExpr{
		Kind: "BinaryExpr",
		Op:   opAndRHS.([]any)[1].(string),
		LHS:  lhs.(ast.Expr),
		RHS:  opAndRHS.([]any)[3].(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonComparisonExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr any) (any, error) {
	return []any{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest any) (any, error) {
	return makeBinaryExprChain(first, rest, c), nil

}

func (p *parser) callonAdditiveExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr any) (any, error) {
	return []any{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest any) (any, error) {
	return makeBinaryExprChain(first, rest, c), nil

}

func (p *parser) callonMultiplicativeExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onConcatExpr7(expr any) (any, error) {
	return []any{"||", expr}, nil
}

func (p *parser) callonConcatExpr7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr7(stack["expr"])
}

func (c *current) onConcatExpr1(first, rest any) (any, error) {
	return makeBinaryExprChain(first, rest, c), nil

}

func (p *parser) callonConcatExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpr1(stack["first"], stack["rest"])
}

func (c *current) onUnaryMinusExpr2(e any) (any, error) {
	return &ast.UnaryExpr{
		Kind:    "UnaryExpr",
		Op:      "-",
		Operand: e.(ast.Expr),
		Loc:     loc(c),
	}, nil

}

func (p *parser) callonUnaryMinusExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryMinusExpr2(stack["e"])
}

func (c *current) onDerefExpr2(expr, from, to any) (any, error) {
	e := &ast.SliceExpr{
		Kind: "SliceExpr",
		Expr: expr.(ast.Expr),
		From: from.(ast.Expr),
		Loc:  loc(c),
	}
	if to != nil {
		e.To = to.(ast.Expr)
	}
	return e, nil

}

func (p *parser) callonDerefExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["expr"], stack["from"], stack["to"])
}

func (c *current) onDerefExpr18(expr, to any) (any, error) {
	return &ast.SliceExpr{
		Kind: "SliceExpr",
		Expr: expr.(ast.Expr),
		To:   to.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonDerefExpr18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr18(stack["expr"], stack["to"])
}

func (c *current) onDerefExpr29(expr, index any) (any, error) {
	return &ast.IndexExpr{
		Kind:  "IndexExpr",
		Expr:  expr.(ast.Expr),
		Index: index.(ast.Expr),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonDerefExpr29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr29(stack["expr"], stack["index"])
}

func (c *current) onDerefExpr37(expr, id any) (any, error) {
	return &ast.BinaryExpr{
		Kind: "BinaryExpr",
		Op:   ".",
		LHS:  expr.(ast.Expr),
		RHS:  id.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonDerefExpr37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr37(stack["expr"], stack["id"])
}

func (c *current) onCast1(typ, expr any) (any, error) {
	return &ast.Cast{Kind: "Cast", Expr: expr.(ast.Expr), Type: typ.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonCast1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0, arg1, where any) (any, error) {
	id := &ast.ID{Kind: "ID", Name: "regexp", Loc: ast.NewLoc(c.pos.offset, c.pos.offset+6)}
	return newCall(c, id, []any{arg0, arg1}, where), nil

}

func (p *parser) callonFunction3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1, arg2, where any) (any, error) {
	id := &ast.ID{Kind: "ID", Name: "regexp_replace", Loc: ast.NewLoc(c.pos.offset, c.pos.offset+14)}
	return newCall(c, id, []any{arg0, arg1, arg2}, where), nil

}

func (p *parser) callonFunction21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where any) (any, error) {
	return newCall(c, fn, args, where), nil

}

func (p *parser) callonFunction44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onRegexpPrimitive1(pat any) (any, error) {
	return newPrimitive(c, "string", pat.(string)), nil
}

func (p *parser) callonRegexpPrimitive1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPrimitive1(stack["pat"])
}

func (c *current) onFunctionArgs2(o any) (any, error) {
	return []any{o}, nil
}

func (p *parser) callonFunctionArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep15(e any) (any, error) {
	return e, nil
}

func (p *parser) callonGrep15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep15(stack["e"])
}

func (c *current) onGrep1(pattern, opt any) (any, error) {
	g := &ast.Grep{
		Kind:    "Grep",
		Pattern: pattern.(ast.Expr),
		Loc:     loc(c),
	}
	if opt != nil {
		g.Expr = opt.(ast.Expr)
	}
	return g, nil

}

func (p *parser) callonGrep1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onOptionalExprs3() (any, error) {
	return []any{}, nil
}

func (p *parser) callonOptionalExprs3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonExprs7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonExprs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onPrimary10(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonPrimary10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary10(stack["expr"])
}

func (c *current) onPrimary18(expr any) (any, error) {
	return expr, nil
}

func (p *parser) callonPrimary18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary18(stack["expr"])
}

func (c *current) onCaseExpr2(cases, else_ any) (any, error) {
	whens := sliceOf[ast.When](cases)
	cond := &ast.Conditional{
		Kind: "Conditional",
		Cond: whens[0].Cond,
		Then: whens[0].Then,
		Loc:  loc(c),
	}
	last := cond
	for _, when := range whens[1:] {
		next := &ast.Conditional{
			Kind: "Conditional",
			Cond: when.Cond,
			Then: when.Then,
			Loc:  when.Loc,
		}
		last.Else = next
		last = next
	}
	if else_ != nil {
		last.Else = else_.([]any)[3].(ast.Expr)
	}
	return cond, nil

}

func (p *parser) callonCaseExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCaseExpr2(stack["cases"], stack["else_"])
}

func (c *current) onCaseExpr21(expr, whens, else_ any) (any, error) {
	cond := &ast.CaseExpr{
		Kind:  "CaseExpr",
		Expr:  expr.(ast.Expr),
		Whens: sliceOf[ast.When](whens),
		Loc:   loc(c),
	}
	if else_ != nil {
		cond.Else = else_.([]any)[3].(ast.Expr)
	}
	return cond, nil

}

func (p *parser) callonCaseExpr21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCaseExpr21(stack["expr"], stack["whens"], stack["else_"])
}

func (c *current) onWhen1(cond, then any) (any, error) {
	return ast.When{
		Kind: "When",
		Cond: cond.(ast.Expr),
		Then: then.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonWhen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhen1(stack["cond"], stack["then"])
}

func (c *current) onOverExpr1(exprs, locals, body any) (any, error) {
	return &ast.OverExpr{
		Kind:   "OverExpr",
		Locals: sliceOf[ast.Def](locals),
		Exprs:  sliceOf[ast.Expr](exprs),
		Body:   sliceOf[ast.Op](body),
		Loc:    loc(c),
	}, nil

}

func (p *parser) callonOverExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems any) (any, error) {
	return &ast.RecordExpr{
		Kind:  "RecordExpr",
		Elems: sliceOf[ast.RecordElem](elems),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonRecord1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonRecordElems2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (any, error) {
	return nil, nil
}

func (p *parser) callonRecordElems9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem any) (any, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr any) (any, error) {
	return &ast.Spread{Kind: "Spread", Expr: expr.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonSpread1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onFieldExpr1(name, value any) (any, error) {
	return &ast.FieldExpr{
		Kind:  "FieldExpr",
		Name:  name.(*ast.Name),
		Value: value.(ast.Expr),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonFieldExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExpr1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems any) (any, error) {
	return &ast.ArrayExpr{
		Kind:  "ArrayExpr",
		Elems: sliceOf[ast.VectorElem](elems),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonArray1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems any) (any, error) {
	return &ast.SetExpr{
		Kind:  "SetExpr",
		Elems: sliceOf[ast.VectorElem](elems),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonSet1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e any) (any, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonVectorElems2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (any, error) {
	return nil, nil
}

func (p *parser) callonVectorElems15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e any) (any, error) {
	return &ast.VectorValue{Kind: "VectorValue", Expr: e.(ast.Expr), Loc: loc(c)}, nil
}

func (p *parser) callonVectorElem3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs any) (any, error) {
	return &ast.MapExpr{
		Kind:    "MapExpr",
		Entries: sliceOf[ast.EntryExpr](exprs),
		Loc:     loc(c),
	}, nil

}

func (p *parser) callonMap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonEntries2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (any, error) {
	return nil, nil
}

func (p *parser) callonEntries9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e any) (any, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value any) (any, error) {
	return ast.EntryExpr{Key: key.(ast.Expr), Value: value.(ast.Expr), Loc: loc(c)}, nil

}

func (p *parser) callonEntry1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onTuple9(e any) (any, error) {
	return e, nil
}

func (p *parser) callonTuple9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTuple9(stack["e"])
}

func (c *current) onTuple1(first, rest any) (any, error) {
	return &ast.TupleExpr{
		Kind:  "TupleExpr",
		Elems: sliceOf[ast.Expr](prepend(first, rest)),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonTuple1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTuple1(stack["first"], stack["rest"])
}

func (c *current) onSubnetLiteral2(v any) (any, error) {
	return newPrimitive(c, "net", v.(string)), nil

}

func (p *parser) callonSubnetLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v any) (any, error) {
	return newPrimitive(c, "net", v.(string)), nil

}

func (p *parser) callonSubnetLiteral8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v any) (any, error) {
	return newPrimitive(c, "ip", v.(string)), nil

}

func (p *parser) callonAddressLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v any) (any, error) {
	return newPrimitive(c, "ip", v.(string)), nil

}

func (p *parser) callonAddressLiteral8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v any) (any, error) {
	return newPrimitive(c, "float64", v.(string)), nil

}

func (p *parser) callonFloatLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v any) (any, error) {
	return newPrimitive(c, "int64", v.(string)), nil

}

func (p *parser) callonIntegerLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (any, error) {
	return newPrimitive(c, "bool", "true"), nil
}

func (p *parser) callonBooleanLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (any, error) {
	return newPrimitive(c, "bool", "false"), nil
}

func (p *parser) callonBooleanLiteral4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (any, error) {
	return newPrimitive(c, "null", ""), nil
}

func (p *parser) callonNullLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (any, error) {
	return newPrimitive(c, "bytes", string(c.text)), nil

}

func (p *parser) callonBytesLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ any) (any, error) {
	return &ast.TypeValue{
		Kind:  "TypeValue",
		Value: typ.(ast.Type),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonTypeLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name any) (any, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(t any) (any, error) {
	return &ast.TypeError{
		Kind: "TypeError",
		Type: t.(ast.Type),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonAmbiguousType8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["t"])
}

func (c *current) onAmbiguousType18(name, opt any) (any, error) {
	if opt != nil {
		return &ast.TypeDef{
			Kind: "TypeDef",
			Name: name.(*ast.Name).Text,
			Type: opt.([]any)[3].(ast.Type),
			Loc:  loc(c),
		}, nil
	}
	return &ast.TypeName{Kind: "TypeName", Name: name.(*ast.Name).Text, Loc: loc(c)}, nil

}

func (p *parser) callonAmbiguousType18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType18(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType29(types any) (any, error) {
	return &ast.TypeUnion{
		Kind:  "TypeUnion",
		Types: sliceOf[ast.Type](types),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonAmbiguousType29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType29(stack["types"])
}

func (c *current) onTypeList1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonTypeList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ any) (any, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields any) (any, error) {
	return &ast.TypeRecord{
		Kind:   "TypeRecord",
		Fields: sliceOf[ast.TypeField](fields),
		Loc:    loc(c),
	}, nil

}

func (p *parser) callonComplexType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ any) (any, error) {
	return &ast.TypeArray{
		Kind: "TypeArray",
		Type: typ.(ast.Type),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonComplexType10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ any) (any, error) {
	return &ast.TypeSet{
		Kind: "TypeSet",
		Type: typ.(ast.Type),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonComplexType18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType any) (any, error) {
	return &ast.TypeMap{
		Kind:    "TypeMap",
		KeyType: keyType.(ast.Type),
		ValType: valType.(ast.Type),
		Loc:     loc(c),
	}, nil

}

func (p *parser) callonComplexType26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onStringLiteral2(v any) (any, error) {
	return newPrimitive(c, "string", joinChars(v)), nil
}

func (p *parser) callonStringLiteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral2(stack["v"])
}

func (c *current) onStringLiteral9(v any) (any, error) {
	return newPrimitive(c, "string", joinChars(v)), nil
}

func (p *parser) callonStringLiteral9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral9(stack["v"])
}

func (c *current) onFString2(v any) (any, error) {
	return &ast.FString{
		Kind:  "FString",
		Elems: sliceOf[ast.FStringElem](v),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonFString2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFString2(stack["v"])
}

func (c *current) onFString9(v any) (any, error) {
	return &ast.FString{
		Kind:  "FString",
		Elems: sliceOf[ast.FStringElem](v),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonFString9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFString9(stack["v"])
}

func (c *current) onFStringDoubleQuotedElem3(v any) (any, error) {
	return &ast.FStringText{Kind: "FStringText", Loc: loc(c), Text: joinChars(v)}, nil

}

func (p *parser) callonFStringDoubleQuotedElem3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFStringDoubleQuotedElem3(stack["v"])
}

func (c *current) onFStringDoubleQuotedChar2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonFStringDoubleQuotedChar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFStringDoubleQuotedChar2(stack["v"])
}

func (c *current) onFStringDoubleQuotedChar7(v any) (any, error) {
	return v, nil
}

func (p *parser) callonFStringDoubleQuotedChar7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFStringDoubleQuotedChar7(stack["v"])
}

func (c *current) onFStringSingleQuotedElem3(v any) (any, error) {
	return &ast.FStringText{Kind: "FStringText", Loc: loc(c), Text: joinChars(v)}, nil

}

func (p *parser) callonFStringSingleQuotedElem3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFStringSingleQuotedElem3(stack["v"])
}

func (c *current) onFStringSingleQuotedChar2(v any) (any, error) {
	return v, nil
}

func (p *parser) callonFStringSingleQuotedChar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFStringSingleQuotedChar2(stack["v"])
}

func (c *current) onFStringSingleQuotedChar7(v any) (any, error) {
	return v, nil
}

func (p *parser) callonFStringSingleQuotedChar7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFStringSingleQuotedChar7(stack["v"])
}

func (c *current) onFStringExpr1(e any) (any, error) {
	return &ast.FStringExpr{
		Kind: "FStringExpr",
		Expr: e.(ast.Expr),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonFStringExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFStringExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (any, error) {
	return &ast.TypePrimitive{
		Kind: "TypePrimitive",
		Name: string(c.text),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonPrimitiveType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonTypeFieldList2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (any, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ any) (any, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ any) (any, error) {
	return ast.TypeField{
		Name: name.(*ast.Name).Text,
		Type: typ.(ast.Type),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonTypeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onName2(s any) (any, error) {
	return &ast.Name{Kind: "Name", Text: s.(string), Loc: loc(c)}, nil
}

func (p *parser) callonName2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onName2(stack["s"])
}

func (c *current) onName5(s any) (any, error) {
	return &ast.Name{Kind: "Name", Text: s.(string), Loc: loc(c)}, nil
}

func (p *parser) callonName5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onName5(stack["s"])
}

func (c *current) onName8(s any) (any, error) {
	return &ast.Name{Kind: "Name", Text: s.(string), Loc: loc(c)}, nil
}

func (p *parser) callonName8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onName8(stack["s"])
}

func (c *current) onName11(s any) (any, error) {
	return &ast.Name{Kind: "Name", Text: s.(string), Loc: loc(c)}, nil
}

func (p *parser) callonName11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onName11(stack["s"])
}

func (c *current) onDottedIDs1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDottedIDs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDottedIDs1()
}

func (c *current) onIdentifier1(id any) (any, error) {
	return &ast.ID{
		Kind: "ID",
		Name: id.(string),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifiers7(name any) (any, error) {
	return name, nil
}

func (p *parser) callonIdentifiers7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifiers7(stack["name"])
}

func (c *current) onIdentifiers1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonIdentifiers1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifiers1(stack["first"], stack["rest"])
}

func (c *current) onIdentifierName2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id any) (any, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onTime1() (any, error) {
	return newPrimitive(c, "time", string(c.text)), nil

}

func (p *parser) callonTime1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (any, error) {
	return newPrimitive(c, "duration", string(c.text)), nil

}

func (p *parser) callonDuration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v any) (any, error) {
	return v, nil
}

func (p *parser) callonIP61() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b any) (any, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e any) (any, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b any) (any, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b any) (any, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (any, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v any) (any, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v any) (any, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m any) (any, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP4Net1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m any) (any, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s any) (any, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v any) (any, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v any) (any, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s any) (any, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail any) (any, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s any) (any, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail any) (any, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (any, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s any) (any, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (any, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (any, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s any) (any, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (any, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (any, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (any, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (any, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (any, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (any, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (any, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (any, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars any) (any, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars any) (any, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body any) (any, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

func (c *current) onSQLPipe1(s any) (any, error) {
	return &ast.SQLPipe{
		Kind: "SQLPipe",
		Ops:  sliceOf[ast.Op](s),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonSQLPipe1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLPipe1(stack["s"])
}

func (c *current) onSelectOp1(op any) (any, error) {
	return op, nil
}

func (p *parser) callonSelectOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectOp1(stack["op"])
}

func (c *current) onSelectExpr9(s any) (any, error) {
	return s, nil
}

func (p *parser) callonSelectExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr9(stack["s"])
}

func (c *current) onSelectExpr1(with, body, orderby, limit any) (any, error) {
	op := body.(ast.Op)
	if with != nil {
		w := with.(*ast.With)
		w.Body = op
		op = w
	}
	if orderby != nil {
		o := orderby.(*ast.OrderBy)
		o.Op = op
		op = o
	}
	if limit != nil {
		l := limit.(*ast.Limit)
		l.Op = op
		op = l
	}
	return op, nil

}

func (p *parser) callonSelectExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["with"], stack["body"], stack["orderby"], stack["limit"])
}

func (c *current) onSelect1(distinct, value, selection, from, where, group, having any) (any, error) {
	sel := &ast.Select{
		Kind:      "Select",
		Distinct:  distinct.(bool),
		Value:     value.(bool),
		Selection: selection.(ast.Selection),
		Loc:       loc(c),
	}
	if from != nil {
		sel.From = from.(*ast.From)
	}
	if where != nil {
		sel.Where = where.(ast.Expr)
	}
	if group != nil {
		sel.GroupBy = sliceOf[ast.Expr](group)
	}
	if having != nil {
		sel.Having = having.(ast.Expr)
	}
	return sel, nil

}

func (p *parser) callonSelect1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelect1(stack["distinct"], stack["value"], stack["selection"], stack["from"], stack["where"], stack["group"], stack["having"])
}

func (c *current) onOptDistinct2() (any, error) {
	return false, nil
}

func (p *parser) callonOptDistinct2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptDistinct2()
}

func (c *current) onOptDistinct6() (any, error) {
	return true, nil
}

func (p *parser) callonOptDistinct6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptDistinct6()
}

func (c *current) onOptDistinct10() (any, error) {
	return false, nil
}

func (p *parser) callonOptDistinct10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptDistinct10()
}

func (c *current) onOptSelectValue2() (any, error) {
	return true, nil
}

func (p *parser) callonOptSelectValue2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptSelectValue2()
}

func (c *current) onOptSelectValue8() (any, error) {
	return true, nil
}

func (p *parser) callonOptSelectValue8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptSelectValue8()
}

func (c *current) onOptSelectValue12() (any, error) {
	return false, nil
}

func (p *parser) callonOptSelectValue12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptSelectValue12()
}

func (c *current) onOptWithClause3() (any, error) {
	return nil, nil
}

func (p *parser) callonOptWithClause3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptWithClause3()
}

func (c *current) onWithClause1(r, ctes any) (any, error) {
	return &ast.With{
		Kind:      "With",
		Recursive: r.(bool),
		CTEs:      sliceOf[ast.CTE](ctes),
		Loc:       loc(c),
	}, nil

}

func (p *parser) callonWithClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWithClause1(stack["r"], stack["ctes"])
}

func (c *current) onOptRecursive2() (any, error) {
	return true, nil
}

func (p *parser) callonOptRecursive2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptRecursive2()
}

func (c *current) onOptRecursive6() (any, error) {
	return false, nil
}

func (p *parser) callonOptRecursive6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptRecursive6()
}

func (c *current) onCteList7(cte any) (any, error) {
	return cte, nil
}

func (p *parser) callonCteList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCteList7(stack["cte"])
}

func (c *current) onCteList1(first, rest any) (any, error) {
	return prepend(first, rest), nil
}

func (p *parser) callonCteList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCteList1(stack["first"], stack["rest"])
}

func (c *current) onCte1(name, m, s any) (any, error) {
	return ast.CTE{
		Name:         name.(string),
		Materialized: m.(*bool),
		Op:           s.(ast.Op),
		Loc:          loc(c),
	}, nil

}

func (p *parser) callonCte1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCte1(stack["name"], stack["m"], stack["s"])
}

func (c *current) onOptMaterialized2() (any, error) {
	return true, nil
}

func (p *parser) callonOptMaterialized2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptMaterialized2()
}

func (c *current) onOptMaterialized7() (any, error) {
	return false, nil
}

func (p *parser) callonOptMaterialized7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptMaterialized7()
}

func (c *current) onOptMaterialized14() (any, error) {
	return false, nil
}

func (p *parser) callonOptMaterialized14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptMaterialized14()
}

func (c *current) onOptFromClause2(from any) (any, error) {
	return from, nil

}

func (p *parser) callonOptFromClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptFromClause2(stack["from"])
}

func (c *current) onOptFromClause7() (any, error) {
	return nil, nil
}

func (p *parser) callonOptFromClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptFromClause7()
}

func (c *current) onOptWhereClause2(where any) (any, error) {
	return where, nil
}

func (p *parser) callonOptWhereClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptWhereClause2(stack["where"])
}

func (c *current) onOptWhereClause5() (any, error) {
	return nil, nil
}

func (p *parser) callonOptWhereClause5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptWhereClause5()
}

func (c *current) onOptGroupClause2(group any) (any, error) {
	return group, nil
}

func (p *parser) callonOptGroupClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptGroupClause2(stack["group"])
}

func (c *current) onOptGroupClause7() (any, error) {
	return nil, nil
}

func (p *parser) callonOptGroupClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptGroupClause7()
}

func (c *current) onGroupClause1(list any) (any, error) {
	return list, nil
}

func (p *parser) callonGroupClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupClause1(stack["list"])
}

func (c *current) onGroupByList7(g any) (any, error) {
	return g, nil
}

func (p *parser) callonGroupByList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByList7(stack["g"])
}

func (c *current) onGroupByList1(first, rest any) (any, error) {
	return prepend(first, rest), nil

}

func (p *parser) callonGroupByList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByList1(stack["first"], stack["rest"])
}

func (c *current) onOptHavingClause2(h any) (any, error) {
	return h, nil
}

func (p *parser) callonOptHavingClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptHavingClause2(stack["h"])
}

func (c *current) onOptHavingClause7() (any, error) {
	return nil, nil
}

func (p *parser) callonOptHavingClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptHavingClause7()
}

func (c *current) onHavingClause1(e any) (any, error) {
	return e, nil
}

func (p *parser) callonHavingClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHavingClause1(stack["e"])
}

func (c *current) onCrossJoin1(left, right any) (any, error) {
	return &ast.CrossJoin{
		Kind:  "CrossJoin",
		Left:  left.(*ast.FromElem),
		Right: right.(*ast.FromElem),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonCrossJoin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossJoin1(stack["left"], stack["right"])
}

func (c *current) onConditionJoin1(left, style, right, e any) (any, error) {
	return &ast.SQLJoin{
		Kind:  "SQLJoin",
		Style: style.(string),
		Left:  left.(*ast.FromElem),
		Right: right.(*ast.FromElem),
		Cond:  e.(ast.JoinExpr),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonConditionJoin1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionJoin1(stack["left"], stack["style"], stack["right"], stack["e"])
}

func (c *current) onSQLJoinStyle2() (any, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2()
}

func (c *current) onSQLJoinStyle10() (any, error) {
	return "full", nil
}

func (p *parser) callonSQLJoinStyle10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLJoinStyle20() (any, error) {
	return "left", nil
}

func (p *parser) callonSQLJoinStyle20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle20()
}

func (c *current) onSQLJoinStyle30() (any, error) {
	return "right", nil
}

func (p *parser) callonSQLJoinStyle30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle30()
}

func (c *current) onJoinExpr2(e any) (any, error) {

	return &ast.JoinOn{
		Kind: "JoinOn",
		Expr: e.(ast.Expr),
	}, nil

}

func (p *parser) callonJoinExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinExpr2(stack["e"])
}

func (c *current) onJoinExpr9(fields any) (any, error) {
	return &ast.JoinUsing{
		Kind:   "JoinUsing",
		Fields: sliceOf[ast.Expr](fields),
	}, nil

}

func (p *parser) callonJoinExpr9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinExpr9(stack["fields"])
}

func (c *current) onOptOrdinality2() (any, error) {
	return &ast.Ordinality{
		Kind: "Ordinality",
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonOptOrdinality2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptOrdinality2()
}

func (c *current) onOptOrdinality8() (any, error) {
	return nil, nil
}

func (p *parser) callonOptOrdinality8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptOrdinality8()
}

func (c *current) onOptAlias2(a any) (any, error) {
	return a, nil
}

func (p *parser) callonOptAlias2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptAlias2(stack["a"])
}

func (c *current) onOptAlias7() (any, error) {
	return nil, nil
}

func (p *parser) callonOptAlias7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptAlias7()
}

func (c *current) onAliasClause1(name any) (any, error) {
	// optional column defs no types
	return &ast.Name{Kind: "Name", Text: name.(string), Loc: loc(c)}, nil

}

func (p *parser) callonAliasClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAliasClause1(stack["name"])
}

func (c *current) onSelection7(s any) (any, error) {
	return s, nil
}

func (p *parser) callonSelection7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelection7(stack["s"])
}

func (c *current) onSelection1(first, rest any) (any, error) {
	return ast.Selection{
		Kind: "Selection",
		Args: sliceOf[ast.AsExpr](prepend(first, rest)),
		Loc:  loc(c),
	}, nil

}

func (p *parser) callonSelection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelection1(stack["first"], stack["rest"])
}

func (c *current) onSelectElem2(e, as any) (any, error) {
	elem := ast.AsExpr{
		Kind: "AsExpr",
		Expr: e.(ast.Expr),
		Loc:  loc(c),
	}
	if as != nil {
		elem.ID = as.(*ast.ID)
	}
	return elem, nil

}

func (p *parser) callonSelectElem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectElem2(stack["e"], stack["as"])
}

func (c *current) onSelectElem8() (any, error) {
	// empty assignment is star (for now)
	return ast.AsExpr{Kind: "AsExpr"}, nil

}

func (p *parser) callonSelectElem8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectElem8()
}

func (c *current) onOptAsClause2(id any) (any, error) {
	return id, nil
}

func (p *parser) callonOptAsClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptAsClause2(stack["id"])
}

func (c *current) onOptAsClause9() (any, error) {
	return nil, nil
}

func (p *parser) callonOptAsClause9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptAsClause9()
}

func (c *current) onOptOrderByClause2(list any) (any, error) {

	return &ast.OrderBy{
		Kind:  "OrderBy",
		Exprs: list.([]ast.SortExpr),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonOptOrderByClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptOrderByClause2(stack["list"])
}

func (c *current) onOptOrderByClause11() (any, error) {
	return nil, nil
}

func (p *parser) callonOptOrderByClause11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptOrderByClause11()
}

func (c *current) onOrderByList7(o any) (any, error) {
	return o, nil
}

func (p *parser) callonOrderByList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByList7(stack["o"])
}

func (c *current) onOrderByList1(first, rest any) (any, error) {
	return sliceOf[ast.SortExpr](prepend(first, rest)), nil

}

func (p *parser) callonOrderByList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByList1(stack["first"], stack["rest"])
}

func (c *current) onOrderByItem1(e, order, nulls any) (any, error) {
	s := ast.SortExpr{Kind: "SortExpr", Expr: e.(ast.Expr), Loc: loc(c)}
	if order != nil {
		s.Order = order.(*ast.ID)
	}
	if nulls != nil {
		s.Nulls = nulls.(*ast.ID)
	}
	return s, nil

}

func (p *parser) callonOrderByItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByItem1(stack["e"], stack["order"], stack["nulls"])
}

func (c *current) onOptAscDesc2() (any, error) {
	return &ast.ID{Kind: "ID", Name: "asc", Loc: loc(c)}, nil
}

func (p *parser) callonOptAscDesc2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptAscDesc2()
}

func (c *current) onOptAscDesc6() (any, error) {
	return &ast.ID{Kind: "ID", Name: "desc", Loc: loc(c)}, nil
}

func (p *parser) callonOptAscDesc6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptAscDesc6()
}

func (c *current) onOptAscDesc10() (any, error) {
	return nil, nil
}

func (p *parser) callonOptAscDesc10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptAscDesc10()
}

func (c *current) onOptNullsOrder2() (any, error) {
	return &ast.ID{Kind: "ID", Name: "first", Loc: loc(c)}, nil
}

func (p *parser) callonOptNullsOrder2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptNullsOrder2()
}

func (c *current) onOptNullsOrder8() (any, error) {
	return &ast.ID{Kind: "ID", Name: "last", Loc: loc(c)}, nil
}

func (p *parser) callonOptNullsOrder8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptNullsOrder8()
}

func (c *current) onOptNullsOrder14() (any, error) {
	return nil, nil
}

func (p *parser) callonOptNullsOrder14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptNullsOrder14()
}

func (c *current) onSelectLimit2(l, o any) (any, error) {
	limit := l.(*ast.Limit)
	if o != nil {
		limit.Offset = o.(ast.Expr)
	}
	return limit, nil

}

func (p *parser) callonSelectLimit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectLimit2(stack["l"], stack["o"])
}

func (c *current) onSelectLimit8(o, l any) (any, error) {
	if l == nil {
		return &ast.Limit{
			Kind:   "Limit",
			Offset: o.(ast.Expr),
			Loc:    loc(c),
		}, nil
	}
	limit := l.(*ast.Limit)
	limit.Offset = o.(ast.Expr)
	return limit, nil

}

func (p *parser) callonSelectLimit8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectLimit8(stack["o"], stack["l"])
}

func (c *current) onOptLimitClause2(l any) (any, error) {
	return l, nil
}

func (p *parser) callonOptLimitClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptLimitClause2(stack["l"])
}

func (c *current) onOptLimitClause7() (any, error) {
	return nil, nil
}

func (p *parser) callonOptLimitClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptLimitClause7()
}

func (c *current) onLimitClause2() (any, error) {
	return &ast.Limit{Kind: "Limit", Loc: loc(c)}, nil
}

func (p *parser) callonLimitClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitClause2()
}

func (c *current) onLimitClause7(e any) (any, error) {
	return &ast.Limit{
		Kind:  "Limit",
		Count: e.(ast.Expr),
		Loc:   loc(c),
	}, nil

}

func (p *parser) callonLimitClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitClause7(stack["e"])
}

func (c *current) onOptOffsetClause2(o any) (any, error) {
	return o, nil
}

func (p *parser) callonOptOffsetClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptOffsetClause2(stack["o"])
}

func (c *current) onOptOffsetClause7() (any, error) {
	return nil, nil
}

func (p *parser) callonOptOffsetClause7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptOffsetClause7()
}

func (c *current) onOffsetClause1(e any) (any, error) {
	return e, nil
}

func (p *parser) callonOffsetClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetClause1(stack["e"])
}

func (c *current) onSetOperation1(left, distinct, right any) (any, error) {
	return &ast.Union{
		Kind:     "Union",
		Distinct: distinct.(bool),
		Left:     left.(ast.Op),
		Right:    right.(ast.Op),
		Loc:      loc(c),
	}, nil

}

func (p *parser) callonSetOperation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetOperation1(stack["left"], stack["distinct"], stack["right"])
}

func (c *current) onSetOp2() (any, error) {
	return false, nil
}

func (p *parser) callonSetOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetOp2()
}

func (c *current) onSetOp8() (any, error) {
	return true, nil
}

func (p *parser) callonSetOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetOp8()
}

func (c *current) onSetOp14() (any, error) {
	return true, nil
}

func (p *parser) callonSetOp14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetOp14()
}

func (c *current) onAND1() (any, error) {
	return "and", nil
}

func (p *parser) callonAND1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAND1()
}

func (c *current) onASC1() (any, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (any, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onOR1() (any, error) {
	return "or", nil
}

func (p *parser) callonOR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOR1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecusion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecusion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecusion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
