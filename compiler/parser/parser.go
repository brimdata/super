// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 99},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 99},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 99},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 102},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 106},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 16, offset: 110},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 19, offset: 113},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 138},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 148},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 148},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 154},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 160},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 22, offset: 165},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 16, col: 1, offset: 266},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 274},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 280},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 295},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 295},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 21, col: 1, offset: 388},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 398},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 398},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 401},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 19, offset: 406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 409},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 24, offset: 411},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 449},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 449},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 452},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 464},
										name: "FuncDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 31, offset: 475},
										name: "OpDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 39, offset: 483},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 504},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 518},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 518},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 526},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 528},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 531},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 549},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 556},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 561},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 666},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 666},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 673},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 675},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 679},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 679},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 696},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 710},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 713},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 717},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 720},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 724},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 993},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1006},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 1006},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1015},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1018},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1036},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1043},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 42, col: 49, offset: 1050},
								expr: &ruleRefExpr{
									pos:  position{line: 42, col: 49, offset: 1050},
									name: "IdentifierNames",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 66, offset: 1067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 69, offset: 1070},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 73, offset: 1074},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 76, offset: 1077},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 80, offset: 1081},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 83, offset: 1084},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 87, offset: 1088},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 90, offset: 1091},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 95, offset: 1096},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 100, offset: 1101},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 103, offset: 1104},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OpDecl",
			pos:  position{line: 55, col: 1, offset: 1288},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1299},
				run: (*parser).callonOpDecl1,
				expr: &seqExpr{
					pos: position{line: 56, col: 5, offset: 1299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 56, col: 5, offset: 1299},
							val:        "op",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 10, offset: 1304},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 12, offset: 1306},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 17, offset: 1311},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 32, offset: 1326},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 35, offset: 1329},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 39, offset: 1333},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 42, offset: 1336},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 56, col: 49, offset: 1343},
								expr: &ruleRefExpr{
									pos:  position{line: 56, col: 49, offset: 1343},
									name: "IdentifierNames",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 66, offset: 1360},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 69, offset: 1363},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 73, offset: 1367},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 76, offset: 1370},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 80, offset: 1374},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 83, offset: 1377},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 87, offset: 1381},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 90, offset: 1384},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 95, offset: 1389},
								name: "Seq",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 99, offset: 1393},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 102, offset: 1396},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 69, col: 1, offset: 1580},
			expr: &choiceExpr{
				pos: position{line: 70, col: 5, offset: 1594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1594},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1594},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 70, col: 5, offset: 1594},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 12, offset: 1601},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 70, col: 15, offset: 1604},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 70, col: 19, offset: 1608},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 70, col: 25, offset: 1614},
										expr: &ruleRefExpr{
											pos:  position{line: 70, col: 25, offset: 1614},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 30, offset: 1619},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 70, col: 33, offset: 1622},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 1715},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 1715},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 73, col: 5, offset: 1715},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 14, offset: 1724},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 73, col: 16, offset: 1726},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 21, offset: 1731},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 26, offset: 1736},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 73, col: 28, offset: 1738},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 73, col: 32, offset: 1742},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 73, col: 38, offset: 1748},
										expr: &ruleRefExpr{
											pos:  position{line: 73, col: 38, offset: 1748},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 49, offset: 1759},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 73, col: 52, offset: 1762},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1867},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 1867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 76, col: 5, offset: 1867},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 14, offset: 1876},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 76, col: 17, offset: 1879},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 76, col: 21, offset: 1883},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 76, col: 27, offset: 1889},
										expr: &ruleRefExpr{
											pos:  position{line: 76, col: 27, offset: 1889},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 38, offset: 1900},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 76, col: 41, offset: 1903},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2007},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2007},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 79, col: 5, offset: 2007},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 12, offset: 2014},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 79, col: 15, offset: 2017},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 79, col: 19, offset: 2021},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 79, col: 26, offset: 2028},
										expr: &ruleRefExpr{
											pos:  position{line: 79, col: 26, offset: 2028},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 35, offset: 2037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 79, col: 38, offset: 2040},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2131},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 82, col: 5, offset: 2131},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 9, offset: 2135},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 82, col: 12, offset: 2138},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 18, offset: 2144},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 24, offset: 2150},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 82, col: 27, offset: 2153},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 83, col: 5, offset: 2183},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 83, col: 8, offset: 2186},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2199},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2199},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2199},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 7, offset: 2201},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 84, col: 20, offset: 2214},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 21, offset: 2215},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2245},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 85, col: 5, offset: 2245},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 85, col: 5, offset: 2245},
									expr: &seqExpr{
										pos: position{line: 85, col: 7, offset: 2247},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 85, col: 7, offset: 2247},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 85, col: 16, offset: 2256},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 85, col: 25, offset: 2265},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 27, offset: 2267},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 85, col: 39, offset: 2279},
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 40, offset: 2280},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2310},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2310},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 5, offset: 2310},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 14, offset: 2319},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 86, col: 16, offset: 2321},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 86, col: 21, offset: 2326},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2425},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2425},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 10, offset: 2430},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 2529},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2529},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 10, offset: 2534},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 95, col: 5, offset: 2622},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 95, col: 5, offset: 2622},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 10, offset: 2627},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 99, col: 1, offset: 2714},
			expr: &seqExpr{
				pos: position{line: 99, col: 11, offset: 2724},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 99, col: 11, offset: 2724},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 99, col: 15, offset: 2728},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 99, col: 15, offset: 2728},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 99, col: 22, offset: 2735},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 99, col: 43, offset: 2756},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 99, col: 50, offset: 2763},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 99, col: 56, offset: 2769},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 100, col: 1, offset: 2774},
			expr: &seqExpr{
				pos: position{line: 100, col: 8, offset: 2781},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 100, col: 8, offset: 2781},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 100, col: 12, offset: 2785},
						expr: &choiceExpr{
							pos: position{line: 100, col: 14, offset: 2787},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 100, col: 14, offset: 2787},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 100, col: 20, offset: 2793},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 102, col: 1, offset: 2799},
			expr: &actionExpr{
				pos: position{line: 102, col: 7, offset: 2805},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 102, col: 7, offset: 2805},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 102, col: 7, offset: 2805},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 102, col: 10, offset: 2808},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 15, offset: 2813},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 102, col: 18, offset: 2816},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 22, offset: 2820},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 104, col: 1, offset: 2845},
			expr: &actionExpr{
				pos: position{line: 105, col: 5, offset: 2859},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 105, col: 5, offset: 2859},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 105, col: 5, offset: 2859},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 8, offset: 2862},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 13, offset: 2867},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 18, offset: 2872},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 23, offset: 2877},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 109, col: 1, offset: 2959},
			expr: &choiceExpr{
				pos: position{line: 110, col: 5, offset: 2968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 2968},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 2968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 110, col: 5, offset: 2968},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 110, col: 12, offset: 2975},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 110, col: 14, offset: 2977},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 19, offset: 2982},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3012},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 111, col: 5, offset: 3012},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 113, col: 1, offset: 3043},
			expr: &actionExpr{
				pos: position{line: 114, col: 5, offset: 3055},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 114, col: 5, offset: 3055},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 114, col: 5, offset: 3055},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 8, offset: 3058},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 15, offset: 3065},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 26, offset: 3076},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 30, offset: 3080},
								expr: &seqExpr{
									pos: position{line: 114, col: 31, offset: 3081},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 114, col: 31, offset: 3081},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 114, col: 34, offset: 3084},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 114, col: 39, offset: 3089},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 114, col: 42, offset: 3092},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 122, col: 1, offset: 3283},
			expr: &choiceExpr{
				pos: position{line: 123, col: 5, offset: 3298},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3298},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 124, col: 5, offset: 3307},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 5, offset: 3315},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3324},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 128, col: 1, offset: 3332},
			expr: &seqExpr{
				pos: position{line: 128, col: 13, offset: 3344},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 128, col: 13, offset: 3344},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 128, col: 17, offset: 3348},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 128, col: 18, offset: 3349},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 128, col: 18, offset: 3349},
										expr: &litMatcher{
											pos:        position{line: 128, col: 19, offset: 3350},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 128, col: 24, offset: 3355},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 128, col: 38, offset: 3369},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 128, col: 57, offset: 3388},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 128, col: 82, offset: 3413},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 128, col: 88, offset: 3419},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 128, col: 94, offset: 3425},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 128, col: 100, offset: 3431},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 130, col: 1, offset: 3437},
			expr: &actionExpr{
				pos: position{line: 130, col: 14, offset: 3450},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 130, col: 15, offset: 3451},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 130, col: 15, offset: 3451},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 22, offset: 3458},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 130, col: 30, offset: 3466},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 130, col: 30, offset: 3466},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 130, col: 35, offset: 3471},
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 36, offset: 3472},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 130, col: 54, offset: 3490},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 61, offset: 3497},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 67, offset: 3503},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 74, offset: 3510},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 132, col: 1, offset: 3547},
			expr: &actionExpr{
				pos: position{line: 133, col: 5, offset: 3565},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 133, col: 5, offset: 3565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 3565},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 11, offset: 3571},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 21, offset: 3581},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 26, offset: 3586},
								expr: &ruleRefExpr{
									pos:  position{line: 133, col: 26, offset: 3586},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 137, col: 1, offset: 3660},
			expr: &actionExpr{
				pos: position{line: 137, col: 16, offset: 3675},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 137, col: 16, offset: 3675},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 137, col: 16, offset: 3675},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 137, col: 18, offset: 3677},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 137, col: 26, offset: 3685},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 137, col: 28, offset: 3687},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 30, offset: 3689},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 139, col: 1, offset: 3739},
			expr: &actionExpr{
				pos: position{line: 140, col: 5, offset: 3753},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 140, col: 5, offset: 3753},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 140, col: 5, offset: 3753},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 140, col: 11, offset: 3759},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 141, col: 5, offset: 3776},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 141, col: 10, offset: 3781},
								expr: &actionExpr{
									pos: position{line: 141, col: 11, offset: 3782},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 141, col: 11, offset: 3782},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 141, col: 11, offset: 3782},
												expr: &seqExpr{
													pos: position{line: 141, col: 12, offset: 3783},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 141, col: 12, offset: 3783},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 141, col: 14, offset: 3785},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 141, col: 25, offset: 3796},
												name: "_",
											},
											&notExpr{
												pos: position{line: 141, col: 27, offset: 3798},
												expr: &choiceExpr{
													pos: position{line: 141, col: 29, offset: 3800},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 141, col: 29, offset: 3800},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 141, col: 39, offset: 3810},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 141, col: 59, offset: 3830},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 141, col: 64, offset: 3835},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 145, col: 1, offset: 3953},
			expr: &choiceExpr{
				pos: position{line: 146, col: 5, offset: 3976},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 146, col: 5, offset: 3976},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 146, col: 5, offset: 3976},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 146, col: 16, offset: 3987},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 146, col: 19, offset: 3990},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 146, col: 24, offset: 3995},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 147, col: 5, offset: 4002},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 147, col: 5, offset: 4002},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 147, col: 10, offset: 4007},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 149, col: 1, offset: 4011},
			expr: &choiceExpr{
				pos: position{line: 150, col: 5, offset: 4028},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4028},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 4028},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 150, col: 6, offset: 4029},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 150, col: 6, offset: 4029},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 150, col: 6, offset: 4029},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 150, col: 15, offset: 4038},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 150, col: 19, offset: 4042},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 150, col: 19, offset: 4042},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 150, col: 23, offset: 4046},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 150, col: 27, offset: 4050},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 29, offset: 4052},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4164},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 5, offset: 4164},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 9, offset: 4168},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 153, col: 12, offset: 4171},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 17, offset: 4176},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 31, offset: 4190},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 153, col: 34, offset: 4193},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 154, col: 5, offset: 4222},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 156, col: 1, offset: 4234},
			expr: &choiceExpr{
				pos: position{line: 157, col: 5, offset: 4249},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 157, col: 5, offset: 4249},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 158, col: 5, offset: 4260},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 4269},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 4269},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 159, col: 5, offset: 4269},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 7, offset: 4271},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 159, col: 20, offset: 4284},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 159, col: 20, offset: 4284},
											expr: &ruleRefExpr{
												pos:  position{line: 159, col: 21, offset: 4285},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 159, col: 33, offset: 4297},
											expr: &seqExpr{
												pos: position{line: 159, col: 35, offset: 4299},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 159, col: 35, offset: 4299},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 159, col: 37, offset: 4301},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 4413},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 162, col: 5, offset: 4413},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 162, col: 5, offset: 4413},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 162, col: 9, offset: 4417},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 10, offset: 4418},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 5, offset: 4534},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 167, col: 1, offset: 4551},
			expr: &choiceExpr{
				pos: position{line: 168, col: 5, offset: 4571},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 168, col: 5, offset: 4571},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 168, col: 5, offset: 4571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 168, col: 5, offset: 4571},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 9, offset: 4575},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 168, col: 22, offset: 4588},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 168, col: 25, offset: 4591},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 28, offset: 4594},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 168, col: 39, offset: 4605},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 168, col: 42, offset: 4608},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 46, offset: 4612},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 171, col: 6, offset: 4735},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 171, col: 6, offset: 4735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 171, col: 6, offset: 4735},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 12, offset: 4741},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 171, col: 21, offset: 4750},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 171, col: 26, offset: 4755},
										expr: &ruleRefExpr{
											pos:  position{line: 171, col: 27, offset: 4756},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 175, col: 1, offset: 4828},
			expr: &choiceExpr{
				pos: position{line: 176, col: 5, offset: 4844},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 176, col: 5, offset: 4844},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 4856},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 4856},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 177, col: 5, offset: 4856},
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 6, offset: 4857},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 177, col: 20, offset: 4871},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 22, offset: 4873},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 181, col: 1, offset: 4981},
			expr: &actionExpr{
				pos: position{line: 182, col: 5, offset: 4990},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 182, col: 5, offset: 4990},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 182, col: 13, offset: 4998},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 186, col: 1, offset: 5094},
			expr: &actionExpr{
				pos: position{line: 187, col: 5, offset: 5105},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 187, col: 5, offset: 5105},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 187, col: 13, offset: 5113},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 193, col: 1, offset: 5239},
			expr: &choiceExpr{
				pos: position{line: 194, col: 5, offset: 5255},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5255},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 5255},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 194, col: 5, offset: 5255},
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 5, offset: 5255},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 16, offset: 5266},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 21, offset: 5271},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 33, offset: 5283},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 39, offset: 5289},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5415},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 5415},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 197, col: 5, offset: 5415},
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 5, offset: 5415},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 16, offset: 5426},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 21, offset: 5431},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 36, offset: 5446},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 197, col: 41, offset: 5451},
										expr: &seqExpr{
											pos: position{line: 197, col: 42, offset: 5452},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 197, col: 42, offset: 5452},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 197, col: 44, offset: 5454},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 58, offset: 5468},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 64, offset: 5474},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 205, col: 1, offset: 5688},
			expr: &seqExpr{
				pos: position{line: 205, col: 13, offset: 5700},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 205, col: 13, offset: 5700},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 25, offset: 5712},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 207, col: 1, offset: 5715},
			expr: &actionExpr{
				pos: position{line: 208, col: 5, offset: 5731},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 208, col: 5, offset: 5731},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 208, col: 5, offset: 5731},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 208, col: 13, offset: 5739},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 15, offset: 5741},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 23, offset: 5749},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 210, col: 1, offset: 5790},
			expr: &choiceExpr{
				pos: position{line: 211, col: 5, offset: 5803},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 211, col: 5, offset: 5803},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 211, col: 5, offset: 5803},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 211, col: 5, offset: 5803},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 211, col: 7, offset: 5805},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 14, offset: 5812},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 211, col: 16, offset: 5814},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 25, offset: 5823},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 211, col: 27, offset: 5825},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 33, offset: 5831},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 212, col: 5, offset: 5862},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 212, col: 5, offset: 5862},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 217, col: 1, offset: 6122},
			expr: &choiceExpr{
				pos: position{line: 218, col: 5, offset: 6141},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 5, offset: 6141},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 219, col: 5, offset: 6156},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 219, col: 5, offset: 6156},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 10, offset: 6161},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 221, col: 1, offset: 6253},
			expr: &actionExpr{
				pos: position{line: 222, col: 5, offset: 6273},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 222, col: 5, offset: 6273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 222, col: 5, offset: 6273},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 11, offset: 6279},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 26, offset: 6294},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 222, col: 31, offset: 6299},
								expr: &actionExpr{
									pos: position{line: 222, col: 32, offset: 6300},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 222, col: 32, offset: 6300},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 222, col: 32, offset: 6300},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 222, col: 35, offset: 6303},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 222, col: 39, offset: 6307},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 222, col: 42, offset: 6310},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 222, col: 47, offset: 6315},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 226, col: 1, offset: 6437},
			expr: &choiceExpr{
				pos: position{line: 227, col: 5, offset: 6455},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 6455},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 227, col: 5, offset: 6455},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 227, col: 5, offset: 6455},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 10, offset: 6460},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 15, offset: 6465},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 227, col: 18, offset: 6468},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 23, offset: 6473},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 227, col: 26, offset: 6476},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 30, offset: 6480},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 6584},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 230, col: 5, offset: 6584},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 9, offset: 6588},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 234, col: 1, offset: 6688},
			expr: &actionExpr{
				pos: position{line: 235, col: 5, offset: 6696},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 235, col: 5, offset: 6696},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 235, col: 5, offset: 6696},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 6, offset: 6697},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 16, offset: 6707},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 19, offset: 6710},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 27, offset: 6718},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 235, col: 30, offset: 6721},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 34, offset: 6725},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 37, offset: 6728},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 235, col: 42, offset: 6733},
								expr: &choiceExpr{
									pos: position{line: 235, col: 43, offset: 6734},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 235, col: 43, offset: 6734},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 235, col: 54, offset: 6745},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 61, offset: 6752},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 235, col: 64, offset: 6755},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 235, col: 68, offset: 6759},
							expr: &seqExpr{
								pos: position{line: 235, col: 70, offset: 6761},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 235, col: 70, offset: 6761},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 235, col: 73, offset: 6764},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 78, offset: 6769},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 235, col: 84, offset: 6775},
								expr: &ruleRefExpr{
									pos:  position{line: 235, col: 84, offset: 6775},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 243, col: 1, offset: 6966},
			expr: &choiceExpr{
				pos: position{line: 244, col: 5, offset: 6978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6978},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6997},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7010},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 248, col: 1, offset: 7019},
			expr: &actionExpr{
				pos: position{line: 248, col: 15, offset: 7033},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 248, col: 15, offset: 7033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 248, col: 15, offset: 7033},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 248, col: 17, offset: 7035},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 25, offset: 7043},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 27, offset: 7045},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 32, offset: 7050},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 250, col: 1, offset: 7086},
			expr: &actionExpr{
				pos: position{line: 251, col: 5, offset: 7105},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 251, col: 5, offset: 7105},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 7105},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 11, offset: 7111},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 7125},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 30, offset: 7130},
								expr: &seqExpr{
									pos: position{line: 251, col: 31, offset: 7131},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 251, col: 31, offset: 7131},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 251, col: 34, offset: 7134},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 38, offset: 7138},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 41, offset: 7141},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 261, col: 1, offset: 7365},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 7378},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7378},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7391},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7402},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7412},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7422},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7433},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7444},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7455},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7467},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 5, offset: 7478},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 272, col: 5, offset: 7488},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 5, offset: 7501},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 5, offset: 7512},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 7524},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 7535},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 7548},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 7558},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 7569},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 7580},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 7594},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7606},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7617},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7629},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 286, col: 1, offset: 7637},
			expr: &actionExpr{
				pos: position{line: 287, col: 5, offset: 7650},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 287, col: 5, offset: 7650},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 287, col: 5, offset: 7650},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 287, col: 14, offset: 7659},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 287, col: 16, offset: 7661},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 287, col: 22, offset: 7667},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 287, col: 22, offset: 7667},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 287, col: 24, offset: 7669},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 323, col: 1, offset: 9020},
			expr: &actionExpr{
				pos: position{line: 324, col: 5, offset: 9031},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 324, col: 5, offset: 9031},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 5, offset: 9031},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 324, col: 12, offset: 9038},
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 13, offset: 9039},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 18, offset: 9044},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 23, offset: 9049},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 32, offset: 9058},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 37, offset: 9063},
								expr: &actionExpr{
									pos: position{line: 324, col: 38, offset: 9064},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 324, col: 38, offset: 9064},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 324, col: 38, offset: 9064},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 40, offset: 9066},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 324, col: 42, offset: 9068},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 338, col: 1, offset: 9479},
			expr: &actionExpr{
				pos: position{line: 338, col: 12, offset: 9490},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 338, col: 12, offset: 9490},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 338, col: 17, offset: 9495},
						expr: &actionExpr{
							pos: position{line: 338, col: 18, offset: 9496},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 338, col: 18, offset: 9496},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 338, col: 18, offset: 9496},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 338, col: 20, offset: 9498},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 338, col: 22, offset: 9500},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 340, col: 1, offset: 9557},
			expr: &choiceExpr{
				pos: position{line: 341, col: 5, offset: 9569},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 9569},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 341, col: 5, offset: 9569},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 9644},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 342, col: 5, offset: 9644},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 342, col: 5, offset: 9644},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 342, col: 14, offset: 9653},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 342, col: 16, offset: 9655},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 342, col: 23, offset: 9662},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 342, col: 24, offset: 9663},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 342, col: 24, offset: 9663},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 342, col: 34, offset: 9673},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 344, col: 1, offset: 9786},
			expr: &actionExpr{
				pos: position{line: 345, col: 5, offset: 9796},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 345, col: 5, offset: 9796},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 5, offset: 9796},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 345, col: 11, offset: 9802},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 12, offset: 9803},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 17, offset: 9808},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 23, offset: 9814},
								expr: &actionExpr{
									pos: position{line: 345, col: 24, offset: 9815},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 345, col: 24, offset: 9815},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 345, col: 24, offset: 9815},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 345, col: 26, offset: 9817},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 345, col: 28, offset: 9819},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 53, offset: 9844},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 59, offset: 9850},
								expr: &seqExpr{
									pos: position{line: 345, col: 60, offset: 9851},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 345, col: 60, offset: 9851},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 345, col: 62, offset: 9853},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 73, offset: 9864},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 80, offset: 9871},
								expr: &actionExpr{
									pos: position{line: 345, col: 81, offset: 9872},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 345, col: 81, offset: 9872},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 345, col: 81, offset: 9872},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 345, col: 83, offset: 9874},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 345, col: 85, offset: 9876},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 359, col: 1, offset: 10211},
			expr: &actionExpr{
				pos: position{line: 360, col: 5, offset: 10221},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 360, col: 5, offset: 10221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 360, col: 5, offset: 10221},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 11, offset: 10227},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 13, offset: 10229},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 18, offset: 10234},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 364, col: 1, offset: 10329},
			expr: &actionExpr{
				pos: position{line: 365, col: 5, offset: 10340},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 365, col: 5, offset: 10340},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 5, offset: 10340},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 12, offset: 10347},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 14, offset: 10349},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 19, offset: 10354},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 369, col: 1, offset: 10445},
			expr: &choiceExpr{
				pos: position{line: 370, col: 5, offset: 10456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10456},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10456},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 12, offset: 10463},
									name: "_",
								},
								&notExpr{
									pos: position{line: 370, col: 14, offset: 10465},
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 15, offset: 10466},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 370, col: 23, offset: 10474},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 29, offset: 10480},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10560},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10560},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 373, col: 1, offset: 10707},
			expr: &choiceExpr{
				pos: position{line: 374, col: 5, offset: 10718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 374, col: 5, offset: 10718},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 374, col: 5, offset: 10718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 374, col: 5, offset: 10718},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 374, col: 12, offset: 10725},
									name: "_",
								},
								&notExpr{
									pos: position{line: 374, col: 14, offset: 10727},
									expr: &ruleRefExpr{
										pos:  position{line: 374, col: 15, offset: 10728},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 374, col: 23, offset: 10736},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 374, col: 29, offset: 10742},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 10822},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 375, col: 5, offset: 10822},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 377, col: 1, offset: 10969},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 10981},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 10981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 10981},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 13, offset: 10989},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 15, offset: 10991},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 20, offset: 10996},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 382, col: 1, offset: 11082},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 11093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 383, col: 5, offset: 11093},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 383, col: 5, offset: 11093},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 383, col: 5, offset: 11093},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 383, col: 12, offset: 11100},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 383, col: 14, offset: 11102},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 386, col: 5, offset: 11191},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 386, col: 5, offset: 11191},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 390, col: 1, offset: 11280},
			expr: &actionExpr{
				pos: position{line: 391, col: 5, offset: 11290},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 391, col: 5, offset: 11290},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 5, offset: 11290},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 11, offset: 11296},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 13, offset: 11298},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 18, offset: 11303},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 395, col: 1, offset: 11394},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11407},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 11407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 11407},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 14, offset: 11416},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 16, offset: 11418},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 22, offset: 11424},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 33, offset: 11435},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 396, col: 38, offset: 11440},
								expr: &actionExpr{
									pos: position{line: 396, col: 39, offset: 11441},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 396, col: 39, offset: 11441},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 396, col: 39, offset: 11441},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 396, col: 42, offset: 11444},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 396, col: 46, offset: 11448},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 396, col: 49, offset: 11451},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 396, col: 52, offset: 11454},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 404, col: 1, offset: 11861},
			expr: &actionExpr{
				pos: position{line: 405, col: 5, offset: 11872},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 405, col: 5, offset: 11872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 5, offset: 11872},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 405, col: 12, offset: 11879},
							expr: &seqExpr{
								pos: position{line: 405, col: 14, offset: 11881},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 405, col: 14, offset: 11881},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 405, col: 17, offset: 11884},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 405, col: 22, offset: 11889},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 23, offset: 11890},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 409, col: 1, offset: 11961},
			expr: &actionExpr{
				pos: position{line: 410, col: 5, offset: 11973},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 410, col: 5, offset: 11973},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 5, offset: 11973},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 410, col: 13, offset: 11981},
							expr: &seqExpr{
								pos: position{line: 410, col: 15, offset: 11983},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 410, col: 15, offset: 11983},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 410, col: 18, offset: 11986},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 410, col: 23, offset: 11991},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 24, offset: 11992},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 414, col: 1, offset: 12064},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 12075},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 12075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 415, col: 5, offset: 12075},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 11, offset: 12081},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 21, offset: 12091},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 415, col: 28, offset: 12098},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 39, offset: 12109},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 54, offset: 12124},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 57, offset: 12127},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 59, offset: 12129},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 63, offset: 12133},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 71, offset: 12141},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 415, col: 78, offset: 12148},
								expr: &seqExpr{
									pos: position{line: 415, col: 79, offset: 12149},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 415, col: 79, offset: 12149},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 415, col: 82, offset: 12152},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 86, offset: 12156},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 89, offset: 12159},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 99, offset: 12169},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 415, col: 107, offset: 12177},
								expr: &seqExpr{
									pos: position{line: 415, col: 108, offset: 12178},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 415, col: 108, offset: 12178},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 110, offset: 12180},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 426, col: 1, offset: 12536},
			expr: &choiceExpr{
				pos: position{line: 427, col: 5, offset: 12550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12550},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 427, col: 5, offset: 12550},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 427, col: 5, offset: 12550},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 427, col: 12, offset: 12557},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 428, col: 5, offset: 12587},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 428, col: 5, offset: 12587},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 428, col: 5, offset: 12587},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 428, col: 13, offset: 12595},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 429, col: 5, offset: 12625},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 429, col: 5, offset: 12625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 429, col: 5, offset: 12625},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 429, col: 13, offset: 12633},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 430, col: 5, offset: 12662},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 430, col: 5, offset: 12662},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 430, col: 5, offset: 12662},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 430, col: 13, offset: 12670},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 431, col: 5, offset: 12700},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 431, col: 5, offset: 12700},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 433, col: 1, offset: 12735},
			expr: &choiceExpr{
				pos: position{line: 434, col: 5, offset: 12754},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 12754},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 434, col: 5, offset: 12754},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 434, col: 5, offset: 12754},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 434, col: 8, offset: 12757},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 12, offset: 12761},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 434, col: 15, offset: 12764},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 434, col: 17, offset: 12766},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 21, offset: 12770},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 434, col: 24, offset: 12773},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 28, offset: 12777},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 435, col: 5, offset: 12802},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 435, col: 5, offset: 12802},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 437, col: 1, offset: 12825},
			expr: &choiceExpr{
				pos: position{line: 438, col: 5, offset: 12837},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 438, col: 5, offset: 12837},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 439, col: 5, offset: 12846},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 439, col: 5, offset: 12846},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 5, offset: 12846},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 439, col: 9, offset: 12850},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 439, col: 14, offset: 12855},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 439, col: 19, offset: 12860},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 441, col: 1, offset: 12886},
			expr: &actionExpr{
				pos: position{line: 442, col: 5, offset: 12899},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 442, col: 5, offset: 12899},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 442, col: 5, offset: 12899},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 442, col: 14, offset: 12908},
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 15, offset: 12909},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 20, offset: 12914},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 22, offset: 12916},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 449, col: 1, offset: 13264},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 13281},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 450, col: 5, offset: 13281},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 450, col: 7, offset: 13283},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 454, col: 1, offset: 13383},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13398},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13398},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 455, col: 5, offset: 13398},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 455, col: 5, offset: 13398},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 455, col: 7, offset: 13400},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 12, offset: 13405},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 13435},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 456, col: 5, offset: 13435},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 458, col: 1, offset: 13508},
			expr: &actionExpr{
				pos: position{line: 459, col: 5, offset: 13519},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 459, col: 5, offset: 13519},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 5, offset: 13519},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 12, offset: 13526},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 459, col: 14, offset: 13528},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 19, offset: 13533},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 34, offset: 13548},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 41, offset: 13555},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 41, offset: 13555},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 53, offset: 13567},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 60, offset: 13574},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 60, offset: 13574},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 71, offset: 13585},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 79, offset: 13593},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 79, offset: 13593},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 91, offset: 13605},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 96, offset: 13610},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 96, offset: 13610},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 463, col: 1, offset: 13769},
			expr: &actionExpr{
				pos: position{line: 464, col: 5, offset: 13783},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 464, col: 5, offset: 13783},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 464, col: 5, offset: 13783},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 464, col: 7, offset: 13785},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 16, offset: 13794},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 18, offset: 13796},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 22, offset: 13800},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 466, col: 1, offset: 13834},
			expr: &actionExpr{
				pos: position{line: 467, col: 5, offset: 13849},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 467, col: 5, offset: 13849},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 467, col: 5, offset: 13849},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 467, col: 7, offset: 13851},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 17, offset: 13861},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 467, col: 19, offset: 13863},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 467, col: 23, offset: 13867},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 469, col: 1, offset: 13901},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 13913},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 13913},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 470, col: 5, offset: 13913},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 470, col: 7, offset: 13915},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 14, offset: 13922},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 16, offset: 13924},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 20, offset: 13928},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 472, col: 1, offset: 13962},
			expr: &actionExpr{
				pos: position{line: 473, col: 5, offset: 13977},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 473, col: 5, offset: 13977},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 473, col: 5, offset: 13977},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 473, col: 9, offset: 13981},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 473, col: 17, offset: 13989},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 473, col: 17, offset: 13989},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 473, col: 34, offset: 14006},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 475, col: 1, offset: 14044},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 14055},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 476, col: 5, offset: 14055},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 476, col: 12, offset: 14062},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 480, col: 1, offset: 14220},
			expr: &choiceExpr{
				pos: position{line: 481, col: 5, offset: 14232},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 481, col: 5, offset: 14232},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 5, offset: 14241},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 483, col: 5, offset: 14249},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 485, col: 1, offset: 14255},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14264},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 14264},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 486, col: 5, offset: 14264},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 12, offset: 14271},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 14, offset: 14273},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 19, offset: 14278},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 24, offset: 14283},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 31, offset: 14290},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 31, offset: 14290},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 42, offset: 14301},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 51, offset: 14310},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 51, offset: 14310},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 490, col: 1, offset: 14442},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 14451},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 14451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 5, offset: 14451},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 12, offset: 14458},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 14, offset: 14460},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 19, offset: 14465},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 493, col: 1, offset: 14496},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 14505},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 14505},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 5, offset: 14505},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 12, offset: 14512},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 14, offset: 14514},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 19, offset: 14519},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 496, col: 1, offset: 14550},
			expr: &actionExpr{
				pos: position{line: 497, col: 5, offset: 14563},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 497, col: 5, offset: 14563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 497, col: 5, offset: 14563},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 10, offset: 14568},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 19, offset: 14577},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 497, col: 22, offset: 14580},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 22, offset: 14580},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 501, col: 1, offset: 14678},
			expr: &actionExpr{
				pos: position{line: 502, col: 5, offset: 14686},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 502, col: 5, offset: 14686},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 502, col: 5, offset: 14686},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 11, offset: 14692},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 502, col: 13, offset: 14694},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 17, offset: 14698},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 22, offset: 14703},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 29, offset: 14710},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 29, offset: 14710},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 40, offset: 14721},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 49, offset: 14730},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 49, offset: 14730},
									name: "SortKeyArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 61, offset: 14742},
							label: "method",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 68, offset: 14749},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 68, offset: 14749},
									name: "MethodArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 79, offset: 14760},
							label: "headers",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 87, offset: 14768},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 87, offset: 14768},
									name: "HeadersArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 99, offset: 14780},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 104, offset: 14785},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 104, offset: 14785},
									name: "BodyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MethodArg",
			pos:  position{line: 521, col: 1, offset: 15075},
			expr: &actionExpr{
				pos: position{line: 521, col: 13, offset: 15087},
				run: (*parser).callonMethodArg1,
				expr: &seqExpr{
					pos: position{line: 521, col: 13, offset: 15087},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 521, col: 13, offset: 15087},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 521, col: 15, offset: 15089},
							val:        "method",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 24, offset: 15098},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 26, offset: 15100},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 521, col: 29, offset: 15103},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 521, col: 29, offset: 15103},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 521, col: 46, offset: 15120},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadersArg",
			pos:  position{line: 523, col: 1, offset: 15153},
			expr: &actionExpr{
				pos: position{line: 523, col: 14, offset: 15166},
				run: (*parser).callonHeadersArg1,
				expr: &seqExpr{
					pos: position{line: 523, col: 14, offset: 15166},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 523, col: 14, offset: 15166},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 523, col: 16, offset: 15168},
							val:        "headers",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 26, offset: 15178},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 28, offset: 15180},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 30, offset: 15182},
								name: "Record",
							},
						},
					},
				},
			},
		},
		{
			name: "BodyArg",
			pos:  position{line: 525, col: 1, offset: 15208},
			expr: &actionExpr{
				pos: position{line: 525, col: 11, offset: 15218},
				run: (*parser).callonBodyArg1,
				expr: &seqExpr{
					pos: position{line: 525, col: 11, offset: 15218},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 525, col: 11, offset: 15218},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 525, col: 13, offset: 15220},
							val:        "body",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 20, offset: 15227},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 22, offset: 15229},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 525, col: 25, offset: 15232},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 525, col: 25, offset: 15232},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 42, offset: 15249},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 527, col: 1, offset: 15282},
			expr: &choiceExpr{
				pos: position{line: 528, col: 5, offset: 15291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 15291},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 528, col: 5, offset: 15291},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 7, offset: 15293},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 529, col: 5, offset: 15384},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 529, col: 5, offset: 15384},
							expr: &charClassMatcher{
								pos:        position{line: 529, col: 5, offset: 15384},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 532, col: 1, offset: 15536},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15547},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15547},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 533, col: 5, offset: 15547},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 533, col: 7, offset: 15549},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 12, offset: 15554},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 14, offset: 15556},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 17, offset: 15559},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 536, col: 1, offset: 15625},
			expr: &actionExpr{
				pos: position{line: 536, col: 9, offset: 15633},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 536, col: 9, offset: 15633},
					expr: &charClassMatcher{
						pos:        position{line: 536, col: 10, offset: 15634},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 538, col: 1, offset: 15680},
			expr: &choiceExpr{
				pos: position{line: 539, col: 5, offset: 15693},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 539, col: 5, offset: 15693},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 539, col: 5, offset: 15693},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 539, col: 5, offset: 15693},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 539, col: 10, offset: 15698},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 539, col: 19, offset: 15707},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 539, col: 26, offset: 15714},
										expr: &ruleRefExpr{
											pos:  position{line: 539, col: 26, offset: 15714},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 539, col: 38, offset: 15726},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 539, col: 43, offset: 15731},
										expr: &ruleRefExpr{
											pos:  position{line: 539, col: 43, offset: 15731},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 539, col: 53, offset: 15741},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 539, col: 57, offset: 15745},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 15863},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 542, col: 5, offset: 15863},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 10, offset: 15868},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 546, col: 1, offset: 15969},
			expr: &actionExpr{
				pos: position{line: 547, col: 5, offset: 15984},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 547, col: 5, offset: 15984},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 547, col: 5, offset: 15984},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 547, col: 9, offset: 15988},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 16, offset: 15995},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 549, col: 1, offset: 16034},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 16047},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 16047},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 5, offset: 16047},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 550, col: 9, offset: 16051},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 14, offset: 16056},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 552, col: 1, offset: 16093},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 16106},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 553, col: 5, offset: 16106},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 554, col: 5, offset: 16117},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 16126},
						run: (*parser).callonPoolName4,
						expr: &seqExpr{
							pos: position{line: 555, col: 5, offset: 16126},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 555, col: 5, offset: 16126},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 555, col: 9, offset: 16130},
									expr: &ruleRefExpr{
										pos:  position{line: 555, col: 10, offset: 16131},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16216},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 556, col: 5, offset: 16216},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 10, offset: 16221},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 16315},
						run: (*parser).callonPoolName12,
						expr: &labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16315},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 10, offset: 16320},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 559, col: 1, offset: 16407},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 16426},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 560, col: 5, offset: 16426},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 5, offset: 16445},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 5, offset: 16455},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 564, col: 1, offset: 16469},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16488},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16488},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 565, col: 6, offset: 16489},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 565, col: 6, offset: 16489},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 565, col: 24, offset: 16507},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 565, col: 29, offset: 16512},
							expr: &choiceExpr{
								pos: position{line: 565, col: 30, offset: 16513},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 565, col: 30, offset: 16513},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 565, col: 47, offset: 16530},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 567, col: 1, offset: 16568},
			expr: &actionExpr{
				pos: position{line: 568, col: 5, offset: 16583},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 568, col: 5, offset: 16583},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 568, col: 5, offset: 16583},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 568, col: 7, offset: 16585},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 15, offset: 16593},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 17, offset: 16595},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 22, offset: 16600},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 33, offset: 16611},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 39, offset: 16617},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 572, col: 1, offset: 16728},
			expr: &choiceExpr{
				pos: position{line: 573, col: 5, offset: 16739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 16739},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 573, col: 5, offset: 16739},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 573, col: 5, offset: 16739},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 573, col: 7, offset: 16741},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 16772},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 574, col: 5, offset: 16772},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 576, col: 1, offset: 16798},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 16812},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 16812},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 577, col: 5, offset: 16812},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 577, col: 7, offset: 16814},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 16, offset: 16823},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 18, offset: 16825},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 22, offset: 16829},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 579, col: 1, offset: 16865},
			expr: &choiceExpr{
				pos: position{line: 580, col: 5, offset: 16881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 580, col: 5, offset: 16881},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 580, col: 5, offset: 16881},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 581, col: 5, offset: 16915},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 581, col: 5, offset: 16915},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 582, col: 5, offset: 16950},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 582, col: 5, offset: 16950},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 584, col: 1, offset: 16981},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 16992},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 16992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 16992},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 585, col: 12, offset: 16999},
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 13, offset: 17000},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 591, col: 1, offset: 17193},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 17207},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 17207},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 592, col: 5, offset: 17207},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 15, offset: 17217},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 17, offset: 17219},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 22, offset: 17224},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 592, col: 28, offset: 17230},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 32, offset: 17234},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 592, col: 40, offset: 17242},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 592, col: 43, offset: 17245},
								expr: &ruleRefExpr{
									pos:  position{line: 592, col: 43, offset: 17245},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 596, col: 1, offset: 17358},
			expr: &actionExpr{
				pos: position{line: 597, col: 5, offset: 17370},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 597, col: 5, offset: 17370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 597, col: 5, offset: 17370},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 13, offset: 17378},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 15, offset: 17380},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 20, offset: 17385},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 601, col: 1, offset: 17471},
			expr: &actionExpr{
				pos: position{line: 602, col: 5, offset: 17482},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 602, col: 5, offset: 17482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 602, col: 5, offset: 17482},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 12, offset: 17489},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 14, offset: 17491},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 20, offset: 17497},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 26, offset: 17503},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 602, col: 33, offset: 17510},
								expr: &ruleRefExpr{
									pos:  position{line: 602, col: 33, offset: 17510},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 41, offset: 17518},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 602, col: 46, offset: 17523},
								expr: &ruleRefExpr{
									pos:  position{line: 602, col: 46, offset: 17523},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 606, col: 1, offset: 17646},
			expr: &choiceExpr{
				pos: position{line: 607, col: 5, offset: 17658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 607, col: 5, offset: 17658},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 607, col: 5, offset: 17658},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 607, col: 5, offset: 17658},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 607, col: 8, offset: 17661},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 13, offset: 17666},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 607, col: 16, offset: 17669},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 20, offset: 17673},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 607, col: 23, offset: 17676},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 607, col: 29, offset: 17682},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 35, offset: 17688},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 607, col: 38, offset: 17691},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 17721},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 17721},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 608, col: 5, offset: 17721},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 8, offset: 17724},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 13, offset: 17729},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 16, offset: 17732},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 20, offset: 17736},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 608, col: 23, offset: 17739},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 27, offset: 17743},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 31, offset: 17747},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 34, offset: 17750},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 610, col: 1, offset: 17775},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 17786},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 17786},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 611, col: 5, offset: 17786},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 611, col: 7, offset: 17788},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 14, offset: 17795},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 16, offset: 17797},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 22, offset: 17803},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 39, offset: 17820},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 611, col: 44, offset: 17825},
								expr: &actionExpr{
									pos: position{line: 611, col: 45, offset: 17826},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 611, col: 45, offset: 17826},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 611, col: 45, offset: 17826},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 611, col: 48, offset: 17829},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 611, col: 52, offset: 17833},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 611, col: 55, offset: 17836},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 57, offset: 17838},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 615, col: 1, offset: 17959},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 17980},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 17980},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 17980},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 10, offset: 17985},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 25, offset: 18000},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 616, col: 29, offset: 18004},
								expr: &seqExpr{
									pos: position{line: 616, col: 30, offset: 18005},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 616, col: 30, offset: 18005},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 616, col: 33, offset: 18008},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 37, offset: 18012},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 40, offset: 18015},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 624, col: 1, offset: 18236},
			expr: &actionExpr{
				pos: position{line: 625, col: 5, offset: 18248},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 625, col: 5, offset: 18248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 625, col: 5, offset: 18248},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 13, offset: 18256},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 15, offset: 18258},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 21, offset: 18264},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 629, col: 1, offset: 18353},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18365},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18365},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 630, col: 5, offset: 18365},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 7, offset: 18367},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 10, offset: 18370},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 12, offset: 18372},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 16, offset: 18376},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 632, col: 1, offset: 18402},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18412},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18412},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 633, col: 5, offset: 18412},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 7, offset: 18414},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 10, offset: 18417},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 12, offset: 18419},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 16, offset: 18423},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 637, col: 1, offset: 18474},
			expr: &ruleRefExpr{
				pos:  position{line: 637, col: 8, offset: 18481},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 639, col: 1, offset: 18492},
			expr: &actionExpr{
				pos: position{line: 640, col: 5, offset: 18502},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 640, col: 5, offset: 18502},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18502},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 11, offset: 18508},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 16, offset: 18513},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 640, col: 21, offset: 18518},
								expr: &actionExpr{
									pos: position{line: 640, col: 22, offset: 18519},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 640, col: 22, offset: 18519},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 22, offset: 18519},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 640, col: 25, offset: 18522},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 29, offset: 18526},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 32, offset: 18529},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 37, offset: 18534},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 644, col: 1, offset: 18646},
			expr: &ruleRefExpr{
				pos:  position{line: 644, col: 13, offset: 18658},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 646, col: 1, offset: 18664},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 18679},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 647, col: 5, offset: 18679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 18679},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 11, offset: 18685},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 21, offset: 18695},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 647, col: 26, offset: 18700},
								expr: &seqExpr{
									pos: position{line: 647, col: 27, offset: 18701},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 647, col: 27, offset: 18701},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 647, col: 30, offset: 18704},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 647, col: 34, offset: 18708},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 647, col: 37, offset: 18711},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 657, col: 1, offset: 18910},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 18926},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 18926},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 18926},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 18932},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 22, offset: 18943},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 27, offset: 18948},
								expr: &actionExpr{
									pos: position{line: 658, col: 28, offset: 18949},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 658, col: 28, offset: 18949},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 658, col: 28, offset: 18949},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 658, col: 31, offset: 18952},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 658, col: 35, offset: 18956},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 38, offset: 18959},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 658, col: 40, offset: 18961},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 662, col: 1, offset: 19072},
			expr: &actionExpr{
				pos: position{line: 663, col: 5, offset: 19087},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 663, col: 5, offset: 19087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19087},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 9, offset: 19091},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 14, offset: 19096},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 663, col: 17, offset: 19099},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 22, offset: 19104},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 663, col: 25, offset: 19107},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 29, offset: 19111},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 665, col: 1, offset: 19202},
			expr: &ruleRefExpr{
				pos:  position{line: 665, col: 8, offset: 19209},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 667, col: 1, offset: 19226},
			expr: &actionExpr{
				pos: position{line: 668, col: 5, offset: 19246},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 668, col: 5, offset: 19246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 19246},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 10, offset: 19251},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 24, offset: 19265},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 668, col: 28, offset: 19269},
								expr: &seqExpr{
									pos: position{line: 668, col: 29, offset: 19270},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 668, col: 29, offset: 19270},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 668, col: 32, offset: 19273},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 36, offset: 19277},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 39, offset: 19280},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 44, offset: 19285},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 668, col: 47, offset: 19288},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 51, offset: 19292},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 54, offset: 19295},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 677, col: 1, offset: 19556},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 19574},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 678, col: 5, offset: 19574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 5, offset: 19574},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 19580},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 5, offset: 19599},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 679, col: 10, offset: 19604},
								expr: &actionExpr{
									pos: position{line: 679, col: 11, offset: 19605},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 679, col: 11, offset: 19605},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 679, col: 11, offset: 19605},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 679, col: 14, offset: 19608},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 17, offset: 19611},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 679, col: 25, offset: 19619},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 679, col: 28, offset: 19622},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 33, offset: 19627},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 683, col: 1, offset: 19746},
			expr: &actionExpr{
				pos: position{line: 684, col: 5, offset: 19765},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 684, col: 5, offset: 19765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 5, offset: 19765},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 11, offset: 19771},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 685, col: 5, offset: 19790},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 685, col: 10, offset: 19795},
								expr: &actionExpr{
									pos: position{line: 685, col: 11, offset: 19796},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 685, col: 11, offset: 19796},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 685, col: 11, offset: 19796},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 685, col: 14, offset: 19799},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 685, col: 17, offset: 19802},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 685, col: 26, offset: 19811},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 685, col: 29, offset: 19814},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 685, col: 34, offset: 19819},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 689, col: 1, offset: 19938},
			expr: &actionExpr{
				pos: position{line: 690, col: 5, offset: 19957},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 690, col: 5, offset: 19957},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 19957},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 9, offset: 19961},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 22, offset: 19974},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 690, col: 31, offset: 19983},
								expr: &choiceExpr{
									pos: position{line: 690, col: 32, offset: 19984},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 690, col: 32, offset: 19984},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 690, col: 32, offset: 19984},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 35, offset: 19987},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 46, offset: 19998},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 49, offset: 20001},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 690, col: 64, offset: 20016},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 690, col: 64, offset: 20016},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 690, col: 68, offset: 20020},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 690, col: 68, offset: 20020},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 104, offset: 20056},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 107, offset: 20059},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 699, col: 1, offset: 20320},
			expr: &actionExpr{
				pos: position{line: 700, col: 5, offset: 20337},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 700, col: 5, offset: 20337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 700, col: 5, offset: 20337},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 11, offset: 20343},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 20366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 701, col: 10, offset: 20371},
								expr: &actionExpr{
									pos: position{line: 701, col: 11, offset: 20372},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 701, col: 11, offset: 20372},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 701, col: 11, offset: 20372},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 701, col: 14, offset: 20375},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 17, offset: 20378},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 701, col: 34, offset: 20395},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 701, col: 37, offset: 20398},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 42, offset: 20403},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 705, col: 1, offset: 20526},
			expr: &actionExpr{
				pos: position{line: 705, col: 20, offset: 20545},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 705, col: 21, offset: 20546},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 705, col: 21, offset: 20546},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 705, col: 27, offset: 20552},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 707, col: 1, offset: 20589},
			expr: &actionExpr{
				pos: position{line: 708, col: 5, offset: 20612},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 708, col: 5, offset: 20612},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 708, col: 5, offset: 20612},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 708, col: 11, offset: 20618},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 709, col: 5, offset: 20630},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 709, col: 10, offset: 20635},
								expr: &actionExpr{
									pos: position{line: 709, col: 11, offset: 20636},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 709, col: 11, offset: 20636},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 709, col: 11, offset: 20636},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 709, col: 14, offset: 20639},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 709, col: 17, offset: 20642},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 40, offset: 20665},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 709, col: 43, offset: 20668},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 709, col: 48, offset: 20673},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 713, col: 1, offset: 20785},
			expr: &actionExpr{
				pos: position{line: 713, col: 26, offset: 20810},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 713, col: 27, offset: 20811},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 713, col: 27, offset: 20811},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 713, col: 33, offset: 20817},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 713, col: 39, offset: 20823},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 715, col: 1, offset: 20860},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20872},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20872},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 20872},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 716, col: 6, offset: 20873},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 716, col: 6, offset: 20873},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 716, col: 6, offset: 20873},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 716, col: 15, offset: 20882},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 716, col: 19, offset: 20886},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 716, col: 19, offset: 20886},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 716, col: 23, offset: 20890},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 716, col: 27, offset: 20894},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 29, offset: 20896},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 21005},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 721, col: 1, offset: 21019},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 21036},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 21036},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 722, col: 5, offset: 21036},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 722, col: 5, offset: 21036},
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 6, offset: 21037},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 722, col: 14, offset: 21045},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 722, col: 18, offset: 21049},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 722, col: 21, offset: 21052},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 23, offset: 21054},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21164},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 727, col: 1, offset: 21174},
			expr: &choiceExpr{
				pos: position{line: 728, col: 5, offset: 21187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 21187},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 21187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 728, col: 5, offset: 21187},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 21193},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 728, col: 16, offset: 21198},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 728, col: 21, offset: 21203},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 22, offset: 21204},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 21275},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 731, col: 5, offset: 21275},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 731, col: 5, offset: 21275},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 731, col: 11, offset: 21281},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 731, col: 20, offset: 21290},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 731, col: 25, offset: 21295},
										expr: &ruleRefExpr{
											pos:  position{line: 731, col: 26, offset: 21296},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 21367},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 735, col: 5, offset: 21381},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 737, col: 1, offset: 21390},
			expr: &seqExpr{
				pos: position{line: 737, col: 13, offset: 21402},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 737, col: 13, offset: 21402},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 737, col: 22, offset: 21411},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 737, col: 25, offset: 21414},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 739, col: 1, offset: 21419},
			expr: &choiceExpr{
				pos: position{line: 740, col: 5, offset: 21432},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 740, col: 5, offset: 21432},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 5, offset: 21442},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 743, col: 1, offset: 21452},
			expr: &actionExpr{
				pos: position{line: 744, col: 5, offset: 21461},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 744, col: 5, offset: 21461},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 744, col: 5, offset: 21461},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 9, offset: 21465},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 18, offset: 21474},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 744, col: 21, offset: 21477},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 25, offset: 21481},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 744, col: 28, offset: 21484},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 744, col: 34, offset: 21490},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 744, col: 34, offset: 21490},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 744, col: 45, offset: 21501},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 51, offset: 21507},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 744, col: 54, offset: 21510},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 748, col: 1, offset: 21607},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 21620},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 749, col: 5, offset: 21620},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21707},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 21707},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 751, col: 5, offset: 21707},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 14, offset: 21716},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 17, offset: 21719},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 21, offset: 21723},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 751, col: 24, offset: 21726},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 33, offset: 21735},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 47, offset: 21749},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 50, offset: 21752},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 54, offset: 21756},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 751, col: 57, offset: 21759},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 62, offset: 21764},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 67, offset: 21769},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 70, offset: 21772},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 751, col: 74, offset: 21776},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 751, col: 80, offset: 21782},
										expr: &ruleRefExpr{
											pos:  position{line: 751, col: 80, offset: 21782},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 22030},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 755, col: 5, offset: 22030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 755, col: 5, offset: 22030},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 22, offset: 22047},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 25, offset: 22050},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 29, offset: 22054},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 755, col: 32, offset: 22057},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 37, offset: 22062},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 42, offset: 22067},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 45, offset: 22070},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 49, offset: 22074},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 755, col: 52, offset: 22077},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 61, offset: 22086},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 75, offset: 22100},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 78, offset: 22103},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 82, offset: 22107},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 755, col: 85, offset: 22110},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 90, offset: 22115},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 95, offset: 22120},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 98, offset: 22123},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 755, col: 102, offset: 22127},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 755, col: 108, offset: 22133},
										expr: &ruleRefExpr{
											pos:  position{line: 755, col: 108, offset: 22133},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22395},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22395},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 759, col: 5, offset: 22395},
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 6, offset: 22396},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 759, col: 16, offset: 22406},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 19, offset: 22409},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 34, offset: 22424},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 759, col: 37, offset: 22427},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 41, offset: 22431},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 759, col: 44, offset: 22434},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 49, offset: 22439},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 62, offset: 22452},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 759, col: 65, offset: 22455},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 759, col: 69, offset: 22459},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 759, col: 75, offset: 22465},
										expr: &ruleRefExpr{
											pos:  position{line: 759, col: 75, offset: 22465},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 763, col: 1, offset: 22586},
			expr: &choiceExpr{
				pos: position{line: 764, col: 5, offset: 22603},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 764, col: 5, offset: 22603},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 764, col: 5, offset: 22603},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 7, offset: 22605},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 22651},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 767, col: 1, offset: 22666},
			expr: &actionExpr{
				pos: position{line: 768, col: 5, offset: 22675},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 768, col: 5, offset: 22675},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 768, col: 5, offset: 22675},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 12, offset: 22682},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 768, col: 15, offset: 22685},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 19, offset: 22689},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 22, offset: 22692},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 30, offset: 22700},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 38, offset: 22708},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 41, offset: 22711},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 768, col: 45, offset: 22715},
								expr: &seqExpr{
									pos: position{line: 768, col: 46, offset: 22716},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 768, col: 46, offset: 22716},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 768, col: 50, offset: 22720},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 768, col: 54, offset: 22724},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 768, col: 54, offset: 22724},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 768, col: 65, offset: 22735},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 768, col: 71, offset: 22741},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 768, col: 76, offset: 22746},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 776, col: 1, offset: 22987},
			expr: &choiceExpr{
				pos: position{line: 777, col: 5, offset: 22999},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 777, col: 5, offset: 22999},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 778, col: 5, offset: 23010},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 23019},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 779, col: 5, offset: 23019},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 7, offset: 23021},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 783, col: 1, offset: 23113},
			expr: &choiceExpr{
				pos: position{line: 784, col: 5, offset: 23131},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 784, col: 5, offset: 23131},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 23141},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 785, col: 5, offset: 23141},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 787, col: 1, offset: 23177},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 23187},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 788, col: 5, offset: 23187},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 788, col: 5, offset: 23187},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 11, offset: 23193},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 16, offset: 23198},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 788, col: 21, offset: 23203},
								expr: &actionExpr{
									pos: position{line: 788, col: 22, offset: 23204},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 788, col: 22, offset: 23204},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 788, col: 22, offset: 23204},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 788, col: 25, offset: 23207},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 788, col: 29, offset: 23211},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 788, col: 32, offset: 23214},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 788, col: 34, offset: 23216},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 792, col: 1, offset: 23325},
			expr: &actionExpr{
				pos: position{line: 793, col: 5, offset: 23339},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 793, col: 5, offset: 23339},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 793, col: 5, offset: 23339},
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 6, offset: 23340},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 10, offset: 23344},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 16, offset: 23350},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 27, offset: 23361},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 793, col: 32, offset: 23366},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 33, offset: 23367},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 797, col: 1, offset: 23435},
			expr: &choiceExpr{
				pos: position{line: 798, col: 5, offset: 23445},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 23445},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 23445},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 798, col: 5, offset: 23445},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 798, col: 9, offset: 23449},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 798, col: 14, offset: 23454},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 798, col: 27, offset: 23467},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 798, col: 30, offset: 23470},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 798, col: 34, offset: 23474},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 798, col: 37, offset: 23477},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 798, col: 40, offset: 23480},
										expr: &ruleRefExpr{
											pos:  position{line: 798, col: 40, offset: 23480},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 798, col: 54, offset: 23494},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 23668},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 804, col: 5, offset: 23668},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 804, col: 5, offset: 23668},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 9, offset: 23672},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 804, col: 12, offset: 23675},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 16, offset: 23679},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 804, col: 19, offset: 23682},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 804, col: 22, offset: 23685},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 804, col: 35, offset: 23698},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 23871},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 23871},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 810, col: 5, offset: 23871},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 810, col: 9, offset: 23875},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 14, offset: 23880},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 810, col: 19, offset: 23885},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 811, col: 5, offset: 23934},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 811, col: 5, offset: 23934},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 811, col: 5, offset: 23934},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 811, col: 9, offset: 23938},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 811, col: 12, offset: 23941},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 813, col: 1, offset: 23992},
			expr: &choiceExpr{
				pos: position{line: 814, col: 5, offset: 24004},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 814, col: 5, offset: 24004},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 815, col: 5, offset: 24015},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 816, col: 5, offset: 24025},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 817, col: 5, offset: 24033},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 818, col: 5, offset: 24041},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 24053},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 819, col: 5, offset: 24053},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 819, col: 5, offset: 24053},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 9, offset: 24057},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 819, col: 12, offset: 24060},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 819, col: 17, offset: 24065},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 26, offset: 24074},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 819, col: 29, offset: 24077},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 24106},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 24106},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 820, col: 5, offset: 24106},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 9, offset: 24110},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 820, col: 12, offset: 24113},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 17, offset: 24118},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 22, offset: 24123},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 820, col: 25, offset: 24126},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 822, col: 1, offset: 24152},
			expr: &actionExpr{
				pos: position{line: 823, col: 5, offset: 24165},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 823, col: 5, offset: 24165},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 823, col: 5, offset: 24165},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 12, offset: 24172},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 14, offset: 24174},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 20, offset: 24180},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 26, offset: 24186},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 823, col: 33, offset: 24193},
								expr: &ruleRefExpr{
									pos:  position{line: 823, col: 33, offset: 24193},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 41, offset: 24201},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 823, col: 44, offset: 24204},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 48, offset: 24208},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 51, offset: 24211},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 56, offset: 24216},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 827, col: 1, offset: 24338},
			expr: &actionExpr{
				pos: position{line: 828, col: 5, offset: 24349},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 828, col: 5, offset: 24349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 828, col: 5, offset: 24349},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 9, offset: 24353},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 828, col: 12, offset: 24356},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 18, offset: 24362},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 30, offset: 24374},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 828, col: 33, offset: 24377},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 832, col: 1, offset: 24469},
			expr: &choiceExpr{
				pos: position{line: 833, col: 5, offset: 24485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 24485},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 833, col: 5, offset: 24485},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 833, col: 5, offset: 24485},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 24491},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 833, col: 22, offset: 24502},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 833, col: 27, offset: 24507},
										expr: &ruleRefExpr{
											pos:  position{line: 833, col: 27, offset: 24507},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 24606},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 836, col: 5, offset: 24606},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 838, col: 1, offset: 24642},
			expr: &actionExpr{
				pos: position{line: 838, col: 18, offset: 24659},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 838, col: 18, offset: 24659},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 838, col: 18, offset: 24659},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 838, col: 21, offset: 24662},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 25, offset: 24666},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 28, offset: 24669},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 33, offset: 24674},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 840, col: 1, offset: 24707},
			expr: &choiceExpr{
				pos: position{line: 841, col: 5, offset: 24722},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 841, col: 5, offset: 24722},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 842, col: 5, offset: 24733},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 843, col: 5, offset: 24743},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 845, col: 1, offset: 24755},
			expr: &actionExpr{
				pos: position{line: 846, col: 5, offset: 24766},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 846, col: 5, offset: 24766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 5, offset: 24766},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 11, offset: 24772},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 846, col: 14, offset: 24775},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 19, offset: 24780},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 850, col: 1, offset: 24867},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 24877},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 851, col: 5, offset: 24877},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 24877},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 10, offset: 24882},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 20, offset: 24892},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 851, col: 23, offset: 24895},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 27, offset: 24899},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 851, col: 30, offset: 24902},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 36, offset: 24908},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 855, col: 1, offset: 25010},
			expr: &actionExpr{
				pos: position{line: 856, col: 5, offset: 25020},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 856, col: 5, offset: 25020},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 856, col: 5, offset: 25020},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 9, offset: 25024},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 856, col: 12, offset: 25027},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 18, offset: 25033},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 30, offset: 25045},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 856, col: 33, offset: 25048},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 860, col: 1, offset: 25139},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 25147},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 25147},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 861, col: 5, offset: 25147},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 10, offset: 25152},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 13, offset: 25155},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 19, offset: 25161},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 31, offset: 25173},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 34, offset: 25176},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 865, col: 1, offset: 25266},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 25282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 25282},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 25282},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 25282},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 25288},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 22, offset: 25299},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 866, col: 27, offset: 25304},
										expr: &actionExpr{
											pos: position{line: 866, col: 28, offset: 25305},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 866, col: 28, offset: 25305},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 866, col: 28, offset: 25305},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 866, col: 31, offset: 25308},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 866, col: 35, offset: 25312},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 866, col: 38, offset: 25315},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 866, col: 40, offset: 25317},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 25435},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 869, col: 5, offset: 25435},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 871, col: 1, offset: 25471},
			expr: &choiceExpr{
				pos: position{line: 872, col: 5, offset: 25486},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 872, col: 5, offset: 25486},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 25497},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 873, col: 5, offset: 25497},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 7, offset: 25499},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 875, col: 1, offset: 25578},
			expr: &actionExpr{
				pos: position{line: 876, col: 5, offset: 25586},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 876, col: 5, offset: 25586},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 876, col: 5, offset: 25586},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 10, offset: 25591},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 13, offset: 25594},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 19, offset: 25600},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 27, offset: 25608},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 876, col: 30, offset: 25611},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 880, col: 1, offset: 25703},
			expr: &choiceExpr{
				pos: position{line: 881, col: 5, offset: 25715},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 25715},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 25715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 25715},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 25721},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 881, col: 17, offset: 25727},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 881, col: 22, offset: 25732},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 22, offset: 25732},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 25826},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 884, col: 5, offset: 25826},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 887, col: 1, offset: 25863},
			expr: &actionExpr{
				pos: position{line: 887, col: 13, offset: 25875},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 887, col: 13, offset: 25875},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 887, col: 13, offset: 25875},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 887, col: 16, offset: 25878},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 20, offset: 25882},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 887, col: 23, offset: 25885},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 25, offset: 25887},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 889, col: 1, offset: 25912},
			expr: &actionExpr{
				pos: position{line: 890, col: 5, offset: 25922},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 890, col: 5, offset: 25922},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 25922},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 9, offset: 25926},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 14, offset: 25931},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 890, col: 17, offset: 25934},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 21, offset: 25938},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 890, col: 24, offset: 25941},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 30, offset: 25947},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 896, col: 1, offset: 26054},
			expr: &actionExpr{
				pos: position{line: 897, col: 5, offset: 26064},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 897, col: 5, offset: 26064},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 897, col: 5, offset: 26064},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 15, offset: 26074},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 898, col: 5, offset: 26088},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 898, col: 10, offset: 26093},
								expr: &ruleRefExpr{
									pos:  position{line: 898, col: 10, offset: 26093},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 899, col: 5, offset: 26106},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 899, col: 11, offset: 26112},
								expr: &ruleRefExpr{
									pos:  position{line: 899, col: 11, offset: 26112},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 26126},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 900, col: 11, offset: 26132},
								expr: &ruleRefExpr{
									pos:  position{line: 900, col: 11, offset: 26132},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 901, col: 5, offset: 26146},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 901, col: 13, offset: 26154},
								expr: &ruleRefExpr{
									pos:  position{line: 901, col: 13, offset: 26154},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 902, col: 5, offset: 26170},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 902, col: 12, offset: 26177},
								expr: &ruleRefExpr{
									pos:  position{line: 902, col: 12, offset: 26177},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 26192},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 903, col: 13, offset: 26200},
								expr: &ruleRefExpr{
									pos:  position{line: 903, col: 13, offset: 26200},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 904, col: 5, offset: 26216},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 11, offset: 26222},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 928, col: 1, offset: 26588},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 26602},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 929, col: 5, offset: 26602},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 929, col: 5, offset: 26602},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 929, col: 5, offset: 26602},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 929, col: 12, offset: 26609},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 929, col: 14, offset: 26611},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 26639},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 930, col: 5, offset: 26639},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 930, col: 5, offset: 26639},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 930, col: 12, offset: 26646},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 930, col: 14, offset: 26648},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 930, col: 26, offset: 26660},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 932, col: 1, offset: 26704},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 26722},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 26722},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 933, col: 5, offset: 26722},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 933, col: 9, offset: 26726},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 933, col: 14, offset: 26731},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 933, col: 18, offset: 26735},
								expr: &seqExpr{
									pos: position{line: 933, col: 19, offset: 26736},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 933, col: 19, offset: 26736},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 933, col: 21, offset: 26738},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 933, col: 24, offset: 26741},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 933, col: 26, offset: 26743},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 941, col: 1, offset: 26934},
			expr: &actionExpr{
				pos: position{line: 942, col: 5, offset: 26953},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 942, col: 5, offset: 26953},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 942, col: 5, offset: 26953},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 11, offset: 26959},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 942, col: 25, offset: 26973},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 942, col: 30, offset: 26978},
								expr: &actionExpr{
									pos: position{line: 942, col: 31, offset: 26979},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 942, col: 31, offset: 26979},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 942, col: 31, offset: 26979},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 942, col: 34, offset: 26982},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 942, col: 38, offset: 26986},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 942, col: 41, offset: 26989},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 942, col: 46, offset: 26994},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 946, col: 1, offset: 27115},
			expr: &choiceExpr{
				pos: position{line: 947, col: 5, offset: 27127},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 27127},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 27127},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 947, col: 5, offset: 27127},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 7, offset: 27129},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 12, offset: 27134},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 14, offset: 27136},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 20, offset: 27142},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 947, col: 29, offset: 27151},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 947, col: 35, offset: 27157},
										expr: &ruleRefExpr{
											pos:  position{line: 947, col: 35, offset: 27157},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 950, col: 5, offset: 27252},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 950, col: 5, offset: 27252},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 950, col: 5, offset: 27252},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 7, offset: 27254},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 12, offset: 27259},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 950, col: 14, offset: 27261},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 952, col: 1, offset: 27286},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 27299},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 27299},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 953, col: 5, offset: 27299},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 953, col: 5, offset: 27299},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 953, col: 7, offset: 27301},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 953, col: 10, offset: 27304},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 953, col: 12, offset: 27306},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 953, col: 15, offset: 27309},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 27337},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 27337},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 954, col: 5, offset: 27337},
									name: "_",
								},
								&notExpr{
									pos: position{line: 954, col: 7, offset: 27339},
									expr: &seqExpr{
										pos: position{line: 954, col: 9, offset: 27341},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 954, col: 9, offset: 27341},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 954, col: 27, offset: 27359},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 954, col: 30, offset: 27362},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 33, offset: 27365},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 956, col: 1, offset: 27390},
			expr: &ruleRefExpr{
				pos:  position{line: 957, col: 5, offset: 27403},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 959, col: 1, offset: 27409},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 27422},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 960, col: 5, offset: 27422},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 960, col: 5, offset: 27422},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 11, offset: 27428},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 19, offset: 27436},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 960, col: 24, offset: 27441},
								expr: &actionExpr{
									pos: position{line: 960, col: 25, offset: 27442},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 960, col: 25, offset: 27442},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 960, col: 30, offset: 27447},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 964, col: 1, offset: 27562},
			expr: &actionExpr{
				pos: position{line: 965, col: 5, offset: 27574},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 965, col: 5, offset: 27574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 965, col: 5, offset: 27574},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 11, offset: 27580},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 24, offset: 27593},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 26, offset: 27595},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 31, offset: 27600},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 965, col: 33, offset: 27602},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 39, offset: 27608},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 965, col: 48, offset: 27617},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 965, col: 54, offset: 27623},
								expr: &ruleRefExpr{
									pos:  position{line: 965, col: 54, offset: 27623},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 64, offset: 27633},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 66, offset: 27635},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 69, offset: 27638},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 965, col: 71, offset: 27640},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 79, offset: 27648},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 87, offset: 27656},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 965, col: 90, offset: 27659},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 94, offset: 27663},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 965, col: 97, offset: 27666},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 106, offset: 27675},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 980, col: 1, offset: 27906},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 27923},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 27923},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 27923},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 981, col: 5, offset: 27923},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 7, offset: 27925},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 981, col: 14, offset: 27932},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 981, col: 14, offset: 27932},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 21, offset: 27939},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 29, offset: 27947},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 36, offset: 27954},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 27987},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 982, col: 5, offset: 27987},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 984, col: 1, offset: 28015},
			expr: &actionExpr{
				pos: position{line: 985, col: 5, offset: 28028},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 985, col: 5, offset: 28028},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 985, col: 5, offset: 28028},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 985, col: 7, offset: 28030},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 985, col: 13, offset: 28036},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 985, col: 15, offset: 28038},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 20, offset: 28043},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 987, col: 1, offset: 28079},
			expr: &actionExpr{
				pos: position{line: 988, col: 5, offset: 28094},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 988, col: 5, offset: 28094},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 988, col: 5, offset: 28094},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 7, offset: 28096},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 13, offset: 28102},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 15, offset: 28104},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 18, offset: 28107},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 988, col: 20, offset: 28109},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 28, offset: 28117},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 990, col: 1, offset: 28153},
			expr: &actionExpr{
				pos: position{line: 991, col: 5, offset: 28167},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 991, col: 5, offset: 28167},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 991, col: 5, offset: 28167},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 991, col: 7, offset: 28169},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 991, col: 14, offset: 28176},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 991, col: 16, offset: 28178},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 21, offset: 28183},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 993, col: 1, offset: 28219},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 28234},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 994, col: 5, offset: 28234},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 994, col: 5, offset: 28234},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 7, offset: 28236},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 13, offset: 28242},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 15, offset: 28244},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 18, offset: 28247},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 994, col: 20, offset: 28249},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 25, offset: 28254},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 994, col: 31, offset: 28260},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 37, offset: 28266},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 998, col: 1, offset: 28377},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 28390},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 28390},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 999, col: 5, offset: 28390},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 999, col: 5, offset: 28390},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 999, col: 7, offset: 28392},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 999, col: 12, offset: 28397},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 999, col: 12, offset: 28397},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 999, col: 18, offset: 28403},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 28433},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 1000, col: 5, offset: 28433},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 1002, col: 1, offset: 28459},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 28472},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28472},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 28472},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1003, col: 5, offset: 28472},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1003, col: 7, offset: 28474},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 1003, col: 13, offset: 28480},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1003, col: 15, offset: 28482},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 21, offset: 28488},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28519},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 1004, col: 5, offset: 28519},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 1006, col: 1, offset: 28541},
			expr: &actionExpr{
				pos: position{line: 1006, col: 10, offset: 28550},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 10, offset: 28550},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 1007, col: 1, offset: 28585},
			expr: &actionExpr{
				pos: position{line: 1007, col: 6, offset: 28590},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 1007, col: 6, offset: 28590},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 1008, col: 1, offset: 28617},
			expr: &actionExpr{
				pos: position{line: 1008, col: 8, offset: 28624},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 1008, col: 8, offset: 28624},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 1009, col: 1, offset: 28655},
			expr: &actionExpr{
				pos: position{line: 1009, col: 8, offset: 28662},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 1009, col: 8, offset: 28662},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1010, col: 1, offset: 28693},
			expr: &actionExpr{
				pos: position{line: 1010, col: 9, offset: 28701},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1010, col: 9, offset: 28701},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1011, col: 1, offset: 28734},
			expr: &actionExpr{
				pos: position{line: 1011, col: 9, offset: 28742},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1011, col: 9, offset: 28742},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1012, col: 1, offset: 28775},
			expr: &actionExpr{
				pos: position{line: 1012, col: 6, offset: 28780},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 1012, col: 6, offset: 28780},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1013, col: 1, offset: 28807},
			expr: &actionExpr{
				pos: position{line: 1013, col: 10, offset: 28816},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1013, col: 10, offset: 28816},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1014, col: 1, offset: 28851},
			expr: &actionExpr{
				pos: position{line: 1014, col: 9, offset: 28859},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1014, col: 9, offset: 28859},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1015, col: 1, offset: 28892},
			expr: &actionExpr{
				pos: position{line: 1015, col: 6, offset: 28897},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1015, col: 6, offset: 28897},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1016, col: 1, offset: 28924},
			expr: &actionExpr{
				pos: position{line: 1016, col: 9, offset: 28932},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1016, col: 9, offset: 28932},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1017, col: 1, offset: 28965},
			expr: &actionExpr{
				pos: position{line: 1017, col: 7, offset: 28971},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1017, col: 7, offset: 28971},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1018, col: 1, offset: 29000},
			expr: &actionExpr{
				pos: position{line: 1018, col: 8, offset: 29007},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1018, col: 8, offset: 29007},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1019, col: 1, offset: 29038},
			expr: &actionExpr{
				pos: position{line: 1019, col: 8, offset: 29045},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1019, col: 8, offset: 29045},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1020, col: 1, offset: 29076},
			expr: &actionExpr{
				pos: position{line: 1020, col: 8, offset: 29083},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1020, col: 8, offset: 29083},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1021, col: 1, offset: 29114},
			expr: &actionExpr{
				pos: position{line: 1021, col: 9, offset: 29122},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1021, col: 9, offset: 29122},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1022, col: 1, offset: 29155},
			expr: &actionExpr{
				pos: position{line: 1022, col: 9, offset: 29163},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1022, col: 9, offset: 29163},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1024, col: 1, offset: 29197},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 29219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 29219},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 14, offset: 29228},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 19, offset: 29233},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 26, offset: 29240},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 33, offset: 29247},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 41, offset: 29255},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 49, offset: 29263},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 58, offset: 29272},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 66, offset: 29280},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 74, offset: 29288},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1029, col: 1, offset: 29314},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 29326},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1030, col: 5, offset: 29326},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 5, offset: 29342},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 5, offset: 29362},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 5, offset: 29380},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 5, offset: 29399},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1035, col: 5, offset: 29416},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 5, offset: 29429},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 5, offset: 29438},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 29455},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 5, offset: 29474},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 5, offset: 29493},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1042, col: 1, offset: 29506},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 29524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29524},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 29524},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 5, offset: 29524},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 7, offset: 29526},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1043, col: 14, offset: 29533},
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 15, offset: 29534},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 29649},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1046, col: 5, offset: 29649},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 7, offset: 29651},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1050, col: 1, offset: 29755},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 5, offset: 29774},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 29774},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1051, col: 5, offset: 29774},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1051, col: 5, offset: 29774},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1051, col: 7, offset: 29776},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1051, col: 11, offset: 29780},
									expr: &ruleRefExpr{
										pos:  position{line: 1051, col: 12, offset: 29781},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 29895},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1054, col: 5, offset: 29895},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1054, col: 7, offset: 29897},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1058, col: 1, offset: 29996},
			expr: &actionExpr{
				pos: position{line: 1059, col: 5, offset: 30013},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1059, col: 5, offset: 30013},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1059, col: 7, offset: 30015},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1063, col: 1, offset: 30128},
			expr: &actionExpr{
				pos: position{line: 1064, col: 5, offset: 30147},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1064, col: 5, offset: 30147},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1064, col: 7, offset: 30149},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1068, col: 1, offset: 30258},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 5, offset: 30277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 30277},
						run: (*parser).callonBooleanLiteral2,
						expr: &ruleRefExpr{
							pos:  position{line: 1069, col: 5, offset: 30277},
							name: "TrueToken",
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30384},
						run: (*parser).callonBooleanLiteral4,
						expr: &ruleRefExpr{
							pos:  position{line: 1070, col: 5, offset: 30384},
							name: "FalseToken",
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1072, col: 1, offset: 30489},
			expr: &actionExpr{
				pos: position{line: 1073, col: 5, offset: 30505},
				run: (*parser).callonNullLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 1073, col: 5, offset: 30505},
					name: "NullToken",
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1075, col: 1, offset: 30604},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 30621},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 30621},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1076, col: 5, offset: 30621},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1076, col: 10, offset: 30626},
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 10, offset: 30626},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1080, col: 1, offset: 30741},
			expr: &actionExpr{
				pos: position{line: 1081, col: 5, offset: 30757},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 5, offset: 30757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1081, col: 5, offset: 30757},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 9, offset: 30761},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 13, offset: 30765},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1081, col: 18, offset: 30770},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1085, col: 1, offset: 30859},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 5, offset: 30872},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1086, col: 5, offset: 30872},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 30888},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1087, col: 5, offset: 30888},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 9, offset: 30892},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1091, col: 1, offset: 30991},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 5, offset: 31000},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1092, col: 5, offset: 31000},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 5, offset: 31016},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 5, offset: 31034},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1096, col: 1, offset: 31047},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 31065},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 31065},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 31065},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1097, col: 5, offset: 31065},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 10, offset: 31070},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1097, col: 24, offset: 31084},
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 25, offset: 31085},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 31125},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 31125},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1098, col: 5, offset: 31125},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1098, col: 10, offset: 31130},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 25, offset: 31145},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1098, col: 29, offset: 31149},
										expr: &seqExpr{
											pos: position{line: 1098, col: 30, offset: 31150},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1098, col: 30, offset: 31150},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1098, col: 33, offset: 31153},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1098, col: 37, offset: 31157},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1098, col: 40, offset: 31160},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 31392},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1104, col: 5, offset: 31392},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1104, col: 10, offset: 31397},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 31497},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1107, col: 5, offset: 31497},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1107, col: 5, offset: 31497},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 9, offset: 31501},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 12, offset: 31504},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 14, offset: 31506},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 24, offset: 31516},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1109, col: 1, offset: 31539},
			expr: &actionExpr{
				pos: position{line: 1110, col: 5, offset: 31553},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1110, col: 5, offset: 31553},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1110, col: 11, offset: 31559},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1114, col: 1, offset: 31655},
			expr: &actionExpr{
				pos: position{line: 1115, col: 5, offset: 31668},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 5, offset: 31668},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1115, col: 5, offset: 31668},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 11, offset: 31674},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1115, col: 16, offset: 31679},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1115, col: 21, offset: 31684},
								expr: &ruleRefExpr{
									pos:  position{line: 1115, col: 21, offset: 31684},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1119, col: 1, offset: 31778},
			expr: &actionExpr{
				pos: position{line: 1119, col: 16, offset: 31793},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 16, offset: 31793},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1119, col: 16, offset: 31793},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1119, col: 19, offset: 31796},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1119, col: 23, offset: 31800},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 26, offset: 31803},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 30, offset: 31807},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1121, col: 1, offset: 31833},
			expr: &choiceExpr{
				pos: position{line: 1122, col: 5, offset: 31849},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1122, col: 5, offset: 31849},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1122, col: 5, offset: 31849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1122, col: 5, offset: 31849},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 9, offset: 31853},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 12, offset: 31856},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1122, col: 19, offset: 31863},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 33, offset: 31877},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1122, col: 36, offset: 31880},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 31977},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1125, col: 5, offset: 31977},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1125, col: 5, offset: 31977},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 9, offset: 31981},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1125, col: 12, offset: 31984},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1125, col: 16, offset: 31988},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 21, offset: 31993},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1125, col: 24, offset: 31996},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 32087},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 32087},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 5, offset: 32087},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 10, offset: 32092},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 13, offset: 32095},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 17, offset: 32099},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 22, offset: 32104},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1128, col: 25, offset: 32107},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 32197},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1131, col: 5, offset: 32197},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1131, col: 5, offset: 32197},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 10, offset: 32202},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 13, offset: 32205},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 21, offset: 32213},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 26, offset: 32218},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1131, col: 29, offset: 32221},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 33, offset: 32225},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 36, offset: 32228},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 44, offset: 32236},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 49, offset: 32241},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1131, col: 52, offset: 32244},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1135, col: 1, offset: 32360},
			expr: &actionExpr{
				pos: position{line: 1136, col: 5, offset: 32380},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1136, col: 5, offset: 32380},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1136, col: 7, offset: 32382},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1143, col: 1, offset: 32598},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 32623},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 32623},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 32623},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 5, offset: 32623},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 9, offset: 32627},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1144, col: 11, offset: 32629},
										expr: &ruleRefExpr{
											pos:  position{line: 1144, col: 11, offset: 32629},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 37, offset: 32655},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 32681},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 32681},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 5, offset: 32681},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 9, offset: 32685},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1145, col: 11, offset: 32687},
										expr: &ruleRefExpr{
											pos:  position{line: 1145, col: 11, offset: 32687},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1145, col: 37, offset: 32713},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1147, col: 1, offset: 32736},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 5, offset: 32765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 5, offset: 32765},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 32782},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 32782},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1149, col: 7, offset: 32784},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 7, offset: 32784},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1153, col: 1, offset: 32921},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 32950},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1154, col: 5, offset: 32950},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1154, col: 5, offset: 32950},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1154, col: 5, offset: 32950},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 10, offset: 32955},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1154, col: 12, offset: 32957},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1155, col: 5, offset: 32984},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1155, col: 5, offset: 32984},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1155, col: 5, offset: 32984},
									expr: &litMatcher{
										pos:        position{line: 1155, col: 7, offset: 32986},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 13, offset: 32992},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1155, col: 15, offset: 32994},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1157, col: 1, offset: 33030},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 33059},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 5, offset: 33059},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1159, col: 5, offset: 33076},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1159, col: 5, offset: 33076},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1159, col: 7, offset: 33078},
								expr: &ruleRefExpr{
									pos:  position{line: 1159, col: 7, offset: 33078},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1163, col: 1, offset: 33215},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 5, offset: 33244},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 33244},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 33244},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 5, offset: 33244},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 10, offset: 33249},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1164, col: 12, offset: 33251},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 33278},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1165, col: 5, offset: 33278},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1165, col: 5, offset: 33278},
									expr: &litMatcher{
										pos:        position{line: 1165, col: 7, offset: 33280},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1165, col: 13, offset: 33286},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1165, col: 15, offset: 33288},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1167, col: 1, offset: 33324},
			expr: &actionExpr{
				pos: position{line: 1168, col: 5, offset: 33341},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1168, col: 5, offset: 33341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1168, col: 5, offset: 33341},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1168, col: 10, offset: 33346},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1168, col: 13, offset: 33349},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 15, offset: 33351},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1168, col: 20, offset: 33356},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1168, col: 23, offset: 33359},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1183, col: 1, offset: 33655},
			expr: &actionExpr{
				pos: position{line: 1184, col: 5, offset: 33673},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1184, col: 9, offset: 33677},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1184, col: 9, offset: 33677},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1184, col: 19, offset: 33687},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1184, col: 30, offset: 33698},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1184, col: 41, offset: 33709},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 9, offset: 33726},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 18, offset: 33735},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 28, offset: 33745},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 38, offset: 33755},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1186, col: 9, offset: 33771},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1186, col: 21, offset: 33783},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1186, col: 33, offset: 33795},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1187, col: 9, offset: 33813},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1187, col: 18, offset: 33822},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1188, col: 9, offset: 33839},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1188, col: 22, offset: 33852},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1189, col: 9, offset: 33867},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1190, col: 9, offset: 33883},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1190, col: 16, offset: 33890},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1191, col: 9, offset: 33904},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1191, col: 18, offset: 33913},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1195, col: 1, offset: 34028},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 34046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 34046},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 34046},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1196, col: 5, offset: 34046},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 11, offset: 34052},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 21, offset: 34062},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1196, col: 26, offset: 34067},
										expr: &ruleRefExpr{
											pos:  position{line: 1196, col: 26, offset: 34067},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 5, offset: 34169},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1199, col: 5, offset: 34169},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1201, col: 1, offset: 34193},
			expr: &actionExpr{
				pos: position{line: 1201, col: 21, offset: 34213},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 21, offset: 34213},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1201, col: 21, offset: 34213},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1201, col: 24, offset: 34216},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1201, col: 28, offset: 34220},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 31, offset: 34223},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 35, offset: 34227},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1203, col: 1, offset: 34258},
			expr: &actionExpr{
				pos: position{line: 1204, col: 5, offset: 34272},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 5, offset: 34272},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 5, offset: 34272},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 10, offset: 34277},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 20, offset: 34287},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1204, col: 23, offset: 34290},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 27, offset: 34294},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 30, offset: 34297},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 34, offset: 34301},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1208, col: 1, offset: 34383},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 34397},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1209, col: 5, offset: 34397},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 5, offset: 34416},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1212, col: 1, offset: 34430},
			expr: &actionExpr{
				pos: position{line: 1212, col: 12, offset: 34441},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 12, offset: 34441},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1212, col: 13, offset: 34442},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1212, col: 13, offset: 34442},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1212, col: 21, offset: 34450},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1212, col: 28, offset: 34457},
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 29, offset: 34458},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1213, col: 1, offset: 34495},
			expr: &seqExpr{
				pos: position{line: 1213, col: 11, offset: 34505},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1213, col: 11, offset: 34505},
						val:        "by",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 1213, col: 16, offset: 34510},
						expr: &ruleRefExpr{
							pos:  position{line: 1213, col: 17, offset: 34511},
							name: "IdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "FalseToken",
			pos:  position{line: 1214, col: 1, offset: 34526},
			expr: &seqExpr{
				pos: position{line: 1214, col: 14, offset: 34539},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1214, col: 14, offset: 34539},
						val:        "false",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 1214, col: 22, offset: 34547},
						expr: &ruleRefExpr{
							pos:  position{line: 1214, col: 23, offset: 34548},
							name: "IdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1215, col: 1, offset: 34563},
			expr: &seqExpr{
				pos: position{line: 1215, col: 11, offset: 34573},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1215, col: 11, offset: 34573},
						val:        "in",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 1215, col: 16, offset: 34578},
						expr: &ruleRefExpr{
							pos:  position{line: 1215, col: 17, offset: 34579},
							name: "IdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1216, col: 1, offset: 34594},
			expr: &actionExpr{
				pos: position{line: 1216, col: 12, offset: 34605},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 12, offset: 34605},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1216, col: 13, offset: 34606},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1216, col: 13, offset: 34606},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1216, col: 21, offset: 34614},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1216, col: 28, offset: 34621},
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 29, offset: 34622},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NullToken",
			pos:  position{line: 1217, col: 1, offset: 34659},
			expr: &seqExpr{
				pos: position{line: 1217, col: 13, offset: 34671},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1217, col: 13, offset: 34671},
						val:        "null",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 1217, col: 20, offset: 34678},
						expr: &ruleRefExpr{
							pos:  position{line: 1217, col: 21, offset: 34679},
							name: "IdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1218, col: 1, offset: 34694},
			expr: &actionExpr{
				pos: position{line: 1218, col: 11, offset: 34704},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 11, offset: 34704},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1218, col: 12, offset: 34705},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1218, col: 12, offset: 34705},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1218, col: 19, offset: 34712},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1218, col: 25, offset: 34718},
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 26, offset: 34719},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "TrueToken",
			pos:  position{line: 1219, col: 1, offset: 34755},
			expr: &seqExpr{
				pos: position{line: 1219, col: 13, offset: 34767},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1219, col: 13, offset: 34767},
						val:        "true",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 1219, col: 20, offset: 34774},
						expr: &ruleRefExpr{
							pos:  position{line: 1219, col: 21, offset: 34775},
							name: "IdentifierRest",
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1221, col: 1, offset: 34791},
			expr: &actionExpr{
				pos: position{line: 1222, col: 5, offset: 34806},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1222, col: 5, offset: 34806},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1222, col: 8, offset: 34809},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1224, col: 1, offset: 34890},
			expr: &choiceExpr{
				pos: position{line: 1225, col: 5, offset: 34909},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1225, col: 5, offset: 34909},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1225, col: 5, offset: 34909},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1225, col: 5, offset: 34909},
									expr: &seqExpr{
										pos: position{line: 1225, col: 7, offset: 34911},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1225, col: 7, offset: 34911},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1225, col: 15, offset: 34919},
												expr: &ruleRefExpr{
													pos:  position{line: 1225, col: 16, offset: 34920},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1225, col: 32, offset: 34936},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1225, col: 48, offset: 34952},
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 48, offset: 34952},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1226, col: 5, offset: 35003},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1226, col: 5, offset: 35003},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 35042},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1227, col: 5, offset: 35042},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1227, col: 5, offset: 35042},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 10, offset: 35047},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 13, offset: 35050},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 35141},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1229, col: 5, offset: 35141},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1230, col: 5, offset: 35183},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1230, col: 5, offset: 35183},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1230, col: 5, offset: 35183},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1230, col: 8, offset: 35186},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1230, col: 26, offset: 35204},
									expr: &seqExpr{
										pos: position{line: 1230, col: 28, offset: 35206},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1230, col: 28, offset: 35206},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1230, col: 31, offset: 35209},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1232, col: 1, offset: 35234},
			expr: &actionExpr{
				pos: position{line: 1233, col: 5, offset: 35254},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 5, offset: 35254},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1233, col: 5, offset: 35254},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 11, offset: 35260},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1233, col: 26, offset: 35275},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1233, col: 31, offset: 35280},
								expr: &actionExpr{
									pos: position{line: 1233, col: 32, offset: 35281},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1233, col: 32, offset: 35281},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1233, col: 32, offset: 35281},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1233, col: 35, offset: 35284},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1233, col: 39, offset: 35288},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1233, col: 42, offset: 35291},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1233, col: 45, offset: 35294},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1237, col: 1, offset: 35410},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 35430},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1238, col: 5, offset: 35430},
						name: "UnicodeLetter",
					},
					&litMatcher{
						pos:        position{line: 1239, col: 5, offset: 35448},
						val:        "$",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1240, col: 5, offset: 35456},
						val:        "_",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1242, col: 1, offset: 35461},
			expr: &choiceExpr{
				pos: position{line: 1243, col: 5, offset: 35480},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1243, col: 5, offset: 35480},
						name: "IdentifierStart",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 5, offset: 35500},
						name: "UnicodeCombiningMark",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 5, offset: 35525},
						name: "UnicodeDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 5, offset: 35542},
						name: "UnicodeConnectorPunctuation",
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1248, col: 1, offset: 35571},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 5, offset: 35583},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1249, col: 5, offset: 35583},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 5, offset: 35602},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 5, offset: 35618},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 5, offset: 35626},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1254, col: 1, offset: 35636},
			expr: &actionExpr{
				pos: position{line: 1255, col: 5, offset: 35645},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 5, offset: 35645},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1255, col: 5, offset: 35645},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1255, col: 14, offset: 35654},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1255, col: 18, offset: 35658},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1259, col: 1, offset: 35778},
			expr: &seqExpr{
				pos: position{line: 1259, col: 12, offset: 35789},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1259, col: 12, offset: 35789},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1259, col: 15, offset: 35792},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 19, offset: 35796},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1259, col: 22, offset: 35799},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 26, offset: 35803},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1261, col: 1, offset: 35807},
			expr: &seqExpr{
				pos: position{line: 1261, col: 6, offset: 35812},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1261, col: 6, offset: 35812},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1261, col: 11, offset: 35817},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1261, col: 16, offset: 35822},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1261, col: 21, offset: 35827},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1262, col: 1, offset: 35833},
			expr: &seqExpr{
				pos: position{line: 1262, col: 6, offset: 35838},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1262, col: 6, offset: 35838},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1262, col: 11, offset: 35843},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1264, col: 1, offset: 35850},
			expr: &seqExpr{
				pos: position{line: 1264, col: 12, offset: 35861},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1264, col: 12, offset: 35861},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 24, offset: 35873},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1266, col: 1, offset: 35885},
			expr: &seqExpr{
				pos: position{line: 1266, col: 15, offset: 35899},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1266, col: 15, offset: 35899},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1266, col: 18, offset: 35902},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 22, offset: 35906},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1266, col: 25, offset: 35909},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 29, offset: 35913},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1266, col: 32, offset: 35916},
						expr: &seqExpr{
							pos: position{line: 1266, col: 33, offset: 35917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1266, col: 33, offset: 35917},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1266, col: 37, offset: 35921},
									expr: &charClassMatcher{
										pos:        position{line: 1266, col: 37, offset: 35921},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1268, col: 1, offset: 35931},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 5, offset: 35946},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1269, col: 5, offset: 35946},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1270, col: 5, offset: 35954},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1270, col: 6, offset: 35955},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1270, col: 6, offset: 35955},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1270, col: 12, offset: 35961},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1270, col: 17, offset: 35966},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1270, col: 20, offset: 35969},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1270, col: 24, offset: 35973},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1270, col: 27, offset: 35976},
								expr: &seqExpr{
									pos: position{line: 1270, col: 28, offset: 35977},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1270, col: 28, offset: 35977},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1270, col: 32, offset: 35981},
											expr: &charClassMatcher{
												pos:        position{line: 1270, col: 32, offset: 35981},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1272, col: 1, offset: 35991},
			expr: &actionExpr{
				pos: position{line: 1273, col: 5, offset: 36004},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 5, offset: 36004},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1273, col: 5, offset: 36004},
							expr: &litMatcher{
								pos:        position{line: 1273, col: 5, offset: 36004},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1273, col: 10, offset: 36009},
							expr: &seqExpr{
								pos: position{line: 1273, col: 11, offset: 36010},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1273, col: 11, offset: 36010},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 19, offset: 36018},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1277, col: 1, offset: 36144},
			expr: &seqExpr{
				pos: position{line: 1277, col: 11, offset: 36154},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1277, col: 11, offset: 36154},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1277, col: 16, offset: 36159},
						expr: &seqExpr{
							pos: position{line: 1277, col: 17, offset: 36160},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1277, col: 17, offset: 36160},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1277, col: 21, offset: 36164},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1279, col: 1, offset: 36172},
			expr: &choiceExpr{
				pos: position{line: 1280, col: 5, offset: 36185},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1280, col: 5, offset: 36185},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1281, col: 5, offset: 36194},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1282, col: 5, offset: 36203},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1283, col: 5, offset: 36212},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1284, col: 5, offset: 36220},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1285, col: 5, offset: 36228},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1286, col: 5, offset: 36236},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1287, col: 5, offset: 36244},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1288, col: 5, offset: 36252},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1290, col: 1, offset: 36257},
			expr: &actionExpr{
				pos: position{line: 1291, col: 5, offset: 36264},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1291, col: 5, offset: 36264},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1291, col: 5, offset: 36264},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1291, col: 10, offset: 36269},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1291, col: 14, offset: 36273},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1291, col: 19, offset: 36278},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1291, col: 23, offset: 36282},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1291, col: 28, offset: 36287},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1291, col: 32, offset: 36291},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1293, col: 1, offset: 36328},
			expr: &actionExpr{
				pos: position{line: 1294, col: 5, offset: 36336},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1294, col: 5, offset: 36336},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1294, col: 5, offset: 36336},
							expr: &seqExpr{
								pos: position{line: 1294, col: 7, offset: 36338},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1294, col: 7, offset: 36338},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1294, col: 11, offset: 36342},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 15, offset: 36346},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1294, col: 19, offset: 36350},
										expr: &choiceExpr{
											pos: position{line: 1294, col: 21, offset: 36352},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1294, col: 21, offset: 36352},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1294, col: 32, offset: 36363},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 38, offset: 36369},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 40, offset: 36371},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1298, col: 1, offset: 36535},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 5, offset: 36553},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 36553},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1299, col: 5, offset: 36553},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1299, col: 5, offset: 36553},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1299, col: 7, offset: 36555},
										expr: &ruleRefExpr{
											pos:  position{line: 1299, col: 7, offset: 36555},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1299, col: 17, offset: 36565},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 19, offset: 36567},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 36631},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1302, col: 5, offset: 36631},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1302, col: 5, offset: 36631},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 7, offset: 36633},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 11, offset: 36637},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1302, col: 13, offset: 36639},
										expr: &ruleRefExpr{
											pos:  position{line: 1302, col: 13, offset: 36639},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 23, offset: 36649},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 28, offset: 36654},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1302, col: 30, offset: 36656},
										expr: &ruleRefExpr{
											pos:  position{line: 1302, col: 30, offset: 36656},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 40, offset: 36666},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 42, offset: 36668},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36767},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36767},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1305, col: 5, offset: 36767},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 10, offset: 36772},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1305, col: 12, offset: 36774},
										expr: &ruleRefExpr{
											pos:  position{line: 1305, col: 12, offset: 36774},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 22, offset: 36784},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 24, offset: 36786},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 36857},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1308, col: 5, offset: 36857},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1308, col: 5, offset: 36857},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1308, col: 7, offset: 36859},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1308, col: 11, offset: 36863},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1308, col: 13, offset: 36865},
										expr: &ruleRefExpr{
											pos:  position{line: 1308, col: 13, offset: 36865},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1308, col: 23, offset: 36875},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 36943},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1311, col: 5, offset: 36943},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1315, col: 1, offset: 36980},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 5, offset: 36992},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1316, col: 5, offset: 36992},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 5, offset: 36999},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1319, col: 1, offset: 37004},
			expr: &actionExpr{
				pos: position{line: 1319, col: 12, offset: 37015},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1319, col: 12, offset: 37015},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1319, col: 12, offset: 37015},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 16, offset: 37019},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 18, offset: 37021},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1321, col: 1, offset: 37059},
			expr: &actionExpr{
				pos: position{line: 1321, col: 12, offset: 37070},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 12, offset: 37070},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1321, col: 12, offset: 37070},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 14, offset: 37072},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1321, col: 18, offset: 37076},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1323, col: 1, offset: 37114},
			expr: &actionExpr{
				pos: position{line: 1324, col: 5, offset: 37125},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1324, col: 5, offset: 37125},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1324, col: 5, offset: 37125},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1324, col: 7, offset: 37127},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1324, col: 10, offset: 37130},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 14, offset: 37134},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1324, col: 16, offset: 37136},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1328, col: 1, offset: 37209},
			expr: &actionExpr{
				pos: position{line: 1329, col: 5, offset: 37220},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1329, col: 5, offset: 37220},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1329, col: 5, offset: 37220},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1329, col: 7, offset: 37222},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1329, col: 11, offset: 37226},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1329, col: 15, offset: 37230},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1329, col: 17, offset: 37232},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1333, col: 1, offset: 37295},
			expr: &actionExpr{
				pos: position{line: 1334, col: 4, offset: 37303},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1334, col: 4, offset: 37303},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1334, col: 6, offset: 37305},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1336, col: 1, offset: 37345},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 5, offset: 37359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1337, col: 5, offset: 37359},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 5, offset: 37374},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1340, col: 1, offset: 37390},
			expr: &actionExpr{
				pos: position{line: 1340, col: 14, offset: 37403},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1340, col: 14, offset: 37403},
					expr: &charClassMatcher{
						pos:        position{line: 1340, col: 14, offset: 37403},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1342, col: 1, offset: 37442},
			expr: &actionExpr{
				pos: position{line: 1343, col: 5, offset: 37461},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 5, offset: 37461},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1343, col: 5, offset: 37461},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1343, col: 9, offset: 37465},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1345, col: 1, offset: 37508},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 5, offset: 37524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1346, col: 5, offset: 37524},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1346, col: 5, offset: 37524},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1346, col: 5, offset: 37524},
									expr: &litMatcher{
										pos:        position{line: 1346, col: 5, offset: 37524},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1346, col: 10, offset: 37529},
									expr: &charClassMatcher{
										pos:        position{line: 1346, col: 10, offset: 37529},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 17, offset: 37536},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1346, col: 21, offset: 37540},
									expr: &charClassMatcher{
										pos:        position{line: 1346, col: 21, offset: 37540},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1346, col: 28, offset: 37547},
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 28, offset: 37547},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1349, col: 5, offset: 37606},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1349, col: 5, offset: 37606},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1349, col: 5, offset: 37606},
									expr: &litMatcher{
										pos:        position{line: 1349, col: 5, offset: 37606},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1349, col: 10, offset: 37611},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1349, col: 14, offset: 37615},
									expr: &charClassMatcher{
										pos:        position{line: 1349, col: 14, offset: 37615},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1349, col: 21, offset: 37622},
									expr: &ruleRefExpr{
										pos:  position{line: 1349, col: 21, offset: 37622},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 37681},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1352, col: 6, offset: 37682},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1352, col: 6, offset: 37682},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 12, offset: 37688},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1355, col: 1, offset: 37731},
			expr: &seqExpr{
				pos: position{line: 1355, col: 16, offset: 37746},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1355, col: 16, offset: 37746},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1355, col: 21, offset: 37751},
						expr: &charClassMatcher{
							pos:        position{line: 1355, col: 21, offset: 37751},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 27, offset: 37757},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1357, col: 1, offset: 37769},
			expr: &litMatcher{
				pos:        position{line: 1357, col: 7, offset: 37775},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1359, col: 1, offset: 37782},
			expr: &seqExpr{
				pos: position{line: 1359, col: 12, offset: 37793},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1359, col: 12, offset: 37793},
						expr: &choiceExpr{
							pos: position{line: 1359, col: 13, offset: 37794},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1359, col: 13, offset: 37794},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1359, col: 19, offset: 37800},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1359, col: 25, offset: 37806},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1361, col: 1, offset: 37813},
			expr: &actionExpr{
				pos: position{line: 1361, col: 7, offset: 37819},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1361, col: 7, offset: 37819},
					expr: &ruleRefExpr{
						pos:  position{line: 1361, col: 7, offset: 37819},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1363, col: 1, offset: 37861},
			expr: &charClassMatcher{
				pos:        position{line: 1363, col: 12, offset: 37872},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1365, col: 1, offset: 37885},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 5, offset: 37902},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1366, col: 5, offset: 37902},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1366, col: 5, offset: 37902},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1366, col: 5, offset: 37902},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1366, col: 9, offset: 37906},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1366, col: 11, offset: 37908},
										expr: &ruleRefExpr{
											pos:  position{line: 1366, col: 11, offset: 37908},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1366, col: 29, offset: 37926},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1367, col: 5, offset: 37963},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1367, col: 5, offset: 37963},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1367, col: 5, offset: 37963},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1367, col: 9, offset: 37967},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1367, col: 11, offset: 37969},
										expr: &ruleRefExpr{
											pos:  position{line: 1367, col: 11, offset: 37969},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1367, col: 29, offset: 37987},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1369, col: 1, offset: 38021},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 5, offset: 38042},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1370, col: 5, offset: 38042},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1370, col: 5, offset: 38042},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1370, col: 5, offset: 38042},
									expr: &choiceExpr{
										pos: position{line: 1370, col: 7, offset: 38044},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1370, col: 7, offset: 38044},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1370, col: 13, offset: 38050},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1370, col: 26, offset: 38063,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 38100},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1371, col: 5, offset: 38100},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1371, col: 5, offset: 38100},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 10, offset: 38105},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 12, offset: 38107},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1373, col: 1, offset: 38141},
			expr: &actionExpr{
				pos: position{line: 1374, col: 5, offset: 38153},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1374, col: 5, offset: 38153},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1374, col: 5, offset: 38153},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1374, col: 10, offset: 38158},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1374, col: 23, offset: 38171},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1374, col: 28, offset: 38176},
								expr: &ruleRefExpr{
									pos:  position{line: 1374, col: 28, offset: 38176},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1376, col: 1, offset: 38238},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 38255},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1377, col: 5, offset: 38255},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 5, offset: 38272},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1380, col: 1, offset: 38284},
			expr: &choiceExpr{
				pos: position{line: 1381, col: 5, offset: 38300},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1381, col: 5, offset: 38300},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1382, col: 5, offset: 38317},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1384, col: 1, offset: 38324},
			expr: &actionExpr{
				pos: position{line: 1384, col: 16, offset: 38339},
				run: (*parser).callonKeyWordChars1,
				expr: &choiceExpr{
					pos: position{line: 1384, col: 17, offset: 38340},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1384, col: 17, offset: 38340},
							name: "UnicodeLetter",
						},
						&charClassMatcher{
							pos:        position{line: 1384, col: 33, offset: 38356},
							val:        "[_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1386, col: 1, offset: 38400},
			expr: &actionExpr{
				pos: position{line: 1386, col: 14, offset: 38413},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 14, offset: 38413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1386, col: 14, offset: 38413},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 19, offset: 38418},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1386, col: 22, offset: 38421},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1386, col: 22, offset: 38421},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 38, offset: 38437},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1388, col: 1, offset: 38472},
			expr: &actionExpr{
				pos: position{line: 1389, col: 5, offset: 38488},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1389, col: 5, offset: 38488},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1389, col: 5, offset: 38488},
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 6, offset: 38489},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1389, col: 22, offset: 38505},
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 23, offset: 38506},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1389, col: 35, offset: 38518},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1389, col: 40, offset: 38523},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1389, col: 50, offset: 38533},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1389, col: 55, offset: 38538},
								expr: &ruleRefExpr{
									pos:  position{line: 1389, col: 55, offset: 38538},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1393, col: 1, offset: 38607},
			expr: &choiceExpr{
				pos: position{line: 1393, col: 19, offset: 38625},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1393, col: 19, offset: 38625},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1393, col: 34, offset: 38640},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1393, col: 34, offset: 38640},
								expr: &litMatcher{
									pos:        position{line: 1393, col: 34, offset: 38640},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1393, col: 39, offset: 38645},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1394, col: 1, offset: 38657},
			expr: &seqExpr{
				pos: position{line: 1394, col: 15, offset: 38671},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1394, col: 15, offset: 38671},
						expr: &ruleRefExpr{
							pos:  position{line: 1394, col: 15, offset: 38671},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1394, col: 28, offset: 38684},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1396, col: 1, offset: 38689},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 5, offset: 38703},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 5, offset: 38703},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 5, offset: 38720},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1399, col: 5, offset: 38732},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1399, col: 5, offset: 38732},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1401, col: 1, offset: 38757},
			expr: &choiceExpr{
				pos: position{line: 1402, col: 5, offset: 38770},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1402, col: 5, offset: 38770},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1403, col: 5, offset: 38784},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1405, col: 1, offset: 38791},
			expr: &actionExpr{
				pos: position{line: 1405, col: 11, offset: 38801},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1405, col: 11, offset: 38801},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1405, col: 11, offset: 38801},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1405, col: 16, offset: 38806},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1405, col: 19, offset: 38809},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1405, col: 19, offset: 38809},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1405, col: 32, offset: 38822},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1407, col: 1, offset: 38857},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 5, offset: 38872},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1408, col: 5, offset: 38872},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1408, col: 5, offset: 38872},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 38900},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 38900},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 38930},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1412, col: 1, offset: 38936},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 5, offset: 38957},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1413, col: 5, offset: 38957},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1413, col: 5, offset: 38957},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1413, col: 5, offset: 38957},
									expr: &choiceExpr{
										pos: position{line: 1413, col: 7, offset: 38959},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1413, col: 7, offset: 38959},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 13, offset: 38965},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1413, col: 26, offset: 38978,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1414, col: 5, offset: 39015},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1414, col: 5, offset: 39015},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1414, col: 5, offset: 39015},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1414, col: 10, offset: 39020},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 12, offset: 39022},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1416, col: 1, offset: 39056},
			expr: &choiceExpr{
				pos: position{line: 1417, col: 5, offset: 39075},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1417, col: 5, offset: 39075},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 5, offset: 39096},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1420, col: 1, offset: 39111},
			expr: &choiceExpr{
				pos: position{line: 1421, col: 5, offset: 39132},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1421, col: 5, offset: 39132},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1422, col: 5, offset: 39140},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1422, col: 5, offset: 39140},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1423, col: 5, offset: 39180},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1424, col: 5, offset: 39189},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1424, col: 5, offset: 39189},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 39218},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1425, col: 5, offset: 39218},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1426, col: 5, offset: 39247},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1426, col: 5, offset: 39247},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 39276},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1427, col: 5, offset: 39276},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 39305},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1428, col: 5, offset: 39305},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 5, offset: 39334},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1429, col: 5, offset: 39334},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1431, col: 1, offset: 39360},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 5, offset: 39378},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1432, col: 5, offset: 39378},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1432, col: 5, offset: 39378},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1433, col: 5, offset: 39406},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1433, col: 5, offset: 39406},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1434, col: 5, offset: 39434},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1436, col: 1, offset: 39440},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 5, offset: 39458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1437, col: 5, offset: 39458},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1437, col: 5, offset: 39458},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1437, col: 5, offset: 39458},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1437, col: 9, offset: 39462},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1437, col: 16, offset: 39469},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1437, col: 16, offset: 39469},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1437, col: 25, offset: 39478},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1437, col: 34, offset: 39487},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1437, col: 43, offset: 39496},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1440, col: 5, offset: 39559},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1440, col: 5, offset: 39559},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1440, col: 5, offset: 39559},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1440, col: 9, offset: 39563},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1440, col: 13, offset: 39567},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1440, col: 20, offset: 39574},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1440, col: 20, offset: 39574},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1440, col: 29, offset: 39583},
												expr: &ruleRefExpr{
													pos:  position{line: 1440, col: 29, offset: 39583},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1440, col: 39, offset: 39593},
												expr: &ruleRefExpr{
													pos:  position{line: 1440, col: 39, offset: 39593},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1440, col: 49, offset: 39603},
												expr: &ruleRefExpr{
													pos:  position{line: 1440, col: 49, offset: 39603},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1440, col: 59, offset: 39613},
												expr: &ruleRefExpr{
													pos:  position{line: 1440, col: 59, offset: 39613},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1440, col: 69, offset: 39623},
												expr: &ruleRefExpr{
													pos:  position{line: 1440, col: 69, offset: 39623},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1440, col: 80, offset: 39634},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1444, col: 1, offset: 39688},
			expr: &actionExpr{
				pos: position{line: 1445, col: 5, offset: 39706},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1445, col: 5, offset: 39706},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1445, col: 5, offset: 39706},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1445, col: 9, offset: 39710},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 14, offset: 39715},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1445, col: 25, offset: 39726},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1445, col: 29, offset: 39730},
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 30, offset: 39731},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1447, col: 1, offset: 39766},
			expr: &actionExpr{
				pos: position{line: 1448, col: 5, offset: 39781},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1448, col: 5, offset: 39781},
					expr: &choiceExpr{
						pos: position{line: 1448, col: 6, offset: 39782},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1448, col: 6, offset: 39782},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1448, col: 15, offset: 39791},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1448, col: 15, offset: 39791},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1448, col: 20, offset: 39796,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1450, col: 1, offset: 39832},
			expr: &charClassMatcher{
				pos:        position{line: 1451, col: 5, offset: 39848},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1453, col: 1, offset: 39863},
			expr: &oneOrMoreExpr{
				pos: position{line: 1453, col: 5, offset: 39867},
				expr: &ruleRefExpr{
					pos:  position{line: 1453, col: 5, offset: 39867},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1455, col: 1, offset: 39878},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1455, col: 6, offset: 39883},
				expr: &ruleRefExpr{
					pos:  position{line: 1455, col: 6, offset: 39883},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1457, col: 1, offset: 39894},
			expr: &choiceExpr{
				pos: position{line: 1458, col: 5, offset: 39907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1458, col: 5, offset: 39907},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1459, col: 5, offset: 39922},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 5, offset: 39941},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "UnicodeLetter",
			pos:  position{line: 1462, col: 1, offset: 39950},
			expr: &choiceExpr{
				pos: position{line: 1463, col: 5, offset: 39968},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1463, col: 5, offset: 39968},
						name: "Lu",
					},
					&ruleRefExpr{
						pos:  position{line: 1464, col: 5, offset: 39975},
						name: "Ll",
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 5, offset: 39982},
						name: "Lt",
					},
					&ruleRefExpr{
						pos:  position{line: 1466, col: 5, offset: 39989},
						name: "Lm",
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 5, offset: 39996},
						name: "Lo",
					},
					&ruleRefExpr{
						pos:  position{line: 1468, col: 5, offset: 40003},
						name: "Nl",
					},
				},
			},
		},
		{
			name: "UnicodeCombiningMark",
			pos:  position{line: 1470, col: 1, offset: 40007},
			expr: &choiceExpr{
				pos: position{line: 1471, col: 5, offset: 40032},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1471, col: 5, offset: 40032},
						name: "Mn",
					},
					&ruleRefExpr{
						pos:  position{line: 1472, col: 5, offset: 40039},
						name: "Mc",
					},
				},
			},
		},
		{
			name: "UnicodeDigit",
			pos:  position{line: 1474, col: 1, offset: 40043},
			expr: &ruleRefExpr{
				pos:  position{line: 1475, col: 5, offset: 40060},
				name: "Nd",
			},
		},
		{
			name: "UnicodeConnectorPunctuation",
			pos:  position{line: 1477, col: 1, offset: 40064},
			expr: &ruleRefExpr{
				pos:  position{line: 1478, col: 5, offset: 40096},
				name: "Pc",
			},
		},
		{
			name: "Ll",
			pos:  position{line: 1484, col: 1, offset: 40277},
			expr: &charClassMatcher{
				pos:        position{line: 1484, col: 6, offset: 40282},
				val:        "[\\u0061-\\u007A\\u00B5\\u00DF-\\u00F6\\u00F8-\\u00FF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137-\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148-\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C-\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA-\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9-\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC-\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF-\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F-\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0-\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB-\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE-\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0560-\\u0588\\u10D0-\\u10FA\\u10FD-\\u10FF\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6-\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FC7\\u1FD0-\\u1FD3\\u1FD6-\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6-\\u1FF7\\u210A\\u210E-\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C-\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65-\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73-\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3-\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7AF\\uA7B5\\uA7B7\\uA7B9\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]",
				chars:      []rune{'µ', 'ā', 'ă', 'ą', 'ć', 'ĉ', 'ċ', 'č', 'ď', 'đ', 'ē', 'ĕ', 'ė', 'ę', 'ě', 'ĝ', 'ğ', 'ġ', 'ģ', 'ĥ', 'ħ', 'ĩ', 'ī', 'ĭ', 'į', 'ı', 'ĳ', 'ĵ', 'ĺ', 'ļ', 'ľ', 'ŀ', 'ł', 'ń', 'ņ', 'ŋ', 'ō', 'ŏ', 'ő', 'œ', 'ŕ', 'ŗ', 'ř', 'ś', 'ŝ', 'ş', 'š', 'ţ', 'ť', 'ŧ', 'ũ', 'ū', 'ŭ', 'ů', 'ű', 'ų', 'ŵ', 'ŷ', 'ź', 'ż', 'ƃ', 'ƅ', 'ƈ', 'ƒ', 'ƕ', 'ƞ', 'ơ', 'ƣ', 'ƥ', 'ƨ', 'ƭ', 'ư', 'ƴ', 'ƶ', 'ǆ', 'ǉ', 'ǌ', 'ǎ', 'ǐ', 'ǒ', 'ǔ', 'ǖ', 'ǘ', 'ǚ', 'ǟ', 'ǡ', 'ǣ', 'ǥ', 'ǧ', 'ǩ', 'ǫ', 'ǭ', 'ǳ', 'ǵ', 'ǹ', 'ǻ', 'ǽ', 'ǿ', 'ȁ', 'ȃ', 'ȅ', 'ȇ', 'ȉ', 'ȋ', 'ȍ', 'ȏ', 'ȑ', 'ȓ', 'ȕ', 'ȗ', 'ș', 'ț', 'ȝ', 'ȟ', 'ȡ', 'ȣ', 'ȥ', 'ȧ', 'ȩ', 'ȫ', 'ȭ', 'ȯ', 'ȱ', 'ȼ', 'ɂ', 'ɇ', 'ɉ', 'ɋ', 'ɍ', 'ͱ', 'ͳ', 'ͷ', 'ΐ', 'ϙ', 'ϛ', 'ϝ', 'ϟ', 'ϡ', 'ϣ', 'ϥ', 'ϧ', 'ϩ', 'ϫ', 'ϭ', 'ϵ', 'ϸ', 'ѡ', 'ѣ', 'ѥ', 'ѧ', 'ѩ', 'ѫ', 'ѭ', 'ѯ', 'ѱ', 'ѳ', 'ѵ', 'ѷ', 'ѹ', 'ѻ', 'ѽ', 'ѿ', 'ҁ', 'ҋ', 'ҍ', 'ҏ', 'ґ', 'ғ', 'ҕ', 'җ', 'ҙ', 'қ', 'ҝ', 'ҟ', 'ҡ', 'ң', 'ҥ', 'ҧ', 'ҩ', 'ҫ', 'ҭ', 'ү', 'ұ', 'ҳ', 'ҵ', 'ҷ', 'ҹ', 'һ', 'ҽ', 'ҿ', 'ӂ', 'ӄ', 'ӆ', 'ӈ', 'ӊ', 'ӌ', 'ӑ', 'ӓ', 'ӕ', 'ӗ', 'ә', 'ӛ', 'ӝ', 'ӟ', 'ӡ', 'ӣ', 'ӥ', 'ӧ', 'ө', 'ӫ', 'ӭ', 'ӯ', 'ӱ', 'ӳ', 'ӵ', 'ӷ', 'ӹ', 'ӻ', 'ӽ', 'ӿ', 'ԁ', 'ԃ', 'ԅ', 'ԇ', 'ԉ', 'ԋ', 'ԍ', 'ԏ', 'ԑ', 'ԓ', 'ԕ', 'ԗ', 'ԙ', 'ԛ', 'ԝ', 'ԟ', 'ԡ', 'ԣ', 'ԥ', 'ԧ', 'ԩ', 'ԫ', 'ԭ', 'ԯ', 'ḁ', 'ḃ', 'ḅ', 'ḇ', 'ḉ', 'ḋ', 'ḍ', 'ḏ', 'ḑ', 'ḓ', 'ḕ', 'ḗ', 'ḙ', 'ḛ', 'ḝ', 'ḟ', 'ḡ', 'ḣ', 'ḥ', 'ḧ', 'ḩ', 'ḫ', 'ḭ', 'ḯ', 'ḱ', 'ḳ', 'ḵ', 'ḷ', 'ḹ', 'ḻ', 'ḽ', 'ḿ', 'ṁ', 'ṃ', 'ṅ', 'ṇ', 'ṉ', 'ṋ', 'ṍ', 'ṏ', 'ṑ', 'ṓ', 'ṕ', 'ṗ', 'ṙ', 'ṛ', 'ṝ', 'ṟ', 'ṡ', 'ṣ', 'ṥ', 'ṧ', 'ṩ', 'ṫ', 'ṭ', 'ṯ', 'ṱ', 'ṳ', 'ṵ', 'ṷ', 'ṹ', 'ṻ', 'ṽ', 'ṿ', 'ẁ', 'ẃ', 'ẅ', 'ẇ', 'ẉ', 'ẋ', 'ẍ', 'ẏ', 'ẑ', 'ẓ', 'ẟ', 'ạ', 'ả', 'ấ', 'ầ', 'ẩ', 'ẫ', 'ậ', 'ắ', 'ằ', 'ẳ', 'ẵ', 'ặ', 'ẹ', 'ẻ', 'ẽ', 'ế', 'ề', 'ể', 'ễ', 'ệ', 'ỉ', 'ị', 'ọ', 'ỏ', 'ố', 'ồ', 'ổ', 'ỗ', 'ộ', 'ớ', 'ờ', 'ở', 'ỡ', 'ợ', 'ụ', 'ủ', 'ứ', 'ừ', 'ử', 'ữ', 'ự', 'ỳ', 'ỵ', 'ỷ', 'ỹ', 'ỻ', 'ỽ', 'ι', 'ℊ', 'ℓ', 'ℯ', 'ℴ', 'ℹ', 'ⅎ', 'ↄ', 'ⱡ', 'ⱨ', 'ⱪ', 'ⱬ', 'ⱱ', 'ⲁ', 'ⲃ', 'ⲅ', 'ⲇ', 'ⲉ', 'ⲋ', 'ⲍ', 'ⲏ', 'ⲑ', 'ⲓ', 'ⲕ', 'ⲗ', 'ⲙ', 'ⲛ', 'ⲝ', 'ⲟ', 'ⲡ', 'ⲣ', 'ⲥ', 'ⲧ', 'ⲩ', 'ⲫ', 'ⲭ', 'ⲯ', 'ⲱ', 'ⲳ', 'ⲵ', 'ⲷ', 'ⲹ', 'ⲻ', 'ⲽ', 'ⲿ', 'ⳁ', 'ⳃ', 'ⳅ', 'ⳇ', 'ⳉ', 'ⳋ', 'ⳍ', 'ⳏ', 'ⳑ', 'ⳓ', 'ⳕ', 'ⳗ', 'ⳙ', 'ⳛ', 'ⳝ', 'ⳟ', 'ⳡ', 'ⳬ', 'ⳮ', 'ⳳ', 'ⴧ', 'ⴭ', 'ꙁ', 'ꙃ', 'ꙅ', 'ꙇ', 'ꙉ', 'ꙋ', 'ꙍ', 'ꙏ', 'ꙑ', 'ꙓ', 'ꙕ', 'ꙗ', 'ꙙ', 'ꙛ', 'ꙝ', 'ꙟ', 'ꙡ', 'ꙣ', 'ꙥ', 'ꙧ', 'ꙩ', 'ꙫ', 'ꙭ', 'ꚁ', 'ꚃ', 'ꚅ', 'ꚇ', 'ꚉ', 'ꚋ', 'ꚍ', 'ꚏ', 'ꚑ', 'ꚓ', 'ꚕ', 'ꚗ', 'ꚙ', 'ꚛ', 'ꜣ', 'ꜥ', 'ꜧ', 'ꜩ', 'ꜫ', 'ꜭ', 'ꜳ', 'ꜵ', 'ꜷ', 'ꜹ', 'ꜻ', 'ꜽ', 'ꜿ', 'ꝁ', 'ꝃ', 'ꝅ', 'ꝇ', 'ꝉ', 'ꝋ', 'ꝍ', 'ꝏ', 'ꝑ', 'ꝓ', 'ꝕ', 'ꝗ', 'ꝙ', 'ꝛ', 'ꝝ', 'ꝟ', 'ꝡ', 'ꝣ', 'ꝥ', 'ꝧ', 'ꝩ', 'ꝫ', 'ꝭ', 'ꝯ', 'ꝺ', 'ꝼ', 'ꝿ', 'ꞁ', 'ꞃ', 'ꞅ', 'ꞇ', 'ꞌ', 'ꞎ', 'ꞑ', 'ꞗ', 'ꞙ', 'ꞛ', 'ꞝ', 'ꞟ', 'ꞡ', 'ꞣ', 'ꞥ', 'ꞧ', 'ꞩ', 'ꞯ', 'ꞵ', 'ꞷ', 'ꞹ', 'ꟺ'},
				ranges:     []rune{'a', 'z', 'ß', 'ö', 'ø', 'ÿ', 'ķ', 'ĸ', 'ň', 'ŉ', 'ž', 'ƀ', 'ƌ', 'ƍ', 'ƙ', 'ƛ', 'ƪ', 'ƫ', 'ƹ', 'ƺ', 'ƽ', 'ƿ', 'ǜ', 'ǝ', 'ǯ', 'ǰ', 'ȳ', 'ȹ', 'ȿ', 'ɀ', 'ɏ', 'ʓ', 'ʕ', 'ʯ', 'ͻ', 'ͽ', 'ά', 'ώ', 'ϐ', 'ϑ', 'ϕ', 'ϗ', 'ϯ', 'ϳ', 'ϻ', 'ϼ', 'а', 'џ', 'ӎ', 'ӏ', 'ՠ', 'ֈ', 'ა', 'ჺ', 'ჽ', 'ჿ', 'ᏸ', 'ᏽ', 'ᲀ', 'ᲈ', 'ᴀ', 'ᴫ', 'ᵫ', 'ᵷ', 'ᵹ', 'ᶚ', 'ẕ', 'ẝ', 'ỿ', 'ἇ', 'ἐ', 'ἕ', 'ἠ', 'ἧ', 'ἰ', 'ἷ', 'ὀ', 'ὅ', 'ὐ', 'ὗ', 'ὠ', 'ὧ', 'ὰ', 'ώ', 'ᾀ', 'ᾇ', 'ᾐ', 'ᾗ', 'ᾠ', 'ᾧ', 'ᾰ', 'ᾴ', 'ᾶ', 'ᾷ', 'ῂ', 'ῄ', 'ῆ', 'ῇ', 'ῐ', 'ΐ', 'ῖ', 'ῗ', 'ῠ', 'ῧ', 'ῲ', 'ῴ', 'ῶ', 'ῷ', 'ℎ', 'ℏ', 'ℼ', 'ℽ', 'ⅆ', 'ⅉ', 'ⰰ', 'ⱞ', 'ⱥ', 'ⱦ', 'ⱳ', 'ⱴ', 'ⱶ', 'ⱻ', 'ⳣ', 'ⳤ', 'ⴀ', 'ⴥ', 'ꜯ', 'ꜱ', 'ꝱ', 'ꝸ', 'ꞓ', 'ꞕ', 'ꬰ', 'ꭚ', 'ꭠ', 'ꭥ', 'ꭰ', 'ꮿ', 'ﬀ', 'ﬆ', 'ﬓ', 'ﬗ', 'ａ', 'ｚ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Lm",
			pos:  position{line: 1487, col: 1, offset: 44434},
			expr: &charClassMatcher{
				pos:        position{line: 1487, col: 6, offset: 44439},
				val:        "[\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5-\\u06E6\\u07F4-\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C-\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D-\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C-\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8-\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3-\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E-\\uFF9F]",
				chars:      []rune{'ˬ', 'ˮ', 'ʹ', 'ͺ', 'ՙ', 'ـ', 'ߺ', 'ࠚ', 'ࠤ', 'ࠨ', 'ॱ', 'ๆ', 'ໆ', 'ჼ', 'ៗ', 'ᡃ', 'ᪧ', 'ᵸ', 'ⁱ', 'ⁿ', 'ⵯ', 'ⸯ', '々', '〻', 'ꀕ', 'ꘌ', 'ꙿ', 'ꝰ', 'ꞈ', 'ꧏ', 'ꧦ', 'ꩰ', 'ꫝ', 'ｰ'},
				ranges:     []rune{'ʰ', 'ˁ', 'ˆ', 'ˑ', 'ˠ', 'ˤ', 'ۥ', 'ۦ', 'ߴ', 'ߵ', 'ᱸ', 'ᱽ', 'ᴬ', 'ᵪ', 'ᶛ', 'ᶿ', 'ₐ', 'ₜ', 'ⱼ', 'ⱽ', '〱', '〵', 'ゝ', 'ゞ', 'ー', 'ヾ', 'ꓸ', 'ꓽ', 'ꚜ', 'ꚝ', 'ꜗ', 'ꜟ', 'ꟸ', 'ꟹ', 'ꫳ', 'ꫴ', 'ꭜ', 'ꭟ', 'ﾞ', 'ﾟ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Lo",
			pos:  position{line: 1490, col: 1, offset: 44924},
			expr: &charClassMatcher{
				pos:        position{line: 1490, col: 6, offset: 44929},
				val:        "[\\u00AA\\u00BA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60-\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0CF1-\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5-\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A-\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD-\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]",
				chars:      []rune{'ª', 'º', 'ƻ', 'ʔ', 'ە', 'ۿ', 'ܐ', 'ޱ', 'ऽ', 'ॐ', 'ল', 'ঽ', 'ৎ', 'ৼ', 'ਫ਼', 'ઽ', 'ૐ', 'ૹ', 'ଽ', 'ୱ', 'ஃ', 'ஜ', 'ௐ', 'ఽ', 'ಀ', 'ಽ', 'ೞ', 'ഽ', 'ൎ', 'ල', 'ຄ', 'ຊ', 'ຍ', 'ລ', 'ວ', 'ຽ', 'ༀ', 'ဿ', 'ၡ', 'ႎ', 'ቘ', 'ዀ', 'ៜ', 'ᢪ', '〆', '〼', 'ゟ', 'ヿ', 'ꙮ', 'ꞏ', 'ꟷ', 'ꣻ', 'ꩺ', 'ꪱ', 'ꫀ', 'ꫂ', 'ꫲ', 'יִ', 'מּ'},
				ranges:     []rune{'ǀ', 'ǃ', 'א', 'ת', 'ׯ', 'ײ', 'ؠ', 'ؿ', 'ف', 'ي', 'ٮ', 'ٯ', 'ٱ', 'ۓ', 'ۮ', 'ۯ', 'ۺ', 'ۼ', 'ܒ', 'ܯ', 'ݍ', 'ޥ', 'ߊ', 'ߪ', 'ࠀ', 'ࠕ', 'ࡀ', 'ࡘ', 'ࡠ', 'ࡪ', 'ࢠ', 'ࢴ', 'ࢶ', 'ࢽ', 'ऄ', 'ह', 'क़', 'ॡ', 'ॲ', 'ঀ', 'অ', 'ঌ', 'এ', 'ঐ', 'ও', 'ন', 'প', 'র', 'শ', 'হ', 'ড়', 'ঢ়', 'য়', 'ৡ', 'ৰ', 'ৱ', 'ਅ', 'ਊ', 'ਏ', 'ਐ', 'ਓ', 'ਨ', 'ਪ', 'ਰ', 'ਲ', 'ਲ਼', 'ਵ', 'ਸ਼', 'ਸ', 'ਹ', 'ਖ਼', 'ੜ', 'ੲ', 'ੴ', 'અ', 'ઍ', 'એ', 'ઑ', 'ઓ', 'ન', 'પ', 'ર', 'લ', 'ળ', 'વ', 'હ', 'ૠ', 'ૡ', 'ଅ', 'ଌ', 'ଏ', 'ଐ', 'ଓ', 'ନ', 'ପ', 'ର', 'ଲ', 'ଳ', 'ଵ', 'ହ', 'ଡ଼', 'ଢ଼', 'ୟ', 'ୡ', 'அ', 'ஊ', 'எ', 'ஐ', 'ஒ', 'க', 'ங', 'ச', 'ஞ', 'ட', 'ண', 'த', 'ந', 'ப', 'ம', 'ஹ', 'అ', 'ఌ', 'ఎ', 'ఐ', 'ఒ', 'న', 'ప', 'హ', 'ౘ', 'ౚ', 'ౠ', 'ౡ', 'ಅ', 'ಌ', 'ಎ', 'ಐ', 'ಒ', 'ನ', 'ಪ', 'ಳ', 'ವ', 'ಹ', 'ೠ', 'ೡ', 'ೱ', 'ೲ', 'അ', 'ഌ', 'എ', 'ഐ', 'ഒ', 'ഺ', 'ൔ', 'ൖ', 'ൟ', 'ൡ', 'ൺ', 'ൿ', 'අ', 'ඖ', 'ක', 'න', 'ඳ', 'ර', 'ව', 'ෆ', 'ก', 'ะ', 'า', 'ำ', 'เ', 'ๅ', 'ກ', 'ຂ', 'ງ', 'ຈ', 'ດ', 'ທ', 'ນ', 'ຟ', 'ມ', 'ຣ', 'ສ', 'ຫ', 'ອ', 'ະ', 'າ', 'ຳ', 'ເ', 'ໄ', 'ໜ', 'ໟ', 'ཀ', 'ཇ', 'ཉ', 'ཬ', 'ྈ', 'ྌ', 'က', 'ဪ', 'ၐ', 'ၕ', 'ၚ', 'ၝ', 'ၥ', 'ၦ', 'ၮ', 'ၰ', 'ၵ', 'ႁ', 'ᄀ', 'ቈ', 'ቊ', 'ቍ', 'ቐ', 'ቖ', 'ቚ', 'ቝ', 'በ', 'ኈ', 'ኊ', 'ኍ', 'ነ', 'ኰ', 'ኲ', 'ኵ', 'ኸ', 'ኾ', 'ዂ', 'ዅ', 'ወ', 'ዖ', 'ዘ', 'ጐ', 'ጒ', 'ጕ', 'ጘ', 'ፚ', 'ᎀ', 'ᎏ', 'ᐁ', 'ᙬ', 'ᙯ', 'ᙿ', 'ᚁ', 'ᚚ', 'ᚠ', 'ᛪ', 'ᛱ', 'ᛸ', 'ᜀ', 'ᜌ', 'ᜎ', 'ᜑ', 'ᜠ', 'ᜱ', 'ᝀ', 'ᝑ', 'ᝠ', 'ᝬ', 'ᝮ', 'ᝰ', 'ក', 'ឳ', 'ᠠ', 'ᡂ', 'ᡄ', 'ᡸ', 'ᢀ', 'ᢄ', 'ᢇ', 'ᢨ', 'ᢰ', 'ᣵ', 'ᤀ', 'ᤞ', 'ᥐ', 'ᥭ', 'ᥰ', 'ᥴ', 'ᦀ', 'ᦫ', 'ᦰ', 'ᧉ', 'ᨀ', 'ᨖ', 'ᨠ', 'ᩔ', 'ᬅ', 'ᬳ', 'ᭅ', 'ᭋ', 'ᮃ', 'ᮠ', 'ᮮ', 'ᮯ', 'ᮺ', 'ᯥ', 'ᰀ', 'ᰣ', 'ᱍ', 'ᱏ', 'ᱚ', 'ᱷ', 'ᳩ', 'ᳬ', 'ᳮ', 'ᳱ', 'ᳵ', 'ᳶ', 'ℵ', 'ℸ', 'ⴰ', 'ⵧ', 'ⶀ', 'ⶖ', 'ⶠ', 'ⶦ', 'ⶨ', 'ⶮ', 'ⶰ', 'ⶶ', 'ⶸ', 'ⶾ', 'ⷀ', 'ⷆ', 'ⷈ', 'ⷎ', 'ⷐ', 'ⷖ', 'ⷘ', 'ⷞ', 'ぁ', 'ゖ', 'ァ', 'ヺ', 'ㄅ', 'ㄯ', 'ㄱ', 'ㆎ', 'ㆠ', 'ㆺ', 'ㇰ', 'ㇿ', '㐀', '䶵', '一', '鿯', 'ꀀ', 'ꀔ', 'ꀖ', 'ꒌ', 'ꓐ', 'ꓷ', 'ꔀ', 'ꘋ', 'ꘐ', 'ꘟ', 'ꘪ', 'ꘫ', 'ꚠ', 'ꛥ', 'ꟻ', 'ꠁ', 'ꠃ', 'ꠅ', 'ꠇ', 'ꠊ', 'ꠌ', 'ꠢ', 'ꡀ', 'ꡳ', 'ꢂ', 'ꢳ', 'ꣲ', 'ꣷ', 'ꣽ', 'ꣾ', 'ꤊ', 'ꤥ', 'ꤰ', 'ꥆ', 'ꥠ', 'ꥼ', 'ꦄ', 'ꦲ', 'ꧠ', 'ꧤ', 'ꧧ', 'ꧯ', 'ꧺ', 'ꧾ', 'ꨀ', 'ꨨ', 'ꩀ', 'ꩂ', 'ꩄ', 'ꩋ', 'ꩠ', 'ꩯ', 'ꩱ', 'ꩶ', 'ꩾ', 'ꪯ', 'ꪵ', 'ꪶ', 'ꪹ', 'ꪽ', 'ꫛ', 'ꫜ', 'ꫠ', 'ꫪ', 'ꬁ', 'ꬆ', 'ꬉ', 'ꬎ', 'ꬑ', 'ꬖ', 'ꬠ', 'ꬦ', 'ꬨ', 'ꬮ', 'ꯀ', 'ꯢ', '가', '힣', 'ힰ', 'ퟆ', 'ퟋ', 'ퟻ', '豈', '舘', '並', '龎', 'ײַ', 'ﬨ', 'שׁ', 'זּ', 'טּ', 'לּ', 'נּ', 'סּ', 'ףּ', 'פּ', 'צּ', 'ﮱ', 'ﯓ', 'ﴽ', 'ﵐ', 'ﶏ', 'ﶒ', 'ﷇ', 'ﷰ', 'ﷻ', 'ﹰ', 'ﹴ', 'ﹶ', 'ﻼ', 'ｦ', 'ｯ', 'ｱ', 'ﾝ', 'ﾠ', 'ﾾ', 'ￂ', 'ￇ', 'ￊ', 'ￏ', 'ￒ', 'ￗ', 'ￚ', 'ￜ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Lt",
			pos:  position{line: 1493, col: 1, offset: 48376},
			expr: &charClassMatcher{
				pos:        position{line: 1493, col: 6, offset: 48381},
				val:        "[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC]",
				chars:      []rune{'ǅ', 'ǈ', 'ǋ', 'ǲ', 'ᾼ', 'ῌ', 'ῼ'},
				ranges:     []rune{'ᾈ', 'ᾏ', 'ᾘ', 'ᾟ', 'ᾨ', 'ᾯ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Lu",
			pos:  position{line: 1496, col: 1, offset: 48487},
			expr: &charClassMatcher{
				pos:        position{line: 1496, col: 6, offset: 48492},
				val:        "[\\u0041-\\u005A\\u00C0-\\u00D6\\u00D8-\\u00DE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178-\\u0179\\u017B\\u017D\\u0181-\\u0182\\u0184\\u0186-\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019C-\\u019D\\u019F-\\u01A0\\u01A2\\u01A4\\u01A6-\\u01A7\\u01A9\\u01AC\\u01AE-\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7-\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A-\\u023B\\u023D-\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9-\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0-\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E-\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D-\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uA7B8\\uFF21-\\uFF3A]",
				chars:      []rune{'Ā', 'Ă', 'Ą', 'Ć', 'Ĉ', 'Ċ', 'Č', 'Ď', 'Đ', 'Ē', 'Ĕ', 'Ė', 'Ę', 'Ě', 'Ĝ', 'Ğ', 'Ġ', 'Ģ', 'Ĥ', 'Ħ', 'Ĩ', 'Ī', 'Ĭ', 'Į', 'İ', 'Ĳ', 'Ĵ', 'Ķ', 'Ĺ', 'Ļ', 'Ľ', 'Ŀ', 'Ł', 'Ń', 'Ņ', 'Ň', 'Ŋ', 'Ō', 'Ŏ', 'Ő', 'Œ', 'Ŕ', 'Ŗ', 'Ř', 'Ś', 'Ŝ', 'Ş', 'Š', 'Ţ', 'Ť', 'Ŧ', 'Ũ', 'Ū', 'Ŭ', 'Ů', 'Ű', 'Ų', 'Ŵ', 'Ŷ', 'Ż', 'Ž', 'Ƅ', 'Ƣ', 'Ƥ', 'Ʃ', 'Ƭ', 'Ƶ', 'Ƽ', 'Ǆ', 'Ǉ', 'Ǌ', 'Ǎ', 'Ǐ', 'Ǒ', 'Ǔ', 'Ǖ', 'Ǘ', 'Ǚ', 'Ǜ', 'Ǟ', 'Ǡ', 'Ǣ', 'Ǥ', 'Ǧ', 'Ǩ', 'Ǫ', 'Ǭ', 'Ǯ', 'Ǳ', 'Ǵ', 'Ǻ', 'Ǽ', 'Ǿ', 'Ȁ', 'Ȃ', 'Ȅ', 'Ȇ', 'Ȉ', 'Ȋ', 'Ȍ', 'Ȏ', 'Ȑ', 'Ȓ', 'Ȕ', 'Ȗ', 'Ș', 'Ț', 'Ȝ', 'Ȟ', 'Ƞ', 'Ȣ', 'Ȥ', 'Ȧ', 'Ȩ', 'Ȫ', 'Ȭ', 'Ȯ', 'Ȱ', 'Ȳ', 'Ɂ', 'Ɉ', 'Ɋ', 'Ɍ', 'Ɏ', 'Ͱ', 'Ͳ', 'Ͷ', 'Ϳ', 'Ά', 'Ό', 'Ϗ', 'Ϙ', 'Ϛ', 'Ϝ', 'Ϟ', 'Ϡ', 'Ϣ', 'Ϥ', 'Ϧ', 'Ϩ', 'Ϫ', 'Ϭ', 'Ϯ', 'ϴ', 'Ϸ', 'Ѡ', 'Ѣ', 'Ѥ', 'Ѧ', 'Ѩ', 'Ѫ', 'Ѭ', 'Ѯ', 'Ѱ', 'Ѳ', 'Ѵ', 'Ѷ', 'Ѹ', 'Ѻ', 'Ѽ', 'Ѿ', 'Ҁ', 'Ҋ', 'Ҍ', 'Ҏ', 'Ґ', 'Ғ', 'Ҕ', 'Җ', 'Ҙ', 'Қ', 'Ҝ', 'Ҟ', 'Ҡ', 'Ң', 'Ҥ', 'Ҧ', 'Ҩ', 'Ҫ', 'Ҭ', 'Ү', 'Ұ', 'Ҳ', 'Ҵ', 'Ҷ', 'Ҹ', 'Һ', 'Ҽ', 'Ҿ', 'Ӄ', 'Ӆ', 'Ӈ', 'Ӊ', 'Ӌ', 'Ӎ', 'Ӑ', 'Ӓ', 'Ӕ', 'Ӗ', 'Ә', 'Ӛ', 'Ӝ', 'Ӟ', 'Ӡ', 'Ӣ', 'Ӥ', 'Ӧ', 'Ө', 'Ӫ', 'Ӭ', 'Ӯ', 'Ӱ', 'Ӳ', 'Ӵ', 'Ӷ', 'Ӹ', 'Ӻ', 'Ӽ', 'Ӿ', 'Ԁ', 'Ԃ', 'Ԅ', 'Ԇ', 'Ԉ', 'Ԋ', 'Ԍ', 'Ԏ', 'Ԑ', 'Ԓ', 'Ԕ', 'Ԗ', 'Ԙ', 'Ԛ', 'Ԝ', 'Ԟ', 'Ԡ', 'Ԣ', 'Ԥ', 'Ԧ', 'Ԩ', 'Ԫ', 'Ԭ', 'Ԯ', 'Ⴧ', 'Ⴭ', 'Ḁ', 'Ḃ', 'Ḅ', 'Ḇ', 'Ḉ', 'Ḋ', 'Ḍ', 'Ḏ', 'Ḑ', 'Ḓ', 'Ḕ', 'Ḗ', 'Ḙ', 'Ḛ', 'Ḝ', 'Ḟ', 'Ḡ', 'Ḣ', 'Ḥ', 'Ḧ', 'Ḩ', 'Ḫ', 'Ḭ', 'Ḯ', 'Ḱ', 'Ḳ', 'Ḵ', 'Ḷ', 'Ḹ', 'Ḻ', 'Ḽ', 'Ḿ', 'Ṁ', 'Ṃ', 'Ṅ', 'Ṇ', 'Ṉ', 'Ṋ', 'Ṍ', 'Ṏ', 'Ṑ', 'Ṓ', 'Ṕ', 'Ṗ', 'Ṙ', 'Ṛ', 'Ṝ', 'Ṟ', 'Ṡ', 'Ṣ', 'Ṥ', 'Ṧ', 'Ṩ', 'Ṫ', 'Ṭ', 'Ṯ', 'Ṱ', 'Ṳ', 'Ṵ', 'Ṷ', 'Ṹ', 'Ṻ', 'Ṽ', 'Ṿ', 'Ẁ', 'Ẃ', 'Ẅ', 'Ẇ', 'Ẉ', 'Ẋ', 'Ẍ', 'Ẏ', 'Ẑ', 'Ẓ', 'Ẕ', 'ẞ', 'Ạ', 'Ả', 'Ấ', 'Ầ', 'Ẩ', 'Ẫ', 'Ậ', 'Ắ', 'Ằ', 'Ẳ', 'Ẵ', 'Ặ', 'Ẹ', 'Ẻ', 'Ẽ', 'Ế', 'Ề', 'Ể', 'Ễ', 'Ệ', 'Ỉ', 'Ị', 'Ọ', 'Ỏ', 'Ố', 'Ồ', 'Ổ', 'Ỗ', 'Ộ', 'Ớ', 'Ờ', 'Ở', 'Ỡ', 'Ợ', 'Ụ', 'Ủ', 'Ứ', 'Ừ', 'Ử', 'Ữ', 'Ự', 'Ỳ', 'Ỵ', 'Ỷ', 'Ỹ', 'Ỻ', 'Ỽ', 'Ỿ', 'Ὑ', 'Ὓ', 'Ὕ', 'Ὗ', 'ℂ', 'ℇ', 'ℕ', 'ℤ', 'Ω', 'ℨ', 'ⅅ', 'Ↄ', 'Ⱡ', 'Ⱨ', 'Ⱪ', 'Ⱬ', 'Ⱳ', 'Ⱶ', 'Ⲃ', 'Ⲅ', 'Ⲇ', 'Ⲉ', 'Ⲋ', 'Ⲍ', 'Ⲏ', 'Ⲑ', 'Ⲓ', 'Ⲕ', 'Ⲗ', 'Ⲙ', 'Ⲛ', 'Ⲝ', 'Ⲟ', 'Ⲡ', 'Ⲣ', 'Ⲥ', 'Ⲧ', 'Ⲩ', 'Ⲫ', 'Ⲭ', 'Ⲯ', 'Ⲱ', 'Ⲳ', 'Ⲵ', 'Ⲷ', 'Ⲹ', 'Ⲻ', 'Ⲽ', 'Ⲿ', 'Ⳁ', 'Ⳃ', 'Ⳅ', 'Ⳇ', 'Ⳉ', 'Ⳋ', 'Ⳍ', 'Ⳏ', 'Ⳑ', 'Ⳓ', 'Ⳕ', 'Ⳗ', 'Ⳙ', 'Ⳛ', 'Ⳝ', 'Ⳟ', 'Ⳡ', 'Ⳣ', 'Ⳬ', 'Ⳮ', 'Ⳳ', 'Ꙁ', 'Ꙃ', 'Ꙅ', 'Ꙇ', 'Ꙉ', 'Ꙋ', 'Ꙍ', 'Ꙏ', 'Ꙑ', 'Ꙓ', 'Ꙕ', 'Ꙗ', 'Ꙙ', 'Ꙛ', 'Ꙝ', 'Ꙟ', 'Ꙡ', 'Ꙣ', 'Ꙥ', 'Ꙧ', 'Ꙩ', 'Ꙫ', 'Ꙭ', 'Ꚁ', 'Ꚃ', 'Ꚅ', 'Ꚇ', 'Ꚉ', 'Ꚋ', 'Ꚍ', 'Ꚏ', 'Ꚑ', 'Ꚓ', 'Ꚕ', 'Ꚗ', 'Ꚙ', 'Ꚛ', 'Ꜣ', 'Ꜥ', 'Ꜧ', 'Ꜩ', 'Ꜫ', 'Ꜭ', 'Ꜯ', 'Ꜳ', 'Ꜵ', 'Ꜷ', 'Ꜹ', 'Ꜻ', 'Ꜽ', 'Ꜿ', 'Ꝁ', 'Ꝃ', 'Ꝅ', 'Ꝇ', 'Ꝉ', 'Ꝋ', 'Ꝍ', 'Ꝏ', 'Ꝑ', 'Ꝓ', 'Ꝕ', 'Ꝗ', 'Ꝙ', 'Ꝛ', 'Ꝝ', 'Ꝟ', 'Ꝡ', 'Ꝣ', 'Ꝥ', 'Ꝧ', 'Ꝩ', 'Ꝫ', 'Ꝭ', 'Ꝯ', 'Ꝺ', 'Ꝼ', 'Ꞁ', 'Ꞃ', 'Ꞅ', 'Ꞇ', 'Ꞌ', 'Ɥ', 'Ꞑ', 'Ꞓ', 'Ꞗ', 'Ꞙ', 'Ꞛ', 'Ꞝ', 'Ꞟ', 'Ꞡ', 'Ꞣ', 'Ꞥ', 'Ꞧ', 'Ꞩ', 'Ꞷ', 'Ꞹ'},
				ranges:     []rune{'A', 'Z', 'À', 'Ö', 'Ø', 'Þ', 'Ÿ', 'Ź', 'Ɓ', 'Ƃ', 'Ɔ', 'Ƈ', 'Ɖ', 'Ƌ', 'Ǝ', 'Ƒ', 'Ɠ', 'Ɣ', 'Ɩ', 'Ƙ', 'Ɯ', 'Ɲ', 'Ɵ', 'Ơ', 'Ʀ', 'Ƨ', 'Ʈ', 'Ư', 'Ʊ', 'Ƴ', 'Ʒ', 'Ƹ', 'Ƕ', 'Ǹ', 'Ⱥ', 'Ȼ', 'Ƚ', 'Ⱦ', 'Ƀ', 'Ɇ', 'Έ', 'Ί', 'Ύ', 'Ώ', 'Α', 'Ρ', 'Σ', 'Ϋ', 'ϒ', 'ϔ', 'Ϲ', 'Ϻ', 'Ͻ', 'Я', 'Ӏ', 'Ӂ', 'Ա', 'Ֆ', 'Ⴀ', 'Ⴥ', 'Ꭰ', 'Ᏽ', 'Ა', 'Ჺ', 'Ჽ', 'Ჿ', 'Ἀ', 'Ἇ', 'Ἐ', 'Ἕ', 'Ἠ', 'Ἧ', 'Ἰ', 'Ἷ', 'Ὀ', 'Ὅ', 'Ὠ', 'Ὧ', 'Ᾰ', 'Ά', 'Ὲ', 'Ή', 'Ῐ', 'Ί', 'Ῠ', 'Ῥ', 'Ὸ', 'Ώ', 'ℋ', 'ℍ', 'ℐ', 'ℒ', 'ℙ', 'ℝ', 'K', 'ℭ', 'ℰ', 'ℳ', 'ℾ', 'ℿ', 'Ⰰ', 'Ⱞ', 'Ɫ', 'Ɽ', 'Ɑ', 'Ɒ', 'Ȿ', 'Ⲁ', 'Ᵹ', 'Ꝿ', 'Ɦ', 'Ɪ', 'Ʞ', 'Ꞵ', 'Ａ', 'Ｚ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Mc",
			pos:  position{line: 1499, col: 1, offset: 52493},
			expr: &charClassMatcher{
				pos:        position{line: 1499, col: 6, offset: 52498},
				val:        "[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BE-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B3E\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0B57\\u0BBE-\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0CD5-\\u0CD6\\u0D02-\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82-\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0F3E-\\u0F3F\\u0F7F\\u102B-\\u102C\\u1031\\u1038\\u103B-\\u103C\\u1056-\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083-\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63-\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF2-\\u1CF3\\u1CF7\\u302E-\\u302F\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BD-\\uA9C0\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\uABEC]",
				chars:      []rune{'ः', 'ऻ', 'ৗ', 'ਃ', 'ઃ', 'ૉ', 'ା', 'ୀ', 'ୗ', 'ௗ', 'ಾ', 'ൗ', 'ཿ', 'ေ', 'း', 'ႏ', 'ា', 'ᩕ', 'ᩗ', 'ᩡ', 'ᬄ', 'ᬵ', 'ᬻ', 'ᮂ', 'ᮡ', '᮪', 'ᯧ', 'ᯮ', '᳡', '᳷', 'ꠧ', 'ꦃ', 'ꩍ', 'ꩻ', 'ꩽ', 'ꫫ', 'ꫵ', '꯬'},
				ranges:     []rune{'ा', 'ी', 'ॉ', 'ौ', 'ॎ', 'ॏ', 'ং', 'ঃ', 'া', 'ী', 'ে', 'ৈ', 'ো', 'ৌ', 'ਾ', 'ੀ', 'ા', 'ી', 'ો', 'ૌ', 'ଂ', 'ଃ', 'େ', 'ୈ', 'ୋ', 'ୌ', 'ா', 'ி', 'ு', 'ூ', 'ெ', 'ை', 'ொ', 'ௌ', 'ఁ', 'ః', 'ు', 'ౄ', 'ಂ', 'ಃ', 'ೀ', 'ೄ', 'ೇ', 'ೈ', 'ೊ', 'ೋ', 'ೕ', 'ೖ', 'ം', 'ഃ', 'ാ', 'ീ', 'െ', 'ൈ', 'ൊ', 'ൌ', 'ං', 'ඃ', 'ා', 'ෑ', 'ෘ', 'ෟ', 'ෲ', 'ෳ', '༾', '༿', 'ါ', 'ာ', 'ျ', 'ြ', 'ၖ', 'ၗ', 'ၢ', 'ၤ', 'ၧ', 'ၭ', 'ႃ', 'ႄ', 'ႇ', 'ႌ', 'ႚ', 'ႜ', 'ើ', 'ៅ', 'ះ', 'ៈ', 'ᤣ', 'ᤦ', 'ᤩ', 'ᤫ', 'ᤰ', 'ᤱ', 'ᤳ', 'ᤸ', 'ᨙ', 'ᨚ', 'ᩣ', 'ᩤ', 'ᩭ', 'ᩲ', 'ᬽ', 'ᭁ', 'ᭃ', '᭄', 'ᮦ', 'ᮧ', 'ᯪ', 'ᯬ', '᯲', '᯳', 'ᰤ', 'ᰫ', 'ᰴ', 'ᰵ', 'ᳲ', 'ᳳ', '〮', '〯', 'ꠣ', 'ꠤ', 'ꢀ', 'ꢁ', 'ꢴ', 'ꣃ', 'ꥒ', '꥓', 'ꦴ', 'ꦵ', 'ꦺ', 'ꦻ', 'ꦽ', '꧀', 'ꨯ', 'ꨰ', 'ꨳ', 'ꨴ', 'ꫮ', 'ꫯ', 'ꯣ', 'ꯤ', 'ꯦ', 'ꯧ', 'ꯩ', 'ꯪ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Mn",
			pos:  position{line: 1502, col: 1, offset: 53686},
			expr: &charClassMatcher{
				pos:        position{line: 1502, col: 6, offset: 53691},
				val:        "[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962-\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2-\\u09E3\\u09FE\\u0A01-\\u0A02\\u0A3C\\u0A41-\\u0A42\\u0A47-\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70-\\u0A71\\u0A75\\u0A81-\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7-\\u0AC8\\u0ACD\\u0AE2-\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62-\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55-\\u0C56\\u0C62-\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC-\\u0CCD\\u0CE2-\\u0CE3\\u0D00-\\u0D01\\u0D3B-\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62-\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86-\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039-\\u103A\\u103D-\\u103E\\u1058-\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085-\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773\\u17B4-\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885-\\u1886\\u18A9\\u1920-\\u1922\\u1927-\\u1928\\u1932\\u1939-\\u193B\\u1A17-\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80-\\u1B81\\u1BA2-\\u1BA5\\u1BA8-\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8-\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099-\\u309A\\uA66F\\uA674-\\uA67D\\uA69E-\\uA69F\\uA6F0-\\uA6F1\\uA802\\uA806\\uA80B\\uA825-\\uA826\\uA8C4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31-\\uAA32\\uAA35-\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7-\\uAAB8\\uAABE-\\uAABF\\uAAC1\\uAAEC-\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]",
				chars:      []rune{'ֿ', 'ׇ', 'ٰ', 'ܑ', '߽', 'ऺ', '़', '्', 'ঁ', '়', '্', '৾', '਼', 'ੑ', 'ੵ', '઼', '્', 'ଁ', '଼', 'ି', '୍', 'ୖ', 'ஂ', 'ீ', '்', 'ఀ', 'ఄ', 'ಁ', '಼', 'ಿ', 'ೆ', '്', '්', 'ූ', 'ั', 'ັ', '༵', '༷', '༹', '࿆', 'ႂ', 'ႍ', 'ႝ', 'ំ', '៝', 'ᢩ', 'ᤲ', 'ᨛ', 'ᩖ', '᩠', 'ᩢ', '᩿', '᬴', 'ᬼ', 'ᭂ', '᯦', 'ᯭ', '᳭', '᳴', '⃡', '⵿', '꙯', 'ꠂ', '꠆', 'ꠋ', 'ꣿ', '꦳', 'ꦼ', 'ꧥ', 'ꩃ', 'ꩌ', 'ꩼ', 'ꪰ', '꫁', '꫶', 'ꯥ', 'ꯨ', '꯭', 'ﬞ'},
				ranges:     []rune{'̀', 'ͯ', '҃', '҇', '֑', 'ֽ', 'ׁ', 'ׂ', 'ׄ', 'ׅ', 'ؐ', 'ؚ', 'ً', 'ٟ', 'ۖ', 'ۜ', '۟', 'ۤ', 'ۧ', 'ۨ', '۪', 'ۭ', 'ܰ', '݊', 'ަ', 'ް', '߫', '߳', 'ࠖ', '࠙', 'ࠛ', 'ࠣ', 'ࠥ', 'ࠧ', 'ࠩ', '࠭', '࡙', '࡛', '࣓', '࣡', 'ࣣ', 'ं', 'ु', 'ै', '॑', 'ॗ', 'ॢ', 'ॣ', 'ু', 'ৄ', 'ৢ', 'ৣ', 'ਁ', 'ਂ', 'ੁ', 'ੂ', 'ੇ', 'ੈ', 'ੋ', '੍', 'ੰ', 'ੱ', 'ઁ', 'ં', 'ુ', 'ૅ', 'ે', 'ૈ', 'ૢ', 'ૣ', 'ૺ', '૿', 'ୁ', 'ୄ', 'ୢ', 'ୣ', 'ా', 'ీ', 'ె', 'ై', 'ొ', '్', 'ౕ', 'ౖ', 'ౢ', 'ౣ', 'ೌ', '್', 'ೢ', 'ೣ', 'ഀ', 'ഁ', '഻', '഼', 'ു', 'ൄ', 'ൢ', 'ൣ', 'ි', 'ු', 'ิ', 'ฺ', '็', '๎', 'ິ', 'ູ', 'ົ', 'ຼ', '່', 'ໍ', '༘', '༙', 'ཱ', 'ཾ', 'ྀ', '྄', '྆', '྇', 'ྍ', 'ྗ', 'ྙ', 'ྼ', 'ိ', 'ူ', 'ဲ', '့', '္', '်', 'ွ', 'ှ', 'ၘ', 'ၙ', 'ၞ', 'ၠ', 'ၱ', 'ၴ', 'ႅ', 'ႆ', '፝', '፟', 'ᜒ', '᜔', 'ᜲ', '᜴', 'ᝒ', 'ᝓ', 'ᝲ', 'ᝳ', '឴', '឵', 'ិ', 'ួ', '៉', '៓', '᠋', '᠍', 'ᢅ', 'ᢆ', 'ᤠ', 'ᤢ', 'ᤧ', 'ᤨ', '᤹', '᤻', 'ᨗ', 'ᨘ', 'ᩘ', 'ᩞ', 'ᩥ', 'ᩬ', 'ᩳ', '᩼', '᪰', '᪽', 'ᬀ', 'ᬃ', 'ᬶ', 'ᬺ', '᭫', '᭳', 'ᮀ', 'ᮁ', 'ᮢ', 'ᮥ', 'ᮨ', 'ᮩ', '᮫', 'ᮭ', 'ᯨ', 'ᯩ', 'ᯯ', 'ᯱ', 'ᰬ', 'ᰳ', 'ᰶ', '᰷', '᳐', '᳒', '᳔', '᳠', '᳢', '᳨', '᳸', '᳹', '᷀', '᷹', '᷻', '᷿', '⃐', '⃜', '⃥', '⃰', '⳯', '⳱', 'ⷠ', 'ⷿ', '〪', '〭', '゙', '゚', 'ꙴ', '꙽', 'ꚞ', 'ꚟ', '꛰', '꛱', 'ꠥ', 'ꠦ', '꣄', 'ꣅ', '꣠', '꣱', 'ꤦ', '꤭', 'ꥇ', 'ꥑ', 'ꦀ', 'ꦂ', 'ꦶ', 'ꦹ', 'ꨩ', 'ꨮ', 'ꨱ', 'ꨲ', 'ꨵ', 'ꨶ', 'ꪲ', 'ꪴ', 'ꪷ', 'ꪸ', 'ꪾ', '꪿', 'ꫬ', 'ꫭ', '︀', '️', '︠', '︯'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Nd",
			pos:  position{line: 1505, col: 1, offset: 55871},
			expr: &charClassMatcher{
				pos:        position{line: 1505, col: 6, offset: 55876},
				val:        "[\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]",
				ranges:     []rune{'0', '9', '٠', '٩', '۰', '۹', '߀', '߉', '०', '९', '০', '৯', '੦', '੯', '૦', '૯', '୦', '୯', '௦', '௯', '౦', '౯', '೦', '೯', '൦', '൯', '෦', '෯', '๐', '๙', '໐', '໙', '༠', '༩', '၀', '၉', '႐', '႙', '០', '៩', '᠐', '᠙', '᥆', '᥏', '᧐', '᧙', '᪀', '᪉', '᪐', '᪙', '᭐', '᭙', '᮰', '᮹', '᱀', '᱉', '᱐', '᱙', '꘠', '꘩', '꣐', '꣙', '꤀', '꤉', '꧐', '꧙', '꧰', '꧹', '꩐', '꩙', '꯰', '꯹', '０', '９'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Nl",
			pos:  position{line: 1508, col: 1, offset: 56379},
			expr: &charClassMatcher{
				pos:        position{line: 1508, col: 6, offset: 56384},
				val:        "[\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]",
				chars:      []rune{'〇'},
				ranges:     []rune{'ᛮ', 'ᛰ', 'Ⅰ', 'ↂ', 'ↅ', 'ↈ', '〡', '〩', '〸', '〺', 'ꛦ', 'ꛯ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Pc",
			pos:  position{line: 1511, col: 1, offset: 56498},
			expr: &charClassMatcher{
				pos:        position{line: 1511, col: 6, offset: 56503},
				val:        "[\\u005F\\u203F-\\u2040\\u2054\\uFE33-\\uFE34\\uFE4D-\\uFE4F\\uFF3F]",
				chars:      []rune{'_', '⁔', '＿'},
				ranges:     []rune{'‿', '⁀', '︳', '︴', '﹍', '﹏'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Zs",
			pos:  position{line: 1514, col: 1, offset: 56584},
			expr: &charClassMatcher{
				pos:        position{line: 1514, col: 6, offset: 56589},
				val:        "[\\u0020\\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]",
				chars:      []rune{' ', '\u00a0', '\u1680', '\u202f', '\u205f', '\u3000'},
				ranges:     []rune{'\u2000', '\u200a'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1516, col: 1, offset: 56642},
			expr: &anyMatcher{
				line: 1517, col: 5, offset: 56662,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1519, col: 1, offset: 56665},
			expr: &choiceExpr{
				pos: position{line: 1520, col: 5, offset: 56693},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1520, col: 5, offset: 56693},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1521, col: 5, offset: 56702},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1522, col: 5, offset: 56711},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1523, col: 5, offset: 56720},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1524, col: 5, offset: 56728},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1525, col: 5, offset: 56741},
						val:        "\ufeff",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 5, offset: 56754},
						name: "Zs",
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1528, col: 1, offset: 56758},
			expr: &charClassMatcher{
				pos:        position{line: 1529, col: 5, offset: 56777},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1535, col: 1, offset: 57107},
			expr: &ruleRefExpr{
				pos:  position{line: 1538, col: 5, offset: 57178},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1540, col: 1, offset: 57197},
			expr: &seqExpr{
				pos: position{line: 1541, col: 5, offset: 57218},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1541, col: 5, offset: 57218},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1541, col: 10, offset: 57223},
						expr: &seqExpr{
							pos: position{line: 1541, col: 11, offset: 57224},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1541, col: 11, offset: 57224},
									expr: &litMatcher{
										pos:        position{line: 1541, col: 12, offset: 57225},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1541, col: 17, offset: 57230},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1541, col: 35, offset: 57248},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1543, col: 1, offset: 57254},
			expr: &seqExpr{
				pos: position{line: 1544, col: 5, offset: 57276},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1544, col: 5, offset: 57276},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1544, col: 10, offset: 57281},
						expr: &seqExpr{
							pos: position{line: 1544, col: 11, offset: 57282},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1544, col: 11, offset: 57282},
									expr: &ruleRefExpr{
										pos:  position{line: 1544, col: 12, offset: 57283},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1544, col: 27, offset: 57298},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1546, col: 1, offset: 57317},
			expr: &seqExpr{
				pos: position{line: 1546, col: 7, offset: 57323},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1546, col: 7, offset: 57323},
						expr: &ruleRefExpr{
							pos:  position{line: 1546, col: 7, offset: 57323},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1546, col: 19, offset: 57335},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1548, col: 1, offset: 57351},
			expr: &choiceExpr{
				pos: position{line: 1548, col: 7, offset: 57357},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1548, col: 7, offset: 57357},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1548, col: 11, offset: 57361},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1550, col: 1, offset: 57366},
			expr: &notExpr{
				pos: position{line: 1550, col: 7, offset: 57372},
				expr: &anyMatcher{
					line: 1550, col: 8, offset: 57373,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1552, col: 1, offset: 57376},
			expr: &notExpr{
				pos: position{line: 1552, col: 8, offset: 57383},
				expr: &ruleRefExpr{
					pos:  position{line: 1552, col: 9, offset: 57384},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOpDecl1(name, params, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "OpDecl",

		"name": name,

		"params": params,

		"body": body}, nil

}

func (p *parser) callonOpDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDecl1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key, method, headers, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "HTTP",

		"url": url,

		"format": format,

		"sort_key": sort_key,

		"method": method,

		"headers": headers,

		"body": body}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"], stack["method"], stack["headers"], stack["body"])
}

func (c *current) onMethodArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonMethodArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodArg1(stack["v"])
}

func (c *current) onHeadersArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonHeadersArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadersArg1(stack["v"])
}

func (c *current) onBodyArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonBodyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBodyArg1(stack["v"])
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "QuotedString", "text": v}, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": string(c.text)}, nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName4() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName4()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "QuotedString", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolName12(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName12(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
