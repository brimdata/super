// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 12, offset: 1037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 15, offset: 1040},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 19, offset: 1044},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 29, offset: 1054},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 29, offset: 1054},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 34, offset: 1059},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 37, offset: 1062},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1159},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1159},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1168},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1170},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1175},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1180},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1182},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1186},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1192},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1192},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1203},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1206},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1311},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1311},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1320},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1323},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1327},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1333},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1333},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1344},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1347},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1451},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1451},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1458},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1461},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1465},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1472},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1472},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1481},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1484},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1575},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1578},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1591},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1591},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1593},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 20, offset: 1606},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 21, offset: 1607},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1637},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1637},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 54, col: 5, offset: 1637},
									expr: &seqExpr{
										pos: position{line: 54, col: 7, offset: 1639},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 54, col: 7, offset: 1639},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 54, col: 16, offset: 1648},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 54, col: 25, offset: 1657},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 27, offset: 1659},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 39, offset: 1671},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 40, offset: 1672},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1703},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 55, col: 5, offset: 1703},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 55, col: 14, offset: 1712},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 55, col: 16, offset: 1714},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 21, offset: 1719},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1818},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1818},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 10, offset: 1823},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 1922},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1922},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 10, offset: 1927},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2015},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 64, col: 5, offset: 2015},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 10, offset: 2020},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 68, col: 1, offset: 2107},
			expr: &seqExpr{
				pos: position{line: 68, col: 11, offset: 2117},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2117},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 68, col: 15, offset: 2121},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 68, col: 15, offset: 2121},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 22, offset: 2128},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 68, col: 43, offset: 2149},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 68, col: 50, offset: 2156},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 56, offset: 2162},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 69, col: 1, offset: 2167},
			expr: &seqExpr{
				pos: position{line: 69, col: 8, offset: 2174},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 69, col: 8, offset: 2174},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 69, col: 12, offset: 2178},
						expr: &choiceExpr{
							pos: position{line: 69, col: 14, offset: 2180},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 69, col: 14, offset: 2180},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 69, col: 20, offset: 2186},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 71, col: 1, offset: 2192},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 2200},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 72, col: 5, offset: 2200},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 72, col: 5, offset: 2200},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 72, col: 8, offset: 2203},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 13, offset: 2208},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 16, offset: 2211},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 18, offset: 2213},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 74, col: 1, offset: 2243},
			expr: &actionExpr{
				pos: position{line: 75, col: 5, offset: 2257},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 75, col: 5, offset: 2257},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 75, col: 5, offset: 2257},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 8, offset: 2260},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 13, offset: 2265},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 18, offset: 2270},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 75, col: 21, offset: 2273},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 26, offset: 2278},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 29, offset: 2281},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 34, offset: 2286},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 79, col: 1, offset: 2375},
			expr: &choiceExpr{
				pos: position{line: 80, col: 5, offset: 2384},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2384},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2384},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 80, col: 5, offset: 2384},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 12, offset: 2391},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 80, col: 14, offset: 2393},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 19, offset: 2398},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2428},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 81, col: 5, offset: 2428},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 83, col: 1, offset: 2459},
			expr: &choiceExpr{
				pos: position{line: 84, col: 5, offset: 2471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2471},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2471},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 84, col: 5, offset: 2471},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 8, offset: 2474},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 15, offset: 2481},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 24, offset: 2490},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 28, offset: 2494},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 32, offset: 2498},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2609},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 87, col: 5, offset: 2609},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 87, col: 5, offset: 2609},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 87, col: 8, offset: 2612},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 15, offset: 2619},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 91, col: 1, offset: 2727},
			expr: &actionExpr{
				pos: position{line: 92, col: 5, offset: 2740},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 92, col: 5, offset: 2740},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2740},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 9, offset: 2744},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 20, offset: 2755},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 92, col: 23, offset: 2758},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 94, col: 1, offset: 2784},
			expr: &choiceExpr{
				pos: position{line: 95, col: 5, offset: 2799},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2799},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2808},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 2816},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 2825},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 100, col: 1, offset: 2835},
			expr: &seqExpr{
				pos: position{line: 100, col: 13, offset: 2847},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 100, col: 13, offset: 2847},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 100, col: 17, offset: 2851},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 100, col: 18, offset: 2852},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 100, col: 18, offset: 2852},
										expr: &litMatcher{
											pos:        position{line: 100, col: 19, offset: 2853},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 24, offset: 2858},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 38, offset: 2872},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 57, offset: 2891},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 100, col: 82, offset: 2916},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 88, offset: 2922},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 94, offset: 2928},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 100, offset: 2934},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 102, col: 1, offset: 2940},
			expr: &actionExpr{
				pos: position{line: 102, col: 14, offset: 2953},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 102, col: 15, offset: 2954},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 15, offset: 2954},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 22, offset: 2961},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 102, col: 30, offset: 2969},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 102, col: 30, offset: 2969},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 102, col: 35, offset: 2974},
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 36, offset: 2975},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 102, col: 54, offset: 2993},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 61, offset: 3000},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 67, offset: 3006},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 74, offset: 3013},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 104, col: 1, offset: 3050},
			expr: &actionExpr{
				pos: position{line: 105, col: 5, offset: 3068},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 105, col: 5, offset: 3068},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3068},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 11, offset: 3074},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 21, offset: 3084},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 26, offset: 3089},
								expr: &ruleRefExpr{
									pos:  position{line: 105, col: 26, offset: 3089},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 109, col: 1, offset: 3163},
			expr: &actionExpr{
				pos: position{line: 109, col: 16, offset: 3178},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 109, col: 16, offset: 3178},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 109, col: 16, offset: 3178},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 18, offset: 3180},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 26, offset: 3188},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 109, col: 28, offset: 3190},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 30, offset: 3192},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 111, col: 1, offset: 3242},
			expr: &actionExpr{
				pos: position{line: 112, col: 5, offset: 3256},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 112, col: 5, offset: 3256},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 3256},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 11, offset: 3262},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 5, offset: 3279},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 10, offset: 3284},
								expr: &actionExpr{
									pos: position{line: 113, col: 11, offset: 3285},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 113, col: 11, offset: 3285},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 113, col: 11, offset: 3285},
												expr: &seqExpr{
													pos: position{line: 113, col: 12, offset: 3286},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 113, col: 12, offset: 3286},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 14, offset: 3288},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 113, col: 25, offset: 3299},
												name: "_",
											},
											&notExpr{
												pos: position{line: 113, col: 27, offset: 3301},
												expr: &choiceExpr{
													pos: position{line: 113, col: 29, offset: 3303},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 113, col: 29, offset: 3303},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 39, offset: 3313},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 113, col: 59, offset: 3333},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 113, col: 64, offset: 3338},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 117, col: 1, offset: 3454},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3477},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 118, col: 5, offset: 3477},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 118, col: 5, offset: 3477},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 118, col: 14, offset: 3486},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 119, col: 5, offset: 3493},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 119, col: 5, offset: 3493},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 119, col: 10, offset: 3498},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 121, col: 1, offset: 3502},
			expr: &choiceExpr{
				pos: position{line: 122, col: 5, offset: 3519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 122, col: 5, offset: 3519},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 122, col: 5, offset: 3519},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 122, col: 6, offset: 3520},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 122, col: 6, offset: 3520},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 122, col: 6, offset: 3520},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 15, offset: 3529},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 122, col: 19, offset: 3533},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 122, col: 19, offset: 3533},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 23, offset: 3537},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 122, col: 27, offset: 3541},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 122, col: 29, offset: 3543},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 3655},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 125, col: 5, offset: 3655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 125, col: 5, offset: 3655},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 9, offset: 3659},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 125, col: 12, offset: 3662},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 17, offset: 3667},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 31, offset: 3681},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 125, col: 34, offset: 3684},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3713},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 128, col: 1, offset: 3725},
			expr: &choiceExpr{
				pos: position{line: 129, col: 5, offset: 3740},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 129, col: 5, offset: 3740},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 130, col: 5, offset: 3749},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 131, col: 5, offset: 3760},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 131, col: 5, offset: 3760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 131, col: 5, offset: 3760},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 7, offset: 3762},
										name: "SearchValue",
									},
								},
								&andExpr{
									pos: position{line: 131, col: 19, offset: 3774},
									expr: &seqExpr{
										pos: position{line: 131, col: 21, offset: 3776},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 131, col: 21, offset: 3776},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 131, col: 23, offset: 3778},
												name: "Glob",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3889},
						run: (*parser).callonSearchExpr12,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3889},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 134, col: 5, offset: 3889},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 7, offset: 3891},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 134, col: 19, offset: 3903},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 20, offset: 3904},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4019},
						run: (*parser).callonSearchExpr18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4019},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 5, offset: 4019},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 137, col: 9, offset: 4023},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 10, offset: 4024},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 5, offset: 4140},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 142, col: 1, offset: 4157},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 4177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4177},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4177},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4177},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 9, offset: 4181},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 22, offset: 4194},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 25, offset: 4197},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 28, offset: 4200},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 39, offset: 4211},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 42, offset: 4214},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 46, offset: 4218},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 6, offset: 4341},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 146, col: 6, offset: 4341},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 6, offset: 4341},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 12, offset: 4347},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 146, col: 21, offset: 4356},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 146, col: 26, offset: 4361},
										expr: &ruleRefExpr{
											pos:  position{line: 146, col: 27, offset: 4362},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 150, col: 1, offset: 4434},
			expr: &choiceExpr{
				pos: position{line: 151, col: 5, offset: 4450},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 151, col: 5, offset: 4450},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4462},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4462},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 152, col: 5, offset: 4462},
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 6, offset: 4463},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 152, col: 20, offset: 4477},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 22, offset: 4479},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 156, col: 1, offset: 4587},
			expr: &actionExpr{
				pos: position{line: 157, col: 5, offset: 4596},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 157, col: 5, offset: 4596},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 157, col: 13, offset: 4604},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 161, col: 1, offset: 4700},
			expr: &actionExpr{
				pos: position{line: 162, col: 5, offset: 4711},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 162, col: 5, offset: 4711},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 162, col: 13, offset: 4719},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 168, col: 1, offset: 4845},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 4861},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4861},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4861},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 169, col: 5, offset: 4861},
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 5, offset: 4861},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 16, offset: 4872},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 21, offset: 4877},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 33, offset: 4889},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 39, offset: 4895},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 5021},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 172, col: 5, offset: 5021},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 172, col: 5, offset: 5021},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 5, offset: 5021},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 16, offset: 5032},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 21, offset: 5037},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 36, offset: 5052},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 172, col: 41, offset: 5057},
										expr: &seqExpr{
											pos: position{line: 172, col: 42, offset: 5058},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 172, col: 42, offset: 5058},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 172, col: 44, offset: 5060},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 58, offset: 5074},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 64, offset: 5080},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 180, col: 1, offset: 5294},
			expr: &seqExpr{
				pos: position{line: 180, col: 13, offset: 5306},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 180, col: 13, offset: 5306},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 25, offset: 5318},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 182, col: 1, offset: 5321},
			expr: &actionExpr{
				pos: position{line: 183, col: 5, offset: 5337},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 183, col: 5, offset: 5337},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 183, col: 5, offset: 5337},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 13, offset: 5345},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 15, offset: 5347},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 23, offset: 5355},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 185, col: 1, offset: 5396},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5409},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5409},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5409},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 186, col: 5, offset: 5409},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 186, col: 7, offset: 5411},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 14, offset: 5418},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 186, col: 16, offset: 5420},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 25, offset: 5429},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 27, offset: 5431},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 33, offset: 5437},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5468},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 187, col: 5, offset: 5468},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 192, col: 1, offset: 5728},
			expr: &choiceExpr{
				pos: position{line: 193, col: 5, offset: 5747},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 5747},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5762},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 194, col: 5, offset: 5762},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 10, offset: 5767},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 196, col: 1, offset: 5859},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5879},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 197, col: 5, offset: 5879},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 5879},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 11, offset: 5885},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 26, offset: 5900},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 197, col: 31, offset: 5905},
								expr: &actionExpr{
									pos: position{line: 197, col: 32, offset: 5906},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 197, col: 32, offset: 5906},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 197, col: 32, offset: 5906},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 197, col: 35, offset: 5909},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 197, col: 39, offset: 5913},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 197, col: 42, offset: 5916},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 197, col: 47, offset: 5921},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 201, col: 1, offset: 6043},
			expr: &choiceExpr{
				pos: position{line: 202, col: 5, offset: 6061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6061},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 202, col: 5, offset: 6061},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 202, col: 5, offset: 6061},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 10, offset: 6066},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 15, offset: 6071},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 202, col: 18, offset: 6074},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 23, offset: 6079},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 202, col: 26, offset: 6082},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 30, offset: 6086},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 6190},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 205, col: 5, offset: 6190},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 9, offset: 6194},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 209, col: 1, offset: 6294},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6302},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6302},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 210, col: 5, offset: 6302},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 6, offset: 6303},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 16, offset: 6313},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 19, offset: 6316},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 27, offset: 6324},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 210, col: 30, offset: 6327},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 34, offset: 6331},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 37, offset: 6334},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 42, offset: 6339},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 42, offset: 6339},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 49, offset: 6346},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 210, col: 52, offset: 6349},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 210, col: 56, offset: 6353},
							expr: &seqExpr{
								pos: position{line: 210, col: 58, offset: 6355},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 210, col: 58, offset: 6355},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 210, col: 61, offset: 6358},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 66, offset: 6363},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 72, offset: 6369},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 72, offset: 6369},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 218, col: 1, offset: 6559},
			expr: &choiceExpr{
				pos: position{line: 219, col: 5, offset: 6571},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 5, offset: 6571},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 5, offset: 6590},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 5, offset: 6603},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 223, col: 1, offset: 6612},
			expr: &actionExpr{
				pos: position{line: 223, col: 15, offset: 6626},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 223, col: 15, offset: 6626},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 223, col: 15, offset: 6626},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 6628},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 25, offset: 6636},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 27, offset: 6638},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 32, offset: 6643},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 225, col: 1, offset: 6679},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 6698},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 6698},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6698},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 11, offset: 6704},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 6718},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 30, offset: 6723},
								expr: &seqExpr{
									pos: position{line: 226, col: 31, offset: 6724},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 226, col: 31, offset: 6724},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 226, col: 34, offset: 6727},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 226, col: 38, offset: 6731},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 226, col: 41, offset: 6734},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 236, col: 1, offset: 6970},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 6983},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6983},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6996},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7008},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 7020},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 7033},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 7046},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7059},
						name: "WhereProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7073},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7086},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7098},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7113},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7126},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7140},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7153},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7168},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7180},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7193},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7206},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7222},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7234},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7248},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7261},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 260, col: 1, offset: 7272},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 7285},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 7285},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 261, col: 5, offset: 7285},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 261, col: 12, offset: 7292},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 17, offset: 7297},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 26, offset: 7306},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 261, col: 31, offset: 7311},
								expr: &actionExpr{
									pos: position{line: 261, col: 32, offset: 7312},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 261, col: 32, offset: 7312},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 261, col: 32, offset: 7312},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 261, col: 34, offset: 7314},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 261, col: 36, offset: 7316},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 275, col: 1, offset: 7735},
			expr: &actionExpr{
				pos: position{line: 275, col: 12, offset: 7746},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 275, col: 12, offset: 7746},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 275, col: 17, offset: 7751},
						expr: &actionExpr{
							pos: position{line: 275, col: 18, offset: 7752},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 275, col: 18, offset: 7752},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 275, col: 18, offset: 7752},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 275, col: 20, offset: 7754},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 22, offset: 7756},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 277, col: 1, offset: 7812},
			expr: &choiceExpr{
				pos: position{line: 278, col: 5, offset: 7824},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 278, col: 5, offset: 7824},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 278, col: 5, offset: 7824},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 279, col: 5, offset: 7899},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 279, col: 5, offset: 7899},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 279, col: 5, offset: 7899},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 279, col: 14, offset: 7908},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 279, col: 16, offset: 7910},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 279, col: 23, offset: 7917},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 279, col: 24, offset: 7918},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 279, col: 24, offset: 7918},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 279, col: 34, offset: 7928},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 281, col: 1, offset: 8042},
			expr: &actionExpr{
				pos: position{line: 282, col: 5, offset: 8054},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 282, col: 5, offset: 8054},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 282, col: 5, offset: 8054},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 282, col: 11, offset: 8060},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 282, col: 17, offset: 8066},
								expr: &actionExpr{
									pos: position{line: 282, col: 18, offset: 8067},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 282, col: 18, offset: 8067},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 282, col: 18, offset: 8067},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 282, col: 20, offset: 8069},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 282, col: 22, offset: 8071},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 46, offset: 8095},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 282, col: 52, offset: 8101},
								expr: &seqExpr{
									pos: position{line: 282, col: 53, offset: 8102},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 282, col: 53, offset: 8102},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 282, col: 55, offset: 8104},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 66, offset: 8115},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 282, col: 73, offset: 8122},
								expr: &actionExpr{
									pos: position{line: 282, col: 74, offset: 8123},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 282, col: 74, offset: 8123},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 282, col: 74, offset: 8123},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 282, col: 76, offset: 8125},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 282, col: 78, offset: 8127},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 296, col: 1, offset: 8472},
			expr: &actionExpr{
				pos: position{line: 297, col: 5, offset: 8484},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 297, col: 5, offset: 8484},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 5, offset: 8484},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 11, offset: 8490},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 13, offset: 8492},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 18, offset: 8497},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 301, col: 1, offset: 8592},
			expr: &actionExpr{
				pos: position{line: 302, col: 5, offset: 8605},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 302, col: 5, offset: 8605},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 8605},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 12, offset: 8612},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 14, offset: 8614},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 19, offset: 8619},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 306, col: 1, offset: 8710},
			expr: &choiceExpr{
				pos: position{line: 307, col: 5, offset: 8723},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8723},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 307, col: 5, offset: 8723},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 307, col: 5, offset: 8723},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 307, col: 12, offset: 8730},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 307, col: 14, offset: 8732},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 307, col: 20, offset: 8738},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 8818},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 308, col: 5, offset: 8818},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 310, col: 1, offset: 8893},
			expr: &choiceExpr{
				pos: position{line: 311, col: 5, offset: 8906},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 8906},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 311, col: 5, offset: 8906},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 311, col: 5, offset: 8906},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 12, offset: 8913},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 311, col: 14, offset: 8915},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 20, offset: 8921},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 9001},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 312, col: 5, offset: 9001},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereProc",
			pos:  position{line: 314, col: 1, offset: 9076},
			expr: &actionExpr{
				pos: position{line: 315, col: 5, offset: 9090},
				run: (*parser).callonWhereProc1,
				expr: &seqExpr{
					pos: position{line: 315, col: 5, offset: 9090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 5, offset: 9090},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 13, offset: 9098},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 15, offset: 9100},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 20, offset: 9105},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 319, col: 1, offset: 9191},
			expr: &choiceExpr{
				pos: position{line: 320, col: 5, offset: 9204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 9204},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 320, col: 5, offset: 9204},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 320, col: 5, offset: 9204},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 320, col: 12, offset: 9211},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 320, col: 14, offset: 9213},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 323, col: 5, offset: 9302},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 323, col: 5, offset: 9302},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 327, col: 1, offset: 9391},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 9403},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 9403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 328, col: 5, offset: 9403},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 11, offset: 9409},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 13, offset: 9411},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 18, offset: 9416},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 332, col: 1, offset: 9507},
			expr: &actionExpr{
				pos: position{line: 333, col: 5, offset: 9522},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 333, col: 5, offset: 9522},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 5, offset: 9522},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 14, offset: 9531},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 16, offset: 9533},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 22, offset: 9539},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 33, offset: 9550},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 333, col: 38, offset: 9555},
								expr: &actionExpr{
									pos: position{line: 333, col: 39, offset: 9556},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 333, col: 39, offset: 9556},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 333, col: 39, offset: 9556},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 333, col: 42, offset: 9559},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 333, col: 46, offset: 9563},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 333, col: 49, offset: 9566},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 52, offset: 9569},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 341, col: 1, offset: 9978},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 9991},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 9991},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 5, offset: 9991},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 342, col: 12, offset: 9998},
							expr: &seqExpr{
								pos: position{line: 342, col: 14, offset: 10000},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 342, col: 14, offset: 10000},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 342, col: 17, offset: 10003},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 346, col: 1, offset: 10074},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 10088},
				run: (*parser).callonShapeProc1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 10088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 5, offset: 10088},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 347, col: 13, offset: 10096},
							expr: &seqExpr{
								pos: position{line: 347, col: 15, offset: 10098},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 347, col: 15, offset: 10098},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 347, col: 18, offset: 10101},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 351, col: 1, offset: 10173},
			expr: &choiceExpr{
				pos: position{line: 352, col: 5, offset: 10186},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10186},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10186},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 352, col: 5, offset: 10186},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 11, offset: 10192},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 352, col: 21, offset: 10202},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 28, offset: 10209},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 30, offset: 10211},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 33, offset: 10214},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 352, col: 35, offset: 10216},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 43, offset: 10224},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 51, offset: 10232},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 352, col: 54, offset: 10235},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 58, offset: 10239},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 352, col: 61, offset: 10242},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 70, offset: 10251},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 352, col: 78, offset: 10259},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 352, col: 86, offset: 10267},
										expr: &seqExpr{
											pos: position{line: 352, col: 87, offset: 10268},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 352, col: 87, offset: 10268},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 352, col: 89, offset: 10270},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10536},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10536},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 359, col: 5, offset: 10536},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 11, offset: 10542},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 359, col: 22, offset: 10553},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 29, offset: 10560},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 31, offset: 10562},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 34, offset: 10565},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 359, col: 36, offset: 10567},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 40, offset: 10571},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 359, col: 48, offset: 10579},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 359, col: 56, offset: 10587},
										expr: &seqExpr{
											pos: position{line: 359, col: 57, offset: 10588},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 359, col: 57, offset: 10588},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 359, col: 59, offset: 10590},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 367, col: 1, offset: 10844},
			expr: &choiceExpr{
				pos: position{line: 368, col: 5, offset: 10858},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10858},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10858},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10858},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 12, offset: 10865},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10895},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 10895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 369, col: 5, offset: 10895},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 369, col: 13, offset: 10903},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10933},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10933},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10933},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 13, offset: 10941},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10970},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 371, col: 5, offset: 10970},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 371, col: 5, offset: 10970},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 371, col: 13, offset: 10978},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 11008},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 372, col: 5, offset: 11008},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 374, col: 1, offset: 11044},
			expr: &choiceExpr{
				pos: position{line: 375, col: 5, offset: 11056},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 375, col: 5, offset: 11056},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 376, col: 5, offset: 11065},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 376, col: 5, offset: 11065},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 376, col: 5, offset: 11065},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 376, col: 9, offset: 11069},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 376, col: 14, offset: 11074},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 376, col: 19, offset: 11079},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 378, col: 1, offset: 11105},
			expr: &actionExpr{
				pos: position{line: 379, col: 5, offset: 11120},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 379, col: 5, offset: 11120},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 5, offset: 11120},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 379, col: 14, offset: 11129},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 16, offset: 11131},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 421, col: 1, offset: 12625},
			expr: &actionExpr{
				pos: position{line: 422, col: 5, offset: 12642},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 422, col: 5, offset: 12642},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 422, col: 7, offset: 12644},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 426, col: 1, offset: 12744},
			expr: &choiceExpr{
				pos: position{line: 427, col: 5, offset: 12759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12759},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 427, col: 5, offset: 12759},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 427, col: 5, offset: 12759},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 427, col: 7, offset: 12761},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 427, col: 12, offset: 12766},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 428, col: 5, offset: 12795},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 428, col: 5, offset: 12795},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 430, col: 1, offset: 12866},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 12879},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 431, col: 5, offset: 12879},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 431, col: 12, offset: 12886},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 435, col: 1, offset: 13042},
			expr: &choiceExpr{
				pos: position{line: 436, col: 5, offset: 13054},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 436, col: 5, offset: 13054},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 5, offset: 13063},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 5, offset: 13071},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 440, col: 1, offset: 13077},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 13086},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 13086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 5, offset: 13086},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 441, col: 12, offset: 13093},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 14, offset: 13095},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 19, offset: 13100},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 24, offset: 13105},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 31, offset: 13112},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 31, offset: 13112},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 42, offset: 13123},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 49, offset: 13130},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 49, offset: 13130},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 445, col: 1, offset: 13259},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13268},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13268},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 446, col: 5, offset: 13268},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 12, offset: 13275},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 446, col: 14, offset: 13277},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 19, offset: 13282},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 448, col: 1, offset: 13313},
			expr: &actionExpr{
				pos: position{line: 449, col: 5, offset: 13322},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 449, col: 5, offset: 13322},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 449, col: 5, offset: 13322},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 449, col: 12, offset: 13329},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 14, offset: 13331},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 19, offset: 13336},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 451, col: 1, offset: 13367},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 13380},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 452, col: 5, offset: 13380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 13380},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 10, offset: 13385},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 19, offset: 13394},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 452, col: 22, offset: 13397},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 22, offset: 13397},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 30, offset: 13405},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 452, col: 35, offset: 13410},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 35, offset: 13410},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 46, offset: 13421},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 452, col: 52, offset: 13427},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 52, offset: 13427},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 456, col: 1, offset: 13563},
			expr: &actionExpr{
				pos: position{line: 457, col: 5, offset: 13571},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 457, col: 5, offset: 13571},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 5, offset: 13571},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 11, offset: 13577},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 457, col: 13, offset: 13579},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 17, offset: 13583},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 457, col: 21, offset: 13587},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 457, col: 28, offset: 13594},
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 28, offset: 13594},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 457, col: 39, offset: 13605},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 457, col: 46, offset: 13612},
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 46, offset: 13612},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 461, col: 1, offset: 13738},
			expr: &actionExpr{
				pos: position{line: 461, col: 7, offset: 13744},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 461, col: 7, offset: 13744},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 461, col: 8, offset: 13745},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 461, col: 8, offset: 13745},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 461, col: 18, offset: 13755},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 28, offset: 13765},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 463, col: 1, offset: 13802},
			expr: &choiceExpr{
				pos: position{line: 464, col: 5, offset: 13811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 13811},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 464, col: 5, offset: 13811},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 7, offset: 13813},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13848},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 465, col: 5, offset: 13848},
							expr: &charClassMatcher{
								pos:        position{line: 465, col: 5, offset: 13848},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 468, col: 1, offset: 13953},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 13964},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 13964},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 469, col: 5, offset: 13964},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 469, col: 7, offset: 13966},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 12, offset: 13971},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 14, offset: 13973},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 17, offset: 13976},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 472, col: 1, offset: 14042},
			expr: &actionExpr{
				pos: position{line: 472, col: 9, offset: 14050},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 472, col: 9, offset: 14050},
					expr: &charClassMatcher{
						pos:        position{line: 472, col: 10, offset: 14051},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 474, col: 1, offset: 14097},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 14111},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 14111},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 475, col: 5, offset: 14111},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 475, col: 7, offset: 14113},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 15, offset: 14121},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 475, col: 17, offset: 14123},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 23, offset: 14129},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 31, offset: 14137},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 475, col: 33, offset: 14139},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 38, offset: 14144},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 475, col: 40, offset: 14146},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 46, offset: 14152},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 479, col: 1, offset: 14257},
			expr: &choiceExpr{
				pos: position{line: 480, col: 5, offset: 14270},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 480, col: 5, offset: 14270},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 480, col: 5, offset: 14270},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 480, col: 5, offset: 14270},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 10, offset: 14275},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 480, col: 19, offset: 14284},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 480, col: 26, offset: 14291},
										expr: &ruleRefExpr{
											pos:  position{line: 480, col: 26, offset: 14291},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 480, col: 38, offset: 14303},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 480, col: 43, offset: 14308},
										expr: &ruleRefExpr{
											pos:  position{line: 480, col: 43, offset: 14308},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 483, col: 5, offset: 14417},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 483, col: 5, offset: 14417},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 10, offset: 14422},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 487, col: 1, offset: 14523},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 14538},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 14538},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 5, offset: 14538},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 488, col: 9, offset: 14542},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 16, offset: 14549},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 490, col: 1, offset: 14582},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 14595},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 14595},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 5, offset: 14595},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 491, col: 9, offset: 14599},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 14, offset: 14604},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 493, col: 1, offset: 14641},
			expr: &choiceExpr{
				pos: position{line: 494, col: 5, offset: 14654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 494, col: 5, offset: 14654},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 495, col: 5, offset: 14673},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 5, offset: 14683},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 498, col: 1, offset: 14697},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 14716},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 14716},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 499, col: 6, offset: 14717},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 499, col: 6, offset: 14717},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 499, col: 24, offset: 14735},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 499, col: 29, offset: 14740},
							expr: &choiceExpr{
								pos: position{line: 499, col: 30, offset: 14741},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 499, col: 30, offset: 14741},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 499, col: 47, offset: 14758},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 501, col: 1, offset: 14797},
			expr: &actionExpr{
				pos: position{line: 502, col: 5, offset: 14811},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 502, col: 5, offset: 14811},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 502, col: 5, offset: 14811},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 502, col: 7, offset: 14813},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 15, offset: 14821},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 502, col: 17, offset: 14823},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 22, offset: 14828},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 33, offset: 14839},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 39, offset: 14845},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 506, col: 1, offset: 14955},
			expr: &actionExpr{
				pos: position{line: 507, col: 5, offset: 14969},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 507, col: 5, offset: 14969},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 507, col: 5, offset: 14969},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 507, col: 7, offset: 14971},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 507, col: 16, offset: 14980},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 507, col: 18, offset: 14982},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 22, offset: 14986},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 509, col: 1, offset: 15022},
			expr: &choiceExpr{
				pos: position{line: 510, col: 5, offset: 15038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15038},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 510, col: 5, offset: 15038},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 15072},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 511, col: 5, offset: 15072},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 512, col: 5, offset: 15108},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 512, col: 5, offset: 15108},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 514, col: 1, offset: 15134},
			expr: &choiceExpr{
				pos: position{line: 515, col: 5, offset: 15147},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15147},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 515, col: 5, offset: 15147},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 515, col: 5, offset: 15147},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 7, offset: 15149},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 15, offset: 15157},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 17, offset: 15159},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 516, col: 5, offset: 15192},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 516, col: 5, offset: 15192},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 516, col: 5, offset: 15192},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 516, col: 7, offset: 15194},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 516, col: 15, offset: 15202},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 516, col: 17, offset: 15204},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 518, col: 1, offset: 15236},
			expr: &actionExpr{
				pos: position{line: 519, col: 5, offset: 15249},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 519, col: 5, offset: 15249},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 525, col: 1, offset: 15443},
			expr: &actionExpr{
				pos: position{line: 526, col: 5, offset: 15459},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 526, col: 5, offset: 15459},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 526, col: 5, offset: 15459},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 526, col: 15, offset: 15469},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 17, offset: 15471},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 22, offset: 15476},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 28, offset: 15482},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 32, offset: 15486},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 40, offset: 15494},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 526, col: 43, offset: 15497},
								expr: &ruleRefExpr{
									pos:  position{line: 526, col: 43, offset: 15497},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 530, col: 1, offset: 15609},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15623},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 5, offset: 15623},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 531, col: 13, offset: 15631},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 15, offset: 15633},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 20, offset: 15638},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 535, col: 1, offset: 15719},
			expr: &choiceExpr{
				pos: position{line: 536, col: 5, offset: 15732},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 15732},
						run: (*parser).callonOverProc2,
						expr: &labeledExpr{
							pos:   position{line: 536, col: 5, offset: 15732},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 10, offset: 15737},
								name: "ScopedOver",
							},
						},
					},
					&actionExpr{
						pos: position{line: 539, col: 5, offset: 15842},
						run: (*parser).callonOverProc5,
						expr: &seqExpr{
							pos: position{line: 539, col: 5, offset: 15842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 539, col: 5, offset: 15842},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 539, col: 12, offset: 15849},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 539, col: 14, offset: 15851},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 539, col: 20, offset: 15857},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 543, col: 1, offset: 15965},
			expr: &actionExpr{
				pos: position{line: 544, col: 5, offset: 15980},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 544, col: 5, offset: 15980},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 5, offset: 15980},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 544, col: 12, offset: 15987},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 544, col: 14, offset: 15989},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 20, offset: 15995},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 26, offset: 16001},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 29, offset: 16004},
								name: "As",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 544, col: 32, offset: 16007},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 544, col: 35, offset: 16010},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 41, offset: 16016},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "OverWith",
			pos:  position{line: 548, col: 1, offset: 16126},
			expr: &actionExpr{
				pos: position{line: 549, col: 5, offset: 16139},
				run: (*parser).callonOverWith1,
				expr: &seqExpr{
					pos: position{line: 549, col: 5, offset: 16139},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 5, offset: 16139},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 12, offset: 16146},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 14, offset: 16148},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 20, offset: 16154},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 26, offset: 16160},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 549, col: 28, offset: 16162},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 35, offset: 16169},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 37, offset: 16171},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 44, offset: 16178},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 549, col: 59, offset: 16193},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 62, offset: 16196},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 68, offset: 16202},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "As",
			pos:  position{line: 553, col: 1, offset: 16374},
			expr: &choiceExpr{
				pos: position{line: 554, col: 5, offset: 16381},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 16381},
						run: (*parser).callonAs2,
						expr: &seqExpr{
							pos: position{line: 554, col: 5, offset: 16381},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 554, col: 5, offset: 16381},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 554, col: 7, offset: 16383},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 554, col: 12, offset: 16388},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 554, col: 14, offset: 16390},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 554, col: 17, offset: 16393},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 16431},
						run: (*parser).callonAs9,
						expr: &litMatcher{
							pos:        position{line: 555, col: 5, offset: 16431},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 557, col: 1, offset: 16454},
			expr: &choiceExpr{
				pos: position{line: 558, col: 5, offset: 16466},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 558, col: 5, offset: 16466},
						run: (*parser).callonLetProc2,
						expr: &seqExpr{
							pos: position{line: 558, col: 5, offset: 16466},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 558, col: 5, offset: 16466},
									val:        "let",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 558, col: 11, offset: 16472},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 558, col: 13, offset: 16474},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 558, col: 20, offset: 16481},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 558, col: 35, offset: 16496},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 558, col: 38, offset: 16499},
									label: "over",
									expr: &ruleRefExpr{
										pos:  position{line: 558, col: 43, offset: 16504},
										name: "ScopedOver",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 5, offset: 16612},
						name: "OverWith",
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 563, col: 1, offset: 16622},
			expr: &actionExpr{
				pos: position{line: 563, col: 9, offset: 16630},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 563, col: 9, offset: 16630},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 563, col: 9, offset: 16630},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 14, offset: 16635},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 563, col: 17, offset: 16638},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 21, offset: 16642},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 563, col: 24, offset: 16645},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 28, offset: 16649},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 39, offset: 16660},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 563, col: 42, offset: 16663},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 565, col: 1, offset: 16688},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16707},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16707},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 566, col: 5, offset: 16707},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 11, offset: 16713},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 25, offset: 16727},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 566, col: 30, offset: 16732},
								expr: &actionExpr{
									pos: position{line: 566, col: 31, offset: 16733},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 566, col: 31, offset: 16733},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 566, col: 31, offset: 16733},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 566, col: 34, offset: 16736},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 566, col: 38, offset: 16740},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 566, col: 41, offset: 16743},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 566, col: 43, offset: 16745},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 570, col: 1, offset: 16863},
			expr: &choiceExpr{
				pos: position{line: 571, col: 5, offset: 16881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 16881},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 571, col: 5, offset: 16881},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 571, col: 5, offset: 16881},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 8, offset: 16884},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 23, offset: 16899},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 571, col: 26, offset: 16902},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 30, offset: 16906},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 571, col: 33, offset: 16909},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 38, offset: 16914},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 16996},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 574, col: 5, offset: 16996},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 8, offset: 16999},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 578, col: 1, offset: 17129},
			expr: &actionExpr{
				pos: position{line: 579, col: 5, offset: 17143},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 579, col: 5, offset: 17143},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 579, col: 5, offset: 17143},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 579, col: 13, offset: 17151},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 579, col: 15, offset: 17153},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 21, offset: 17159},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 583, col: 1, offset: 17243},
			expr: &actionExpr{
				pos: position{line: 584, col: 5, offset: 17255},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 584, col: 5, offset: 17255},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 584, col: 5, offset: 17255},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 7, offset: 17257},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 10, offset: 17260},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 12, offset: 17262},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 16, offset: 17266},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 586, col: 1, offset: 17291},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 17301},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 17301},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 587, col: 5, offset: 17301},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 7, offset: 17303},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 10, offset: 17306},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 12, offset: 17308},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 16, offset: 17312},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 591, col: 1, offset: 17363},
			expr: &ruleRefExpr{
				pos:  position{line: 591, col: 8, offset: 17370},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 593, col: 1, offset: 17381},
			expr: &actionExpr{
				pos: position{line: 594, col: 5, offset: 17391},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 594, col: 5, offset: 17391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 17391},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 11, offset: 17397},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 16, offset: 17402},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 594, col: 21, offset: 17407},
								expr: &actionExpr{
									pos: position{line: 594, col: 22, offset: 17408},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 594, col: 22, offset: 17408},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 594, col: 22, offset: 17408},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 594, col: 25, offset: 17411},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 594, col: 29, offset: 17415},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 594, col: 32, offset: 17418},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 594, col: 37, offset: 17423},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 598, col: 1, offset: 17535},
			expr: &ruleRefExpr{
				pos:  position{line: 598, col: 13, offset: 17547},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 600, col: 1, offset: 17553},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 17568},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 17568},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 5, offset: 17568},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 11, offset: 17574},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 21, offset: 17584},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 601, col: 26, offset: 17589},
								expr: &seqExpr{
									pos: position{line: 601, col: 27, offset: 17590},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 601, col: 27, offset: 17590},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 601, col: 30, offset: 17593},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 601, col: 34, offset: 17597},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 601, col: 37, offset: 17600},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 611, col: 1, offset: 17799},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 17815},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 17815},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 17815},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 11, offset: 17821},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 612, col: 22, offset: 17832},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 612, col: 27, offset: 17837},
								expr: &actionExpr{
									pos: position{line: 612, col: 28, offset: 17838},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 612, col: 28, offset: 17838},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 612, col: 28, offset: 17838},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 612, col: 31, offset: 17841},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 612, col: 35, offset: 17845},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 612, col: 38, offset: 17848},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 612, col: 40, offset: 17850},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 616, col: 1, offset: 17961},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 17976},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 17976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 17976},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 9, offset: 17980},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 14, offset: 17985},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 617, col: 17, offset: 17988},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 22, offset: 17993},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 25, offset: 17996},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 29, offset: 18000},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 619, col: 1, offset: 18091},
			expr: &ruleRefExpr{
				pos:  position{line: 619, col: 8, offset: 18098},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 621, col: 1, offset: 18115},
			expr: &choiceExpr{
				pos: position{line: 622, col: 5, offset: 18135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18135},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 18135},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 18135},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 15, offset: 18145},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 29, offset: 18159},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 622, col: 32, offset: 18162},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 36, offset: 18166},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 39, offset: 18169},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 50, offset: 18180},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 55, offset: 18185},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 622, col: 58, offset: 18188},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 62, offset: 18192},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 65, offset: 18195},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 76, offset: 18206},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 5, offset: 18346},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 627, col: 1, offset: 18361},
			expr: &actionExpr{
				pos: position{line: 628, col: 5, offset: 18379},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 628, col: 5, offset: 18379},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 628, col: 5, offset: 18379},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 18385},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18404},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 10, offset: 18409},
								expr: &actionExpr{
									pos: position{line: 629, col: 11, offset: 18410},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 629, col: 11, offset: 18410},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 629, col: 11, offset: 18410},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 629, col: 14, offset: 18413},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 629, col: 17, offset: 18416},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 629, col: 25, offset: 18424},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 629, col: 28, offset: 18427},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 629, col: 33, offset: 18432},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 633, col: 1, offset: 18550},
			expr: &actionExpr{
				pos: position{line: 634, col: 5, offset: 18569},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 634, col: 5, offset: 18569},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 634, col: 5, offset: 18569},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 11, offset: 18575},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 635, col: 5, offset: 18594},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 635, col: 10, offset: 18599},
								expr: &actionExpr{
									pos: position{line: 635, col: 11, offset: 18600},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 635, col: 11, offset: 18600},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 635, col: 11, offset: 18600},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 635, col: 14, offset: 18603},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 635, col: 17, offset: 18606},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 635, col: 26, offset: 18615},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 635, col: 29, offset: 18618},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 635, col: 34, offset: 18623},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 639, col: 1, offset: 18741},
			expr: &choiceExpr{
				pos: position{line: 640, col: 5, offset: 18760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 18760},
						run: (*parser).callonComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 640, col: 5, offset: 18760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 640, col: 5, offset: 18760},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 9, offset: 18764},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 22, offset: 18777},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 640, col: 25, offset: 18780},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 28, offset: 18783},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 39, offset: 18794},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 640, col: 42, offset: 18797},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 46, offset: 18801},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 643, col: 5, offset: 18925},
						run: (*parser).callonComparisonExpr12,
						expr: &seqExpr{
							pos: position{line: 643, col: 5, offset: 18925},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 643, col: 5, offset: 18925},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 643, col: 9, offset: 18929},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 643, col: 22, offset: 18942},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 643, col: 25, offset: 18945},
									val:        "~",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 643, col: 29, offset: 18949},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 643, col: 32, offset: 18952},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 643, col: 36, offset: 18956},
										name: "Regexp",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 646, col: 5, offset: 19075},
						name: "AdditiveExpr",
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 648, col: 1, offset: 19089},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 19106},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 19106},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 19106},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 11, offset: 19112},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 19135},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 10, offset: 19140},
								expr: &actionExpr{
									pos: position{line: 650, col: 11, offset: 19141},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 650, col: 11, offset: 19141},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 650, col: 11, offset: 19141},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 650, col: 14, offset: 19144},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 650, col: 17, offset: 19147},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 650, col: 34, offset: 19164},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 650, col: 37, offset: 19167},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 650, col: 42, offset: 19172},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 654, col: 1, offset: 19294},
			expr: &actionExpr{
				pos: position{line: 654, col: 20, offset: 19313},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 654, col: 21, offset: 19314},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 654, col: 21, offset: 19314},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 654, col: 27, offset: 19320},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 656, col: 1, offset: 19357},
			expr: &actionExpr{
				pos: position{line: 657, col: 5, offset: 19380},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 657, col: 5, offset: 19380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 19380},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 11, offset: 19386},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 19398},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 10, offset: 19403},
								expr: &actionExpr{
									pos: position{line: 658, col: 11, offset: 19404},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 658, col: 11, offset: 19404},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 658, col: 11, offset: 19404},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 14, offset: 19407},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 658, col: 17, offset: 19410},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 658, col: 40, offset: 19433},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 43, offset: 19436},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 658, col: 48, offset: 19441},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 662, col: 1, offset: 19552},
			expr: &actionExpr{
				pos: position{line: 662, col: 26, offset: 19577},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 662, col: 27, offset: 19578},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 662, col: 27, offset: 19578},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 662, col: 33, offset: 19584},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 662, col: 39, offset: 19590},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 664, col: 1, offset: 19627},
			expr: &choiceExpr{
				pos: position{line: 665, col: 5, offset: 19639},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 665, col: 5, offset: 19639},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 665, col: 5, offset: 19639},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 665, col: 5, offset: 19639},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 665, col: 9, offset: 19643},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 665, col: 12, offset: 19646},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 665, col: 14, offset: 19648},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 668, col: 5, offset: 19757},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 670, col: 1, offset: 19767},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 19780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 19780},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 19780},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 671, col: 5, offset: 19780},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 19786},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 671, col: 16, offset: 19791},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 671, col: 21, offset: 19796},
										expr: &ruleRefExpr{
											pos:  position{line: 671, col: 22, offset: 19797},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19868},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 19868},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 674, col: 5, offset: 19868},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 19874},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 674, col: 20, offset: 19883},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 674, col: 25, offset: 19888},
										expr: &ruleRefExpr{
											pos:  position{line: 674, col: 26, offset: 19889},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 677, col: 5, offset: 19960},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 678, col: 5, offset: 19974},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 680, col: 1, offset: 19983},
			expr: &seqExpr{
				pos: position{line: 680, col: 13, offset: 19995},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 680, col: 13, offset: 19995},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 680, col: 22, offset: 20004},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 680, col: 25, offset: 20007},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 682, col: 1, offset: 20012},
			expr: &choiceExpr{
				pos: position{line: 683, col: 5, offset: 20025},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 683, col: 5, offset: 20025},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 684, col: 5, offset: 20035},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 686, col: 1, offset: 20045},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 20054},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 687, col: 5, offset: 20054},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 687, col: 5, offset: 20054},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 9, offset: 20058},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 18, offset: 20067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 687, col: 21, offset: 20070},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 25, offset: 20074},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 687, col: 28, offset: 20077},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 33, offset: 20082},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 38, offset: 20087},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 687, col: 41, offset: 20090},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 691, col: 1, offset: 20187},
			expr: &choiceExpr{
				pos: position{line: 692, col: 5, offset: 20200},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 692, col: 5, offset: 20200},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 693, col: 5, offset: 20209},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 693, col: 5, offset: 20209},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 693, col: 5, offset: 20209},
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 6, offset: 20210},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 693, col: 16, offset: 20220},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 19, offset: 20223},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 34, offset: 20238},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 693, col: 37, offset: 20241},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 41, offset: 20245},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 693, col: 44, offset: 20248},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 49, offset: 20253},
										name: "OptionalExprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 63, offset: 20267},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 693, col: 66, offset: 20270},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 693, col: 70, offset: 20274},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 693, col: 76, offset: 20280},
										expr: &ruleRefExpr{
											pos:  position{line: 693, col: 76, offset: 20280},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 697, col: 1, offset: 20401},
			expr: &choiceExpr{
				pos: position{line: 698, col: 5, offset: 20410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 20410},
						run: (*parser).callonGrep2,
						expr: &seqExpr{
							pos: position{line: 698, col: 5, offset: 20410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 698, col: 5, offset: 20410},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 12, offset: 20417},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 698, col: 15, offset: 20420},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 19, offset: 20424},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 698, col: 22, offset: 20427},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 30, offset: 20435},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 38, offset: 20443},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 698, col: 41, offset: 20446},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 20601},
						run: (*parser).callonGrep12,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 20601},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 701, col: 5, offset: 20601},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 12, offset: 20608},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 701, col: 15, offset: 20611},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 19, offset: 20615},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 22, offset: 20618},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 30, offset: 20626},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 38, offset: 20634},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 701, col: 42, offset: 20638},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 46, offset: 20642},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 49, offset: 20645},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 54, offset: 20650},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 59, offset: 20655},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 701, col: 62, offset: 20658},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 705, col: 1, offset: 20762},
			expr: &choiceExpr{
				pos: position{line: 706, col: 5, offset: 20774},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 706, col: 5, offset: 20774},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 707, col: 5, offset: 20785},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 20794},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 708, col: 5, offset: 20794},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 708, col: 7, offset: 20796},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 712, col: 1, offset: 20888},
			expr: &choiceExpr{
				pos: position{line: 713, col: 5, offset: 20906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 713, col: 5, offset: 20906},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 714, col: 5, offset: 20916},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 714, col: 5, offset: 20916},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 716, col: 1, offset: 20952},
			expr: &actionExpr{
				pos: position{line: 717, col: 5, offset: 20962},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 717, col: 5, offset: 20962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 717, col: 5, offset: 20962},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 11, offset: 20968},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 16, offset: 20973},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 717, col: 21, offset: 20978},
								expr: &actionExpr{
									pos: position{line: 717, col: 22, offset: 20979},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 717, col: 22, offset: 20979},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 717, col: 22, offset: 20979},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 717, col: 25, offset: 20982},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 717, col: 29, offset: 20986},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 717, col: 32, offset: 20989},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 717, col: 34, offset: 20991},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 721, col: 1, offset: 21100},
			expr: &actionExpr{
				pos: position{line: 722, col: 5, offset: 21114},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 722, col: 5, offset: 21114},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 722, col: 5, offset: 21114},
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 6, offset: 21115},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 10, offset: 21119},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 16, offset: 21125},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 27, offset: 21136},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 722, col: 32, offset: 21141},
								expr: &ruleRefExpr{
									pos:  position{line: 722, col: 33, offset: 21142},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 726, col: 1, offset: 21210},
			expr: &choiceExpr{
				pos: position{line: 727, col: 5, offset: 21220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21220},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 21220},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 727, col: 5, offset: 21220},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 727, col: 9, offset: 21224},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 14, offset: 21229},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 27, offset: 21242},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 727, col: 30, offset: 21245},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 34, offset: 21249},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 727, col: 37, offset: 21252},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 40, offset: 21255},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 727, col: 53, offset: 21268},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21439},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 733, col: 5, offset: 21439},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 733, col: 5, offset: 21439},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 733, col: 9, offset: 21443},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 733, col: 12, offset: 21446},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 733, col: 16, offset: 21450},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 733, col: 19, offset: 21453},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 22, offset: 21456},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 733, col: 35, offset: 21469},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21640},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 21640},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 739, col: 5, offset: 21640},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 739, col: 9, offset: 21644},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 14, offset: 21649},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 739, col: 27, offset: 21662},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 739, col: 30, offset: 21665},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 739, col: 34, offset: 21669},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 739, col: 37, offset: 21672},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 21845},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 745, col: 5, offset: 21845},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 745, col: 5, offset: 21845},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 745, col: 9, offset: 21849},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 14, offset: 21854},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 745, col: 19, offset: 21859},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21908},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 21908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 746, col: 5, offset: 21908},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 746, col: 9, offset: 21912},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 12, offset: 21915},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 748, col: 1, offset: 21966},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 21978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 749, col: 5, offset: 21978},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 21989},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 751, col: 5, offset: 21999},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 752, col: 5, offset: 22007},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 753, col: 5, offset: 22015},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 22027},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 754, col: 5, offset: 22027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 754, col: 5, offset: 22027},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 9, offset: 22031},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 754, col: 12, offset: 22034},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 754, col: 17, offset: 22039},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 22, offset: 22044},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 754, col: 25, offset: 22047},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 756, col: 1, offset: 22073},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 22084},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 757, col: 5, offset: 22084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 757, col: 5, offset: 22084},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 9, offset: 22088},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 757, col: 12, offset: 22091},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 18, offset: 22097},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 30, offset: 22109},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 757, col: 33, offset: 22112},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 761, col: 1, offset: 22202},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22218},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 22218},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 762, col: 5, offset: 22218},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 11, offset: 22224},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 762, col: 22, offset: 22235},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 762, col: 27, offset: 22240},
										expr: &ruleRefExpr{
											pos:  position{line: 762, col: 27, offset: 22240},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 765, col: 5, offset: 22339},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 765, col: 5, offset: 22339},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 767, col: 1, offset: 22375},
			expr: &actionExpr{
				pos: position{line: 767, col: 18, offset: 22392},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 767, col: 18, offset: 22392},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 767, col: 18, offset: 22392},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 767, col: 21, offset: 22395},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 767, col: 25, offset: 22399},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 767, col: 28, offset: 22402},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 33, offset: 22407},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 769, col: 1, offset: 22440},
			expr: &choiceExpr{
				pos: position{line: 770, col: 5, offset: 22455},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 770, col: 5, offset: 22455},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 771, col: 5, offset: 22466},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 772, col: 5, offset: 22476},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 774, col: 1, offset: 22488},
			expr: &actionExpr{
				pos: position{line: 775, col: 5, offset: 22499},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 775, col: 5, offset: 22499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 775, col: 5, offset: 22499},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 775, col: 11, offset: 22505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 775, col: 14, offset: 22508},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 19, offset: 22513},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 779, col: 1, offset: 22599},
			expr: &actionExpr{
				pos: position{line: 780, col: 5, offset: 22609},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 780, col: 5, offset: 22609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 780, col: 5, offset: 22609},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 10, offset: 22614},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 20, offset: 22624},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 780, col: 23, offset: 22627},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 27, offset: 22631},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 30, offset: 22634},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 36, offset: 22640},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 784, col: 1, offset: 22740},
			expr: &actionExpr{
				pos: position{line: 785, col: 5, offset: 22750},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 785, col: 5, offset: 22750},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 785, col: 5, offset: 22750},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 9, offset: 22754},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 785, col: 12, offset: 22757},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 18, offset: 22763},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 32, offset: 22777},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 785, col: 35, offset: 22780},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 789, col: 1, offset: 22870},
			expr: &actionExpr{
				pos: position{line: 790, col: 5, offset: 22878},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 790, col: 5, offset: 22878},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 790, col: 5, offset: 22878},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 10, offset: 22883},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 790, col: 13, offset: 22886},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 19, offset: 22892},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 33, offset: 22906},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 790, col: 36, offset: 22909},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 794, col: 1, offset: 22998},
			expr: &actionExpr{
				pos: position{line: 795, col: 5, offset: 23006},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 795, col: 5, offset: 23006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 795, col: 5, offset: 23006},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 10, offset: 23011},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 795, col: 13, offset: 23014},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 19, offset: 23020},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 27, offset: 23028},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 795, col: 30, offset: 23031},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 799, col: 1, offset: 23122},
			expr: &choiceExpr{
				pos: position{line: 800, col: 5, offset: 23134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 23134},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 800, col: 5, offset: 23134},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 800, col: 5, offset: 23134},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 800, col: 11, offset: 23140},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 800, col: 17, offset: 23146},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 800, col: 22, offset: 23151},
										expr: &ruleRefExpr{
											pos:  position{line: 800, col: 22, offset: 23151},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 803, col: 5, offset: 23245},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 803, col: 5, offset: 23245},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 806, col: 1, offset: 23282},
			expr: &actionExpr{
				pos: position{line: 806, col: 13, offset: 23294},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 806, col: 13, offset: 23294},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 806, col: 13, offset: 23294},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 806, col: 16, offset: 23297},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 20, offset: 23301},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 23, offset: 23304},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 25, offset: 23306},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 808, col: 1, offset: 23331},
			expr: &actionExpr{
				pos: position{line: 809, col: 5, offset: 23341},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 809, col: 5, offset: 23341},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 809, col: 5, offset: 23341},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 9, offset: 23345},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 14, offset: 23350},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 809, col: 17, offset: 23353},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 21, offset: 23357},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 809, col: 24, offset: 23360},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 30, offset: 23366},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 815, col: 1, offset: 23473},
			expr: &actionExpr{
				pos: position{line: 816, col: 5, offset: 23485},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 816, col: 5, offset: 23485},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 816, col: 5, offset: 23485},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 15, offset: 23495},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 5, offset: 23509},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 817, col: 10, offset: 23514},
								expr: &ruleRefExpr{
									pos:  position{line: 817, col: 10, offset: 23514},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 5, offset: 23527},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 818, col: 11, offset: 23533},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 11, offset: 23533},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 819, col: 5, offset: 23547},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 819, col: 11, offset: 23553},
								expr: &ruleRefExpr{
									pos:  position{line: 819, col: 11, offset: 23553},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 820, col: 5, offset: 23567},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 820, col: 13, offset: 23575},
								expr: &ruleRefExpr{
									pos:  position{line: 820, col: 13, offset: 23575},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 5, offset: 23591},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 821, col: 12, offset: 23598},
								expr: &ruleRefExpr{
									pos:  position{line: 821, col: 12, offset: 23598},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 822, col: 5, offset: 23613},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 822, col: 13, offset: 23621},
								expr: &ruleRefExpr{
									pos:  position{line: 822, col: 13, offset: 23621},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 5, offset: 23637},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 23643},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 847, col: 1, offset: 24010},
			expr: &choiceExpr{
				pos: position{line: 848, col: 5, offset: 24024},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 24024},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 24024},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 848, col: 5, offset: 24024},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 848, col: 12, offset: 24031},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 848, col: 14, offset: 24033},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24061},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 849, col: 5, offset: 24061},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 849, col: 5, offset: 24061},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 12, offset: 24068},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 849, col: 14, offset: 24070},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 26, offset: 24082},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 851, col: 1, offset: 24126},
			expr: &choiceExpr{
				pos: position{line: 852, col: 5, offset: 24144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 24144},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 852, col: 5, offset: 24144},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 852, col: 5, offset: 24144},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 852, col: 9, offset: 24148},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 14, offset: 24153},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 16, offset: 24155},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 19, offset: 24158},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 852, col: 21, offset: 24160},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 852, col: 25, offset: 24164},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 24258},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24258},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 10, offset: 24263},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 855, col: 1, offset: 24355},
			expr: &actionExpr{
				pos: position{line: 856, col: 5, offset: 24374},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 856, col: 5, offset: 24374},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 856, col: 5, offset: 24374},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 11, offset: 24380},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 856, col: 25, offset: 24394},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 856, col: 30, offset: 24399},
								expr: &actionExpr{
									pos: position{line: 856, col: 31, offset: 24400},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 856, col: 31, offset: 24400},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 856, col: 31, offset: 24400},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 856, col: 34, offset: 24403},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 856, col: 38, offset: 24407},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 856, col: 41, offset: 24410},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 856, col: 46, offset: 24415},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 860, col: 1, offset: 24536},
			expr: &choiceExpr{
				pos: position{line: 861, col: 5, offset: 24548},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 24548},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 861, col: 5, offset: 24548},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 861, col: 5, offset: 24548},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 861, col: 7, offset: 24550},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 861, col: 12, offset: 24555},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 861, col: 14, offset: 24557},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 861, col: 20, offset: 24563},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 861, col: 29, offset: 24572},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 861, col: 35, offset: 24578},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 35, offset: 24578},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 864, col: 5, offset: 24673},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 864, col: 5, offset: 24673},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 864, col: 5, offset: 24673},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 864, col: 7, offset: 24675},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 864, col: 12, offset: 24680},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 864, col: 14, offset: 24682},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 866, col: 1, offset: 24707},
			expr: &choiceExpr{
				pos: position{line: 867, col: 5, offset: 24720},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 24720},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 24720},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 867, col: 5, offset: 24720},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 867, col: 7, offset: 24722},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 867, col: 10, offset: 24725},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 867, col: 12, offset: 24727},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 867, col: 15, offset: 24730},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 868, col: 5, offset: 24758},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 868, col: 5, offset: 24758},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 868, col: 5, offset: 24758},
									name: "_",
								},
								&notExpr{
									pos: position{line: 868, col: 7, offset: 24760},
									expr: &seqExpr{
										pos: position{line: 868, col: 9, offset: 24762},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 868, col: 9, offset: 24762},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 868, col: 27, offset: 24780},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 868, col: 30, offset: 24783},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 868, col: 33, offset: 24786},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 870, col: 1, offset: 24811},
			expr: &ruleRefExpr{
				pos:  position{line: 871, col: 5, offset: 24824},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 873, col: 1, offset: 24830},
			expr: &actionExpr{
				pos: position{line: 874, col: 5, offset: 24843},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 874, col: 5, offset: 24843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 874, col: 5, offset: 24843},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 11, offset: 24849},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 19, offset: 24857},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 874, col: 24, offset: 24862},
								expr: &actionExpr{
									pos: position{line: 874, col: 25, offset: 24863},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 874, col: 25, offset: 24863},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 874, col: 30, offset: 24868},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 878, col: 1, offset: 24983},
			expr: &actionExpr{
				pos: position{line: 879, col: 5, offset: 24995},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 879, col: 5, offset: 24995},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 24995},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 11, offset: 25001},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 24, offset: 25014},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 26, offset: 25016},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 31, offset: 25021},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 33, offset: 25023},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 39, offset: 25029},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 48, offset: 25038},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 879, col: 54, offset: 25044},
								expr: &ruleRefExpr{
									pos:  position{line: 879, col: 54, offset: 25044},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 64, offset: 25054},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 66, offset: 25056},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 69, offset: 25059},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 71, offset: 25061},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 79, offset: 25069},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 87, offset: 25077},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 879, col: 90, offset: 25080},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 94, offset: 25084},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 97, offset: 25087},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 106, offset: 25096},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 898, col: 1, offset: 25331},
			expr: &choiceExpr{
				pos: position{line: 899, col: 5, offset: 25348},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 25348},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 899, col: 5, offset: 25348},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 899, col: 5, offset: 25348},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 899, col: 7, offset: 25350},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 899, col: 14, offset: 25357},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 899, col: 14, offset: 25357},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 899, col: 21, offset: 25364},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 899, col: 29, offset: 25372},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 899, col: 36, offset: 25379},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 25412},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 900, col: 5, offset: 25412},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 902, col: 1, offset: 25440},
			expr: &actionExpr{
				pos: position{line: 903, col: 5, offset: 25453},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 903, col: 5, offset: 25453},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 903, col: 5, offset: 25453},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 7, offset: 25455},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 13, offset: 25461},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 903, col: 15, offset: 25463},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 20, offset: 25468},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 905, col: 1, offset: 25504},
			expr: &actionExpr{
				pos: position{line: 906, col: 5, offset: 25519},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 906, col: 5, offset: 25519},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 906, col: 5, offset: 25519},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 906, col: 7, offset: 25521},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 906, col: 13, offset: 25527},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 906, col: 15, offset: 25529},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 906, col: 18, offset: 25532},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 906, col: 20, offset: 25534},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 906, col: 28, offset: 25542},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 908, col: 1, offset: 25578},
			expr: &actionExpr{
				pos: position{line: 909, col: 5, offset: 25592},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 909, col: 5, offset: 25592},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 909, col: 5, offset: 25592},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 7, offset: 25594},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 14, offset: 25601},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 909, col: 16, offset: 25603},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 909, col: 21, offset: 25608},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 911, col: 1, offset: 25644},
			expr: &actionExpr{
				pos: position{line: 912, col: 5, offset: 25659},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 912, col: 5, offset: 25659},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 912, col: 5, offset: 25659},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 912, col: 7, offset: 25661},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 912, col: 13, offset: 25667},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 912, col: 15, offset: 25669},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 912, col: 18, offset: 25672},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 912, col: 20, offset: 25674},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 912, col: 25, offset: 25679},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 912, col: 31, offset: 25685},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 912, col: 37, offset: 25691},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 916, col: 1, offset: 25801},
			expr: &choiceExpr{
				pos: position{line: 917, col: 5, offset: 25814},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 917, col: 5, offset: 25814},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 917, col: 5, offset: 25814},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 917, col: 5, offset: 25814},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 917, col: 7, offset: 25816},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 917, col: 12, offset: 25821},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 917, col: 12, offset: 25821},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 917, col: 18, offset: 25827},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 918, col: 5, offset: 25857},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 918, col: 5, offset: 25857},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 920, col: 1, offset: 25883},
			expr: &choiceExpr{
				pos: position{line: 921, col: 5, offset: 25896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 921, col: 5, offset: 25896},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 921, col: 5, offset: 25896},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 921, col: 5, offset: 25896},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 921, col: 7, offset: 25898},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 921, col: 13, offset: 25904},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 921, col: 15, offset: 25906},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 921, col: 21, offset: 25912},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 922, col: 5, offset: 25943},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 922, col: 5, offset: 25943},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 924, col: 1, offset: 25965},
			expr: &actionExpr{
				pos: position{line: 924, col: 10, offset: 25974},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 924, col: 10, offset: 25974},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 925, col: 1, offset: 26009},
			expr: &actionExpr{
				pos: position{line: 925, col: 6, offset: 26014},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 6, offset: 26014},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 926, col: 1, offset: 26041},
			expr: &actionExpr{
				pos: position{line: 926, col: 8, offset: 26048},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 8, offset: 26048},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 927, col: 1, offset: 26079},
			expr: &actionExpr{
				pos: position{line: 927, col: 8, offset: 26086},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 8, offset: 26086},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 928, col: 1, offset: 26117},
			expr: &actionExpr{
				pos: position{line: 928, col: 9, offset: 26125},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 9, offset: 26125},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 929, col: 1, offset: 26158},
			expr: &actionExpr{
				pos: position{line: 929, col: 9, offset: 26166},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 929, col: 9, offset: 26166},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 930, col: 1, offset: 26199},
			expr: &actionExpr{
				pos: position{line: 930, col: 6, offset: 26204},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 930, col: 6, offset: 26204},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 931, col: 1, offset: 26231},
			expr: &actionExpr{
				pos: position{line: 931, col: 10, offset: 26240},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 931, col: 10, offset: 26240},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 932, col: 1, offset: 26275},
			expr: &actionExpr{
				pos: position{line: 932, col: 9, offset: 26283},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 932, col: 9, offset: 26283},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 933, col: 1, offset: 26316},
			expr: &actionExpr{
				pos: position{line: 933, col: 6, offset: 26321},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 933, col: 6, offset: 26321},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 934, col: 1, offset: 26348},
			expr: &actionExpr{
				pos: position{line: 934, col: 9, offset: 26356},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 934, col: 9, offset: 26356},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 935, col: 1, offset: 26389},
			expr: &actionExpr{
				pos: position{line: 935, col: 7, offset: 26395},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 935, col: 7, offset: 26395},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 936, col: 1, offset: 26424},
			expr: &actionExpr{
				pos: position{line: 936, col: 8, offset: 26431},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 936, col: 8, offset: 26431},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 937, col: 1, offset: 26462},
			expr: &actionExpr{
				pos: position{line: 937, col: 8, offset: 26469},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 937, col: 8, offset: 26469},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 938, col: 1, offset: 26500},
			expr: &actionExpr{
				pos: position{line: 938, col: 8, offset: 26507},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 938, col: 8, offset: 26507},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 939, col: 1, offset: 26538},
			expr: &actionExpr{
				pos: position{line: 939, col: 9, offset: 26546},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 939, col: 9, offset: 26546},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 940, col: 1, offset: 26579},
			expr: &actionExpr{
				pos: position{line: 940, col: 9, offset: 26587},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 940, col: 9, offset: 26587},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 942, col: 1, offset: 26621},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 26643},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 943, col: 5, offset: 26643},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 14, offset: 26652},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 19, offset: 26657},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 27, offset: 26665},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 34, offset: 26672},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 42, offset: 26680},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 50, offset: 26688},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 59, offset: 26697},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 67, offset: 26705},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 75, offset: 26713},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 947, col: 1, offset: 26739},
			expr: &choiceExpr{
				pos: position{line: 948, col: 5, offset: 26751},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 948, col: 5, offset: 26751},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 5, offset: 26767},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 26787},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 26805},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 5, offset: 26824},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 5, offset: 26841},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 26854},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 5, offset: 26863},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 956, col: 5, offset: 26880},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 5, offset: 26899},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 5, offset: 26918},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 960, col: 1, offset: 26931},
			expr: &choiceExpr{
				pos: position{line: 961, col: 5, offset: 26949},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 26949},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 26949},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 961, col: 5, offset: 26949},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 7, offset: 26951},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 961, col: 14, offset: 26958},
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 15, offset: 26959},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 27074},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 964, col: 5, offset: 27074},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 964, col: 7, offset: 27076},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 968, col: 1, offset: 27180},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 27199},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27199},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 27199},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 5, offset: 27199},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 7, offset: 27201},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 969, col: 11, offset: 27205},
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 12, offset: 27206},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 27320},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 972, col: 5, offset: 27320},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 972, col: 7, offset: 27322},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 976, col: 1, offset: 27421},
			expr: &actionExpr{
				pos: position{line: 977, col: 5, offset: 27438},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 977, col: 5, offset: 27438},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 977, col: 7, offset: 27440},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 981, col: 1, offset: 27553},
			expr: &actionExpr{
				pos: position{line: 982, col: 5, offset: 27572},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 982, col: 5, offset: 27572},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 982, col: 7, offset: 27574},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 986, col: 1, offset: 27683},
			expr: &choiceExpr{
				pos: position{line: 987, col: 5, offset: 27702},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 27702},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 987, col: 5, offset: 27702},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 988, col: 5, offset: 27815},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 988, col: 5, offset: 27815},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 990, col: 1, offset: 27926},
			expr: &actionExpr{
				pos: position{line: 991, col: 5, offset: 27942},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 991, col: 5, offset: 27942},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 993, col: 1, offset: 28048},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 28065},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 994, col: 5, offset: 28065},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 994, col: 5, offset: 28065},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 994, col: 10, offset: 28070},
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 10, offset: 28070},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 998, col: 1, offset: 28185},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 28201},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 999, col: 5, offset: 28201},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 999, col: 5, offset: 28201},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 999, col: 9, offset: 28205},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 13, offset: 28209},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 999, col: 18, offset: 28214},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1003, col: 1, offset: 28303},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 5, offset: 28316},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1004, col: 5, offset: 28316},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 28332},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1005, col: 5, offset: 28332},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 9, offset: 28336},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1009, col: 1, offset: 28435},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 28444},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1010, col: 5, offset: 28444},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1011, col: 5, offset: 28460},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 5, offset: 28478},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1014, col: 1, offset: 28491},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 5, offset: 28509},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28509},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 28509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1015, col: 5, offset: 28509},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 10, offset: 28514},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1015, col: 24, offset: 28528},
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 25, offset: 28529},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 28569},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1016, col: 5, offset: 28569},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1016, col: 5, offset: 28569},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 10, offset: 28574},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1016, col: 25, offset: 28589},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1016, col: 28, offset: 28592},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1016, col: 32, offset: 28596},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1016, col: 35, offset: 28599},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 39, offset: 28603},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28705},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1019, col: 5, offset: 28705},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 10, offset: 28710},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 28812},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 28812},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1022, col: 5, offset: 28812},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 9, offset: 28816},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 12, offset: 28819},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 14, offset: 28821},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1022, col: 25, offset: 28832},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1024, col: 1, offset: 28855},
			expr: &actionExpr{
				pos: position{line: 1025, col: 5, offset: 28869},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1025, col: 5, offset: 28869},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1025, col: 11, offset: 28875},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1029, col: 1, offset: 28971},
			expr: &actionExpr{
				pos: position{line: 1030, col: 5, offset: 28984},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1030, col: 5, offset: 28984},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1030, col: 5, offset: 28984},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1030, col: 11, offset: 28990},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1030, col: 16, offset: 28995},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1030, col: 21, offset: 29000},
								expr: &ruleRefExpr{
									pos:  position{line: 1030, col: 21, offset: 29000},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1034, col: 1, offset: 29094},
			expr: &actionExpr{
				pos: position{line: 1034, col: 16, offset: 29109},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 16, offset: 29109},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1034, col: 16, offset: 29109},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1034, col: 19, offset: 29112},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1034, col: 23, offset: 29116},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 26, offset: 29119},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 30, offset: 29123},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1036, col: 1, offset: 29149},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 5, offset: 29165},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1037, col: 5, offset: 29165},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1037, col: 5, offset: 29165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1037, col: 5, offset: 29165},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 9, offset: 29169},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1037, col: 12, offset: 29172},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1037, col: 19, offset: 29179},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 33, offset: 29193},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1037, col: 36, offset: 29196},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1040, col: 5, offset: 29291},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1040, col: 5, offset: 29291},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1040, col: 5, offset: 29291},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1040, col: 9, offset: 29295},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1040, col: 12, offset: 29298},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1040, col: 16, offset: 29302},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1040, col: 21, offset: 29307},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1040, col: 24, offset: 29310},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29399},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 29399},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1043, col: 5, offset: 29399},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 10, offset: 29404},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1043, col: 14, offset: 29408},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 18, offset: 29412},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 23, offset: 29417},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1043, col: 26, offset: 29420},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 29508},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1046, col: 5, offset: 29508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1046, col: 5, offset: 29508},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1046, col: 10, offset: 29513},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 13, offset: 29516},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 21, offset: 29524},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1046, col: 26, offset: 29529},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1046, col: 29, offset: 29532},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1046, col: 33, offset: 29536},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 36, offset: 29539},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 44, offset: 29547},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1046, col: 49, offset: 29552},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1046, col: 52, offset: 29555},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1050, col: 1, offset: 29669},
			expr: &actionExpr{
				pos: position{line: 1051, col: 5, offset: 29689},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1051, col: 5, offset: 29689},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1051, col: 7, offset: 29691},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1058, col: 1, offset: 29907},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 5, offset: 29932},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1059, col: 5, offset: 29932},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1059, col: 5, offset: 29932},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1059, col: 5, offset: 29932},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 9, offset: 29936},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1059, col: 11, offset: 29938},
										expr: &ruleRefExpr{
											pos:  position{line: 1059, col: 11, offset: 29938},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1059, col: 37, offset: 29964},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 29990},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 29990},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 29990},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 9, offset: 29994},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1060, col: 11, offset: 29996},
										expr: &ruleRefExpr{
											pos:  position{line: 1060, col: 11, offset: 29996},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1060, col: 37, offset: 30022},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1062, col: 1, offset: 30045},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 5, offset: 30074},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1063, col: 5, offset: 30074},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1064, col: 5, offset: 30091},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1064, col: 5, offset: 30091},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1064, col: 7, offset: 30093},
								expr: &ruleRefExpr{
									pos:  position{line: 1064, col: 7, offset: 30093},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1068, col: 1, offset: 30230},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 5, offset: 30259},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 30259},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1069, col: 5, offset: 30259},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1069, col: 5, offset: 30259},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1069, col: 10, offset: 30264},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1069, col: 12, offset: 30266},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30293},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 30293},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1070, col: 5, offset: 30293},
									expr: &litMatcher{
										pos:        position{line: 1070, col: 8, offset: 30296},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 15, offset: 30303},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 17, offset: 30305},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1072, col: 1, offset: 30341},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 5, offset: 30370},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1073, col: 5, offset: 30370},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 30387},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1074, col: 5, offset: 30387},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1074, col: 7, offset: 30389},
								expr: &ruleRefExpr{
									pos:  position{line: 1074, col: 7, offset: 30389},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1078, col: 1, offset: 30526},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 5, offset: 30555},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 30555},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 30555},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 30555},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 10, offset: 30560},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1079, col: 12, offset: 30562},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30589},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30589},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1080, col: 5, offset: 30589},
									expr: &litMatcher{
										pos:        position{line: 1080, col: 8, offset: 30592},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 15, offset: 30599},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 17, offset: 30601},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1082, col: 1, offset: 30637},
			expr: &actionExpr{
				pos: position{line: 1083, col: 5, offset: 30654},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1083, col: 5, offset: 30654},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1083, col: 5, offset: 30654},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1083, col: 10, offset: 30659},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1083, col: 13, offset: 30662},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1083, col: 15, offset: 30664},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1083, col: 20, offset: 30669},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1083, col: 23, offset: 30672},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1085, col: 1, offset: 30695},
			expr: &actionExpr{
				pos: position{line: 1086, col: 5, offset: 30713},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1086, col: 9, offset: 30717},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1086, col: 9, offset: 30717},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 19, offset: 30727},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 30, offset: 30738},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 41, offset: 30749},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1087, col: 9, offset: 30766},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1087, col: 18, offset: 30775},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1087, col: 28, offset: 30785},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1087, col: 38, offset: 30795},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1088, col: 9, offset: 30811},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1088, col: 21, offset: 30823},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 9, offset: 30841},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 18, offset: 30850},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 9, offset: 30867},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 22, offset: 30880},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 9, offset: 30895},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 9, offset: 30911},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 16, offset: 30918},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 9, offset: 30932},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 18, offset: 30941},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1097, col: 1, offset: 31057},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 31075},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 31075},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 31075},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1098, col: 5, offset: 31075},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 31081},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 21, offset: 31091},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1098, col: 26, offset: 31096},
										expr: &ruleRefExpr{
											pos:  position{line: 1098, col: 26, offset: 31096},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1101, col: 5, offset: 31198},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1101, col: 5, offset: 31198},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1103, col: 1, offset: 31222},
			expr: &actionExpr{
				pos: position{line: 1103, col: 21, offset: 31242},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 21, offset: 31242},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1103, col: 21, offset: 31242},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1103, col: 24, offset: 31245},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1103, col: 28, offset: 31249},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 31, offset: 31252},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 35, offset: 31256},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1105, col: 1, offset: 31287},
			expr: &actionExpr{
				pos: position{line: 1106, col: 5, offset: 31301},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 5, offset: 31301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1106, col: 5, offset: 31301},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 10, offset: 31306},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1106, col: 20, offset: 31316},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1106, col: 23, offset: 31319},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1106, col: 27, offset: 31323},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 30, offset: 31326},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 34, offset: 31330},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1110, col: 1, offset: 31412},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 31426},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1111, col: 5, offset: 31426},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 5, offset: 31445},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1114, col: 1, offset: 31459},
			expr: &actionExpr{
				pos: position{line: 1114, col: 12, offset: 31470},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1114, col: 12, offset: 31470},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1114, col: 13, offset: 31471},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1114, col: 13, offset: 31471},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1114, col: 21, offset: 31479},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1114, col: 28, offset: 31486},
							expr: &ruleRefExpr{
								pos:  position{line: 1114, col: 29, offset: 31487},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1115, col: 1, offset: 31524},
			expr: &actionExpr{
				pos: position{line: 1115, col: 11, offset: 31534},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 11, offset: 31534},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1115, col: 12, offset: 31535},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1115, col: 12, offset: 31535},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1115, col: 19, offset: 31542},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1115, col: 25, offset: 31548},
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 26, offset: 31549},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1116, col: 1, offset: 31585},
			expr: &actionExpr{
				pos: position{line: 1116, col: 11, offset: 31595},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 11, offset: 31595},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1116, col: 11, offset: 31595},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1116, col: 16, offset: 31600},
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 17, offset: 31601},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1117, col: 1, offset: 31637},
			expr: &actionExpr{
				pos: position{line: 1117, col: 12, offset: 31648},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 12, offset: 31648},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1117, col: 13, offset: 31649},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1117, col: 13, offset: 31649},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1117, col: 21, offset: 31657},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1117, col: 28, offset: 31664},
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 29, offset: 31665},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1118, col: 1, offset: 31702},
			expr: &actionExpr{
				pos: position{line: 1118, col: 11, offset: 31712},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1118, col: 11, offset: 31712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1118, col: 11, offset: 31712},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1118, col: 16, offset: 31717},
							expr: &ruleRefExpr{
								pos:  position{line: 1118, col: 17, offset: 31718},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1120, col: 1, offset: 31755},
			expr: &charClassMatcher{
				pos:        position{line: 1120, col: 19, offset: 31773},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1122, col: 1, offset: 31785},
			expr: &choiceExpr{
				pos: position{line: 1122, col: 18, offset: 31802},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1122, col: 18, offset: 31802},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1122, col: 36, offset: 31820},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1124, col: 1, offset: 31827},
			expr: &actionExpr{
				pos: position{line: 1125, col: 5, offset: 31842},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1125, col: 5, offset: 31842},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1125, col: 8, offset: 31845},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1127, col: 1, offset: 31926},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 5, offset: 31945},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 31945},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 31945},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1128, col: 5, offset: 31945},
									expr: &seqExpr{
										pos: position{line: 1128, col: 7, offset: 31947},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1128, col: 7, offset: 31947},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1128, col: 15, offset: 31955},
												expr: &ruleRefExpr{
													pos:  position{line: 1128, col: 16, offset: 31956},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 32, offset: 31972},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1128, col: 48, offset: 31988},
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 48, offset: 31988},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1129, col: 5, offset: 32040},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1129, col: 5, offset: 32040},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 32079},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 32079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1130, col: 5, offset: 32079},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 10, offset: 32084},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1130, col: 13, offset: 32087},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1132, col: 5, offset: 32178},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1132, col: 5, offset: 32178},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 32220},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1133, col: 5, offset: 32220},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1133, col: 5, offset: 32220},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 8, offset: 32223},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1133, col: 26, offset: 32241},
									expr: &seqExpr{
										pos: position{line: 1133, col: 28, offset: 32243},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1133, col: 28, offset: 32243},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1133, col: 31, offset: 32246},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1135, col: 1, offset: 32271},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 5, offset: 32283},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1136, col: 5, offset: 32283},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 5, offset: 32302},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1139, col: 1, offset: 32315},
			expr: &actionExpr{
				pos: position{line: 1140, col: 5, offset: 32324},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1140, col: 5, offset: 32324},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1140, col: 5, offset: 32324},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1140, col: 14, offset: 32333},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1140, col: 18, offset: 32337},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1144, col: 1, offset: 32457},
			expr: &seqExpr{
				pos: position{line: 1144, col: 12, offset: 32468},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 12, offset: 32468},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1144, col: 15, offset: 32471},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 19, offset: 32475},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1144, col: 22, offset: 32478},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 26, offset: 32482},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1146, col: 1, offset: 32486},
			expr: &seqExpr{
				pos: position{line: 1146, col: 6, offset: 32491},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1146, col: 6, offset: 32491},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1146, col: 11, offset: 32496},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1146, col: 16, offset: 32501},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1146, col: 21, offset: 32506},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1147, col: 1, offset: 32512},
			expr: &seqExpr{
				pos: position{line: 1147, col: 6, offset: 32517},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1147, col: 6, offset: 32517},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1147, col: 11, offset: 32522},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1149, col: 1, offset: 32529},
			expr: &seqExpr{
				pos: position{line: 1149, col: 12, offset: 32540},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1149, col: 12, offset: 32540},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 24, offset: 32552},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1151, col: 1, offset: 32564},
			expr: &seqExpr{
				pos: position{line: 1151, col: 15, offset: 32578},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1151, col: 15, offset: 32578},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1151, col: 18, offset: 32581},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 22, offset: 32585},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1151, col: 25, offset: 32588},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 29, offset: 32592},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1151, col: 32, offset: 32595},
						expr: &seqExpr{
							pos: position{line: 1151, col: 33, offset: 32596},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1151, col: 33, offset: 32596},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1151, col: 37, offset: 32600},
									expr: &charClassMatcher{
										pos:        position{line: 1151, col: 37, offset: 32600},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1153, col: 1, offset: 32610},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 32625},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1154, col: 5, offset: 32625},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1155, col: 5, offset: 32633},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1155, col: 6, offset: 32634},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1155, col: 6, offset: 32634},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1155, col: 12, offset: 32640},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1155, col: 17, offset: 32645},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1155, col: 20, offset: 32648},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1155, col: 24, offset: 32652},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1155, col: 27, offset: 32655},
								expr: &seqExpr{
									pos: position{line: 1155, col: 28, offset: 32656},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1155, col: 28, offset: 32656},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1155, col: 32, offset: 32660},
											expr: &charClassMatcher{
												pos:        position{line: 1155, col: 32, offset: 32660},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1157, col: 1, offset: 32670},
			expr: &actionExpr{
				pos: position{line: 1158, col: 5, offset: 32683},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1158, col: 5, offset: 32683},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1158, col: 5, offset: 32683},
							expr: &litMatcher{
								pos:        position{line: 1158, col: 5, offset: 32683},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1158, col: 10, offset: 32688},
							expr: &seqExpr{
								pos: position{line: 1158, col: 11, offset: 32689},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1158, col: 11, offset: 32689},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1158, col: 19, offset: 32697},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1162, col: 1, offset: 32823},
			expr: &seqExpr{
				pos: position{line: 1162, col: 11, offset: 32833},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 32833},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1162, col: 16, offset: 32838},
						expr: &seqExpr{
							pos: position{line: 1162, col: 17, offset: 32839},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1162, col: 17, offset: 32839},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1162, col: 21, offset: 32843},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1164, col: 1, offset: 32851},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 32864},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1165, col: 5, offset: 32864},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1166, col: 5, offset: 32873},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1167, col: 5, offset: 32882},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1168, col: 5, offset: 32891},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1169, col: 5, offset: 32899},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1170, col: 5, offset: 32907},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1171, col: 5, offset: 32915},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1172, col: 5, offset: 32923},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1173, col: 5, offset: 32931},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1175, col: 1, offset: 32936},
			expr: &actionExpr{
				pos: position{line: 1176, col: 5, offset: 32943},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1176, col: 5, offset: 32943},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1176, col: 5, offset: 32943},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1176, col: 10, offset: 32948},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1176, col: 14, offset: 32952},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1176, col: 19, offset: 32957},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1176, col: 23, offset: 32961},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1176, col: 28, offset: 32966},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1176, col: 32, offset: 32970},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1178, col: 1, offset: 33007},
			expr: &actionExpr{
				pos: position{line: 1179, col: 5, offset: 33015},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1179, col: 5, offset: 33015},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1179, col: 5, offset: 33015},
							expr: &seqExpr{
								pos: position{line: 1179, col: 8, offset: 33018},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1179, col: 8, offset: 33018},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1179, col: 12, offset: 33022},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1179, col: 16, offset: 33026},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1179, col: 20, offset: 33030},
										expr: &choiceExpr{
											pos: position{line: 1179, col: 22, offset: 33032},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1179, col: 22, offset: 33032},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1179, col: 33, offset: 33043},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 39, offset: 33049},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 41, offset: 33051},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1183, col: 1, offset: 33215},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 5, offset: 33233},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 33233},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1184, col: 5, offset: 33233},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1184, col: 5, offset: 33233},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1184, col: 7, offset: 33235},
										expr: &ruleRefExpr{
											pos:  position{line: 1184, col: 7, offset: 33235},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 17, offset: 33245},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 19, offset: 33247},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 33311},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1187, col: 5, offset: 33311},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1187, col: 5, offset: 33311},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 7, offset: 33313},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 11, offset: 33317},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1187, col: 13, offset: 33319},
										expr: &ruleRefExpr{
											pos:  position{line: 1187, col: 13, offset: 33319},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 23, offset: 33329},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 28, offset: 33334},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1187, col: 30, offset: 33336},
										expr: &ruleRefExpr{
											pos:  position{line: 1187, col: 30, offset: 33336},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 40, offset: 33346},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 42, offset: 33348},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1190, col: 5, offset: 33447},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1190, col: 5, offset: 33447},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1190, col: 5, offset: 33447},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 10, offset: 33452},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1190, col: 12, offset: 33454},
										expr: &ruleRefExpr{
											pos:  position{line: 1190, col: 12, offset: 33454},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 22, offset: 33464},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 24, offset: 33466},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 5, offset: 33537},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1193, col: 5, offset: 33537},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1193, col: 5, offset: 33537},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 7, offset: 33539},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 11, offset: 33543},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1193, col: 13, offset: 33545},
										expr: &ruleRefExpr{
											pos:  position{line: 1193, col: 13, offset: 33545},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 23, offset: 33555},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 33623},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1196, col: 5, offset: 33623},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1200, col: 1, offset: 33660},
			expr: &choiceExpr{
				pos: position{line: 1201, col: 5, offset: 33672},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1201, col: 5, offset: 33672},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 5, offset: 33679},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1204, col: 1, offset: 33684},
			expr: &actionExpr{
				pos: position{line: 1204, col: 12, offset: 33695},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 12, offset: 33695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1204, col: 12, offset: 33695},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 16, offset: 33699},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 18, offset: 33701},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1206, col: 1, offset: 33739},
			expr: &actionExpr{
				pos: position{line: 1206, col: 12, offset: 33750},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 12, offset: 33750},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1206, col: 12, offset: 33750},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 14, offset: 33752},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1206, col: 18, offset: 33756},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1208, col: 1, offset: 33794},
			expr: &actionExpr{
				pos: position{line: 1209, col: 5, offset: 33805},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 5, offset: 33805},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1209, col: 5, offset: 33805},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 7, offset: 33807},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1209, col: 10, offset: 33810},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 14, offset: 33814},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 16, offset: 33816},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1213, col: 1, offset: 33889},
			expr: &actionExpr{
				pos: position{line: 1214, col: 5, offset: 33900},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1214, col: 5, offset: 33900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1214, col: 5, offset: 33900},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1214, col: 7, offset: 33902},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1214, col: 11, offset: 33906},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1214, col: 15, offset: 33910},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1214, col: 17, offset: 33912},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1218, col: 1, offset: 33975},
			expr: &actionExpr{
				pos: position{line: 1219, col: 4, offset: 33983},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1219, col: 4, offset: 33983},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1219, col: 6, offset: 33985},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1221, col: 1, offset: 34025},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 5, offset: 34039},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1222, col: 5, offset: 34039},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 5, offset: 34054},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1225, col: 1, offset: 34070},
			expr: &actionExpr{
				pos: position{line: 1225, col: 14, offset: 34083},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1225, col: 14, offset: 34083},
					expr: &charClassMatcher{
						pos:        position{line: 1225, col: 14, offset: 34083},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1227, col: 1, offset: 34122},
			expr: &actionExpr{
				pos: position{line: 1228, col: 5, offset: 34141},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 5, offset: 34141},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1228, col: 5, offset: 34141},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1228, col: 9, offset: 34145},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1230, col: 1, offset: 34188},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 5, offset: 34204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 34204},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1231, col: 5, offset: 34204},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1231, col: 5, offset: 34204},
									expr: &litMatcher{
										pos:        position{line: 1231, col: 5, offset: 34204},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1231, col: 10, offset: 34209},
									expr: &charClassMatcher{
										pos:        position{line: 1231, col: 10, offset: 34209},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 17, offset: 34216},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1231, col: 21, offset: 34220},
									expr: &charClassMatcher{
										pos:        position{line: 1231, col: 21, offset: 34220},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1231, col: 28, offset: 34227},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 28, offset: 34227},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 5, offset: 34286},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1234, col: 5, offset: 34286},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1234, col: 5, offset: 34286},
									expr: &litMatcher{
										pos:        position{line: 1234, col: 5, offset: 34286},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 10, offset: 34291},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1234, col: 14, offset: 34295},
									expr: &charClassMatcher{
										pos:        position{line: 1234, col: 14, offset: 34295},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1234, col: 21, offset: 34302},
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 21, offset: 34302},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1238, col: 1, offset: 34358},
			expr: &seqExpr{
				pos: position{line: 1238, col: 16, offset: 34373},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1238, col: 16, offset: 34373},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1238, col: 21, offset: 34378},
						expr: &charClassMatcher{
							pos:        position{line: 1238, col: 21, offset: 34378},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 27, offset: 34384},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1240, col: 1, offset: 34396},
			expr: &actionExpr{
				pos: position{line: 1240, col: 7, offset: 34402},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1240, col: 7, offset: 34402},
					expr: &ruleRefExpr{
						pos:  position{line: 1240, col: 7, offset: 34402},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1242, col: 1, offset: 34444},
			expr: &charClassMatcher{
				pos:        position{line: 1242, col: 12, offset: 34455},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1244, col: 1, offset: 34468},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 5, offset: 34485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 34485},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 34485},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1245, col: 5, offset: 34485},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 9, offset: 34489},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1245, col: 11, offset: 34491},
										expr: &ruleRefExpr{
											pos:  position{line: 1245, col: 11, offset: 34491},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 29, offset: 34509},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1246, col: 5, offset: 34546},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1246, col: 5, offset: 34546},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1246, col: 5, offset: 34546},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1246, col: 9, offset: 34550},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1246, col: 11, offset: 34552},
										expr: &ruleRefExpr{
											pos:  position{line: 1246, col: 11, offset: 34552},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 29, offset: 34570},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1248, col: 1, offset: 34604},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 5, offset: 34625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1249, col: 5, offset: 34625},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1249, col: 5, offset: 34625},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1249, col: 5, offset: 34625},
									expr: &choiceExpr{
										pos: position{line: 1249, col: 7, offset: 34627},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1249, col: 7, offset: 34627},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1249, col: 13, offset: 34633},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1249, col: 26, offset: 34646,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1250, col: 5, offset: 34683},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1250, col: 5, offset: 34683},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1250, col: 5, offset: 34683},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1250, col: 10, offset: 34688},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1250, col: 12, offset: 34690},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1252, col: 1, offset: 34724},
			expr: &actionExpr{
				pos: position{line: 1253, col: 5, offset: 34736},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1253, col: 5, offset: 34736},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1253, col: 5, offset: 34736},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1253, col: 10, offset: 34741},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1253, col: 23, offset: 34754},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1253, col: 28, offset: 34759},
								expr: &ruleRefExpr{
									pos:  position{line: 1253, col: 28, offset: 34759},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1255, col: 1, offset: 34821},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 5, offset: 34838},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 5, offset: 34838},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 5, offset: 34855},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1259, col: 1, offset: 34867},
			expr: &actionExpr{
				pos: position{line: 1259, col: 16, offset: 34882},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1259, col: 16, offset: 34882},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1261, col: 1, offset: 34931},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 34947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1262, col: 5, offset: 34947},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1263, col: 5, offset: 34964},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1265, col: 1, offset: 34971},
			expr: &actionExpr{
				pos: position{line: 1265, col: 14, offset: 34984},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 14, offset: 34984},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1265, col: 14, offset: 34984},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 19, offset: 34989},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1265, col: 22, offset: 34992},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1265, col: 22, offset: 34992},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1265, col: 38, offset: 35008},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1267, col: 1, offset: 35044},
			expr: &actionExpr{
				pos: position{line: 1268, col: 5, offset: 35060},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 5, offset: 35060},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1268, col: 5, offset: 35060},
							expr: &ruleRefExpr{
								pos:  position{line: 1268, col: 6, offset: 35061},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1268, col: 22, offset: 35077},
							expr: &ruleRefExpr{
								pos:  position{line: 1268, col: 23, offset: 35078},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1268, col: 35, offset: 35090},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1268, col: 40, offset: 35095},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1268, col: 50, offset: 35105},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1268, col: 55, offset: 35110},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 55, offset: 35110},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1272, col: 1, offset: 35179},
			expr: &seqExpr{
				pos: position{line: 1272, col: 19, offset: 35197},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1272, col: 19, offset: 35197},
						expr: &litMatcher{
							pos:        position{line: 1272, col: 19, offset: 35197},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 24, offset: 35202},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1273, col: 1, offset: 35215},
			expr: &seqExpr{
				pos: position{line: 1273, col: 15, offset: 35229},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1273, col: 15, offset: 35229},
						expr: &ruleRefExpr{
							pos:  position{line: 1273, col: 15, offset: 35229},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1273, col: 28, offset: 35242},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1275, col: 1, offset: 35247},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 5, offset: 35261},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1276, col: 5, offset: 35261},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 5, offset: 35278},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1278, col: 5, offset: 35290},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1278, col: 5, offset: 35290},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1280, col: 1, offset: 35314},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 5, offset: 35327},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1281, col: 5, offset: 35327},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1282, col: 5, offset: 35341},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1284, col: 1, offset: 35348},
			expr: &actionExpr{
				pos: position{line: 1284, col: 11, offset: 35358},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 11, offset: 35358},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1284, col: 11, offset: 35358},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 16, offset: 35363},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1284, col: 19, offset: 35366},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1284, col: 19, offset: 35366},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1284, col: 32, offset: 35379},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1286, col: 1, offset: 35415},
			expr: &choiceExpr{
				pos: position{line: 1287, col: 5, offset: 35430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 35430},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1287, col: 5, offset: 35430},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1288, col: 5, offset: 35458},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1288, col: 5, offset: 35458},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1289, col: 5, offset: 35488},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1292, col: 1, offset: 35495},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 35516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1293, col: 5, offset: 35516},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1293, col: 5, offset: 35516},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1293, col: 5, offset: 35516},
									expr: &choiceExpr{
										pos: position{line: 1293, col: 7, offset: 35518},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1293, col: 7, offset: 35518},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1293, col: 13, offset: 35524},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1293, col: 26, offset: 35537,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1294, col: 5, offset: 35574},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1294, col: 5, offset: 35574},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1294, col: 5, offset: 35574},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1294, col: 10, offset: 35579},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1294, col: 12, offset: 35581},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1296, col: 1, offset: 35615},
			expr: &choiceExpr{
				pos: position{line: 1297, col: 5, offset: 35634},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1297, col: 5, offset: 35634},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 5, offset: 35655},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1300, col: 1, offset: 35670},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 5, offset: 35691},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1301, col: 5, offset: 35691},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 35699},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1302, col: 5, offset: 35699},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1303, col: 5, offset: 35739},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 35748},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1304, col: 5, offset: 35748},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 35777},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1305, col: 5, offset: 35777},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 35806},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1306, col: 5, offset: 35806},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 5, offset: 35835},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1307, col: 5, offset: 35835},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 35864},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1308, col: 5, offset: 35864},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 35893},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1309, col: 5, offset: 35893},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1311, col: 1, offset: 35919},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 35937},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1312, col: 5, offset: 35937},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1312, col: 5, offset: 35937},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1313, col: 5, offset: 35965},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1313, col: 5, offset: 35965},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1314, col: 5, offset: 35993},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1316, col: 1, offset: 35999},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 5, offset: 36017},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 36017},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1317, col: 5, offset: 36017},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1317, col: 5, offset: 36017},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1317, col: 9, offset: 36021},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1317, col: 16, offset: 36028},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1317, col: 16, offset: 36028},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1317, col: 25, offset: 36037},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1317, col: 34, offset: 36046},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1317, col: 43, offset: 36055},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 36118},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1320, col: 5, offset: 36118},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1320, col: 5, offset: 36118},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1320, col: 9, offset: 36122},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 13, offset: 36126},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1320, col: 20, offset: 36133},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1320, col: 20, offset: 36133},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1320, col: 29, offset: 36142},
												expr: &ruleRefExpr{
													pos:  position{line: 1320, col: 29, offset: 36142},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1320, col: 39, offset: 36152},
												expr: &ruleRefExpr{
													pos:  position{line: 1320, col: 39, offset: 36152},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1320, col: 49, offset: 36162},
												expr: &ruleRefExpr{
													pos:  position{line: 1320, col: 49, offset: 36162},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1320, col: 59, offset: 36172},
												expr: &ruleRefExpr{
													pos:  position{line: 1320, col: 59, offset: 36172},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1320, col: 69, offset: 36182},
												expr: &ruleRefExpr{
													pos:  position{line: 1320, col: 69, offset: 36182},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 80, offset: 36193},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1324, col: 1, offset: 36247},
			expr: &actionExpr{
				pos: position{line: 1325, col: 5, offset: 36265},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 5, offset: 36265},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1325, col: 5, offset: 36265},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 9, offset: 36269},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 14, offset: 36274},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1325, col: 25, offset: 36285},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1325, col: 29, offset: 36289},
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 30, offset: 36290},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1327, col: 1, offset: 36325},
			expr: &actionExpr{
				pos: position{line: 1328, col: 5, offset: 36340},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1328, col: 5, offset: 36340},
					expr: &choiceExpr{
						pos: position{line: 1328, col: 6, offset: 36341},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1328, col: 6, offset: 36341},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1328, col: 15, offset: 36350},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1328, col: 15, offset: 36350},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1328, col: 20, offset: 36355,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1330, col: 1, offset: 36391},
			expr: &charClassMatcher{
				pos:        position{line: 1331, col: 5, offset: 36407},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1333, col: 1, offset: 36422},
			expr: &oneOrMoreExpr{
				pos: position{line: 1333, col: 6, offset: 36427},
				expr: &ruleRefExpr{
					pos:  position{line: 1333, col: 6, offset: 36427},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1335, col: 1, offset: 36438},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1335, col: 6, offset: 36443},
				expr: &ruleRefExpr{
					pos:  position{line: 1335, col: 6, offset: 36443},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1337, col: 1, offset: 36454},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 5, offset: 36467},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1338, col: 5, offset: 36467},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 5, offset: 36482},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 5, offset: 36501},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1342, col: 1, offset: 36510},
			expr: &anyMatcher{
				line: 1343, col: 5, offset: 36530,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1345, col: 1, offset: 36533},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 5, offset: 36561},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1346, col: 5, offset: 36561},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1347, col: 5, offset: 36570},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1348, col: 5, offset: 36579},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1349, col: 5, offset: 36588},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1350, col: 5, offset: 36596},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1351, col: 5, offset: 36609},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1353, col: 1, offset: 36619},
			expr: &charClassMatcher{
				pos:        position{line: 1354, col: 5, offset: 36638},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1360, col: 1, offset: 36968},
			expr: &ruleRefExpr{
				pos:  position{line: 1363, col: 5, offset: 37039},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1365, col: 1, offset: 37058},
			expr: &seqExpr{
				pos: position{line: 1366, col: 5, offset: 37079},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1366, col: 5, offset: 37079},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1366, col: 10, offset: 37084},
						expr: &seqExpr{
							pos: position{line: 1366, col: 11, offset: 37085},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1366, col: 11, offset: 37085},
									expr: &litMatcher{
										pos:        position{line: 1366, col: 12, offset: 37086},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 17, offset: 37091},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1366, col: 35, offset: 37109},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1368, col: 1, offset: 37115},
			expr: &seqExpr{
				pos: position{line: 1369, col: 5, offset: 37137},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1369, col: 5, offset: 37137},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1369, col: 10, offset: 37142},
						expr: &seqExpr{
							pos: position{line: 1369, col: 11, offset: 37143},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1369, col: 11, offset: 37143},
									expr: &ruleRefExpr{
										pos:  position{line: 1369, col: 12, offset: 37144},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1369, col: 27, offset: 37159},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1371, col: 1, offset: 37178},
			expr: &seqExpr{
				pos: position{line: 1371, col: 7, offset: 37184},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1371, col: 7, offset: 37184},
						expr: &ruleRefExpr{
							pos:  position{line: 1371, col: 7, offset: 37184},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 19, offset: 37196},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1373, col: 1, offset: 37212},
			expr: &choiceExpr{
				pos: position{line: 1373, col: 7, offset: 37218},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1373, col: 7, offset: 37218},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 37222},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1375, col: 1, offset: 37227},
			expr: &notExpr{
				pos: position{line: 1375, col: 7, offset: 37233},
				expr: &anyMatcher{
					line: 1375, col: 8, offset: 37234,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr12(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr12(stack["v"])
}

func (c *current) onSearchExpr18() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr18()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onWhereProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereProc1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["expr"])
}

func (c *current) onOverProc2(over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": nil, "over": over}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["over"])
}

func (c *current) onOverProc5(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil, "as": ""}, nil

}

func (p *parser) callonOverProc5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc5(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, as, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": as}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["as"], stack["scope"])
}

func (c *current) onOverWith1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": ""}}, nil

}

func (p *parser) callonOverWith1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverWith1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onAs2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonAs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs2(stack["id"])
}

func (c *current) onAs9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAs9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs9()
}

func (c *current) onLetProc2(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc2(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onComparisonExpr12(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "~", "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr12(stack["lhs"], stack["rhs"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onGrep2(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}, nil

}

func (p *parser) callonGrep2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep2(stack["pattern"])
}

func (c *current) onGrep12(pattern, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": expr}, nil

}

func (p *parser) callonGrep12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep12(stack["pattern"], stack["expr"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
