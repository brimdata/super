// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 4, col: 1, offset: 23},
			expr: &choiceExpr{
				pos: position{line: 5, col: 5, offset: 33},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 5, col: 5, offset: 33},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 5, col: 5, offset: 33},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 5, col: 5, offset: 33},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 5, col: 8, offset: 36},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 5, col: 14, offset: 42},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 20, offset: 48},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 23, offset: 51},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 6, col: 5, offset: 81},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 6, col: 5, offset: 81},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 6, col: 5, offset: 81},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 6, col: 8, offset: 84},
									label: "body",
									expr: &ruleRefExpr{
										pos:  position{line: 6, col: 13, offset: 89},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 24, offset: 100},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 27, offset: 103},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 9, col: 1, offset: 201},
			expr: &actionExpr{
				pos: position{line: 10, col: 5, offset: 211},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 10, col: 5, offset: 211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 5, offset: 211},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 10, col: 11, offset: 217},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 11, offset: 217},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 17, offset: 223},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 22, offset: 228},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 13, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 14, col: 5, offset: 350},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 14, col: 5, offset: 350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 14, col: 5, offset: 350},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 11, offset: 356},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 14, col: 21, offset: 366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 14, col: 26, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 14, col: 26, offset: 371},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 522},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 539},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 539},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 539},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 542},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 547},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 550},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 552},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 18, col: 1, offset: 580},
			expr: &actionExpr{
				pos: position{line: 19, col: 5, offset: 589},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 19, col: 5, offset: 589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 589},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 19, col: 8, offset: 592},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 19, col: 8, offset: 592},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 19, col: 20, offset: 604},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 19, col: 30, offset: 614},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 20, col: 1, offset: 634},
			expr: &choiceExpr{
				pos: position{line: 21, col: 5, offset: 648},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 648},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 21, col: 5, offset: 648},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 21, col: 5, offset: 648},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 21, col: 13, offset: 656},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 21, col: 15, offset: 658},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 21, col: 18, offset: 661},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 21, col: 33, offset: 676},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 21, col: 36, offset: 679},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 21, col: 40, offset: 683},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 21, col: 43, offset: 686},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 21, col: 48, offset: 691},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 793},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 24, col: 5, offset: 793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 24, col: 5, offset: 793},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 12, offset: 800},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 14, offset: 802},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 24, col: 18, offset: 806},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 24, col: 18, offset: 806},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 24, col: 35, offset: 823},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 49, offset: 837},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 24, col: 52, offset: 840},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 56, offset: 844},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 59, offset: 847},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 24, col: 63, offset: 851},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 27, col: 1, offset: 1057},
			expr: &actionExpr{
				pos: position{line: 28, col: 5, offset: 1070},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 28, col: 5, offset: 1070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 28, col: 5, offset: 1070},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 12, offset: 1077},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 14, offset: 1079},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 17, offset: 1082},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 32, offset: 1097},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 35, offset: 1100},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 39, offset: 1104},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 42, offset: 1107},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 49, offset: 1114},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 65, offset: 1130},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 68, offset: 1133},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 72, offset: 1137},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 75, offset: 1140},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 79, offset: 1144},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 82, offset: 1147},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 86, offset: 1151},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 89, offset: 1154},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 94, offset: 1159},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 99, offset: 1164},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 102, offset: 1167},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 31, col: 1, offset: 1280},
			expr: &choiceExpr{
				pos: position{line: 32, col: 5, offset: 1294},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 32, col: 5, offset: 1294},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 32, col: 5, offset: 1294},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 32, col: 5, offset: 1294},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 12, offset: 1301},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 32, col: 15, offset: 1304},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 32, col: 19, offset: 1308},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 32, col: 23, offset: 1312},
										expr: &ruleRefExpr{
											pos:  position{line: 32, col: 23, offset: 1312},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 28, offset: 1317},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 32, col: 31, offset: 1320},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1409},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1409},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 35, col: 5, offset: 1409},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 35, col: 14, offset: 1418},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 35, col: 16, offset: 1420},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 21, offset: 1425},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 35, col: 26, offset: 1430},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 35, col: 28, offset: 1432},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 35, col: 32, offset: 1436},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 38, offset: 1442},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 38, offset: 1442},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 35, col: 49, offset: 1453},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 35, col: 52, offset: 1456},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1561},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 38, col: 5, offset: 1561},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 38, col: 5, offset: 1561},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 38, col: 14, offset: 1570},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 38, col: 17, offset: 1573},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 38, col: 21, offset: 1577},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 38, col: 27, offset: 1583},
										expr: &ruleRefExpr{
											pos:  position{line: 38, col: 27, offset: 1583},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 38, col: 38, offset: 1594},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 38, col: 41, offset: 1597},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 1701},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 1701},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 41, col: 5, offset: 1701},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 12, offset: 1708},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 15, offset: 1711},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 41, col: 19, offset: 1715},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 41, col: 26, offset: 1722},
										expr: &ruleRefExpr{
											pos:  position{line: 41, col: 26, offset: 1722},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 35, offset: 1731},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 38, offset: 1734},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 44, col: 5, offset: 1825},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 44, col: 5, offset: 1825},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 44, col: 5, offset: 1825},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 44, col: 9, offset: 1829},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 44, col: 12, offset: 1832},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 18, offset: 1838},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 44, col: 24, offset: 1844},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 44, col: 27, offset: 1847},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 45, col: 5, offset: 1877},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 45, col: 8, offset: 1880},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1893},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 46, col: 5, offset: 1893},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 7, offset: 1895},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 46, col: 20, offset: 1908},
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 21, offset: 1909},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 1939},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 1939},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 47, col: 5, offset: 1939},
									expr: &seqExpr{
										pos: position{line: 47, col: 7, offset: 1941},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 47, col: 7, offset: 1941},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 47, col: 16, offset: 1950},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 47, col: 25, offset: 1959},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 27, offset: 1961},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 47, col: 39, offset: 1973},
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 40, offset: 1974},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 2004},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 2004},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 48, col: 5, offset: 2004},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 14, offset: 2013},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 48, col: 16, offset: 2015},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 21, offset: 2020},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 2119},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 51, col: 5, offset: 2119},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 10, offset: 2124},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 2223},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 54, col: 5, offset: 2223},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 10, offset: 2228},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 2316},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 57, col: 5, offset: 2316},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 10, offset: 2321},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 60, col: 1, offset: 2407},
			expr: &seqExpr{
				pos: position{line: 60, col: 11, offset: 2417},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 2417},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 60, col: 15, offset: 2421},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 60, col: 15, offset: 2421},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 22, offset: 2428},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 60, col: 43, offset: 2449},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 60, col: 50, offset: 2456},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 56, offset: 2462},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 61, col: 1, offset: 2467},
			expr: &seqExpr{
				pos: position{line: 61, col: 8, offset: 2474},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 61, col: 8, offset: 2474},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 61, col: 12, offset: 2478},
						expr: &choiceExpr{
							pos: position{line: 61, col: 14, offset: 2480},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 14, offset: 2480},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 61, col: 20, offset: 2486},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 62, col: 1, offset: 2491},
			expr: &actionExpr{
				pos: position{line: 62, col: 7, offset: 2497},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 62, col: 7, offset: 2497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 62, col: 7, offset: 2497},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 62, col: 10, offset: 2500},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 15, offset: 2505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 18, offset: 2508},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 22, offset: 2512},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 63, col: 1, offset: 2543},
			expr: &actionExpr{
				pos: position{line: 64, col: 5, offset: 2557},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 64, col: 5, offset: 2557},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 64, col: 5, offset: 2557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 8, offset: 2560},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 13, offset: 2565},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 64, col: 18, offset: 2570},
							label: "leg",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 22, offset: 2574},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 67, col: 1, offset: 2652},
			expr: &choiceExpr{
				pos: position{line: 68, col: 5, offset: 2661},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2661},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2661},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 2661},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 12, offset: 2668},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 68, col: 14, offset: 2670},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 19, offset: 2675},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 2705},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 69, col: 5, offset: 2705},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 70, col: 1, offset: 2735},
			expr: &actionExpr{
				pos: position{line: 71, col: 5, offset: 2747},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 71, col: 5, offset: 2747},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 71, col: 5, offset: 2747},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 8, offset: 2750},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 15, offset: 2757},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 71, col: 26, offset: 2768},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 71, col: 30, offset: 2772},
								expr: &seqExpr{
									pos: position{line: 71, col: 31, offset: 2773},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 71, col: 31, offset: 2773},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 71, col: 34, offset: 2776},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 71, col: 39, offset: 2781},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 71, col: 42, offset: 2784},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 78, col: 1, offset: 2981},
			expr: &choiceExpr{
				pos: position{line: 79, col: 5, offset: 2996},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 79, col: 5, offset: 2996},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 5, offset: 3005},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 3013},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 5, offset: 3022},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 83, col: 1, offset: 3029},
			expr: &seqExpr{
				pos: position{line: 83, col: 13, offset: 3041},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 83, col: 13, offset: 3041},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 83, col: 17, offset: 3045},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 83, col: 18, offset: 3046},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 83, col: 18, offset: 3046},
										expr: &litMatcher{
											pos:        position{line: 83, col: 19, offset: 3047},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 24, offset: 3052},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 38, offset: 3066},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 57, offset: 3085},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 83, col: 82, offset: 3110},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 88, offset: 3116},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 94, offset: 3122},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 100, offset: 3128},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 84, col: 1, offset: 3133},
			expr: &actionExpr{
				pos: position{line: 84, col: 14, offset: 3146},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 84, col: 15, offset: 3147},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 84, col: 15, offset: 3147},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 22, offset: 3154},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 84, col: 30, offset: 3162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 84, col: 30, offset: 3162},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 84, col: 35, offset: 3167},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 36, offset: 3168},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 84, col: 54, offset: 3186},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 61, offset: 3193},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 67, offset: 3199},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 74, offset: 3206},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 85, col: 1, offset: 3242},
			expr: &actionExpr{
				pos: position{line: 86, col: 5, offset: 3260},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 86, col: 5, offset: 3260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 3260},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 11, offset: 3266},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 21, offset: 3276},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 86, col: 26, offset: 3281},
								expr: &ruleRefExpr{
									pos:  position{line: 86, col: 26, offset: 3281},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 89, col: 1, offset: 3354},
			expr: &actionExpr{
				pos: position{line: 89, col: 16, offset: 3369},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 89, col: 16, offset: 3369},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 16, offset: 3369},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 18, offset: 3371},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 26, offset: 3379},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 28, offset: 3381},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 30, offset: 3383},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 90, col: 1, offset: 3432},
			expr: &actionExpr{
				pos: position{line: 91, col: 5, offset: 3446},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 91, col: 5, offset: 3446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 91, col: 5, offset: 3446},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 11, offset: 3452},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 3469},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 92, col: 10, offset: 3474},
								expr: &actionExpr{
									pos: position{line: 92, col: 11, offset: 3475},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 92, col: 11, offset: 3475},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 92, col: 11, offset: 3475},
												expr: &seqExpr{
													pos: position{line: 92, col: 12, offset: 3476},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 92, col: 12, offset: 3476},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 92, col: 14, offset: 3478},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 92, col: 25, offset: 3489},
												name: "_",
											},
											&notExpr{
												pos: position{line: 92, col: 27, offset: 3491},
												expr: &choiceExpr{
													pos: position{line: 92, col: 29, offset: 3493},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 92, col: 29, offset: 3493},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 92, col: 39, offset: 3503},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 92, col: 59, offset: 3523},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 92, col: 64, offset: 3528},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 95, col: 1, offset: 3643},
			expr: &choiceExpr{
				pos: position{line: 96, col: 5, offset: 3666},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 96, col: 5, offset: 3666},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 5, offset: 3666},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 16, offset: 3677},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 96, col: 19, offset: 3680},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 24, offset: 3685},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 97, col: 5, offset: 3692},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 97, col: 5, offset: 3692},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 10, offset: 3697},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 98, col: 1, offset: 3700},
			expr: &choiceExpr{
				pos: position{line: 99, col: 5, offset: 3717},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 3717},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 99, col: 5, offset: 3717},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 99, col: 6, offset: 3718},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 99, col: 6, offset: 3718},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 99, col: 6, offset: 3718},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 99, col: 15, offset: 3727},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 99, col: 19, offset: 3731},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 99, col: 19, offset: 3731},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 99, col: 23, offset: 3735},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 99, col: 27, offset: 3739},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 29, offset: 3741},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 3853},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 102, col: 5, offset: 3853},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 102, col: 5, offset: 3853},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 102, col: 9, offset: 3857},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 102, col: 12, offset: 3860},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 17, offset: 3865},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 102, col: 31, offset: 3879},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 102, col: 34, offset: 3882},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3911},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 104, col: 1, offset: 3922},
			expr: &choiceExpr{
				pos: position{line: 105, col: 5, offset: 3937},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 105, col: 5, offset: 3937},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 3946},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 3957},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 3957},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 107, col: 5, offset: 3957},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 7, offset: 3959},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 107, col: 20, offset: 3972},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 107, col: 20, offset: 3972},
											expr: &ruleRefExpr{
												pos:  position{line: 107, col: 21, offset: 3973},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 107, col: 33, offset: 3985},
											expr: &seqExpr{
												pos: position{line: 107, col: 35, offset: 3987},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 107, col: 35, offset: 3987},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 107, col: 37, offset: 3989},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 4101},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 4101},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 110, col: 5, offset: 4101},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 110, col: 9, offset: 4105},
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 10, offset: 4106},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 5, offset: 4222},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 114, col: 1, offset: 4238},
			expr: &choiceExpr{
				pos: position{line: 115, col: 5, offset: 4258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 115, col: 5, offset: 4258},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 115, col: 5, offset: 4258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 115, col: 5, offset: 4258},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 9, offset: 4262},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 22, offset: 4275},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 115, col: 25, offset: 4278},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 28, offset: 4281},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 39, offset: 4292},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 115, col: 42, offset: 4295},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 46, offset: 4299},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 118, col: 6, offset: 4422},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 118, col: 6, offset: 4422},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 118, col: 6, offset: 4422},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 12, offset: 4428},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 118, col: 21, offset: 4437},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 118, col: 26, offset: 4442},
										expr: &ruleRefExpr{
											pos:  position{line: 118, col: 27, offset: 4443},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 121, col: 1, offset: 4514},
			expr: &choiceExpr{
				pos: position{line: 122, col: 5, offset: 4530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 122, col: 5, offset: 4530},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 123, col: 5, offset: 4542},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 123, col: 5, offset: 4542},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 123, col: 5, offset: 4542},
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 6, offset: 4543},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 123, col: 20, offset: 4557},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 22, offset: 4559},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 126, col: 1, offset: 4666},
			expr: &actionExpr{
				pos: position{line: 127, col: 5, offset: 4675},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 127, col: 5, offset: 4675},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 127, col: 13, offset: 4683},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 130, col: 1, offset: 4778},
			expr: &actionExpr{
				pos: position{line: 131, col: 5, offset: 4789},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 131, col: 5, offset: 4789},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 131, col: 13, offset: 4797},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 134, col: 1, offset: 4896},
			expr: &choiceExpr{
				pos: position{line: 135, col: 5, offset: 4912},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 5, offset: 4912},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 135, col: 5, offset: 4912},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 135, col: 5, offset: 4912},
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 5, offset: 4912},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 135, col: 16, offset: 4923},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 21, offset: 4928},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 135, col: 33, offset: 4940},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 39, offset: 4946},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 5072},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 138, col: 5, offset: 5072},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 138, col: 5, offset: 5072},
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 5, offset: 5072},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 16, offset: 5083},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 21, offset: 5088},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 36, offset: 5103},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 138, col: 41, offset: 5108},
										expr: &seqExpr{
											pos: position{line: 138, col: 42, offset: 5109},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 138, col: 42, offset: 5109},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 44, offset: 5111},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 58, offset: 5125},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 64, offset: 5131},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 145, col: 1, offset: 5344},
			expr: &seqExpr{
				pos: position{line: 145, col: 13, offset: 5356},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 145, col: 13, offset: 5356},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 145, col: 25, offset: 5368},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 146, col: 1, offset: 5370},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 5386},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 147, col: 5, offset: 5386},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 147, col: 5, offset: 5386},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 5394},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 15, offset: 5396},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 23, offset: 5404},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 148, col: 1, offset: 5444},
			expr: &choiceExpr{
				pos: position{line: 149, col: 5, offset: 5457},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 5457},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 5457},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 149, col: 5, offset: 5457},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 149, col: 7, offset: 5459},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 14, offset: 5466},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 149, col: 16, offset: 5468},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 25, offset: 5477},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 149, col: 27, offset: 5479},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 33, offset: 5485},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 5516},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 150, col: 5, offset: 5516},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 151, col: 1, offset: 5537},
			expr: &choiceExpr{
				pos: position{line: 152, col: 5, offset: 5556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 152, col: 5, offset: 5556},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 5571},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 153, col: 5, offset: 5571},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 153, col: 10, offset: 5576},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 154, col: 1, offset: 5667},
			expr: &actionExpr{
				pos: position{line: 155, col: 5, offset: 5687},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 155, col: 5, offset: 5687},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 155, col: 5, offset: 5687},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 155, col: 11, offset: 5693},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 155, col: 26, offset: 5708},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 155, col: 31, offset: 5713},
								expr: &actionExpr{
									pos: position{line: 155, col: 32, offset: 5714},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 155, col: 32, offset: 5714},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 155, col: 32, offset: 5714},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 155, col: 35, offset: 5717},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 155, col: 39, offset: 5721},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 155, col: 42, offset: 5724},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 155, col: 47, offset: 5729},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 158, col: 1, offset: 5849},
			expr: &choiceExpr{
				pos: position{line: 159, col: 5, offset: 5867},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 5867},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 5867},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 159, col: 5, offset: 5867},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 10, offset: 5872},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 159, col: 15, offset: 5877},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 159, col: 18, offset: 5880},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 159, col: 23, offset: 5885},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 159, col: 26, offset: 5888},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 30, offset: 5892},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 5996},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 162, col: 5, offset: 5996},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 9, offset: 6000},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 165, col: 1, offset: 6099},
			expr: &actionExpr{
				pos: position{line: 166, col: 5, offset: 6107},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 166, col: 5, offset: 6107},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 166, col: 5, offset: 6107},
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 6, offset: 6108},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 16, offset: 6118},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 19, offset: 6121},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 27, offset: 6129},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 166, col: 30, offset: 6132},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 34, offset: 6136},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 37, offset: 6139},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 42, offset: 6144},
								expr: &choiceExpr{
									pos: position{line: 166, col: 43, offset: 6145},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 166, col: 43, offset: 6145},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 166, col: 54, offset: 6156},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 61, offset: 6163},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 166, col: 64, offset: 6166},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 166, col: 68, offset: 6170},
							expr: &seqExpr{
								pos: position{line: 166, col: 70, offset: 6172},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 166, col: 70, offset: 6172},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 166, col: 73, offset: 6175},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 78, offset: 6180},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 84, offset: 6186},
								expr: &ruleRefExpr{
									pos:  position{line: 166, col: 84, offset: 6186},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 173, col: 1, offset: 6375},
			expr: &choiceExpr{
				pos: position{line: 174, col: 5, offset: 6387},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 174, col: 5, offset: 6387},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 6406},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 5, offset: 6419},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 177, col: 1, offset: 6427},
			expr: &actionExpr{
				pos: position{line: 177, col: 15, offset: 6441},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 177, col: 15, offset: 6441},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 177, col: 15, offset: 6441},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 177, col: 17, offset: 6443},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 25, offset: 6451},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 27, offset: 6453},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 32, offset: 6458},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 178, col: 1, offset: 6493},
			expr: &actionExpr{
				pos: position{line: 179, col: 5, offset: 6512},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 179, col: 5, offset: 6512},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 179, col: 5, offset: 6512},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 11, offset: 6518},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 179, col: 25, offset: 6532},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 179, col: 30, offset: 6537},
								expr: &seqExpr{
									pos: position{line: 179, col: 31, offset: 6538},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 179, col: 31, offset: 6538},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 179, col: 34, offset: 6541},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 179, col: 38, offset: 6545},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 179, col: 41, offset: 6548},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 186, col: 1, offset: 6746},
			expr: &choiceExpr{
				pos: position{line: 187, col: 5, offset: 6759},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 6759},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 6772},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 6783},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 6793},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 6803},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 6814},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 6825},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 5, offset: 6836},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 195, col: 5, offset: 6848},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 6859},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 5, offset: 6869},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 5, offset: 6882},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 6893},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6905},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6916},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 202, col: 5, offset: 6929},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6939},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6950},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6961},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 6975},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6987},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6998},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 5, offset: 7010},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 210, col: 1, offset: 7017},
			expr: &actionExpr{
				pos: position{line: 211, col: 5, offset: 7030},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 211, col: 5, offset: 7030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 211, col: 5, offset: 7030},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 14, offset: 7039},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 16, offset: 7041},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 211, col: 22, offset: 7047},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 211, col: 22, offset: 7047},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 24, offset: 7049},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 214, col: 1, offset: 7948},
			expr: &actionExpr{
				pos: position{line: 215, col: 5, offset: 7959},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 215, col: 5, offset: 7959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 215, col: 5, offset: 7959},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 215, col: 12, offset: 7966},
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 13, offset: 7967},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 215, col: 18, offset: 7972},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 23, offset: 7977},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 215, col: 32, offset: 7986},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 215, col: 37, offset: 7991},
								expr: &actionExpr{
									pos: position{line: 215, col: 38, offset: 7992},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 215, col: 38, offset: 7992},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 215, col: 38, offset: 7992},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 215, col: 40, offset: 7994},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 215, col: 42, offset: 7996},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 228, col: 1, offset: 8404},
			expr: &actionExpr{
				pos: position{line: 228, col: 12, offset: 8415},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 228, col: 12, offset: 8415},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 228, col: 17, offset: 8420},
						expr: &actionExpr{
							pos: position{line: 228, col: 18, offset: 8421},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 228, col: 18, offset: 8421},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 228, col: 18, offset: 8421},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 228, col: 20, offset: 8423},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 228, col: 22, offset: 8425},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 229, col: 1, offset: 8480},
			expr: &choiceExpr{
				pos: position{line: 230, col: 5, offset: 8492},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 8492},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 230, col: 5, offset: 8492},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 8567},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 231, col: 5, offset: 8567},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 231, col: 5, offset: 8567},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 231, col: 14, offset: 8576},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 231, col: 16, offset: 8578},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 231, col: 23, offset: 8585},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 231, col: 24, offset: 8586},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 231, col: 24, offset: 8586},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 231, col: 34, offset: 8596},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 232, col: 1, offset: 8709},
			expr: &actionExpr{
				pos: position{line: 233, col: 5, offset: 8719},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 233, col: 5, offset: 8719},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 5, offset: 8719},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 233, col: 11, offset: 8725},
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 12, offset: 8726},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 17, offset: 8731},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 233, col: 23, offset: 8737},
								expr: &actionExpr{
									pos: position{line: 233, col: 24, offset: 8738},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 233, col: 24, offset: 8738},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 24, offset: 8738},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 26, offset: 8740},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 28, offset: 8742},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 52, offset: 8766},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 233, col: 58, offset: 8772},
								expr: &seqExpr{
									pos: position{line: 233, col: 59, offset: 8773},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 59, offset: 8773},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 233, col: 61, offset: 8775},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 72, offset: 8786},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 233, col: 79, offset: 8793},
								expr: &actionExpr{
									pos: position{line: 233, col: 80, offset: 8794},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 233, col: 80, offset: 8794},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 80, offset: 8794},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 82, offset: 8796},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 84, offset: 8798},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 246, col: 1, offset: 9132},
			expr: &actionExpr{
				pos: position{line: 247, col: 5, offset: 9142},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 247, col: 5, offset: 9142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 5, offset: 9142},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 11, offset: 9148},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 13, offset: 9150},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 18, offset: 9155},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 250, col: 1, offset: 9249},
			expr: &actionExpr{
				pos: position{line: 251, col: 5, offset: 9260},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 251, col: 5, offset: 9260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 5, offset: 9260},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 12, offset: 9267},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 14, offset: 9269},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 19, offset: 9274},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 254, col: 1, offset: 9364},
			expr: &choiceExpr{
				pos: position{line: 255, col: 5, offset: 9375},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 255, col: 5, offset: 9375},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 255, col: 5, offset: 9375},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 255, col: 5, offset: 9375},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 255, col: 12, offset: 9382},
									name: "_",
								},
								&notExpr{
									pos: position{line: 255, col: 14, offset: 9384},
									expr: &ruleRefExpr{
										pos:  position{line: 255, col: 15, offset: 9385},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 255, col: 23, offset: 9393},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 255, col: 29, offset: 9399},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 9479},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 256, col: 5, offset: 9479},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 257, col: 1, offset: 9625},
			expr: &choiceExpr{
				pos: position{line: 258, col: 5, offset: 9636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 258, col: 5, offset: 9636},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 258, col: 5, offset: 9636},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 258, col: 5, offset: 9636},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 258, col: 12, offset: 9643},
									name: "_",
								},
								&notExpr{
									pos: position{line: 258, col: 14, offset: 9645},
									expr: &ruleRefExpr{
										pos:  position{line: 258, col: 15, offset: 9646},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 258, col: 23, offset: 9654},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 258, col: 29, offset: 9660},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 9740},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 259, col: 5, offset: 9740},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 260, col: 1, offset: 9886},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 9898},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 9898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 261, col: 5, offset: 9898},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 13, offset: 9906},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 15, offset: 9908},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 20, offset: 9913},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 264, col: 1, offset: 9998},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 10009},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 10009},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 265, col: 5, offset: 10009},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 265, col: 5, offset: 10009},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 265, col: 12, offset: 10016},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 265, col: 14, offset: 10018},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 5, offset: 10107},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 268, col: 5, offset: 10107},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 271, col: 1, offset: 10195},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 10205},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 10205},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 272, col: 5, offset: 10205},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 11, offset: 10211},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 13, offset: 10213},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 18, offset: 10218},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 275, col: 1, offset: 10308},
			expr: &actionExpr{
				pos: position{line: 276, col: 5, offset: 10321},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 276, col: 5, offset: 10321},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 5, offset: 10321},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 14, offset: 10330},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 16, offset: 10332},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 22, offset: 10338},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 276, col: 33, offset: 10349},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 276, col: 38, offset: 10354},
								expr: &actionExpr{
									pos: position{line: 276, col: 39, offset: 10355},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 276, col: 39, offset: 10355},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 276, col: 39, offset: 10355},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 276, col: 42, offset: 10358},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 276, col: 46, offset: 10362},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 276, col: 49, offset: 10365},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 276, col: 52, offset: 10368},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 279, col: 1, offset: 10532},
			expr: &actionExpr{
				pos: position{line: 280, col: 5, offset: 10543},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 280, col: 5, offset: 10543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 5, offset: 10543},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 280, col: 12, offset: 10550},
							expr: &seqExpr{
								pos: position{line: 280, col: 14, offset: 10552},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 280, col: 14, offset: 10552},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 280, col: 17, offset: 10555},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 280, col: 22, offset: 10560},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 23, offset: 10561},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 283, col: 1, offset: 10631},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 10643},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 10643},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 5, offset: 10643},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 284, col: 13, offset: 10651},
							expr: &seqExpr{
								pos: position{line: 284, col: 15, offset: 10653},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 284, col: 15, offset: 10653},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 284, col: 18, offset: 10656},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 284, col: 23, offset: 10661},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 24, offset: 10662},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 287, col: 1, offset: 10733},
			expr: &actionExpr{
				pos: position{line: 288, col: 5, offset: 10744},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 288, col: 5, offset: 10744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 5, offset: 10744},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 11, offset: 10750},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 288, col: 21, offset: 10760},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 288, col: 28, offset: 10767},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 39, offset: 10778},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 54, offset: 10793},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 57, offset: 10796},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 59, offset: 10798},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 63, offset: 10802},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 71, offset: 10810},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 78, offset: 10817},
								expr: &seqExpr{
									pos: position{line: 288, col: 79, offset: 10818},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 288, col: 79, offset: 10818},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 288, col: 82, offset: 10821},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 86, offset: 10825},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 89, offset: 10828},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 99, offset: 10838},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 107, offset: 10846},
								expr: &seqExpr{
									pos: position{line: 288, col: 108, offset: 10847},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 288, col: 108, offset: 10847},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 110, offset: 10849},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 298, col: 1, offset: 11204},
			expr: &choiceExpr{
				pos: position{line: 299, col: 5, offset: 11218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 11218},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 299, col: 5, offset: 11218},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 299, col: 5, offset: 11218},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 12, offset: 11225},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 300, col: 5, offset: 11254},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 300, col: 5, offset: 11254},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 300, col: 5, offset: 11254},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 13, offset: 11262},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 11292},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 301, col: 5, offset: 11292},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 301, col: 5, offset: 11292},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 301, col: 12, offset: 11299},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 302, col: 5, offset: 11328},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 302, col: 5, offset: 11328},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 302, col: 5, offset: 11328},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 13, offset: 11336},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 303, col: 5, offset: 11366},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 303, col: 5, offset: 11366},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 304, col: 1, offset: 11393},
			expr: &choiceExpr{
				pos: position{line: 305, col: 5, offset: 11412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 305, col: 5, offset: 11412},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 305, col: 5, offset: 11412},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 305, col: 5, offset: 11412},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 305, col: 8, offset: 11415},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 305, col: 12, offset: 11419},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 305, col: 15, offset: 11422},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 305, col: 17, offset: 11424},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 305, col: 28, offset: 11435},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 305, col: 31, offset: 11438},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 305, col: 35, offset: 11442},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 11467},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 306, col: 5, offset: 11467},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 307, col: 1, offset: 11489},
			expr: &choiceExpr{
				pos: position{line: 308, col: 5, offset: 11501},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 308, col: 5, offset: 11501},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 11510},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 11510},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 309, col: 5, offset: 11510},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 309, col: 9, offset: 11514},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 309, col: 14, offset: 11519},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 309, col: 19, offset: 11524},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 310, col: 1, offset: 11549},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 11562},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 11562},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 5, offset: 11562},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 311, col: 14, offset: 11571},
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 15, offset: 11572},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 20, offset: 11577},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 22, offset: 11579},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 314, col: 1, offset: 12315},
			expr: &actionExpr{
				pos: position{line: 315, col: 5, offset: 12332},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 315, col: 5, offset: 12332},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 315, col: 7, offset: 12334},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 318, col: 1, offset: 12433},
			expr: &choiceExpr{
				pos: position{line: 319, col: 5, offset: 12448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 319, col: 5, offset: 12448},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 319, col: 5, offset: 12448},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 319, col: 5, offset: 12448},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 319, col: 7, offset: 12450},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 319, col: 12, offset: 12455},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 12484},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 320, col: 5, offset: 12484},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 321, col: 1, offset: 12554},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 12565},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 12565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 12565},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 12, offset: 12572},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 14, offset: 12574},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 19, offset: 12579},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 34, offset: 12594},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 41, offset: 12601},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 41, offset: 12601},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 53, offset: 12613},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 60, offset: 12620},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 60, offset: 12620},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 71, offset: 12631},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 79, offset: 12639},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 79, offset: 12639},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 91, offset: 12651},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 96, offset: 12656},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 96, offset: 12656},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 325, col: 1, offset: 12814},
			expr: &actionExpr{
				pos: position{line: 326, col: 5, offset: 12828},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 326, col: 5, offset: 12828},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 326, col: 5, offset: 12828},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 326, col: 7, offset: 12830},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 16, offset: 12839},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 18, offset: 12841},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 22, offset: 12845},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 327, col: 1, offset: 12878},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 12893},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 12893},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 328, col: 5, offset: 12893},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 328, col: 7, offset: 12895},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 17, offset: 12905},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 19, offset: 12907},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 23, offset: 12911},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 329, col: 1, offset: 12944},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 12956},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 12956},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 330, col: 5, offset: 12956},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 330, col: 7, offset: 12958},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 330, col: 14, offset: 12965},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 16, offset: 12967},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 20, offset: 12971},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 331, col: 1, offset: 13004},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 13019},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 13019},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 13019},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 9, offset: 13023},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 332, col: 17, offset: 13031},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 332, col: 17, offset: 13031},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 332, col: 34, offset: 13048},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 333, col: 1, offset: 13085},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 13096},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 334, col: 5, offset: 13096},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 334, col: 12, offset: 13103},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 337, col: 1, offset: 13258},
			expr: &choiceExpr{
				pos: position{line: 338, col: 5, offset: 13270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 13270},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 13279},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 13287},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 341, col: 1, offset: 13292},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 13301},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 13301},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 5, offset: 13301},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 12, offset: 13308},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 14, offset: 13310},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 19, offset: 13315},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 24, offset: 13320},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 342, col: 31, offset: 13327},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 31, offset: 13327},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 42, offset: 13338},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 342, col: 51, offset: 13347},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 51, offset: 13347},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 345, col: 1, offset: 13478},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 13487},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 13487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 5, offset: 13487},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 346, col: 12, offset: 13494},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 14, offset: 13496},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 19, offset: 13501},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 347, col: 1, offset: 13531},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 13540},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 13540},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 13540},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 12, offset: 13547},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 14, offset: 13549},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 19, offset: 13554},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 349, col: 1, offset: 13584},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 13597},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 13597},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 350, col: 5, offset: 13597},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 10, offset: 13602},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 19, offset: 13611},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 22, offset: 13614},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 22, offset: 13614},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 353, col: 1, offset: 13711},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 13719},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 13719},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 5, offset: 13719},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 11, offset: 13725},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 354, col: 13, offset: 13727},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 17, offset: 13731},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 21, offset: 13735},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 28, offset: 13742},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 28, offset: 13742},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 39, offset: 13753},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 48, offset: 13762},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 48, offset: 13762},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 357, col: 1, offset: 13891},
			expr: &actionExpr{
				pos: position{line: 357, col: 7, offset: 13897},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 357, col: 7, offset: 13897},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 357, col: 8, offset: 13898},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 8, offset: 13898},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 357, col: 18, offset: 13908},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 28, offset: 13918},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 358, col: 1, offset: 13954},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 13963},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 13963},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 359, col: 5, offset: 13963},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 7, offset: 13965},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 14000},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 360, col: 5, offset: 14000},
							expr: &charClassMatcher{
								pos:        position{line: 360, col: 5, offset: 14000},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 361, col: 1, offset: 14068},
			expr: &actionExpr{
				pos: position{line: 362, col: 5, offset: 14079},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 362, col: 5, offset: 14079},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 362, col: 5, offset: 14079},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 362, col: 7, offset: 14081},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 12, offset: 14086},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 362, col: 14, offset: 14088},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 17, offset: 14091},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 363, col: 1, offset: 14116},
			expr: &actionExpr{
				pos: position{line: 363, col: 9, offset: 14124},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 363, col: 9, offset: 14124},
					expr: &charClassMatcher{
						pos:        position{line: 363, col: 10, offset: 14125},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 364, col: 1, offset: 14170},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 14183},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 14183},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 14183},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 365, col: 5, offset: 14183},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 10, offset: 14188},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 19, offset: 14197},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 365, col: 26, offset: 14204},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 26, offset: 14204},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 38, offset: 14216},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 365, col: 43, offset: 14221},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 43, offset: 14221},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 53, offset: 14231},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 57, offset: 14235},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 14352},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 368, col: 5, offset: 14352},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 10, offset: 14357},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 371, col: 1, offset: 14457},
			expr: &actionExpr{
				pos: position{line: 372, col: 5, offset: 14472},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 372, col: 5, offset: 14472},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 5, offset: 14472},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 372, col: 9, offset: 14476},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 16, offset: 14483},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 373, col: 1, offset: 14521},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 14534},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 374, col: 5, offset: 14534},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 5, offset: 14534},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 374, col: 9, offset: 14538},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 14, offset: 14543},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 375, col: 1, offset: 14579},
			expr: &choiceExpr{
				pos: position{line: 376, col: 5, offset: 14592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 376, col: 5, offset: 14592},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 377, col: 5, offset: 14601},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 377, col: 5, offset: 14601},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 377, col: 5, offset: 14601},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 377, col: 9, offset: 14605},
									expr: &ruleRefExpr{
										pos:  position{line: 377, col: 10, offset: 14606},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 14691},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 379, col: 5, offset: 14702},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 379, col: 5, offset: 14702},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 10, offset: 14707},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 380, col: 1, offset: 14793},
			expr: &choiceExpr{
				pos: position{line: 381, col: 5, offset: 14812},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 381, col: 5, offset: 14812},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 5, offset: 14831},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 5, offset: 14841},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 384, col: 1, offset: 14854},
			expr: &actionExpr{
				pos: position{line: 385, col: 5, offset: 14873},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 385, col: 5, offset: 14873},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 385, col: 6, offset: 14874},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 385, col: 6, offset: 14874},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 385, col: 24, offset: 14892},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 29, offset: 14897},
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 14898},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 14898},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 385, col: 47, offset: 14915},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 386, col: 1, offset: 14952},
			expr: &actionExpr{
				pos: position{line: 387, col: 5, offset: 14967},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 387, col: 5, offset: 14967},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 387, col: 5, offset: 14967},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 387, col: 7, offset: 14969},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 15, offset: 14977},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 17, offset: 14979},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 22, offset: 14984},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 33, offset: 14995},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 39, offset: 15001},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 390, col: 1, offset: 15111},
			expr: &choiceExpr{
				pos: position{line: 391, col: 5, offset: 15122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 391, col: 5, offset: 15122},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 391, col: 5, offset: 15122},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 391, col: 5, offset: 15122},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 391, col: 7, offset: 15124},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 392, col: 5, offset: 15155},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 392, col: 5, offset: 15155},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 393, col: 1, offset: 15180},
			expr: &actionExpr{
				pos: position{line: 394, col: 5, offset: 15194},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 394, col: 5, offset: 15194},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 394, col: 5, offset: 15194},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 394, col: 7, offset: 15196},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 16, offset: 15205},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 18, offset: 15207},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 22, offset: 15211},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 395, col: 1, offset: 15246},
			expr: &choiceExpr{
				pos: position{line: 396, col: 5, offset: 15262},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 15262},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 396, col: 5, offset: 15262},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 397, col: 5, offset: 15295},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 397, col: 5, offset: 15295},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 15330},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 398, col: 5, offset: 15330},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 399, col: 1, offset: 15355},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 15366},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 15366},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 5, offset: 15366},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 400, col: 12, offset: 15373},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 13, offset: 15374},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 403, col: 1, offset: 15443},
			expr: &actionExpr{
				pos: position{line: 404, col: 5, offset: 15457},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 404, col: 5, offset: 15457},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 404, col: 5, offset: 15457},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 404, col: 15, offset: 15467},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 17, offset: 15469},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 22, offset: 15474},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 28, offset: 15480},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 32, offset: 15484},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 40, offset: 15492},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 404, col: 43, offset: 15495},
								expr: &ruleRefExpr{
									pos:  position{line: 404, col: 43, offset: 15495},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 407, col: 1, offset: 15606},
			expr: &actionExpr{
				pos: position{line: 408, col: 5, offset: 15618},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 408, col: 5, offset: 15618},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 408, col: 5, offset: 15618},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 13, offset: 15626},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 15, offset: 15628},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 20, offset: 15633},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 411, col: 1, offset: 15713},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 15724},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 412, col: 5, offset: 15724},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 412, col: 5, offset: 15724},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 412, col: 12, offset: 15731},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 14, offset: 15733},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 20, offset: 15739},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 26, offset: 15745},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 412, col: 33, offset: 15752},
								expr: &ruleRefExpr{
									pos:  position{line: 412, col: 33, offset: 15752},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 41, offset: 15760},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 412, col: 46, offset: 15765},
								expr: &ruleRefExpr{
									pos:  position{line: 412, col: 46, offset: 15765},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 415, col: 1, offset: 15887},
			expr: &choiceExpr{
				pos: position{line: 416, col: 5, offset: 15899},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 15899},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 15899},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 416, col: 5, offset: 15899},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 8, offset: 15902},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 13, offset: 15907},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 16, offset: 15910},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 20, offset: 15914},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 416, col: 23, offset: 15917},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 29, offset: 15923},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 35, offset: 15929},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 38, offset: 15932},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 15962},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 15962},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 417, col: 5, offset: 15962},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 417, col: 8, offset: 15965},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 13, offset: 15970},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 417, col: 16, offset: 15973},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 20, offset: 15977},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 417, col: 23, offset: 15980},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 27, offset: 15984},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 38, offset: 15995},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 417, col: 41, offset: 15998},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 418, col: 1, offset: 16022},
			expr: &actionExpr{
				pos: position{line: 419, col: 5, offset: 16033},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 419, col: 5, offset: 16033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 419, col: 5, offset: 16033},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 419, col: 7, offset: 16035},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 419, col: 14, offset: 16042},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 16, offset: 16044},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 22, offset: 16050},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 39, offset: 16067},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 419, col: 44, offset: 16072},
								expr: &actionExpr{
									pos: position{line: 419, col: 45, offset: 16073},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 419, col: 45, offset: 16073},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 419, col: 45, offset: 16073},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 419, col: 48, offset: 16076},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 419, col: 52, offset: 16080},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 419, col: 55, offset: 16083},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 419, col: 57, offset: 16085},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 422, col: 1, offset: 16204},
			expr: &actionExpr{
				pos: position{line: 423, col: 5, offset: 16225},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 423, col: 5, offset: 16225},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 5, offset: 16225},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 10, offset: 16230},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 25, offset: 16245},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 423, col: 29, offset: 16249},
								expr: &seqExpr{
									pos: position{line: 423, col: 30, offset: 16250},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 423, col: 30, offset: 16250},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 423, col: 33, offset: 16253},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 423, col: 37, offset: 16257},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 423, col: 40, offset: 16260},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 430, col: 1, offset: 16480},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 16492},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 16492},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 16492},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 13, offset: 16500},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 15, offset: 16502},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 21, offset: 16508},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 434, col: 1, offset: 16591},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 16603},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 435, col: 5, offset: 16603},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 435, col: 5, offset: 16603},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 7, offset: 16605},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 10, offset: 16608},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 435, col: 12, offset: 16610},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 16, offset: 16614},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 436, col: 1, offset: 16638},
			expr: &actionExpr{
				pos: position{line: 437, col: 5, offset: 16648},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 437, col: 5, offset: 16648},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 437, col: 5, offset: 16648},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 7, offset: 16650},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 10, offset: 16653},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 12, offset: 16655},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 16, offset: 16659},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 438, col: 1, offset: 16684},
			expr: &ruleRefExpr{
				pos:  position{line: 438, col: 8, offset: 16691},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 439, col: 1, offset: 16701},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 16711},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 16711},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 5, offset: 16711},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 11, offset: 16717},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 16722},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 440, col: 21, offset: 16727},
								expr: &actionExpr{
									pos: position{line: 440, col: 22, offset: 16728},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 440, col: 22, offset: 16728},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 440, col: 22, offset: 16728},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 440, col: 25, offset: 16731},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 440, col: 29, offset: 16735},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 440, col: 32, offset: 16738},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 37, offset: 16743},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 443, col: 1, offset: 16853},
			expr: &ruleRefExpr{
				pos:  position{line: 443, col: 13, offset: 16865},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 444, col: 1, offset: 16870},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 16885},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 16885},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 5, offset: 16885},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 11, offset: 16891},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 21, offset: 16901},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 445, col: 26, offset: 16906},
								expr: &seqExpr{
									pos: position{line: 445, col: 27, offset: 16907},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 445, col: 27, offset: 16907},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 445, col: 30, offset: 16910},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 445, col: 34, offset: 16914},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 445, col: 37, offset: 16917},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 452, col: 1, offset: 17111},
			expr: &actionExpr{
				pos: position{line: 453, col: 5, offset: 17127},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 453, col: 5, offset: 17127},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 5, offset: 17127},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 11, offset: 17133},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 22, offset: 17144},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 27, offset: 17149},
								expr: &actionExpr{
									pos: position{line: 453, col: 28, offset: 17150},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 453, col: 28, offset: 17150},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 453, col: 28, offset: 17150},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 453, col: 31, offset: 17153},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 453, col: 35, offset: 17157},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 453, col: 38, offset: 17160},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 453, col: 40, offset: 17162},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 456, col: 1, offset: 17271},
			expr: &actionExpr{
				pos: position{line: 457, col: 5, offset: 17286},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 457, col: 5, offset: 17286},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 457, col: 5, offset: 17286},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 9, offset: 17290},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 14, offset: 17295},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 457, col: 17, offset: 17298},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 22, offset: 17303},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 457, col: 25, offset: 17306},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 29, offset: 17310},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 458, col: 1, offset: 17400},
			expr: &ruleRefExpr{
				pos:  position{line: 458, col: 8, offset: 17407},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 459, col: 1, offset: 17423},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 17443},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 460, col: 5, offset: 17443},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 460, col: 5, offset: 17443},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 10, offset: 17448},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 460, col: 24, offset: 17462},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 460, col: 28, offset: 17466},
								expr: &seqExpr{
									pos: position{line: 460, col: 29, offset: 17467},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 460, col: 29, offset: 17467},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 460, col: 32, offset: 17470},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 36, offset: 17474},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 39, offset: 17477},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 44, offset: 17482},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 460, col: 47, offset: 17485},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 51, offset: 17489},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 54, offset: 17492},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 468, col: 1, offset: 17752},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 17770},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 17770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 469, col: 5, offset: 17770},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 17776},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 470, col: 5, offset: 17795},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 470, col: 10, offset: 17800},
								expr: &actionExpr{
									pos: position{line: 470, col: 11, offset: 17801},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 470, col: 11, offset: 17801},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 470, col: 11, offset: 17801},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 470, col: 14, offset: 17804},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 470, col: 17, offset: 17807},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 470, col: 25, offset: 17815},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 470, col: 28, offset: 17818},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 470, col: 33, offset: 17823},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 473, col: 1, offset: 17940},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 17959},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 17959},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 474, col: 5, offset: 17959},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 17965},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 475, col: 5, offset: 17984},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 475, col: 10, offset: 17989},
								expr: &actionExpr{
									pos: position{line: 475, col: 11, offset: 17990},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 475, col: 11, offset: 17990},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 475, col: 11, offset: 17990},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 475, col: 14, offset: 17993},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 475, col: 17, offset: 17996},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 475, col: 26, offset: 18005},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 475, col: 29, offset: 18008},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 475, col: 34, offset: 18013},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 478, col: 1, offset: 18130},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 18149},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 479, col: 5, offset: 18149},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 479, col: 5, offset: 18149},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 9, offset: 18153},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 479, col: 22, offset: 18166},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 479, col: 31, offset: 18175},
								expr: &choiceExpr{
									pos: position{line: 479, col: 32, offset: 18176},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 479, col: 32, offset: 18176},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 479, col: 32, offset: 18176},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 35, offset: 18179},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 46, offset: 18190},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 49, offset: 18193},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 479, col: 64, offset: 18208},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 479, col: 64, offset: 18208},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 479, col: 68, offset: 18212},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 479, col: 68, offset: 18212},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 104, offset: 18248},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 107, offset: 18251},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 487, col: 1, offset: 18511},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 18528},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 18528},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 488, col: 5, offset: 18528},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 18534},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 18557},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 489, col: 10, offset: 18562},
								expr: &actionExpr{
									pos: position{line: 489, col: 11, offset: 18563},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 489, col: 11, offset: 18563},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 489, col: 11, offset: 18563},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 489, col: 14, offset: 18566},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 489, col: 17, offset: 18569},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 489, col: 34, offset: 18586},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 489, col: 37, offset: 18589},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 489, col: 42, offset: 18594},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 492, col: 1, offset: 18715},
			expr: &actionExpr{
				pos: position{line: 492, col: 20, offset: 18734},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 492, col: 21, offset: 18735},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 492, col: 21, offset: 18735},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 492, col: 27, offset: 18741},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 493, col: 1, offset: 18777},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 18800},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 18800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 494, col: 5, offset: 18800},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 18806},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 495, col: 5, offset: 18818},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 495, col: 10, offset: 18823},
								expr: &actionExpr{
									pos: position{line: 495, col: 11, offset: 18824},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 495, col: 11, offset: 18824},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 495, col: 11, offset: 18824},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 495, col: 14, offset: 18827},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 17, offset: 18830},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 495, col: 40, offset: 18853},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 495, col: 43, offset: 18856},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 48, offset: 18861},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 498, col: 1, offset: 18971},
			expr: &actionExpr{
				pos: position{line: 498, col: 26, offset: 18996},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 498, col: 27, offset: 18997},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 498, col: 27, offset: 18997},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 498, col: 33, offset: 19003},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 498, col: 39, offset: 19009},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 499, col: 1, offset: 19045},
			expr: &choiceExpr{
				pos: position{line: 500, col: 5, offset: 19057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 500, col: 5, offset: 19057},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 500, col: 5, offset: 19057},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 500, col: 5, offset: 19057},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 500, col: 9, offset: 19061},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 500, col: 12, offset: 19064},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 500, col: 14, offset: 19066},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 5, offset: 19175},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 504, col: 1, offset: 19188},
			expr: &choiceExpr{
				pos: position{line: 505, col: 5, offset: 19205},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 19205},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 505, col: 5, offset: 19205},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 505, col: 5, offset: 19205},
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 6, offset: 19206},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 505, col: 14, offset: 19214},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 505, col: 18, offset: 19218},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 505, col: 21, offset: 19221},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 23, offset: 19223},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 508, col: 5, offset: 19333},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 509, col: 1, offset: 19342},
			expr: &choiceExpr{
				pos: position{line: 510, col: 5, offset: 19355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 19355},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 19355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 510, col: 5, offset: 19355},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 11, offset: 19361},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 510, col: 16, offset: 19366},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 510, col: 21, offset: 19371},
										expr: &ruleRefExpr{
											pos:  position{line: 510, col: 22, offset: 19372},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 19443},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 513, col: 5, offset: 19443},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 513, col: 5, offset: 19443},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 513, col: 11, offset: 19449},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 513, col: 20, offset: 19458},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 513, col: 25, offset: 19463},
										expr: &ruleRefExpr{
											pos:  position{line: 513, col: 26, offset: 19464},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 516, col: 5, offset: 19535},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 5, offset: 19549},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 518, col: 1, offset: 19557},
			expr: &seqExpr{
				pos: position{line: 518, col: 13, offset: 19569},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 518, col: 13, offset: 19569},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 22, offset: 19578},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 518, col: 25, offset: 19581},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 519, col: 1, offset: 19585},
			expr: &choiceExpr{
				pos: position{line: 520, col: 5, offset: 19598},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 520, col: 5, offset: 19598},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 521, col: 5, offset: 19608},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 522, col: 1, offset: 19617},
			expr: &actionExpr{
				pos: position{line: 523, col: 5, offset: 19626},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 523, col: 5, offset: 19626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 523, col: 5, offset: 19626},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 9, offset: 19630},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 18, offset: 19639},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 523, col: 21, offset: 19642},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 25, offset: 19646},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 28, offset: 19649},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 523, col: 34, offset: 19655},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 523, col: 34, offset: 19655},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 523, col: 45, offset: 19666},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 51, offset: 19672},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 523, col: 54, offset: 19675},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 526, col: 1, offset: 19771},
			expr: &choiceExpr{
				pos: position{line: 527, col: 5, offset: 19784},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 527, col: 5, offset: 19784},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 19793},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 528, col: 5, offset: 19793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 528, col: 5, offset: 19793},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 14, offset: 19802},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 17, offset: 19805},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 21, offset: 19809},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 24, offset: 19812},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 33, offset: 19821},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 47, offset: 19835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 50, offset: 19838},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 54, offset: 19842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 57, offset: 19845},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 62, offset: 19850},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 67, offset: 19855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 70, offset: 19858},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 528, col: 74, offset: 19862},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 528, col: 80, offset: 19868},
										expr: &ruleRefExpr{
											pos:  position{line: 528, col: 80, offset: 19868},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 20116},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 532, col: 5, offset: 20116},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 532, col: 5, offset: 20116},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 22, offset: 20133},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 25, offset: 20136},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 29, offset: 20140},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 32, offset: 20143},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 37, offset: 20148},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 42, offset: 20153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 45, offset: 20156},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 49, offset: 20160},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 52, offset: 20163},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 61, offset: 20172},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 75, offset: 20186},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 78, offset: 20189},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 82, offset: 20193},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 85, offset: 20196},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 90, offset: 20201},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 95, offset: 20206},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 98, offset: 20209},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 532, col: 102, offset: 20213},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 532, col: 108, offset: 20219},
										expr: &ruleRefExpr{
											pos:  position{line: 532, col: 108, offset: 20219},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 20481},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 536, col: 5, offset: 20481},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 536, col: 5, offset: 20481},
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 6, offset: 20482},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 536, col: 16, offset: 20492},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 19, offset: 20495},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 536, col: 34, offset: 20510},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 536, col: 37, offset: 20513},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 536, col: 41, offset: 20517},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 536, col: 44, offset: 20520},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 49, offset: 20525},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 536, col: 62, offset: 20538},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 536, col: 65, offset: 20541},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 536, col: 69, offset: 20545},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 536, col: 75, offset: 20551},
										expr: &ruleRefExpr{
											pos:  position{line: 536, col: 75, offset: 20551},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 539, col: 1, offset: 20671},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 20688},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 20688},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 540, col: 5, offset: 20688},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 7, offset: 20690},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 20736},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 542, col: 1, offset: 20750},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 20759},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 20759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 5, offset: 20759},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 12, offset: 20766},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 543, col: 15, offset: 20769},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 19, offset: 20773},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 22, offset: 20776},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 30, offset: 20784},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 38, offset: 20792},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 41, offset: 20795},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 543, col: 45, offset: 20799},
								expr: &seqExpr{
									pos: position{line: 543, col: 46, offset: 20800},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 543, col: 46, offset: 20800},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 543, col: 50, offset: 20804},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 543, col: 55, offset: 20809},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 543, col: 55, offset: 20809},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 543, col: 66, offset: 20820},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 543, col: 72, offset: 20826},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 543, col: 77, offset: 20831},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 550, col: 1, offset: 21071},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 21083},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 551, col: 5, offset: 21083},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 5, offset: 21094},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 21103},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 553, col: 5, offset: 21103},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 7, offset: 21105},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 556, col: 1, offset: 21196},
			expr: &choiceExpr{
				pos: position{line: 557, col: 5, offset: 21214},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 557, col: 5, offset: 21214},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 558, col: 5, offset: 21224},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 558, col: 5, offset: 21224},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 559, col: 1, offset: 21259},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 21269},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 21269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 21269},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 11, offset: 21275},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 16, offset: 21280},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 21, offset: 21285},
								expr: &actionExpr{
									pos: position{line: 560, col: 22, offset: 21286},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 560, col: 22, offset: 21286},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 560, col: 22, offset: 21286},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 560, col: 25, offset: 21289},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 560, col: 29, offset: 21293},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 32, offset: 21296},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 34, offset: 21298},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 563, col: 1, offset: 21405},
			expr: &actionExpr{
				pos: position{line: 564, col: 5, offset: 21419},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 564, col: 5, offset: 21419},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 564, col: 5, offset: 21419},
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 6, offset: 21420},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 10, offset: 21424},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 16, offset: 21430},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 27, offset: 21441},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 564, col: 32, offset: 21446},
								expr: &ruleRefExpr{
									pos:  position{line: 564, col: 33, offset: 21447},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 567, col: 1, offset: 21514},
			expr: &choiceExpr{
				pos: position{line: 568, col: 5, offset: 21524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 21524},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 568, col: 5, offset: 21524},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 568, col: 5, offset: 21524},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 568, col: 9, offset: 21528},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 14, offset: 21533},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 27, offset: 21546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 568, col: 30, offset: 21549},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 34, offset: 21553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 568, col: 37, offset: 21556},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 568, col: 40, offset: 21559},
										expr: &ruleRefExpr{
											pos:  position{line: 568, col: 40, offset: 21559},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 568, col: 54, offset: 21573},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 21704},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 571, col: 5, offset: 21704},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 571, col: 5, offset: 21704},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 9, offset: 21708},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 571, col: 12, offset: 21711},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 16, offset: 21715},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 571, col: 19, offset: 21718},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 22, offset: 21721},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 571, col: 35, offset: 21734},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 21865},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 574, col: 5, offset: 21865},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 574, col: 5, offset: 21865},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 574, col: 9, offset: 21869},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 574, col: 14, offset: 21874},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 574, col: 19, offset: 21879},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 21928},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 575, col: 5, offset: 21928},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 575, col: 5, offset: 21928},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 575, col: 9, offset: 21932},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 12, offset: 21935},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 576, col: 1, offset: 21985},
			expr: &choiceExpr{
				pos: position{line: 577, col: 5, offset: 21997},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 577, col: 5, offset: 21997},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 5, offset: 22008},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 5, offset: 22018},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 580, col: 5, offset: 22026},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 581, col: 5, offset: 22034},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 582, col: 5, offset: 22046},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 582, col: 5, offset: 22046},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 582, col: 5, offset: 22046},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 9, offset: 22050},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 582, col: 12, offset: 22053},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 582, col: 17, offset: 22058},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 26, offset: 22067},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 582, col: 29, offset: 22070},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 583, col: 5, offset: 22099},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 583, col: 5, offset: 22099},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 583, col: 5, offset: 22099},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 9, offset: 22103},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 583, col: 12, offset: 22106},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 583, col: 17, offset: 22111},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 22, offset: 22116},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 583, col: 25, offset: 22119},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 584, col: 1, offset: 22144},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 22157},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 22157},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 22157},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 12, offset: 22164},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 14, offset: 22166},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 20, offset: 22172},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 26, offset: 22178},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 585, col: 33, offset: 22185},
								expr: &ruleRefExpr{
									pos:  position{line: 585, col: 33, offset: 22185},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 41, offset: 22193},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 585, col: 44, offset: 22196},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 48, offset: 22200},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 51, offset: 22203},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 56, offset: 22208},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 588, col: 1, offset: 22336},
			expr: &actionExpr{
				pos: position{line: 589, col: 5, offset: 22347},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 589, col: 5, offset: 22347},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 589, col: 5, offset: 22347},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 9, offset: 22351},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 12, offset: 22354},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 18, offset: 22360},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 30, offset: 22372},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 589, col: 33, offset: 22375},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 592, col: 1, offset: 22464},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 22480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 22480},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 593, col: 5, offset: 22480},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 593, col: 5, offset: 22480},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 593, col: 11, offset: 22486},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 593, col: 22, offset: 22497},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 593, col: 27, offset: 22502},
										expr: &ruleRefExpr{
											pos:  position{line: 593, col: 27, offset: 22502},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 596, col: 5, offset: 22600},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 5, offset: 22600},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 597, col: 1, offset: 22635},
			expr: &actionExpr{
				pos: position{line: 597, col: 18, offset: 22652},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 597, col: 18, offset: 22652},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 597, col: 18, offset: 22652},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 597, col: 21, offset: 22655},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 25, offset: 22659},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 28, offset: 22662},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 33, offset: 22667},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 598, col: 1, offset: 22699},
			expr: &choiceExpr{
				pos: position{line: 599, col: 5, offset: 22714},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 599, col: 5, offset: 22714},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 600, col: 5, offset: 22725},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 601, col: 5, offset: 22735},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 602, col: 1, offset: 22746},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 22757},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 22757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 5, offset: 22757},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 11, offset: 22763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 14, offset: 22766},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 19, offset: 22771},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 606, col: 1, offset: 22856},
			expr: &actionExpr{
				pos: position{line: 607, col: 5, offset: 22866},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 607, col: 5, offset: 22866},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 22866},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 10, offset: 22871},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 20, offset: 22881},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 607, col: 23, offset: 22884},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 27, offset: 22888},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 30, offset: 22891},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 36, offset: 22897},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 610, col: 1, offset: 22996},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 23006},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 23006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 611, col: 5, offset: 23006},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 9, offset: 23010},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 12, offset: 23013},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 18, offset: 23019},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 30, offset: 23031},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 611, col: 33, offset: 23034},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 614, col: 1, offset: 23122},
			expr: &actionExpr{
				pos: position{line: 615, col: 5, offset: 23130},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 615, col: 5, offset: 23130},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 615, col: 5, offset: 23130},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 10, offset: 23135},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 13, offset: 23138},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 19, offset: 23144},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 31, offset: 23156},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 615, col: 34, offset: 23159},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 618, col: 1, offset: 23246},
			expr: &choiceExpr{
				pos: position{line: 619, col: 5, offset: 23262},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 23262},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 23262},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 619, col: 5, offset: 23262},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 11, offset: 23268},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 619, col: 22, offset: 23279},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 619, col: 27, offset: 23284},
										expr: &actionExpr{
											pos: position{line: 619, col: 28, offset: 23285},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 619, col: 28, offset: 23285},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 619, col: 28, offset: 23285},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 619, col: 31, offset: 23288},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 619, col: 35, offset: 23292},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 619, col: 38, offset: 23295},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 619, col: 40, offset: 23297},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 23414},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 622, col: 5, offset: 23414},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 623, col: 1, offset: 23449},
			expr: &choiceExpr{
				pos: position{line: 624, col: 5, offset: 23464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 624, col: 5, offset: 23464},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 23475},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 625, col: 5, offset: 23475},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 7, offset: 23477},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 626, col: 1, offset: 23552},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 23560},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 627, col: 5, offset: 23560},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 627, col: 5, offset: 23560},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 10, offset: 23565},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 627, col: 13, offset: 23568},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 19, offset: 23574},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 27, offset: 23582},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 627, col: 30, offset: 23585},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 630, col: 1, offset: 23674},
			expr: &choiceExpr{
				pos: position{line: 631, col: 5, offset: 23686},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 631, col: 5, offset: 23686},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 631, col: 5, offset: 23686},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 631, col: 5, offset: 23686},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 631, col: 11, offset: 23692},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 631, col: 17, offset: 23698},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 631, col: 22, offset: 23703},
										expr: &ruleRefExpr{
											pos:  position{line: 631, col: 22, offset: 23703},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 634, col: 5, offset: 23796},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 634, col: 5, offset: 23796},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 635, col: 1, offset: 23831},
			expr: &actionExpr{
				pos: position{line: 635, col: 13, offset: 23843},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 635, col: 13, offset: 23843},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 635, col: 13, offset: 23843},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 635, col: 16, offset: 23846},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 20, offset: 23850},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 635, col: 23, offset: 23853},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 25, offset: 23855},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 636, col: 1, offset: 23879},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 23889},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 637, col: 5, offset: 23889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 23889},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 9, offset: 23893},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 14, offset: 23898},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 637, col: 17, offset: 23901},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 21, offset: 23905},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 24, offset: 23908},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 30, offset: 23914},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 640, col: 1, offset: 23996},
			expr: &actionExpr{
				pos: position{line: 641, col: 5, offset: 24006},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 641, col: 5, offset: 24006},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 24006},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 15, offset: 24016},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 642, col: 5, offset: 24030},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 642, col: 10, offset: 24035},
								expr: &ruleRefExpr{
									pos:  position{line: 642, col: 10, offset: 24035},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 24048},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 643, col: 11, offset: 24054},
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 11, offset: 24054},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 24068},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 11, offset: 24074},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 11, offset: 24074},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 24088},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 645, col: 13, offset: 24096},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 13, offset: 24096},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 24112},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 646, col: 12, offset: 24119},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 12, offset: 24119},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 24134},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 647, col: 13, offset: 24142},
								expr: &ruleRefExpr{
									pos:  position{line: 647, col: 13, offset: 24142},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 24158},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 11, offset: 24164},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 652, col: 1, offset: 24388},
			expr: &choiceExpr{
				pos: position{line: 653, col: 5, offset: 24402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 24402},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 24402},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 653, col: 5, offset: 24402},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 653, col: 12, offset: 24409},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 653, col: 14, offset: 24411},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 654, col: 5, offset: 24439},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 654, col: 5, offset: 24439},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 654, col: 5, offset: 24439},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 654, col: 12, offset: 24446},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 654, col: 14, offset: 24448},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 654, col: 26, offset: 24460},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 655, col: 1, offset: 24503},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 24521},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 24521},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 24521},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 9, offset: 24525},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 14, offset: 24530},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 656, col: 18, offset: 24534},
								expr: &seqExpr{
									pos: position{line: 656, col: 19, offset: 24535},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 656, col: 19, offset: 24535},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 21, offset: 24537},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 24, offset: 24540},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 26, offset: 24542},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 663, col: 1, offset: 24732},
			expr: &actionExpr{
				pos: position{line: 664, col: 5, offset: 24751},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 664, col: 5, offset: 24751},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 24751},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 24757},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 25, offset: 24771},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 664, col: 30, offset: 24776},
								expr: &actionExpr{
									pos: position{line: 664, col: 31, offset: 24777},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 664, col: 31, offset: 24777},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 664, col: 31, offset: 24777},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 664, col: 34, offset: 24780},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 664, col: 38, offset: 24784},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 41, offset: 24787},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 46, offset: 24792},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 667, col: 1, offset: 24911},
			expr: &choiceExpr{
				pos: position{line: 668, col: 5, offset: 24923},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 24923},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 668, col: 5, offset: 24923},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 668, col: 5, offset: 24923},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 668, col: 7, offset: 24925},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 668, col: 12, offset: 24930},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 668, col: 14, offset: 24932},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 668, col: 20, offset: 24938},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 668, col: 29, offset: 24947},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 668, col: 35, offset: 24953},
										expr: &ruleRefExpr{
											pos:  position{line: 668, col: 35, offset: 24953},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 25048},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 25048},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 671, col: 5, offset: 25048},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 671, col: 7, offset: 25050},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 671, col: 12, offset: 25055},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 671, col: 14, offset: 25057},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 672, col: 1, offset: 25081},
			expr: &choiceExpr{
				pos: position{line: 673, col: 5, offset: 25094},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 25094},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 25094},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 673, col: 5, offset: 25094},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 7, offset: 25096},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 10, offset: 25099},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 673, col: 12, offset: 25101},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 15, offset: 25104},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 25132},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 25132},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 674, col: 5, offset: 25132},
									name: "_",
								},
								&notExpr{
									pos: position{line: 674, col: 7, offset: 25134},
									expr: &seqExpr{
										pos: position{line: 674, col: 9, offset: 25136},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 674, col: 9, offset: 25136},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 674, col: 27, offset: 25154},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 674, col: 30, offset: 25157},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 674, col: 33, offset: 25160},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 675, col: 1, offset: 25184},
			expr: &ruleRefExpr{
				pos:  position{line: 676, col: 5, offset: 25197},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 677, col: 1, offset: 25202},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 25215},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 678, col: 5, offset: 25215},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 5, offset: 25215},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 25221},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 678, col: 19, offset: 25229},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 678, col: 24, offset: 25234},
								expr: &actionExpr{
									pos: position{line: 678, col: 25, offset: 25235},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 678, col: 25, offset: 25235},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 678, col: 30, offset: 25240},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 681, col: 1, offset: 25353},
			expr: &actionExpr{
				pos: position{line: 682, col: 5, offset: 25365},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 682, col: 5, offset: 25365},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 682, col: 5, offset: 25365},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 11, offset: 25371},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 24, offset: 25384},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 26, offset: 25386},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 31, offset: 25391},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 33, offset: 25393},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 39, offset: 25399},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 48, offset: 25408},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 682, col: 54, offset: 25414},
								expr: &ruleRefExpr{
									pos:  position{line: 682, col: 54, offset: 25414},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 64, offset: 25424},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 66, offset: 25426},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 69, offset: 25429},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 71, offset: 25431},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 79, offset: 25439},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 87, offset: 25447},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 682, col: 90, offset: 25450},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 94, offset: 25454},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 97, offset: 25457},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 106, offset: 25466},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 685, col: 1, offset: 25615},
			expr: &choiceExpr{
				pos: position{line: 686, col: 5, offset: 25632},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 25632},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 25632},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 686, col: 5, offset: 25632},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 686, col: 7, offset: 25634},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 686, col: 14, offset: 25641},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 686, col: 14, offset: 25641},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 21, offset: 25648},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 29, offset: 25656},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 36, offset: 25663},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 25696},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 687, col: 5, offset: 25696},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 688, col: 1, offset: 25723},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 25736},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 25736},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 689, col: 5, offset: 25736},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 7, offset: 25738},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 13, offset: 25744},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 15, offset: 25746},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 20, offset: 25751},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 690, col: 1, offset: 25786},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 25801},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 691, col: 5, offset: 25801},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 5, offset: 25801},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 7, offset: 25803},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 13, offset: 25809},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 15, offset: 25811},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 18, offset: 25814},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 20, offset: 25816},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 28, offset: 25824},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 692, col: 1, offset: 25859},
			expr: &actionExpr{
				pos: position{line: 693, col: 5, offset: 25873},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 693, col: 5, offset: 25873},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 693, col: 5, offset: 25873},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 7, offset: 25875},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 14, offset: 25882},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 16, offset: 25884},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 21, offset: 25889},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 694, col: 1, offset: 25924},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 25939},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 25939},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 695, col: 5, offset: 25939},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 7, offset: 25941},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 13, offset: 25947},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 15, offset: 25949},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 18, offset: 25952},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 695, col: 20, offset: 25954},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 25, offset: 25959},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 31, offset: 25965},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 37, offset: 25971},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 698, col: 1, offset: 26080},
			expr: &choiceExpr{
				pos: position{line: 699, col: 5, offset: 26093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 26093},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 26093},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 699, col: 5, offset: 26093},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 7, offset: 26095},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 699, col: 12, offset: 26100},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 699, col: 12, offset: 26100},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 699, col: 18, offset: 26106},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 26136},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 700, col: 5, offset: 26136},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 701, col: 1, offset: 26161},
			expr: &choiceExpr{
				pos: position{line: 702, col: 5, offset: 26174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 26174},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 702, col: 5, offset: 26174},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 702, col: 5, offset: 26174},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 702, col: 7, offset: 26176},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 702, col: 13, offset: 26182},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 702, col: 15, offset: 26184},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 702, col: 21, offset: 26190},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 26221},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 703, col: 5, offset: 26221},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 704, col: 1, offset: 26242},
			expr: &actionExpr{
				pos: position{line: 704, col: 10, offset: 26251},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 704, col: 10, offset: 26251},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 705, col: 1, offset: 26286},
			expr: &actionExpr{
				pos: position{line: 705, col: 6, offset: 26291},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 705, col: 6, offset: 26291},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 706, col: 1, offset: 26318},
			expr: &actionExpr{
				pos: position{line: 706, col: 8, offset: 26325},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 706, col: 8, offset: 26325},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 707, col: 1, offset: 26356},
			expr: &actionExpr{
				pos: position{line: 707, col: 8, offset: 26363},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 707, col: 8, offset: 26363},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 708, col: 1, offset: 26394},
			expr: &actionExpr{
				pos: position{line: 708, col: 9, offset: 26402},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 708, col: 9, offset: 26402},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 709, col: 1, offset: 26435},
			expr: &actionExpr{
				pos: position{line: 709, col: 9, offset: 26443},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 709, col: 9, offset: 26443},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 710, col: 1, offset: 26476},
			expr: &actionExpr{
				pos: position{line: 710, col: 6, offset: 26481},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 710, col: 6, offset: 26481},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 711, col: 1, offset: 26508},
			expr: &actionExpr{
				pos: position{line: 711, col: 10, offset: 26517},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 711, col: 10, offset: 26517},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 712, col: 1, offset: 26552},
			expr: &actionExpr{
				pos: position{line: 712, col: 9, offset: 26560},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 712, col: 9, offset: 26560},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 713, col: 1, offset: 26593},
			expr: &actionExpr{
				pos: position{line: 713, col: 6, offset: 26598},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 713, col: 6, offset: 26598},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 714, col: 1, offset: 26625},
			expr: &actionExpr{
				pos: position{line: 714, col: 9, offset: 26633},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 714, col: 9, offset: 26633},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 715, col: 1, offset: 26666},
			expr: &actionExpr{
				pos: position{line: 715, col: 7, offset: 26672},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 715, col: 7, offset: 26672},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 716, col: 1, offset: 26701},
			expr: &actionExpr{
				pos: position{line: 716, col: 8, offset: 26708},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 716, col: 8, offset: 26708},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 717, col: 1, offset: 26739},
			expr: &actionExpr{
				pos: position{line: 717, col: 8, offset: 26746},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 717, col: 8, offset: 26746},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 718, col: 1, offset: 26777},
			expr: &actionExpr{
				pos: position{line: 718, col: 8, offset: 26784},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 718, col: 8, offset: 26784},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 719, col: 1, offset: 26815},
			expr: &actionExpr{
				pos: position{line: 719, col: 9, offset: 26823},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 719, col: 9, offset: 26823},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 720, col: 1, offset: 26856},
			expr: &actionExpr{
				pos: position{line: 720, col: 9, offset: 26864},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 720, col: 9, offset: 26864},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 721, col: 1, offset: 26897},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 26919},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 26919},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 14, offset: 26928},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 19, offset: 26933},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 26, offset: 26940},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 33, offset: 26947},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 41, offset: 26955},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 49, offset: 26963},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 58, offset: 26972},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 66, offset: 26980},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 74, offset: 26988},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 723, col: 1, offset: 26991},
			expr: &choiceExpr{
				pos: position{line: 724, col: 5, offset: 27003},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 27003},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 27019},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 27039},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 27057},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 728, col: 5, offset: 27076},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 729, col: 5, offset: 27093},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 27106},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 27115},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 27132},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 733, col: 5, offset: 27151},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 27170},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 735, col: 1, offset: 27182},
			expr: &choiceExpr{
				pos: position{line: 736, col: 5, offset: 27200},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 27200},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 27200},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 736, col: 5, offset: 27200},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 7, offset: 27202},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 736, col: 14, offset: 27209},
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 15, offset: 27210},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 27325},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 739, col: 5, offset: 27325},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 7, offset: 27327},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 742, col: 1, offset: 27430},
			expr: &choiceExpr{
				pos: position{line: 743, col: 5, offset: 27449},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 27449},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 27449},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 743, col: 5, offset: 27449},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 7, offset: 27451},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 743, col: 11, offset: 27455},
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 12, offset: 27456},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 27570},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 746, col: 5, offset: 27570},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 7, offset: 27572},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 749, col: 1, offset: 27670},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 27687},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 750, col: 5, offset: 27687},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 750, col: 7, offset: 27689},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 753, col: 1, offset: 27801},
			expr: &actionExpr{
				pos: position{line: 754, col: 5, offset: 27820},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 754, col: 5, offset: 27820},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 754, col: 7, offset: 27822},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 757, col: 1, offset: 27930},
			expr: &choiceExpr{
				pos: position{line: 758, col: 5, offset: 27949},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 758, col: 5, offset: 27949},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 758, col: 5, offset: 27949},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 28052},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 759, col: 5, offset: 28052},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 760, col: 1, offset: 28153},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 28169},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 761, col: 5, offset: 28169},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 762, col: 1, offset: 28264},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 28281},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 763, col: 5, offset: 28281},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 763, col: 5, offset: 28281},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 763, col: 10, offset: 28286},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 10, offset: 28286},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 766, col: 1, offset: 28400},
			expr: &actionExpr{
				pos: position{line: 767, col: 5, offset: 28416},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 767, col: 5, offset: 28416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 767, col: 5, offset: 28416},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 767, col: 9, offset: 28420},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 13, offset: 28424},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 767, col: 18, offset: 28429},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 770, col: 1, offset: 28517},
			expr: &choiceExpr{
				pos: position{line: 771, col: 5, offset: 28530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 771, col: 5, offset: 28530},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 28546},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 772, col: 5, offset: 28546},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 9, offset: 28550},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 775, col: 1, offset: 28648},
			expr: &choiceExpr{
				pos: position{line: 776, col: 5, offset: 28657},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 776, col: 5, offset: 28657},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 777, col: 5, offset: 28673},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 778, col: 5, offset: 28691},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 779, col: 1, offset: 28703},
			expr: &choiceExpr{
				pos: position{line: 780, col: 5, offset: 28721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 780, col: 5, offset: 28721},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 780, col: 5, offset: 28721},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 780, col: 5, offset: 28721},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 780, col: 10, offset: 28726},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 780, col: 24, offset: 28740},
									expr: &ruleRefExpr{
										pos:  position{line: 780, col: 25, offset: 28741},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 28781},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 28781},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 28781},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 10, offset: 28786},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 781, col: 25, offset: 28801},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 781, col: 29, offset: 28805},
										expr: &seqExpr{
											pos: position{line: 781, col: 30, offset: 28806},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 781, col: 30, offset: 28806},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 781, col: 33, offset: 28809},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 781, col: 37, offset: 28813},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 781, col: 40, offset: 28816},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 29048},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 787, col: 5, offset: 29048},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 10, offset: 29053},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 790, col: 5, offset: 29153},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 790, col: 5, offset: 29153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 790, col: 5, offset: 29153},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 790, col: 9, offset: 29157},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 790, col: 12, offset: 29160},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 790, col: 14, offset: 29162},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 790, col: 24, offset: 29172},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 791, col: 1, offset: 29194},
			expr: &actionExpr{
				pos: position{line: 792, col: 5, offset: 29208},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 792, col: 5, offset: 29208},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 792, col: 11, offset: 29214},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 795, col: 1, offset: 29309},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 29322},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 796, col: 5, offset: 29322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 796, col: 5, offset: 29322},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 11, offset: 29328},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 796, col: 16, offset: 29333},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 796, col: 21, offset: 29338},
								expr: &ruleRefExpr{
									pos:  position{line: 796, col: 21, offset: 29338},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 799, col: 1, offset: 29430},
			expr: &actionExpr{
				pos: position{line: 799, col: 16, offset: 29445},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 799, col: 16, offset: 29445},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 799, col: 16, offset: 29445},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 799, col: 19, offset: 29448},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 23, offset: 29452},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 799, col: 26, offset: 29455},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 30, offset: 29459},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 800, col: 1, offset: 29484},
			expr: &choiceExpr{
				pos: position{line: 801, col: 5, offset: 29500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 801, col: 5, offset: 29500},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 801, col: 5, offset: 29500},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 801, col: 5, offset: 29500},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 801, col: 9, offset: 29504},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 801, col: 12, offset: 29507},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 801, col: 19, offset: 29514},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 801, col: 33, offset: 29528},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 801, col: 36, offset: 29531},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 29626},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 804, col: 5, offset: 29626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 804, col: 5, offset: 29626},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 9, offset: 29630},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 804, col: 12, offset: 29633},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 804, col: 16, offset: 29637},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 21, offset: 29642},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 804, col: 24, offset: 29645},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 807, col: 5, offset: 29734},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 807, col: 5, offset: 29734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 807, col: 5, offset: 29734},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 807, col: 10, offset: 29739},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 807, col: 13, offset: 29742},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 17, offset: 29746},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 807, col: 22, offset: 29751},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 807, col: 25, offset: 29754},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 29842},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 29842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 810, col: 5, offset: 29842},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 10, offset: 29847},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 810, col: 13, offset: 29850},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 21, offset: 29858},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 26, offset: 29863},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 810, col: 29, offset: 29866},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 33, offset: 29870},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 810, col: 36, offset: 29873},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 44, offset: 29881},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 49, offset: 29886},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 810, col: 52, offset: 29889},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 813, col: 1, offset: 30002},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 30022},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 814, col: 5, offset: 30022},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 814, col: 7, offset: 30024},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 820, col: 1, offset: 30239},
			expr: &choiceExpr{
				pos: position{line: 821, col: 5, offset: 30264},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 30264},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 821, col: 5, offset: 30264},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 821, col: 5, offset: 30264},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 821, col: 9, offset: 30268},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 821, col: 11, offset: 30270},
										expr: &ruleRefExpr{
											pos:  position{line: 821, col: 11, offset: 30270},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 37, offset: 30296},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 822, col: 5, offset: 30322},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 822, col: 5, offset: 30322},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 822, col: 5, offset: 30322},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 822, col: 9, offset: 30326},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 822, col: 11, offset: 30328},
										expr: &ruleRefExpr{
											pos:  position{line: 822, col: 11, offset: 30328},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 822, col: 37, offset: 30354},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 823, col: 1, offset: 30376},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 30405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 824, col: 5, offset: 30405},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 30422},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 825, col: 5, offset: 30422},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 825, col: 7, offset: 30424},
								expr: &ruleRefExpr{
									pos:  position{line: 825, col: 7, offset: 30424},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 828, col: 1, offset: 30560},
			expr: &choiceExpr{
				pos: position{line: 829, col: 5, offset: 30589},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 30589},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 829, col: 5, offset: 30589},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 829, col: 5, offset: 30589},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 829, col: 10, offset: 30594},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 829, col: 12, offset: 30596},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 830, col: 5, offset: 30623},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 830, col: 5, offset: 30623},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 830, col: 5, offset: 30623},
									expr: &litMatcher{
										pos:        position{line: 830, col: 8, offset: 30626},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 830, col: 15, offset: 30633},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 830, col: 17, offset: 30635},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 831, col: 1, offset: 30670},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 30699},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 832, col: 5, offset: 30699},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 30716},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 833, col: 5, offset: 30716},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 833, col: 7, offset: 30718},
								expr: &ruleRefExpr{
									pos:  position{line: 833, col: 7, offset: 30718},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 836, col: 1, offset: 30854},
			expr: &choiceExpr{
				pos: position{line: 837, col: 5, offset: 30883},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 837, col: 5, offset: 30883},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 837, col: 5, offset: 30883},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 837, col: 5, offset: 30883},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 837, col: 10, offset: 30888},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 837, col: 12, offset: 30890},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 30917},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 838, col: 5, offset: 30917},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 838, col: 5, offset: 30917},
									expr: &litMatcher{
										pos:        position{line: 838, col: 8, offset: 30920},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 838, col: 15, offset: 30927},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 838, col: 17, offset: 30929},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 839, col: 1, offset: 30964},
			expr: &actionExpr{
				pos: position{line: 840, col: 5, offset: 30981},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 840, col: 5, offset: 30981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 840, col: 5, offset: 30981},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 840, col: 10, offset: 30986},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 840, col: 13, offset: 30989},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 840, col: 15, offset: 30991},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 840, col: 20, offset: 30996},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 840, col: 23, offset: 30999},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 843, col: 1, offset: 31208},
			expr: &actionExpr{
				pos: position{line: 844, col: 5, offset: 31226},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 844, col: 7, offset: 31228},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 844, col: 7, offset: 31228},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 17, offset: 31238},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 28, offset: 31249},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 39, offset: 31260},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 9, offset: 31277},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 18, offset: 31286},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 28, offset: 31296},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 38, offset: 31306},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 9, offset: 31322},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 21, offset: 31334},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 33, offset: 31346},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 9, offset: 31364},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 18, offset: 31373},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 9, offset: 31390},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 22, offset: 31403},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 849, col: 9, offset: 31418},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 850, col: 9, offset: 31434},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 850, col: 16, offset: 31441},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 851, col: 9, offset: 31455},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 851, col: 18, offset: 31464},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 854, col: 1, offset: 31579},
			expr: &choiceExpr{
				pos: position{line: 855, col: 5, offset: 31597},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 855, col: 5, offset: 31597},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 855, col: 5, offset: 31597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 855, col: 5, offset: 31597},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 31603},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 855, col: 21, offset: 31613},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 855, col: 26, offset: 31618},
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 26, offset: 31618},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 31719},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 858, col: 5, offset: 31719},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 859, col: 1, offset: 31742},
			expr: &actionExpr{
				pos: position{line: 859, col: 21, offset: 31762},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 859, col: 21, offset: 31762},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 859, col: 21, offset: 31762},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 859, col: 24, offset: 31765},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 859, col: 28, offset: 31769},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 859, col: 31, offset: 31772},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 35, offset: 31776},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 860, col: 1, offset: 31806},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 31820},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 31820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 861, col: 5, offset: 31820},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 10, offset: 31825},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 20, offset: 31835},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 23, offset: 31838},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 27, offset: 31842},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 30, offset: 31845},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 34, offset: 31849},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 864, col: 1, offset: 31930},
			expr: &choiceExpr{
				pos: position{line: 865, col: 5, offset: 31944},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 865, col: 5, offset: 31944},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 866, col: 5, offset: 31963},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 867, col: 1, offset: 31976},
			expr: &actionExpr{
				pos: position{line: 867, col: 12, offset: 31987},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 867, col: 12, offset: 31987},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 867, col: 13, offset: 31988},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 867, col: 13, offset: 31988},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 867, col: 21, offset: 31996},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 867, col: 28, offset: 32003},
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 29, offset: 32004},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 868, col: 1, offset: 32041},
			expr: &actionExpr{
				pos: position{line: 868, col: 11, offset: 32051},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 868, col: 11, offset: 32051},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 868, col: 12, offset: 32052},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 868, col: 12, offset: 32052},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 868, col: 19, offset: 32059},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 868, col: 25, offset: 32065},
							expr: &ruleRefExpr{
								pos:  position{line: 868, col: 26, offset: 32066},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 869, col: 1, offset: 32102},
			expr: &actionExpr{
				pos: position{line: 869, col: 11, offset: 32112},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 869, col: 11, offset: 32112},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 869, col: 11, offset: 32112},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 869, col: 16, offset: 32117},
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 17, offset: 32118},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 870, col: 1, offset: 32154},
			expr: &actionExpr{
				pos: position{line: 870, col: 12, offset: 32165},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 870, col: 12, offset: 32165},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 870, col: 13, offset: 32166},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 870, col: 13, offset: 32166},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 870, col: 21, offset: 32174},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 870, col: 28, offset: 32181},
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 29, offset: 32182},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 871, col: 1, offset: 32219},
			expr: &actionExpr{
				pos: position{line: 871, col: 11, offset: 32229},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 871, col: 11, offset: 32229},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 871, col: 11, offset: 32229},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 871, col: 16, offset: 32234},
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 17, offset: 32235},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 872, col: 1, offset: 32271},
			expr: &charClassMatcher{
				pos:        position{line: 872, col: 19, offset: 32289},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 873, col: 1, offset: 32300},
			expr: &choiceExpr{
				pos: position{line: 873, col: 18, offset: 32317},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 873, col: 18, offset: 32317},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 873, col: 36, offset: 32335},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 874, col: 1, offset: 32341},
			expr: &actionExpr{
				pos: position{line: 875, col: 5, offset: 32356},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 875, col: 5, offset: 32356},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 875, col: 8, offset: 32359},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 876, col: 1, offset: 32439},
			expr: &choiceExpr{
				pos: position{line: 877, col: 5, offset: 32458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 32458},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 32458},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 877, col: 5, offset: 32458},
									expr: &seqExpr{
										pos: position{line: 877, col: 7, offset: 32460},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 877, col: 7, offset: 32460},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 877, col: 15, offset: 32468},
												expr: &ruleRefExpr{
													pos:  position{line: 877, col: 16, offset: 32469},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 877, col: 32, offset: 32485},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 877, col: 48, offset: 32501},
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 48, offset: 32501},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 32552},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 878, col: 5, offset: 32552},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 32591},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 879, col: 5, offset: 32591},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 879, col: 5, offset: 32591},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 879, col: 10, offset: 32596},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 879, col: 13, offset: 32599},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 32630},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 880, col: 5, offset: 32630},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 32672},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 32672},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 32672},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 8, offset: 32675},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 881, col: 26, offset: 32693},
									expr: &seqExpr{
										pos: position{line: 881, col: 28, offset: 32695},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 881, col: 28, offset: 32695},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 881, col: 31, offset: 32698},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 882, col: 1, offset: 32722},
			expr: &actionExpr{
				pos: position{line: 883, col: 5, offset: 32742},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 883, col: 5, offset: 32742},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 32742},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 11, offset: 32748},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 26, offset: 32763},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 883, col: 31, offset: 32768},
								expr: &actionExpr{
									pos: position{line: 883, col: 32, offset: 32769},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 883, col: 32, offset: 32769},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 883, col: 32, offset: 32769},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 883, col: 35, offset: 32772},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 883, col: 39, offset: 32776},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 883, col: 42, offset: 32779},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 883, col: 45, offset: 32782},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 886, col: 1, offset: 32895},
			expr: &choiceExpr{
				pos: position{line: 887, col: 5, offset: 32907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 887, col: 5, offset: 32907},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 888, col: 5, offset: 32926},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 889, col: 5, offset: 32942},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 5, offset: 32950},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 891, col: 1, offset: 32959},
			expr: &actionExpr{
				pos: position{line: 892, col: 5, offset: 32968},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 892, col: 5, offset: 32968},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 892, col: 5, offset: 32968},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 892, col: 14, offset: 32977},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 892, col: 18, offset: 32981},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 895, col: 1, offset: 33100},
			expr: &seqExpr{
				pos: position{line: 895, col: 12, offset: 33111},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 895, col: 12, offset: 33111},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 895, col: 15, offset: 33114},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 19, offset: 33118},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 895, col: 22, offset: 33121},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 26, offset: 33125},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 896, col: 1, offset: 33128},
			expr: &seqExpr{
				pos: position{line: 896, col: 6, offset: 33133},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 896, col: 6, offset: 33133},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 896, col: 11, offset: 33138},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 896, col: 16, offset: 33143},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 896, col: 21, offset: 33148},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 897, col: 1, offset: 33154},
			expr: &seqExpr{
				pos: position{line: 897, col: 6, offset: 33159},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 897, col: 6, offset: 33159},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 897, col: 11, offset: 33164},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 898, col: 1, offset: 33170},
			expr: &seqExpr{
				pos: position{line: 898, col: 12, offset: 33181},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 898, col: 12, offset: 33181},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 898, col: 24, offset: 33193},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 899, col: 1, offset: 33204},
			expr: &seqExpr{
				pos: position{line: 899, col: 15, offset: 33218},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 899, col: 15, offset: 33218},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 899, col: 18, offset: 33221},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 22, offset: 33225},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 899, col: 25, offset: 33228},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 29, offset: 33232},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 899, col: 32, offset: 33235},
						expr: &seqExpr{
							pos: position{line: 899, col: 33, offset: 33236},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 899, col: 33, offset: 33236},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 899, col: 37, offset: 33240},
									expr: &charClassMatcher{
										pos:        position{line: 899, col: 37, offset: 33240},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 900, col: 1, offset: 33249},
			expr: &choiceExpr{
				pos: position{line: 901, col: 5, offset: 33264},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 901, col: 5, offset: 33264},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 902, col: 5, offset: 33272},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 902, col: 6, offset: 33273},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 902, col: 6, offset: 33273},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 902, col: 12, offset: 33279},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 902, col: 17, offset: 33284},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 902, col: 20, offset: 33287},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 902, col: 24, offset: 33291},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 902, col: 27, offset: 33294},
								expr: &seqExpr{
									pos: position{line: 902, col: 28, offset: 33295},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 902, col: 28, offset: 33295},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 902, col: 32, offset: 33299},
											expr: &charClassMatcher{
												pos:        position{line: 902, col: 32, offset: 33299},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 903, col: 1, offset: 33308},
			expr: &actionExpr{
				pos: position{line: 904, col: 5, offset: 33321},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 904, col: 5, offset: 33321},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 904, col: 5, offset: 33321},
							expr: &litMatcher{
								pos:        position{line: 904, col: 5, offset: 33321},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 904, col: 10, offset: 33326},
							expr: &seqExpr{
								pos: position{line: 904, col: 11, offset: 33327},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 33327},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 19, offset: 33335},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 907, col: 1, offset: 33460},
			expr: &seqExpr{
				pos: position{line: 907, col: 11, offset: 33470},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 907, col: 11, offset: 33470},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 907, col: 16, offset: 33475},
						expr: &seqExpr{
							pos: position{line: 907, col: 17, offset: 33476},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 907, col: 17, offset: 33476},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 907, col: 21, offset: 33480},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 908, col: 1, offset: 33487},
			expr: &choiceExpr{
				pos: position{line: 909, col: 5, offset: 33500},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 909, col: 5, offset: 33500},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 910, col: 5, offset: 33509},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 911, col: 5, offset: 33518},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 912, col: 5, offset: 33527},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 913, col: 5, offset: 33535},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 914, col: 5, offset: 33543},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 915, col: 5, offset: 33551},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 916, col: 5, offset: 33559},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 917, col: 5, offset: 33567},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 918, col: 1, offset: 33571},
			expr: &actionExpr{
				pos: position{line: 919, col: 5, offset: 33578},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 919, col: 5, offset: 33578},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 919, col: 5, offset: 33578},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 919, col: 10, offset: 33583},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 919, col: 14, offset: 33587},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 919, col: 19, offset: 33592},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 919, col: 23, offset: 33596},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 919, col: 28, offset: 33601},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 919, col: 32, offset: 33605},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 920, col: 1, offset: 33641},
			expr: &actionExpr{
				pos: position{line: 921, col: 5, offset: 33649},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 921, col: 5, offset: 33649},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 921, col: 5, offset: 33649},
							expr: &seqExpr{
								pos: position{line: 921, col: 8, offset: 33652},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 921, col: 8, offset: 33652},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 921, col: 12, offset: 33656},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 16, offset: 33660},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 921, col: 20, offset: 33664},
										expr: &choiceExpr{
											pos: position{line: 921, col: 22, offset: 33666},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 921, col: 22, offset: 33666},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 921, col: 33, offset: 33677},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 39, offset: 33683},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 921, col: 41, offset: 33685},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 922, col: 1, offset: 33717},
			expr: &choiceExpr{
				pos: position{line: 923, col: 5, offset: 33735},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 33735},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 923, col: 5, offset: 33735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 923, col: 5, offset: 33735},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 923, col: 7, offset: 33737},
										expr: &ruleRefExpr{
											pos:  position{line: 923, col: 7, offset: 33737},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 923, col: 17, offset: 33747},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 19, offset: 33749},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 926, col: 5, offset: 33813},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 926, col: 5, offset: 33813},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 926, col: 5, offset: 33813},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 7, offset: 33815},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 926, col: 11, offset: 33819},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 926, col: 13, offset: 33821},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 13, offset: 33821},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 926, col: 23, offset: 33831},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 926, col: 28, offset: 33836},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 926, col: 30, offset: 33838},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 30, offset: 33838},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 926, col: 40, offset: 33848},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 42, offset: 33850},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 929, col: 5, offset: 33949},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 929, col: 5, offset: 33949},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 929, col: 5, offset: 33949},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 929, col: 10, offset: 33954},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 929, col: 12, offset: 33956},
										expr: &ruleRefExpr{
											pos:  position{line: 929, col: 12, offset: 33956},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 929, col: 22, offset: 33966},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 929, col: 24, offset: 33968},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 34039},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 34039},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 932, col: 5, offset: 34039},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 7, offset: 34041},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 932, col: 11, offset: 34045},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 932, col: 13, offset: 34047},
										expr: &ruleRefExpr{
											pos:  position{line: 932, col: 13, offset: 34047},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 23, offset: 34057},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 34125},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 935, col: 5, offset: 34125},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 938, col: 1, offset: 34161},
			expr: &choiceExpr{
				pos: position{line: 939, col: 5, offset: 34173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 939, col: 5, offset: 34173},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 5, offset: 34180},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 941, col: 1, offset: 34184},
			expr: &actionExpr{
				pos: position{line: 941, col: 12, offset: 34195},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 941, col: 12, offset: 34195},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 941, col: 12, offset: 34195},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 941, col: 16, offset: 34199},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 941, col: 18, offset: 34201},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 942, col: 1, offset: 34238},
			expr: &actionExpr{
				pos: position{line: 942, col: 12, offset: 34249},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 942, col: 12, offset: 34249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 942, col: 12, offset: 34249},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 14, offset: 34251},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 942, col: 18, offset: 34255},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 943, col: 1, offset: 34292},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 34303},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 34303},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 34303},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 7, offset: 34305},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 944, col: 10, offset: 34308},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 944, col: 14, offset: 34312},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 16, offset: 34314},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 947, col: 1, offset: 34386},
			expr: &actionExpr{
				pos: position{line: 948, col: 5, offset: 34397},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 948, col: 5, offset: 34397},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 948, col: 5, offset: 34397},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 7, offset: 34399},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 948, col: 11, offset: 34403},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 948, col: 15, offset: 34407},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 17, offset: 34409},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 951, col: 1, offset: 34471},
			expr: &actionExpr{
				pos: position{line: 952, col: 4, offset: 34479},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 952, col: 4, offset: 34479},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 952, col: 6, offset: 34481},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 953, col: 1, offset: 34520},
			expr: &choiceExpr{
				pos: position{line: 954, col: 5, offset: 34534},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 34534},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 5, offset: 34549},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 956, col: 1, offset: 34564},
			expr: &actionExpr{
				pos: position{line: 956, col: 14, offset: 34577},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 956, col: 14, offset: 34577},
					expr: &charClassMatcher{
						pos:        position{line: 956, col: 14, offset: 34577},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 957, col: 1, offset: 34615},
			expr: &actionExpr{
				pos: position{line: 958, col: 5, offset: 34634},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 958, col: 5, offset: 34634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 958, col: 5, offset: 34634},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 958, col: 9, offset: 34638},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 959, col: 1, offset: 34680},
			expr: &choiceExpr{
				pos: position{line: 960, col: 5, offset: 34696},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 960, col: 5, offset: 34696},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 960, col: 5, offset: 34696},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 960, col: 5, offset: 34696},
									expr: &litMatcher{
										pos:        position{line: 960, col: 5, offset: 34696},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 960, col: 10, offset: 34701},
									expr: &charClassMatcher{
										pos:        position{line: 960, col: 10, offset: 34701},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 960, col: 17, offset: 34708},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 960, col: 21, offset: 34712},
									expr: &charClassMatcher{
										pos:        position{line: 960, col: 21, offset: 34712},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 960, col: 28, offset: 34719},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 28, offset: 34719},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 963, col: 5, offset: 34778},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 963, col: 5, offset: 34778},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 963, col: 5, offset: 34778},
									expr: &litMatcher{
										pos:        position{line: 963, col: 5, offset: 34778},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 963, col: 10, offset: 34783},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 963, col: 14, offset: 34787},
									expr: &charClassMatcher{
										pos:        position{line: 963, col: 14, offset: 34787},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 963, col: 21, offset: 34794},
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 21, offset: 34794},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 34853},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 966, col: 7, offset: 34855},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 966, col: 7, offset: 34855},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 966, col: 13, offset: 34861},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 967, col: 1, offset: 34903},
			expr: &seqExpr{
				pos: position{line: 967, col: 16, offset: 34918},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 967, col: 16, offset: 34918},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 967, col: 21, offset: 34923},
						expr: &charClassMatcher{
							pos:        position{line: 967, col: 21, offset: 34923},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 27, offset: 34929},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 968, col: 1, offset: 34940},
			expr: &litMatcher{
				pos:        position{line: 968, col: 7, offset: 34946},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 969, col: 1, offset: 34952},
			expr: &seqExpr{
				pos: position{line: 969, col: 12, offset: 34963},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 969, col: 12, offset: 34963},
						expr: &choiceExpr{
							pos: position{line: 969, col: 13, offset: 34964},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 969, col: 13, offset: 34964},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 969, col: 19, offset: 34970},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 969, col: 25, offset: 34976},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 970, col: 1, offset: 34982},
			expr: &actionExpr{
				pos: position{line: 970, col: 7, offset: 34988},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 970, col: 7, offset: 34988},
					expr: &ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 34988},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 971, col: 1, offset: 35029},
			expr: &charClassMatcher{
				pos:        position{line: 971, col: 12, offset: 35040},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 972, col: 1, offset: 35052},
			expr: &choiceExpr{
				pos: position{line: 973, col: 5, offset: 35069},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 35069},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 35069},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 973, col: 5, offset: 35069},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 973, col: 9, offset: 35073},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 973, col: 11, offset: 35075},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 11, offset: 35075},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 29, offset: 35093},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 974, col: 5, offset: 35130},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 974, col: 5, offset: 35130},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 974, col: 5, offset: 35130},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 974, col: 9, offset: 35134},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 974, col: 11, offset: 35136},
										expr: &ruleRefExpr{
											pos:  position{line: 974, col: 11, offset: 35136},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 974, col: 29, offset: 35154},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 975, col: 1, offset: 35187},
			expr: &choiceExpr{
				pos: position{line: 976, col: 5, offset: 35208},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 35208},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 35208},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 976, col: 5, offset: 35208},
									expr: &choiceExpr{
										pos: position{line: 976, col: 7, offset: 35210},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 976, col: 7, offset: 35210},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 13, offset: 35216},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 976, col: 26, offset: 35229,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 977, col: 5, offset: 35266},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 977, col: 5, offset: 35266},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 977, col: 5, offset: 35266},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 977, col: 10, offset: 35271},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 12, offset: 35273},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 978, col: 1, offset: 35306},
			expr: &actionExpr{
				pos: position{line: 979, col: 5, offset: 35318},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 979, col: 5, offset: 35318},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 979, col: 5, offset: 35318},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 10, offset: 35323},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 979, col: 23, offset: 35336},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 979, col: 28, offset: 35341},
								expr: &ruleRefExpr{
									pos:  position{line: 979, col: 28, offset: 35341},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 980, col: 1, offset: 35402},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 35419},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 981, col: 5, offset: 35419},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 35436},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 983, col: 1, offset: 35447},
			expr: &actionExpr{
				pos: position{line: 983, col: 16, offset: 35462},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 983, col: 16, offset: 35462},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 984, col: 1, offset: 35510},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 35526},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 35526},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 986, col: 5, offset: 35543},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 987, col: 1, offset: 35549},
			expr: &actionExpr{
				pos: position{line: 987, col: 14, offset: 35562},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 987, col: 14, offset: 35562},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 987, col: 14, offset: 35562},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 987, col: 19, offset: 35567},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 987, col: 22, offset: 35570},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 987, col: 22, offset: 35570},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 38, offset: 35586},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 988, col: 1, offset: 35620},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 35636},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 989, col: 5, offset: 35636},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 989, col: 5, offset: 35636},
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 6, offset: 35637},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 989, col: 22, offset: 35653},
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 23, offset: 35654},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 35, offset: 35666},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 40, offset: 35671},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 50, offset: 35681},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 989, col: 55, offset: 35686},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 55, offset: 35686},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 992, col: 1, offset: 35754},
			expr: &choiceExpr{
				pos: position{line: 992, col: 19, offset: 35772},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 19, offset: 35772},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 992, col: 34, offset: 35787},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 992, col: 34, offset: 35787},
								expr: &litMatcher{
									pos:        position{line: 992, col: 34, offset: 35787},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 992, col: 39, offset: 35792},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 993, col: 1, offset: 35804},
			expr: &seqExpr{
				pos: position{line: 993, col: 15, offset: 35818},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 993, col: 15, offset: 35818},
						expr: &ruleRefExpr{
							pos:  position{line: 993, col: 15, offset: 35818},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 993, col: 28, offset: 35831},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 994, col: 1, offset: 35835},
			expr: &choiceExpr{
				pos: position{line: 995, col: 5, offset: 35849},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 995, col: 5, offset: 35849},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 5, offset: 35866},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 997, col: 5, offset: 35878},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 997, col: 5, offset: 35878},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 998, col: 1, offset: 35901},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 35914},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 35914},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1000, col: 5, offset: 35928},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1001, col: 1, offset: 35934},
			expr: &actionExpr{
				pos: position{line: 1001, col: 11, offset: 35944},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 11, offset: 35944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1001, col: 11, offset: 35944},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1001, col: 16, offset: 35949},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1001, col: 19, offset: 35952},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1001, col: 19, offset: 35952},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1001, col: 32, offset: 35965},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1002, col: 1, offset: 35999},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 36014},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 36014},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1003, col: 5, offset: 36014},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 36042},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1004, col: 5, offset: 36042},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1005, col: 5, offset: 36072},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1006, col: 1, offset: 36077},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 36098},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 36098},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 36098},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1007, col: 5, offset: 36098},
									expr: &choiceExpr{
										pos: position{line: 1007, col: 7, offset: 36100},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1007, col: 7, offset: 36100},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1007, col: 13, offset: 36106},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1007, col: 26, offset: 36119,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 36156},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 36156},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1008, col: 5, offset: 36156},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1008, col: 10, offset: 36161},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 12, offset: 36163},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1009, col: 1, offset: 36196},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 36215},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1010, col: 5, offset: 36215},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1011, col: 5, offset: 36236},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1012, col: 1, offset: 36250},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 5, offset: 36271},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1013, col: 5, offset: 36271},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 36279},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1014, col: 5, offset: 36279},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1015, col: 5, offset: 36319},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 36328},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1016, col: 5, offset: 36328},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 36357},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1017, col: 5, offset: 36357},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 36386},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1018, col: 5, offset: 36386},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 36415},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1019, col: 5, offset: 36415},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 36444},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1020, col: 5, offset: 36444},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 36473},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1021, col: 5, offset: 36473},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1022, col: 1, offset: 36498},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 5, offset: 36516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 36516},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1023, col: 5, offset: 36516},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1024, col: 5, offset: 36544},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1024, col: 5, offset: 36544},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1025, col: 5, offset: 36572},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1026, col: 1, offset: 36577},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 5, offset: 36595},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1027, col: 5, offset: 36595},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1027, col: 5, offset: 36595},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1027, col: 5, offset: 36595},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 9, offset: 36599},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1027, col: 16, offset: 36606},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1027, col: 16, offset: 36606},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 25, offset: 36615},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 34, offset: 36624},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 43, offset: 36633},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 36696},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 36696},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1030, col: 5, offset: 36696},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1030, col: 9, offset: 36700},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 13, offset: 36704},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1030, col: 20, offset: 36711},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1030, col: 20, offset: 36711},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 29, offset: 36720},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 29, offset: 36720},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 39, offset: 36730},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 39, offset: 36730},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 49, offset: 36740},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 49, offset: 36740},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 59, offset: 36750},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 59, offset: 36750},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 69, offset: 36760},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 69, offset: 36760},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 80, offset: 36771},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1033, col: 1, offset: 36824},
			expr: &actionExpr{
				pos: position{line: 1034, col: 5, offset: 36842},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 5, offset: 36842},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1034, col: 5, offset: 36842},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 9, offset: 36846},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 14, offset: 36851},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 25, offset: 36862},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1034, col: 29, offset: 36866},
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 30, offset: 36867},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1035, col: 1, offset: 36901},
			expr: &actionExpr{
				pos: position{line: 1036, col: 5, offset: 36916},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1036, col: 5, offset: 36916},
					expr: &choiceExpr{
						pos: position{line: 1036, col: 6, offset: 36917},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1036, col: 6, offset: 36917},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1036, col: 15, offset: 36926},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1036, col: 15, offset: 36926},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1036, col: 20, offset: 36931,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1037, col: 1, offset: 36966},
			expr: &charClassMatcher{
				pos:        position{line: 1038, col: 5, offset: 36982},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1039, col: 1, offset: 36996},
			expr: &oneOrMoreExpr{
				pos: position{line: 1039, col: 5, offset: 37000},
				expr: &ruleRefExpr{
					pos:  position{line: 1039, col: 5, offset: 37000},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1040, col: 1, offset: 37010},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1040, col: 6, offset: 37015},
				expr: &ruleRefExpr{
					pos:  position{line: 1040, col: 6, offset: 37015},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1041, col: 1, offset: 37025},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 5, offset: 37038},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 37038},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 37053},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 37072},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1045, col: 1, offset: 37080},
			expr: &anyMatcher{
				line: 1046, col: 5, offset: 37100,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1047, col: 1, offset: 37102},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 5, offset: 37130},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1048, col: 5, offset: 37130},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1049, col: 5, offset: 37139},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1050, col: 5, offset: 37148},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1051, col: 5, offset: 37157},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1052, col: 5, offset: 37165},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1053, col: 5, offset: 37178},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1054, col: 1, offset: 37187},
			expr: &charClassMatcher{
				pos:        position{line: 1055, col: 5, offset: 37206},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1056, col: 1, offset: 37225},
			expr: &ruleRefExpr{
				pos:  position{line: 1057, col: 5, offset: 37247},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1058, col: 1, offset: 37265},
			expr: &seqExpr{
				pos: position{line: 1059, col: 5, offset: 37286},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1059, col: 5, offset: 37286},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1059, col: 10, offset: 37291},
						expr: &seqExpr{
							pos: position{line: 1059, col: 11, offset: 37292},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1059, col: 11, offset: 37292},
									expr: &litMatcher{
										pos:        position{line: 1059, col: 12, offset: 37293},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1059, col: 17, offset: 37298},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1059, col: 35, offset: 37316},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1060, col: 1, offset: 37321},
			expr: &seqExpr{
				pos: position{line: 1061, col: 5, offset: 37343},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1061, col: 5, offset: 37343},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1061, col: 10, offset: 37348},
						expr: &seqExpr{
							pos: position{line: 1061, col: 11, offset: 37349},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1061, col: 11, offset: 37349},
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 12, offset: 37350},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 27, offset: 37365},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1062, col: 1, offset: 37383},
			expr: &seqExpr{
				pos: position{line: 1062, col: 7, offset: 37389},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1062, col: 7, offset: 37389},
						expr: &ruleRefExpr{
							pos:  position{line: 1062, col: 7, offset: 37389},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 19, offset: 37401},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1063, col: 1, offset: 37416},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 7, offset: 37422},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1063, col: 7, offset: 37422},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 11, offset: 37426},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1064, col: 1, offset: 37430},
			expr: &notExpr{
				pos: position{line: 1064, col: 7, offset: 37436},
				expr: &anyMatcher{
					line: 1064, col: 8, offset: 37437,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1065, col: 1, offset: 37439},
			expr: &notExpr{
				pos: position{line: 1065, col: 8, offset: 37446},
				expr: &ruleRefExpr{
					pos:  position{line: 1065, col: 9, offset: 37447},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "body": body, "decls": nil}, nil

}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["body"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "body": body, "decls": decls}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSequential1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "FuncDecl", "name": id, "params": params, "expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, leg interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": leg}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["leg"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "Conditional", "cond": expr.([]interface{})[0], "then": map[string]interface{}{"kind": "ID", "name": "this"}, "else": map[string]interface{}{"kind": "Call", "name": "error", "args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{"kind": "Primitive", "text": "assertion failed", "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{"kind": "ID", "name": "this"}}}}}, "where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": []interface{}{map[string]interface{}{"kind": "Summarize", "keys": []interface{}{map[string]interface{}{"kind": "Assignment", "lhs": map[string]interface{}{"kind": "ID", "name": "shape"}, "rhs": map[string]interface{}{"kind": "Call", "name": "typeof", "args": []interface{}{e}, "where": nil}}}, "aggs": []interface{}{map[string]interface{}{"kind": "Assignment", "lhs": map[string]interface{}{"kind": "ID", "name": "sample"}, "rhs": map[string]interface{}{"kind": "Agg", "name": "any", "expr": e, "where": nil}}}, "limit": 0}, map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLExpr", "select": selection, "from": from, "joins": joins, "where": where, "group_by": groupby, "having": having, "order_by": orderby, "limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "style": style, "left_key": leftKey, "right_key": rightKey, "alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
