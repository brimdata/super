// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 355},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 435},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 435},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 435},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 435},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 441},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 441},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 447},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 450},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 456},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 471},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 471},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 744},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 756},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 763},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 763},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 768},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 795},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1445},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1450},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1453},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1455},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1484},
			expr: &actionExpr{
				pos: position{line: 45, col: 5, offset: 1497},
				run: (*parser).callonParallel1,
				expr: &seqExpr{
					pos: position{line: 45, col: 5, offset: 1497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 5, offset: 1497},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 8, offset: 1500},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 13, offset: 1505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 16, offset: 1508},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 18, offset: 1510},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 29, offset: 1521},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 32, offset: 1524},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 47, col: 1, offset: 1547},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1561},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1561},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 48, col: 5, offset: 1561},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 8, offset: 1564},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 15, offset: 1571},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 27, offset: 1583},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 31, offset: 1587},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 31, offset: 1587},
									name: "FromTrunkSeq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 45, offset: 1601},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 48, col: 48, offset: 1604},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 52, col: 1, offset: 1705},
			expr: &choiceExpr{
				pos: position{line: 53, col: 5, offset: 1722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1722},
						run: (*parser).callonFromTrunkSeq2,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1722},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 53, col: 5, offset: 1722},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 8, offset: 1725},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 13, offset: 1730},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 53, col: 16, offset: 1733},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 20, offset: 1737},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1772},
						run: (*parser).callonFromTrunkSeq9,
						expr: &litMatcher{
							pos:        position{line: 54, col: 5, offset: 1772},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 56, col: 1, offset: 1795},
			expr: &choiceExpr{
				pos: position{line: 57, col: 5, offset: 1810},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 57, col: 5, offset: 1810},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 5, offset: 1823},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 5, offset: 1836},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 5, offset: 1849},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 62, col: 1, offset: 1859},
			expr: &choiceExpr{
				pos: position{line: 63, col: 5, offset: 1873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1873},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 63, col: 5, offset: 1873},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 13, offset: 1881},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 16, offset: 1884},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 63, col: 20, offset: 1888},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 63, col: 30, offset: 1898},
										expr: &ruleRefExpr{
											pos:  position{line: 63, col: 30, offset: 1898},
											name: "Parallel",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 40, offset: 1908},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 43, offset: 1911},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 2008},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 2008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 5, offset: 2008},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 14, offset: 2017},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 16, offset: 2019},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 21, offset: 2024},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 26, offset: 2029},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 66, col: 28, offset: 2031},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 66, col: 32, offset: 2035},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 66, col: 38, offset: 2041},
										expr: &ruleRefExpr{
											pos:  position{line: 66, col: 38, offset: 2041},
											name: "SwitchLiteralClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 59, offset: 2062},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 66, col: 62, offset: 2065},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 2170},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 69, col: 5, offset: 2170},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 69, col: 5, offset: 2170},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 14, offset: 2179},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 69, col: 17, offset: 2182},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 69, col: 21, offset: 2186},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 69, col: 27, offset: 2192},
										expr: &ruleRefExpr{
											pos:  position{line: 69, col: 27, offset: 2192},
											name: "SwitchSearchBooleanClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 54, offset: 2219},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 69, col: 57, offset: 2222},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2326},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2326},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 12, offset: 2333},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 72, col: 15, offset: 2336},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 72, col: 19, offset: 2340},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 72, col: 26, offset: 2347},
										expr: &ruleRefExpr{
											pos:  position{line: 72, col: 26, offset: 2347},
											name: "FromTrunk",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 37, offset: 2358},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 72, col: 40, offset: 2361},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 5, offset: 2452},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2465},
						run: (*parser).callonOperation46,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 2465},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 7, offset: 2467},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 76, col: 16, offset: 2476},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 17, offset: 2477},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2507},
						run: (*parser).callonOperation52,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 77, col: 5, offset: 2507},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 7, offset: 2509},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 77, col: 19, offset: 2521},
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 20, offset: 2522},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2553},
						run: (*parser).callonOperation58,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2553},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 78, col: 5, offset: 2553},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 10, offset: 2558},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 78, col: 24, offset: 2572},
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 25, offset: 2573},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLiteralClause",
			pos:  position{line: 82, col: 1, offset: 2664},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2688},
				run: (*parser).callonSwitchLiteralClause1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2688},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 83, col: 5, offset: 2688},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 8, offset: 2691},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 83, col: 14, offset: 2697},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 83, col: 14, offset: 2697},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 29, offset: 2712},
										name: "Literal",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 38, offset: 2721},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 41, offset: 2724},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 46, offset: 2729},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 49, offset: 2732},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 54, offset: 2737},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 65, offset: 2748},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 68, offset: 2751},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SwitchSearchBooleanClause",
			pos:  position{line: 87, col: 1, offset: 2833},
			expr: &actionExpr{
				pos: position{line: 88, col: 5, offset: 2863},
				run: (*parser).callonSwitchSearchBooleanClause1,
				expr: &seqExpr{
					pos: position{line: 88, col: 5, offset: 2863},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 5, offset: 2863},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 8, offset: 2866},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 88, col: 14, offset: 2872},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 88, col: 14, offset: 2872},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 29, offset: 2887},
										name: "SearchBoolean",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 44, offset: 2902},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 47, offset: 2905},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 52, offset: 2910},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 55, offset: 2913},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 60, offset: 2918},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 71, offset: 2929},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 74, offset: 2932},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 92, col: 1, offset: 3014},
			expr: &actionExpr{
				pos: position{line: 92, col: 16, offset: 3029},
				run: (*parser).callonDefaultToken1,
				expr: &litMatcher{
					pos:        position{line: 92, col: 16, offset: 3029},
					val:        "default",
					ignoreCase: true,
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 94, col: 1, offset: 3061},
			expr: &seqExpr{
				pos: position{line: 94, col: 11, offset: 3071},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 94, col: 11, offset: 3071},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 94, col: 15, offset: 3075},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 15, offset: 3075},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 94, col: 22, offset: 3082},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 94, col: 29, offset: 3089},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 36, offset: 3096},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 95, col: 1, offset: 3101},
			expr: &seqExpr{
				pos: position{line: 95, col: 8, offset: 3108},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 95, col: 8, offset: 3108},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 95, col: 12, offset: 3112},
						expr: &choiceExpr{
							pos: position{line: 95, col: 14, offset: 3114},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 95, col: 14, offset: 3114},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 95, col: 20, offset: 3120},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 97, col: 1, offset: 3126},
			expr: &seqExpr{
				pos: position{line: 97, col: 13, offset: 3138},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 97, col: 13, offset: 3138},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 97, col: 17, offset: 3142},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 97, col: 18, offset: 3143},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 97, col: 18, offset: 3143},
										expr: &litMatcher{
											pos:        position{line: 97, col: 19, offset: 3144},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 3149},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 38, offset: 3163},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 57, offset: 3182},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 97, col: 82, offset: 3207},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 88, offset: 3213},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 94, offset: 3219},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 100, offset: 3225},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 99, col: 1, offset: 3237},
			expr: &actionExpr{
				pos: position{line: 99, col: 14, offset: 3250},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 99, col: 15, offset: 3251},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 15, offset: 3251},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 22, offset: 3258},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 29, offset: 3265},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 36, offset: 3272},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 43, offset: 3279},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 49, offset: 3285},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 56, offset: 3292},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 101, col: 1, offset: 3329},
			expr: &choiceExpr{
				pos: position{line: 101, col: 12, offset: 3340},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 101, col: 13, offset: 3341},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 101, col: 13, offset: 3341},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 101, col: 16, offset: 3344},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 101, col: 16, offset: 3344},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 101, col: 26, offset: 3354},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 101, col: 35, offset: 3363},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 101, col: 43, offset: 3371},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 101, col: 43, offset: 3371},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 101, col: 46, offset: 3374},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 103, col: 1, offset: 3380},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3398},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3398},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3398},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 11, offset: 3404},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 21, offset: 3414},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 26, offset: 3419},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 26, offset: 3419},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 108, col: 1, offset: 3493},
			expr: &actionExpr{
				pos: position{line: 108, col: 16, offset: 3508},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 108, col: 16, offset: 3508},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 108, col: 16, offset: 3508},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 18, offset: 3510},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 26, offset: 3518},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 28, offset: 3520},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 30, offset: 3522},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 110, col: 1, offset: 3572},
			expr: &actionExpr{
				pos: position{line: 111, col: 5, offset: 3586},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 111, col: 5, offset: 3586},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 111, col: 5, offset: 3586},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 11, offset: 3592},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 3609},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 10, offset: 3614},
								expr: &actionExpr{
									pos: position{line: 112, col: 11, offset: 3615},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 112, col: 11, offset: 3615},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 112, col: 11, offset: 3615},
												expr: &seqExpr{
													pos: position{line: 112, col: 12, offset: 3616},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 112, col: 12, offset: 3616},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 112, col: 14, offset: 3618},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 25, offset: 3629},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 112, col: 27, offset: 3631},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 32, offset: 3636},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 116, col: 1, offset: 3752},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 3769},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3769},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3769},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 117, col: 6, offset: 3770},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 117, col: 6, offset: 3770},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 117, col: 6, offset: 3770},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 15, offset: 3779},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 117, col: 19, offset: 3783},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 117, col: 19, offset: 3783},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 23, offset: 3787},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 117, col: 27, offset: 3791},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 29, offset: 3793},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3905},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3920},
						run: (*parser).callonSearchFactor14,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3920},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 121, col: 5, offset: 3920},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 121, col: 9, offset: 3924},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 121, col: 12, offset: 3927},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 17, offset: 3932},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 121, col: 31, offset: 3946},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 121, col: 34, offset: 3949},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TBD",
			pos:  position{line: 124, col: 1, offset: 3976},
			expr: &choiceExpr{
				pos: position{line: 125, col: 5, offset: 3984},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 3984},
						run: (*parser).callonTBD2,
						expr: &seqExpr{
							pos: position{line: 125, col: 5, offset: 3984},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 125, col: 5, offset: 3984},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 9, offset: 3988},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 125, col: 12, offset: 3991},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 22, offset: 4001},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 36, offset: 4015},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 125, col: 39, offset: 4018},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 41, offset: 4020},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4702},
						run: (*parser).callonTBD11,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4702},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 152, col: 5, offset: 4702},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 11, offset: 4708},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 152, col: 24, offset: 4721},
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 25, offset: 4722},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4758},
						run: (*parser).callonTBD17,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4758},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 153, col: 5, offset: 4758},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 7, offset: 4760},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 19, offset: 4772},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 21, offset: 4774},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 29, offset: 4782},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 153, col: 31, offset: 4784},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 181, col: 1, offset: 5463},
			expr: &choiceExpr{
				pos: position{line: 182, col: 5, offset: 5478},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5478},
						run: (*parser).callonSearchExpr2,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 5478},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 182, col: 5, offset: 5478},
									expr: &seqExpr{
										pos: position{line: 182, col: 7, offset: 5480},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 182, col: 7, offset: 5480},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 182, col: 19, offset: 5492},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 182, col: 24, offset: 5497},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 31, offset: 5504},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 5545},
						run: (*parser).callonSearchExpr10,
						expr: &seqExpr{
							pos: position{line: 183, col: 5, offset: 5545},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 183, col: 5, offset: 5545},
									expr: &seqExpr{
										pos: position{line: 183, col: 7, offset: 5547},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 183, col: 7, offset: 5547},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 183, col: 19, offset: 5559},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 24, offset: 5564},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 26, offset: 5566},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 183, col: 38, offset: 5578},
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 39, offset: 5579},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5696},
						run: (*parser).callonSearchExpr20,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5696},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 186, col: 5, offset: 5696},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 186, col: 9, offset: 5700},
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 10, offset: 5701},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 5817},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 191, col: 1, offset: 5838},
			expr: &choiceExpr{
				pos: position{line: 192, col: 5, offset: 5854},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 5854},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5866},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 5866},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 193, col: 5, offset: 5866},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 6, offset: 5867},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 193, col: 13, offset: 5874},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 5876},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 197, col: 1, offset: 5984},
			expr: &actionExpr{
				pos: position{line: 198, col: 5, offset: 6002},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 198, col: 5, offset: 6002},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 198, col: 13, offset: 6010},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 202, col: 1, offset: 6112},
			expr: &actionExpr{
				pos: position{line: 203, col: 5, offset: 6129},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 203, col: 5, offset: 6129},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 203, col: 5, offset: 6129},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 7, offset: 6131},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 12, offset: 6136},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 203, col: 14, offset: 6138},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 25, offset: 6149},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 203, col: 28, offset: 6152},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 36, offset: 6160},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 207, col: 1, offset: 6272},
			expr: &choiceExpr{
				pos: position{line: 207, col: 11, offset: 6282},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 207, col: 11, offset: 6282},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 20, offset: 6291},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 209, col: 1, offset: 6297},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6313},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6313},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6335},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6348},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6360},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6373},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6385},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 5, offset: 6397},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 217, col: 5, offset: 6414},
						val:        "type(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 218, col: 5, offset: 6426},
						val:        "matches",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 222, col: 1, offset: 6464},
			expr: &choiceExpr{
				pos: position{line: 223, col: 5, offset: 6480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 6480},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 6480},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 223, col: 5, offset: 6480},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 15, offset: 6490},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 21, offset: 6496},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 223, col: 30, offset: 6505},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 35, offset: 6510},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 223, col: 47, offset: 6522},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 53, offset: 6528},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 6673},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 226, col: 5, offset: 6673},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 226, col: 5, offset: 6673},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 226, col: 15, offset: 6683},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 226, col: 21, offset: 6689},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 226, col: 30, offset: 6698},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 226, col: 35, offset: 6703},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 226, col: 50, offset: 6718},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 226, col: 55, offset: 6723},
										expr: &seqExpr{
											pos: position{line: 226, col: 56, offset: 6724},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 226, col: 56, offset: 6724},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 226, col: 58, offset: 6726},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 226, col: 72, offset: 6740},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 226, col: 78, offset: 6746},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 234, col: 1, offset: 6979},
			expr: &choiceExpr{
				pos: position{line: 234, col: 13, offset: 6991},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 234, col: 13, offset: 6991},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 234, col: 13, offset: 6991},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 234, col: 25, offset: 7003},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 234, col: 29, offset: 7007},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 236, col: 1, offset: 7011},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 7024},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 7024},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 237, col: 5, offset: 7024},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 237, col: 5, offset: 7024},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 14, offset: 7033},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 237, col: 16, offset: 7035},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 20, offset: 7039},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 29, offset: 7048},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 7074},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 238, col: 5, offset: 7074},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 240, col: 1, offset: 7099},
			expr: &actionExpr{
				pos: position{line: 241, col: 5, offset: 7115},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 241, col: 5, offset: 7115},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 241, col: 5, offset: 7115},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 241, col: 13, offset: 7123},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 241, col: 15, offset: 7125},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 23, offset: 7133},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 243, col: 1, offset: 7174},
			expr: &choiceExpr{
				pos: position{line: 244, col: 5, offset: 7187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 7187},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 244, col: 5, offset: 7187},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 244, col: 5, offset: 7187},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 244, col: 7, offset: 7189},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 14, offset: 7196},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 244, col: 16, offset: 7198},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 25, offset: 7207},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 244, col: 27, offset: 7209},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 33, offset: 7215},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 245, col: 5, offset: 7246},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 245, col: 5, offset: 7246},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 250, col: 1, offset: 7506},
			expr: &choiceExpr{
				pos: position{line: 251, col: 5, offset: 7525},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7525},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 7540},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 252, col: 5, offset: 7540},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 10, offset: 7545},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 254, col: 1, offset: 7637},
			expr: &actionExpr{
				pos: position{line: 255, col: 5, offset: 7657},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 255, col: 5, offset: 7657},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 255, col: 5, offset: 7657},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 11, offset: 7663},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 26, offset: 7678},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 255, col: 31, offset: 7683},
								expr: &actionExpr{
									pos: position{line: 255, col: 32, offset: 7684},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 255, col: 32, offset: 7684},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 255, col: 32, offset: 7684},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 255, col: 35, offset: 7687},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 255, col: 39, offset: 7691},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 255, col: 42, offset: 7694},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 255, col: 47, offset: 7699},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 259, col: 1, offset: 7821},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 7839},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 7839},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 260, col: 5, offset: 7839},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 260, col: 5, offset: 7839},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 10, offset: 7844},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 260, col: 15, offset: 7849},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 260, col: 18, offset: 7852},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 260, col: 23, offset: 7857},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 260, col: 26, offset: 7860},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 30, offset: 7864},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 7968},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 263, col: 5, offset: 7968},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 9, offset: 7972},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 267, col: 1, offset: 8072},
			expr: &actionExpr{
				pos: position{line: 268, col: 5, offset: 8080},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 268, col: 5, offset: 8080},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 268, col: 5, offset: 8080},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 6, offset: 8081},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 16, offset: 8091},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 19, offset: 8094},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 27, offset: 8102},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 268, col: 30, offset: 8105},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 34, offset: 8109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 37, offset: 8112},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 268, col: 42, offset: 8117},
								expr: &ruleRefExpr{
									pos:  position{line: 268, col: 42, offset: 8117},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 49, offset: 8124},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 268, col: 52, offset: 8127},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 268, col: 56, offset: 8131},
							expr: &seqExpr{
								pos: position{line: 268, col: 58, offset: 8133},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 268, col: 58, offset: 8133},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 268, col: 61, offset: 8136},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 66, offset: 8141},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 268, col: 72, offset: 8147},
								expr: &ruleRefExpr{
									pos:  position{line: 268, col: 72, offset: 8147},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 276, col: 1, offset: 8337},
			expr: &choiceExpr{
				pos: position{line: 277, col: 5, offset: 8349},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 8349},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 8368},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 8381},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 281, col: 1, offset: 8390},
			expr: &actionExpr{
				pos: position{line: 281, col: 15, offset: 8404},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 281, col: 15, offset: 8404},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 281, col: 15, offset: 8404},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 281, col: 17, offset: 8406},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 25, offset: 8414},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 27, offset: 8416},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 32, offset: 8421},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 283, col: 1, offset: 8457},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8476},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8476},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 284, col: 5, offset: 8476},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 11, offset: 8482},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 25, offset: 8496},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 284, col: 30, offset: 8501},
								expr: &seqExpr{
									pos: position{line: 284, col: 31, offset: 8502},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 284, col: 31, offset: 8502},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 284, col: 34, offset: 8505},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 284, col: 38, offset: 8509},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 284, col: 41, offset: 8512},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 294, col: 1, offset: 8748},
			expr: &choiceExpr{
				pos: position{line: 295, col: 5, offset: 8761},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 295, col: 5, offset: 8761},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 296, col: 5, offset: 8774},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 5, offset: 8786},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 298, col: 5, offset: 8798},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 299, col: 5, offset: 8811},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 300, col: 5, offset: 8824},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 301, col: 5, offset: 8837},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 302, col: 5, offset: 8850},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 303, col: 5, offset: 8865},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 304, col: 5, offset: 8878},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 305, col: 5, offset: 8890},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 306, col: 5, offset: 8905},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 307, col: 5, offset: 8918},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 308, col: 5, offset: 8932},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 309, col: 5, offset: 8945},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 310, col: 5, offset: 8960},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 311, col: 5, offset: 8972},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 312, col: 5, offset: 8985},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 313, col: 5, offset: 8998},
						name: "ExplodeProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 315, col: 1, offset: 9011},
			expr: &actionExpr{
				pos: position{line: 316, col: 5, offset: 9024},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 316, col: 5, offset: 9024},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 316, col: 5, offset: 9024},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 316, col: 13, offset: 9032},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 18, offset: 9037},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 27, offset: 9046},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 32, offset: 9051},
								expr: &actionExpr{
									pos: position{line: 316, col: 33, offset: 9052},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 316, col: 33, offset: 9052},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 316, col: 33, offset: 9052},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 316, col: 35, offset: 9054},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 316, col: 37, offset: 9056},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 330, col: 1, offset: 9475},
			expr: &actionExpr{
				pos: position{line: 330, col: 12, offset: 9486},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 330, col: 12, offset: 9486},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 330, col: 17, offset: 9491},
						expr: &actionExpr{
							pos: position{line: 330, col: 18, offset: 9492},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 330, col: 18, offset: 9492},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 330, col: 18, offset: 9492},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 330, col: 20, offset: 9494},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 22, offset: 9496},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 332, col: 1, offset: 9552},
			expr: &choiceExpr{
				pos: position{line: 333, col: 5, offset: 9564},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 333, col: 5, offset: 9564},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 333, col: 5, offset: 9564},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 334, col: 5, offset: 9639},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 334, col: 5, offset: 9639},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 334, col: 5, offset: 9639},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 334, col: 14, offset: 9648},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 334, col: 16, offset: 9650},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 334, col: 23, offset: 9657},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 334, col: 24, offset: 9658},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 334, col: 24, offset: 9658},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 334, col: 34, offset: 9668},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 336, col: 1, offset: 9782},
			expr: &actionExpr{
				pos: position{line: 337, col: 5, offset: 9794},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 337, col: 5, offset: 9794},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 337, col: 5, offset: 9794},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 337, col: 12, offset: 9801},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 337, col: 18, offset: 9807},
								expr: &actionExpr{
									pos: position{line: 337, col: 19, offset: 9808},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 337, col: 19, offset: 9808},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 337, col: 19, offset: 9808},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 337, col: 21, offset: 9810},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 337, col: 23, offset: 9812},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 47, offset: 9836},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 337, col: 53, offset: 9842},
								expr: &seqExpr{
									pos: position{line: 337, col: 54, offset: 9843},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 337, col: 54, offset: 9843},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 337, col: 56, offset: 9845},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 67, offset: 9856},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 337, col: 74, offset: 9863},
								expr: &actionExpr{
									pos: position{line: 337, col: 75, offset: 9864},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 337, col: 75, offset: 9864},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 337, col: 75, offset: 9864},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 337, col: 77, offset: 9866},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 337, col: 79, offset: 9868},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 351, col: 1, offset: 10213},
			expr: &actionExpr{
				pos: position{line: 352, col: 5, offset: 10225},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 352, col: 5, offset: 10225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 5, offset: 10225},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 12, offset: 10232},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 14, offset: 10234},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 19, offset: 10239},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 356, col: 1, offset: 10334},
			expr: &actionExpr{
				pos: position{line: 357, col: 5, offset: 10347},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 357, col: 5, offset: 10347},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 5, offset: 10347},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 13, offset: 10355},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 15, offset: 10357},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 20, offset: 10362},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 361, col: 1, offset: 10458},
			expr: &actionExpr{
				pos: position{line: 362, col: 5, offset: 10471},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 362, col: 5, offset: 10471},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 362, col: 5, offset: 10471},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 13, offset: 10479},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 362, col: 15, offset: 10481},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 20, offset: 10486},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 366, col: 1, offset: 10577},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10590},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10590},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 10590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 367, col: 5, offset: 10590},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 367, col: 13, offset: 10598},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 367, col: 15, offset: 10600},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 367, col: 21, offset: 10606},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10686},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 368, col: 5, offset: 10686},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 370, col: 1, offset: 10762},
			expr: &choiceExpr{
				pos: position{line: 371, col: 5, offset: 10775},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10775},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 371, col: 5, offset: 10775},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 371, col: 5, offset: 10775},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 371, col: 13, offset: 10783},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 371, col: 15, offset: 10785},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 371, col: 21, offset: 10791},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 10871},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 372, col: 5, offset: 10871},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 374, col: 1, offset: 10947},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 10962},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 10962},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 10962},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 375, col: 15, offset: 10972},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 17, offset: 10974},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 20, offset: 10977},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 379, col: 1, offset: 11014},
			expr: &actionExpr{
				pos: position{line: 380, col: 5, offset: 11025},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 380, col: 5, offset: 11025},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 380, col: 10, offset: 11030},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 384, col: 1, offset: 11126},
			expr: &choiceExpr{
				pos: position{line: 385, col: 5, offset: 11139},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 385, col: 5, offset: 11139},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 385, col: 5, offset: 11139},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 385, col: 5, offset: 11139},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 385, col: 13, offset: 11147},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 385, col: 15, offset: 11149},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 388, col: 5, offset: 11238},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 388, col: 5, offset: 11238},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 392, col: 1, offset: 11328},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 11340},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 11340},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 5, offset: 11340},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 393, col: 12, offset: 11347},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 393, col: 14, offset: 11349},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 19, offset: 11354},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 397, col: 1, offset: 11449},
			expr: &actionExpr{
				pos: position{line: 398, col: 5, offset: 11464},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 398, col: 5, offset: 11464},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 398, col: 5, offset: 11464},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 15, offset: 11474},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 398, col: 17, offset: 11476},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 23, offset: 11482},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 398, col: 34, offset: 11493},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 398, col: 39, offset: 11498},
								expr: &actionExpr{
									pos: position{line: 398, col: 40, offset: 11499},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 398, col: 40, offset: 11499},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 398, col: 40, offset: 11499},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 398, col: 43, offset: 11502},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 398, col: 47, offset: 11506},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 398, col: 50, offset: 11509},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 398, col: 53, offset: 11512},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 406, col: 1, offset: 11921},
			expr: &actionExpr{
				pos: position{line: 407, col: 5, offset: 11934},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 407, col: 5, offset: 11934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 407, col: 5, offset: 11934},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 407, col: 13, offset: 11942},
							expr: &seqExpr{
								pos: position{line: 407, col: 15, offset: 11944},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 407, col: 15, offset: 11944},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 407, col: 18, offset: 11947},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 411, col: 1, offset: 12018},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 12032},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 412, col: 5, offset: 12032},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 416, col: 1, offset: 12108},
			expr: &choiceExpr{
				pos: position{line: 417, col: 5, offset: 12121},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12121},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 12121},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 417, col: 5, offset: 12121},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 11, offset: 12127},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 417, col: 21, offset: 12137},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 29, offset: 12145},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 31, offset: 12147},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 34, offset: 12150},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 417, col: 36, offset: 12152},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 44, offset: 12160},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 52, offset: 12168},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 417, col: 55, offset: 12171},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 59, offset: 12175},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 417, col: 62, offset: 12178},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 71, offset: 12187},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 417, col: 79, offset: 12195},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 417, col: 87, offset: 12203},
										expr: &seqExpr{
											pos: position{line: 417, col: 88, offset: 12204},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 417, col: 88, offset: 12204},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 417, col: 90, offset: 12206},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 12472},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 424, col: 5, offset: 12472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 424, col: 5, offset: 12472},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 424, col: 11, offset: 12478},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 424, col: 22, offset: 12489},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 424, col: 30, offset: 12497},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 424, col: 32, offset: 12499},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 424, col: 35, offset: 12502},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 424, col: 37, offset: 12504},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 424, col: 41, offset: 12508},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 424, col: 49, offset: 12516},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 424, col: 57, offset: 12524},
										expr: &seqExpr{
											pos: position{line: 424, col: 58, offset: 12525},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 424, col: 58, offset: 12525},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 424, col: 60, offset: 12527},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 432, col: 1, offset: 12781},
			expr: &choiceExpr{
				pos: position{line: 433, col: 5, offset: 12795},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 433, col: 5, offset: 12795},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 433, col: 5, offset: 12795},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 433, col: 5, offset: 12795},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 14, offset: 12804},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 12834},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 434, col: 5, offset: 12834},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 434, col: 5, offset: 12834},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 14, offset: 12843},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 435, col: 5, offset: 12872},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 435, col: 5, offset: 12872},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 435, col: 5, offset: 12872},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 435, col: 14, offset: 12881},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 12911},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 436, col: 5, offset: 12911},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 438, col: 1, offset: 12947},
			expr: &choiceExpr{
				pos: position{line: 439, col: 5, offset: 12959},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 439, col: 5, offset: 12959},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 12968},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 12968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 440, col: 5, offset: 12968},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 440, col: 9, offset: 12972},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 14, offset: 12977},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 440, col: 19, offset: 12982},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 442, col: 1, offset: 13008},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13023},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13023},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 443, col: 5, offset: 13023},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 443, col: 15, offset: 13033},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 17, offset: 13035},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 480, col: 1, offset: 14330},
			expr: &choiceExpr{
				pos: position{line: 481, col: 5, offset: 14345},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 481, col: 5, offset: 14345},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 481, col: 5, offset: 14345},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 481, col: 5, offset: 14345},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 481, col: 7, offset: 14347},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 481, col: 12, offset: 14352},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 482, col: 5, offset: 14381},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 482, col: 5, offset: 14381},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 484, col: 1, offset: 14439},
			expr: &actionExpr{
				pos: position{line: 485, col: 5, offset: 14452},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 485, col: 5, offset: 14452},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 485, col: 12, offset: 14459},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 489, col: 1, offset: 14615},
			expr: &choiceExpr{
				pos: position{line: 490, col: 5, offset: 14627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 490, col: 5, offset: 14627},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14640},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14653},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 494, col: 1, offset: 14663},
			expr: &actionExpr{
				pos: position{line: 495, col: 5, offset: 14676},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 495, col: 5, offset: 14676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 495, col: 5, offset: 14676},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 495, col: 13, offset: 14684},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 495, col: 15, offset: 14686},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 20, offset: 14691},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 495, col: 25, offset: 14696},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 32, offset: 14703},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 495, col: 42, offset: 14713},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 49, offset: 14720},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 499, col: 1, offset: 14848},
			expr: &actionExpr{
				pos: position{line: 500, col: 5, offset: 14861},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 500, col: 5, offset: 14861},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 500, col: 5, offset: 14861},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 13, offset: 14869},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 15, offset: 14871},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 20, offset: 14876},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 502, col: 1, offset: 14907},
			expr: &actionExpr{
				pos: position{line: 503, col: 5, offset: 14920},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 503, col: 5, offset: 14920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 5, offset: 14920},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 10, offset: 14925},
								name: "PoolName",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 19, offset: 14934},
							label: "at",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 22, offset: 14937},
								name: "PoolAt",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 29, offset: 14944},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 34, offset: 14949},
								name: "PoolRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 44, offset: 14959},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 50, offset: 14965},
								name: "OrderArg",
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 507, col: 1, offset: 15100},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 15113},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 15113},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 508, col: 5, offset: 15113},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 12, offset: 15120},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 14, offset: 15122},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 18, offset: 15126},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 22, offset: 15130},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 29, offset: 15137},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 39, offset: 15147},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 46, offset: 15154},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 512, col: 1, offset: 15279},
			expr: &actionExpr{
				pos: position{line: 512, col: 7, offset: 15285},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 512, col: 7, offset: 15285},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 512, col: 8, offset: 15286},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 512, col: 8, offset: 15286},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 512, col: 18, offset: 15296},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 512, col: 28, offset: 15306},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 514, col: 1, offset: 15343},
			expr: &choiceExpr{
				pos: position{line: 515, col: 5, offset: 15352},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15352},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 515, col: 5, offset: 15352},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 7, offset: 15354},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 516, col: 5, offset: 15389},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 516, col: 5, offset: 15389},
							expr: &charClassMatcher{
								pos:        position{line: 516, col: 5, offset: 15389},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 518, col: 1, offset: 15461},
			expr: &choiceExpr{
				pos: position{line: 519, col: 5, offset: 15472},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 519, col: 5, offset: 15472},
						run: (*parser).callonPoolAt2,
						expr: &seqExpr{
							pos: position{line: 519, col: 5, offset: 15472},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 519, col: 5, offset: 15472},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 519, col: 7, offset: 15474},
									val:        "at",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 13, offset: 15480},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 519, col: 15, offset: 15482},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 519, col: 18, offset: 15485},
										name: "KSUID",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 520, col: 5, offset: 15514},
						run: (*parser).callonPoolAt9,
						expr: &litMatcher{
							pos:        position{line: 520, col: 5, offset: 15514},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 522, col: 1, offset: 15538},
			expr: &actionExpr{
				pos: position{line: 522, col: 9, offset: 15546},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 522, col: 9, offset: 15546},
					expr: &charClassMatcher{
						pos:        position{line: 522, col: 10, offset: 15547},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 524, col: 1, offset: 15593},
			expr: &choiceExpr{
				pos: position{line: 525, col: 5, offset: 15607},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 525, col: 5, offset: 15607},
						run: (*parser).callonPoolRange2,
						expr: &seqExpr{
							pos: position{line: 525, col: 5, offset: 15607},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 525, col: 5, offset: 15607},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 525, col: 7, offset: 15609},
									val:        "range",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 525, col: 16, offset: 15618},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 525, col: 18, offset: 15620},
									label: "lower",
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 24, offset: 15626},
										name: "Literal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 525, col: 32, offset: 15634},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 525, col: 34, offset: 15636},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 525, col: 40, offset: 15642},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 525, col: 42, offset: 15644},
									label: "upper",
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 48, offset: 15650},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 15758},
						run: (*parser).callonPoolRange14,
						expr: &litMatcher{
							pos:        position{line: 528, col: 5, offset: 15758},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolTo",
			pos:  position{line: 530, col: 1, offset: 15782},
			expr: &choiceExpr{
				pos: position{line: 531, col: 5, offset: 15793},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 531, col: 5, offset: 15793},
						run: (*parser).callonPoolTo2,
						expr: &seqExpr{
							pos: position{line: 531, col: 5, offset: 15793},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 531, col: 5, offset: 15793},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 531, col: 7, offset: 15795},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 531, col: 13, offset: 15801},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 531, col: 15, offset: 15803},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 531, col: 19, offset: 15807},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 15839},
						run: (*parser).callonPoolTo9,
						expr: &litMatcher{
							pos:        position{line: 532, col: 5, offset: 15839},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 534, col: 1, offset: 15863},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 15876},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15876},
						run: (*parser).callonPoolName2,
						expr: &labeledExpr{
							pos:   position{line: 535, col: 5, offset: 15876},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 10, offset: 15881},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 15921},
						run: (*parser).callonPoolName5,
						expr: &labeledExpr{
							pos:   position{line: 536, col: 5, offset: 15921},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 8, offset: 15924},
								name: "KSUID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 537, col: 5, offset: 15953},
						run: (*parser).callonPoolName8,
						expr: &labeledExpr{
							pos:   position{line: 537, col: 5, offset: 15953},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 7, offset: 15955},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 539, col: 1, offset: 15987},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 16001},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 16001},
						run: (*parser).callonLayoutArg2,
						expr: &seqExpr{
							pos: position{line: 540, col: 5, offset: 16001},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 540, col: 5, offset: 16001},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 540, col: 7, offset: 16003},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 540, col: 16, offset: 16012},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 540, col: 18, offset: 16014},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 540, col: 23, offset: 16019},
										name: "FieldExprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 540, col: 34, offset: 16030},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 540, col: 40, offset: 16036},
										name: "OrderSuffix",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 543, col: 5, offset: 16149},
						run: (*parser).callonLayoutArg11,
						expr: &litMatcher{
							pos:        position{line: 543, col: 5, offset: 16149},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 545, col: 1, offset: 16173},
			expr: &choiceExpr{
				pos: position{line: 546, col: 5, offset: 16187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 16187},
						run: (*parser).callonFormatArg2,
						expr: &seqExpr{
							pos: position{line: 546, col: 5, offset: 16187},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 546, col: 5, offset: 16187},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 546, col: 7, offset: 16189},
									val:        "format",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 546, col: 17, offset: 16199},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 546, col: 19, offset: 16201},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 546, col: 23, offset: 16205},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16244},
						run: (*parser).callonFormatArg9,
						expr: &litMatcher{
							pos:        position{line: 547, col: 5, offset: 16244},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 549, col: 1, offset: 16267},
			expr: &choiceExpr{
				pos: position{line: 550, col: 5, offset: 16283},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 550, col: 5, offset: 16283},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 550, col: 5, offset: 16283},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16318},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 551, col: 5, offset: 16318},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 552, col: 5, offset: 16355},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 552, col: 5, offset: 16355},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 554, col: 1, offset: 16381},
			expr: &choiceExpr{
				pos: position{line: 555, col: 5, offset: 16394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 16394},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 555, col: 5, offset: 16394},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 555, col: 5, offset: 16394},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 555, col: 7, offset: 16396},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 16, offset: 16405},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 555, col: 18, offset: 16407},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16441},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 556, col: 5, offset: 16441},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 556, col: 5, offset: 16441},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 556, col: 7, offset: 16443},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 556, col: 16, offset: 16452},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 556, col: 18, offset: 16454},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 16490},
						run: (*parser).callonOrderArg14,
						expr: &litMatcher{
							pos:        position{line: 557, col: 5, offset: 16490},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 559, col: 1, offset: 16513},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 16526},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 560, col: 5, offset: 16526},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 566, col: 1, offset: 16721},
			expr: &actionExpr{
				pos: position{line: 567, col: 5, offset: 16737},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 567, col: 5, offset: 16737},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 5, offset: 16737},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 567, col: 16, offset: 16748},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 567, col: 18, offset: 16750},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 23, offset: 16755},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 567, col: 29, offset: 16761},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 33, offset: 16765},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 567, col: 41, offset: 16773},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 44, offset: 16776},
								name: "AsArg",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 571, col: 1, offset: 16887},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16899},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 572, col: 5, offset: 16899},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 572, col: 5, offset: 16899},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 7, offset: 16901},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 10, offset: 16904},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 12, offset: 16906},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 16, offset: 16910},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 574, col: 1, offset: 16935},
			expr: &choiceExpr{
				pos: position{line: 575, col: 5, offset: 16945},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 16945},
						run: (*parser).callonAsArg2,
						expr: &seqExpr{
							pos: position{line: 575, col: 5, offset: 16945},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 575, col: 5, offset: 16945},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 7, offset: 16947},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 10, offset: 16950},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 575, col: 12, offset: 16952},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 16, offset: 16956},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 16985},
						run: (*parser).callonAsArg9,
						expr: &litMatcher{
							pos:        position{line: 576, col: 5, offset: 16985},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 580, col: 1, offset: 17033},
			expr: &ruleRefExpr{
				pos:  position{line: 580, col: 8, offset: 17040},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 582, col: 1, offset: 17051},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 17061},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 17061},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 17061},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 17067},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 16, offset: 17072},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 583, col: 21, offset: 17077},
								expr: &actionExpr{
									pos: position{line: 583, col: 22, offset: 17078},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 583, col: 22, offset: 17078},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 583, col: 22, offset: 17078},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 583, col: 25, offset: 17081},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 583, col: 29, offset: 17085},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 32, offset: 17088},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 37, offset: 17093},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 587, col: 1, offset: 17205},
			expr: &ruleRefExpr{
				pos:  position{line: 587, col: 13, offset: 17217},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 589, col: 1, offset: 17223},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 17238},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 17238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 17238},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 17244},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 21, offset: 17254},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 590, col: 26, offset: 17259},
								expr: &seqExpr{
									pos: position{line: 590, col: 27, offset: 17260},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 590, col: 27, offset: 17260},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 590, col: 30, offset: 17263},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 590, col: 34, offset: 17267},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 590, col: 37, offset: 17270},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 600, col: 1, offset: 17469},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 17484},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 17484},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 5, offset: 17484},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 9, offset: 17488},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 14, offset: 17493},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 601, col: 17, offset: 17496},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 22, offset: 17501},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 601, col: 25, offset: 17504},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 29, offset: 17508},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 603, col: 1, offset: 17599},
			expr: &ruleRefExpr{
				pos:  position{line: 603, col: 8, offset: 17606},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 605, col: 1, offset: 17623},
			expr: &choiceExpr{
				pos: position{line: 606, col: 5, offset: 17643},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 17643},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 606, col: 5, offset: 17643},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 606, col: 5, offset: 17643},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 15, offset: 17653},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 606, col: 29, offset: 17667},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 606, col: 32, offset: 17670},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 606, col: 36, offset: 17674},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 606, col: 39, offset: 17677},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 50, offset: 17688},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 606, col: 55, offset: 17693},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 606, col: 58, offset: 17696},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 606, col: 62, offset: 17700},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 606, col: 65, offset: 17703},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 76, offset: 17714},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 609, col: 5, offset: 17854},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 611, col: 1, offset: 17869},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 17887},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 17887},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 17887},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 11, offset: 17893},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 5, offset: 17912},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 613, col: 10, offset: 17917},
								expr: &actionExpr{
									pos: position{line: 613, col: 11, offset: 17918},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 613, col: 11, offset: 17918},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 613, col: 11, offset: 17918},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 613, col: 14, offset: 17921},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 613, col: 17, offset: 17924},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 613, col: 25, offset: 17932},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 613, col: 28, offset: 17935},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 613, col: 33, offset: 17940},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 617, col: 1, offset: 18058},
			expr: &actionExpr{
				pos: position{line: 618, col: 5, offset: 18077},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 618, col: 5, offset: 18077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 618, col: 5, offset: 18077},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 11, offset: 18083},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 5, offset: 18107},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 619, col: 10, offset: 18112},
								expr: &actionExpr{
									pos: position{line: 619, col: 11, offset: 18113},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 619, col: 11, offset: 18113},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 619, col: 11, offset: 18113},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 619, col: 14, offset: 18116},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 619, col: 17, offset: 18119},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 619, col: 26, offset: 18128},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 619, col: 29, offset: 18131},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 619, col: 34, offset: 18136},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 623, col: 1, offset: 18259},
			expr: &choiceExpr{
				pos: position{line: 624, col: 5, offset: 18283},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 624, col: 5, offset: 18283},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18300},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 625, col: 5, offset: 18300},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 625, col: 5, offset: 18300},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 625, col: 11, offset: 18306},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 626, col: 5, offset: 18323},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 626, col: 10, offset: 18328},
										expr: &actionExpr{
											pos: position{line: 626, col: 11, offset: 18329},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 626, col: 11, offset: 18329},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 626, col: 11, offset: 18329},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 626, col: 14, offset: 18332},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 626, col: 19, offset: 18337},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 626, col: 38, offset: 18356},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 626, col: 41, offset: 18359},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 626, col: 46, offset: 18364},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 630, col: 1, offset: 18482},
			expr: &choiceExpr{
				pos: position{line: 631, col: 5, offset: 18503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 631, col: 5, offset: 18503},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 631, col: 5, offset: 18503},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 5, offset: 18532},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 632, col: 5, offset: 18532},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 634, col: 1, offset: 18569},
			expr: &choiceExpr{
				pos: position{line: 635, col: 5, offset: 18592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 635, col: 5, offset: 18592},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 636, col: 5, offset: 18613},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 636, col: 5, offset: 18613},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 638, col: 1, offset: 18650},
			expr: &actionExpr{
				pos: position{line: 639, col: 5, offset: 18667},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 639, col: 5, offset: 18667},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 18667},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 11, offset: 18673},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18690},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 640, col: 10, offset: 18695},
								expr: &actionExpr{
									pos: position{line: 640, col: 11, offset: 18696},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 640, col: 11, offset: 18696},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 11, offset: 18696},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 14, offset: 18699},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 17, offset: 18702},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 34, offset: 18719},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 37, offset: 18722},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 42, offset: 18727},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 644, col: 1, offset: 18843},
			expr: &actionExpr{
				pos: position{line: 644, col: 20, offset: 18862},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 644, col: 21, offset: 18863},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 644, col: 21, offset: 18863},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 644, col: 28, offset: 18870},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 644, col: 34, offset: 18876},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 644, col: 41, offset: 18883},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 646, col: 1, offset: 18920},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 18937},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 647, col: 5, offset: 18937},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 18937},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 11, offset: 18943},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 18966},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 648, col: 10, offset: 18971},
								expr: &actionExpr{
									pos: position{line: 648, col: 11, offset: 18972},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 648, col: 11, offset: 18972},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 648, col: 11, offset: 18972},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 648, col: 14, offset: 18975},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 648, col: 17, offset: 18978},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 648, col: 34, offset: 18995},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 648, col: 37, offset: 18998},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 648, col: 42, offset: 19003},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 652, col: 1, offset: 19125},
			expr: &actionExpr{
				pos: position{line: 652, col: 20, offset: 19144},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 652, col: 21, offset: 19145},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 652, col: 21, offset: 19145},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 652, col: 27, offset: 19151},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 654, col: 1, offset: 19188},
			expr: &actionExpr{
				pos: position{line: 655, col: 5, offset: 19211},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 655, col: 5, offset: 19211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 19211},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 11, offset: 19217},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19229},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 656, col: 10, offset: 19234},
								expr: &actionExpr{
									pos: position{line: 656, col: 11, offset: 19235},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 656, col: 11, offset: 19235},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 656, col: 11, offset: 19235},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 14, offset: 19238},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 17, offset: 19241},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 656, col: 40, offset: 19264},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 43, offset: 19267},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 48, offset: 19272},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 660, col: 1, offset: 19383},
			expr: &actionExpr{
				pos: position{line: 660, col: 26, offset: 19408},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 660, col: 27, offset: 19409},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 660, col: 27, offset: 19409},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 660, col: 33, offset: 19415},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 662, col: 1, offset: 19452},
			expr: &choiceExpr{
				pos: position{line: 663, col: 5, offset: 19464},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 19464},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 663, col: 5, offset: 19464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 663, col: 5, offset: 19464},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 663, col: 9, offset: 19468},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 663, col: 12, offset: 19471},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 663, col: 14, offset: 19473},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 666, col: 5, offset: 19582},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 668, col: 1, offset: 19592},
			expr: &choiceExpr{
				pos: position{line: 669, col: 5, offset: 19605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 669, col: 5, offset: 19605},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 670, col: 5, offset: 19620},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 19634},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 19634},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 671, col: 5, offset: 19634},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 671, col: 9, offset: 19638},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 671, col: 21, offset: 19650},
									expr: &seqExpr{
										pos: position{line: 671, col: 23, offset: 19652},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 671, col: 23, offset: 19652},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 671, col: 26, offset: 19655},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 19684},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 672, col: 5, offset: 19684},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 672, col: 5, offset: 19684},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 19690},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 672, col: 16, offset: 19695},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 672, col: 21, offset: 19700},
										expr: &ruleRefExpr{
											pos:  position{line: 672, col: 22, offset: 19701},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 675, col: 5, offset: 19772},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 675, col: 5, offset: 19772},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 675, col: 5, offset: 19772},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 19778},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 675, col: 20, offset: 19787},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 675, col: 25, offset: 19792},
										expr: &ruleRefExpr{
											pos:  position{line: 675, col: 26, offset: 19793},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 678, col: 5, offset: 19864},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 679, col: 5, offset: 19878},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 681, col: 1, offset: 19887},
			expr: &seqExpr{
				pos: position{line: 681, col: 13, offset: 19899},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 681, col: 13, offset: 19899},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 681, col: 22, offset: 19908},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 681, col: 25, offset: 19911},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 683, col: 1, offset: 19916},
			expr: &choiceExpr{
				pos: position{line: 684, col: 5, offset: 19929},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 684, col: 5, offset: 19929},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 685, col: 5, offset: 19939},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 686, col: 5, offset: 19951},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 687, col: 5, offset: 19964},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 689, col: 1, offset: 19972},
			expr: &actionExpr{
				pos: position{line: 690, col: 5, offset: 19986},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 690, col: 5, offset: 19986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 690, col: 5, offset: 19986},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 690, col: 13, offset: 19994},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 690, col: 16, offset: 19997},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 690, col: 20, offset: 20001},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 25, offset: 20006},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 690, col: 39, offset: 20020},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 692, col: 1, offset: 20046},
			expr: &actionExpr{
				pos: position{line: 693, col: 5, offset: 20061},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 693, col: 5, offset: 20061},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 693, col: 5, offset: 20061},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 14, offset: 20070},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 693, col: 17, offset: 20073},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 21, offset: 20077},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 24, offset: 20080},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 29, offset: 20085},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 35, offset: 20091},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 693, col: 38, offset: 20094},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 693, col: 42, offset: 20098},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 50, offset: 20106},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 701, col: 1, offset: 20504},
			expr: &choiceExpr{
				pos: position{line: 702, col: 5, offset: 20516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 20516},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 702, col: 5, offset: 20516},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 702, col: 13, offset: 20524},
								expr: &ruleRefExpr{
									pos:  position{line: 702, col: 13, offset: 20524},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 20560},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 703, col: 5, offset: 20560},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 705, col: 1, offset: 20584},
			expr: &actionExpr{
				pos: position{line: 706, col: 5, offset: 20595},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 706, col: 5, offset: 20595},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 706, col: 5, offset: 20595},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 8, offset: 20598},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 12, offset: 20602},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 15, offset: 20605},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 17, offset: 20607},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 708, col: 1, offset: 20635},
			expr: &actionExpr{
				pos: position{line: 709, col: 5, offset: 20644},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 709, col: 5, offset: 20644},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 709, col: 5, offset: 20644},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 9, offset: 20648},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 18, offset: 20657},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 709, col: 21, offset: 20660},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 25, offset: 20664},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 709, col: 28, offset: 20667},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 33, offset: 20672},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 38, offset: 20677},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 709, col: 41, offset: 20680},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 713, col: 1, offset: 20777},
			expr: &actionExpr{
				pos: position{line: 714, col: 5, offset: 20790},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 714, col: 5, offset: 20790},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 714, col: 5, offset: 20790},
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 6, offset: 20791},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 714, col: 16, offset: 20801},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 19, offset: 20804},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 34, offset: 20819},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 714, col: 37, offset: 20822},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 41, offset: 20826},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 714, col: 44, offset: 20829},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 49, offset: 20834},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 63, offset: 20848},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 714, col: 66, offset: 20851},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 718, col: 1, offset: 20947},
			expr: &choiceExpr{
				pos: position{line: 719, col: 5, offset: 20965},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 20965},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 20975},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 720, col: 5, offset: 20975},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 722, col: 1, offset: 21011},
			expr: &actionExpr{
				pos: position{line: 723, col: 5, offset: 21021},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 723, col: 5, offset: 21021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 723, col: 5, offset: 21021},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 11, offset: 21027},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 723, col: 16, offset: 21032},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 723, col: 21, offset: 21037},
								expr: &actionExpr{
									pos: position{line: 723, col: 22, offset: 21038},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 723, col: 22, offset: 21038},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 723, col: 22, offset: 21038},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 723, col: 25, offset: 21041},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 723, col: 29, offset: 21045},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 723, col: 32, offset: 21048},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 723, col: 34, offset: 21050},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 727, col: 1, offset: 21159},
			expr: &actionExpr{
				pos: position{line: 727, col: 13, offset: 21171},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 727, col: 13, offset: 21171},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 727, col: 13, offset: 21171},
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 14, offset: 21172},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 18, offset: 21176},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 20, offset: 21178},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 729, col: 1, offset: 21214},
			expr: &choiceExpr{
				pos: position{line: 730, col: 5, offset: 21235},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 730, col: 5, offset: 21235},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 730, col: 5, offset: 21235},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 730, col: 5, offset: 21235},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 730, col: 11, offset: 21241},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 730, col: 17, offset: 21247},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 730, col: 22, offset: 21252},
										expr: &ruleRefExpr{
											pos:  position{line: 730, col: 23, offset: 21253},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21324},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 733, col: 5, offset: 21324},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 733, col: 5, offset: 21324},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 11, offset: 21330},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 733, col: 22, offset: 21341},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 733, col: 27, offset: 21346},
										expr: &ruleRefExpr{
											pos:  position{line: 733, col: 28, offset: 21347},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21418},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 21418},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 736, col: 5, offset: 21418},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 11, offset: 21424},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 736, col: 22, offset: 21435},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 736, col: 27, offset: 21440},
										expr: &ruleRefExpr{
											pos:  position{line: 736, col: 28, offset: 21441},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21512},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 739, col: 5, offset: 21512},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 743, col: 1, offset: 21581},
			expr: &actionExpr{
				pos: position{line: 743, col: 14, offset: 21594},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 743, col: 14, offset: 21594},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 745, col: 1, offset: 21656},
			expr: &choiceExpr{
				pos: position{line: 746, col: 5, offset: 21666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21666},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 21666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 746, col: 5, offset: 21666},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 746, col: 9, offset: 21670},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 15, offset: 21676},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 21892},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 755, col: 5, offset: 21892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 755, col: 5, offset: 21892},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 755, col: 9, offset: 21896},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 755, col: 13, offset: 21900},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 18, offset: 21905},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 755, col: 23, offset: 21910},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 765, col: 1, offset: 22115},
			expr: &choiceExpr{
				pos: position{line: 766, col: 5, offset: 22125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 22125},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 766, col: 5, offset: 22125},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 766, col: 5, offset: 22125},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 766, col: 9, offset: 22129},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 14, offset: 22134},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 27, offset: 22147},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 30, offset: 22150},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 34, offset: 22154},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 37, offset: 22157},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 40, offset: 22160},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 766, col: 53, offset: 22173},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 22344},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 772, col: 5, offset: 22344},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 772, col: 5, offset: 22344},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 9, offset: 22348},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 772, col: 12, offset: 22351},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 16, offset: 22355},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 772, col: 19, offset: 22358},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 772, col: 22, offset: 22361},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 772, col: 35, offset: 22374},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22545},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 778, col: 5, offset: 22545},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 778, col: 5, offset: 22545},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 778, col: 9, offset: 22549},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 14, offset: 22554},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 27, offset: 22567},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 778, col: 30, offset: 22570},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 34, offset: 22574},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 778, col: 37, offset: 22577},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 22750},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 784, col: 5, offset: 22750},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 784, col: 5, offset: 22750},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 784, col: 9, offset: 22754},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 14, offset: 22759},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 784, col: 19, offset: 22764},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 22813},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 22813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 785, col: 5, offset: 22813},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 785, col: 9, offset: 22817},
									expr: &litMatcher{
										pos:        position{line: 785, col: 11, offset: 22819},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 785, col: 16, offset: 22824},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 19, offset: 22827},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 787, col: 1, offset: 22878},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 22890},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 788, col: 5, offset: 22890},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 22902},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 790, col: 5, offset: 22913},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 791, col: 5, offset: 22923},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 792, col: 5, offset: 22931},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 793, col: 5, offset: 22939},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 793, col: 5, offset: 22939},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 793, col: 5, offset: 22939},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 793, col: 9, offset: 22943},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 793, col: 12, offset: 22946},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 793, col: 17, offset: 22951},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 793, col: 22, offset: 22956},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 793, col: 25, offset: 22959},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 795, col: 1, offset: 22985},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 22996},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 796, col: 5, offset: 22996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 796, col: 5, offset: 22996},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 796, col: 9, offset: 23000},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 796, col: 12, offset: 23003},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 19, offset: 23010},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 796, col: 26, offset: 23017},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 796, col: 29, offset: 23020},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 800, col: 1, offset: 23113},
			expr: &actionExpr{
				pos: position{line: 801, col: 5, offset: 23124},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 801, col: 5, offset: 23124},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 801, col: 5, offset: 23124},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 11, offset: 23130},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 17, offset: 23136},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 801, col: 22, offset: 23141},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 22, offset: 23141},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 805, col: 1, offset: 23232},
			expr: &actionExpr{
				pos: position{line: 805, col: 13, offset: 23244},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 805, col: 13, offset: 23244},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 805, col: 13, offset: 23244},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 805, col: 16, offset: 23247},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 805, col: 20, offset: 23251},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 805, col: 23, offset: 23254},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 25, offset: 23256},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 807, col: 1, offset: 23281},
			expr: &actionExpr{
				pos: position{line: 808, col: 5, offset: 23291},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 808, col: 5, offset: 23291},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 808, col: 5, offset: 23291},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 10, offset: 23296},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 20, offset: 23306},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 808, col: 23, offset: 23309},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 27, offset: 23313},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 808, col: 30, offset: 23316},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 36, offset: 23322},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 812, col: 1, offset: 23407},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 23417},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 813, col: 5, offset: 23417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 813, col: 5, offset: 23417},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 9, offset: 23421},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 813, col: 12, offset: 23424},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 18, offset: 23430},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 32, offset: 23444},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 813, col: 35, offset: 23447},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 817, col: 1, offset: 23537},
			expr: &actionExpr{
				pos: position{line: 818, col: 5, offset: 23545},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 818, col: 5, offset: 23545},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 818, col: 5, offset: 23545},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 818, col: 10, offset: 23550},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 818, col: 13, offset: 23553},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 19, offset: 23559},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 818, col: 33, offset: 23573},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 818, col: 36, offset: 23576},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 822, col: 1, offset: 23665},
			expr: &actionExpr{
				pos: position{line: 823, col: 5, offset: 23673},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 823, col: 5, offset: 23673},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 823, col: 5, offset: 23673},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 10, offset: 23678},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 13, offset: 23681},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 19, offset: 23687},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 27, offset: 23695},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 823, col: 30, offset: 23698},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 827, col: 1, offset: 23789},
			expr: &choiceExpr{
				pos: position{line: 828, col: 5, offset: 23801},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 828, col: 5, offset: 23801},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 828, col: 5, offset: 23801},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 828, col: 5, offset: 23801},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 828, col: 11, offset: 23807},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 828, col: 17, offset: 23813},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 828, col: 22, offset: 23818},
										expr: &ruleRefExpr{
											pos:  position{line: 828, col: 22, offset: 23818},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 23912},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 831, col: 5, offset: 23912},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 834, col: 1, offset: 23949},
			expr: &actionExpr{
				pos: position{line: 834, col: 13, offset: 23961},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 834, col: 13, offset: 23961},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 834, col: 13, offset: 23961},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 834, col: 16, offset: 23964},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 20, offset: 23968},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 23, offset: 23971},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 25, offset: 23973},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 836, col: 1, offset: 23998},
			expr: &actionExpr{
				pos: position{line: 837, col: 5, offset: 24008},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 837, col: 5, offset: 24008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 837, col: 5, offset: 24008},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 9, offset: 24012},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 837, col: 14, offset: 24017},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 837, col: 17, offset: 24020},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 837, col: 21, offset: 24024},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 837, col: 24, offset: 24027},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 30, offset: 24033},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 843, col: 1, offset: 24140},
			expr: &actionExpr{
				pos: position{line: 844, col: 5, offset: 24152},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 844, col: 5, offset: 24152},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 844, col: 5, offset: 24152},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 15, offset: 24162},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 5, offset: 24176},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 10, offset: 24181},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 5, offset: 24193},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 11, offset: 24199},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 5, offset: 24212},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 11, offset: 24218},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 24231},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 13, offset: 24239},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 849, col: 5, offset: 24254},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 849, col: 12, offset: 24261},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 5, offset: 24275},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 13, offset: 24283},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 24298},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 11, offset: 24304},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 875, col: 1, offset: 24671},
			expr: &choiceExpr{
				pos: position{line: 876, col: 5, offset: 24685},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 24685},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 876, col: 5, offset: 24685},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 876, col: 5, offset: 24685},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 876, col: 12, offset: 24692},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 876, col: 14, offset: 24694},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 24722},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 24722},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 877, col: 5, offset: 24722},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 877, col: 12, offset: 24729},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 877, col: 14, offset: 24731},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 26, offset: 24743},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 879, col: 1, offset: 24787},
			expr: &choiceExpr{
				pos: position{line: 880, col: 5, offset: 24805},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 24805},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 24805},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 5, offset: 24805},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 9, offset: 24809},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 880, col: 14, offset: 24814},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 880, col: 16, offset: 24816},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 880, col: 19, offset: 24819},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 880, col: 21, offset: 24821},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 25, offset: 24825},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 24919},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 881, col: 5, offset: 24919},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 881, col: 10, offset: 24924},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 883, col: 1, offset: 25016},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 25035},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 25035},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 25035},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 11, offset: 25041},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 25, offset: 25055},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 884, col: 30, offset: 25060},
								expr: &actionExpr{
									pos: position{line: 884, col: 31, offset: 25061},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 884, col: 31, offset: 25061},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 884, col: 31, offset: 25061},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 884, col: 34, offset: 25064},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 884, col: 38, offset: 25068},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 884, col: 41, offset: 25071},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 884, col: 46, offset: 25076},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 888, col: 1, offset: 25197},
			expr: &choiceExpr{
				pos: position{line: 889, col: 5, offset: 25209},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 889, col: 5, offset: 25209},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 889, col: 5, offset: 25209},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 889, col: 5, offset: 25209},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 889, col: 7, offset: 25211},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 889, col: 12, offset: 25216},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 889, col: 14, offset: 25218},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 889, col: 20, offset: 25224},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 889, col: 29, offset: 25233},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 889, col: 35, offset: 25239},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25333},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25333},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 892, col: 5, offset: 25333},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 7, offset: 25335},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 12, offset: 25340},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 892, col: 14, offset: 25342},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 25370},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 893, col: 5, offset: 25370},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 895, col: 1, offset: 25394},
			expr: &choiceExpr{
				pos: position{line: 896, col: 5, offset: 25407},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25407},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25407},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 896, col: 5, offset: 25407},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 7, offset: 25409},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 10, offset: 25412},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 896, col: 12, offset: 25414},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 15, offset: 25417},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 25445},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 897, col: 5, offset: 25445},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 897, col: 5, offset: 25445},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 897, col: 7, offset: 25447},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 10, offset: 25450},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 25478},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 898, col: 5, offset: 25478},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 900, col: 1, offset: 25502},
			expr: &ruleRefExpr{
				pos:  position{line: 901, col: 5, offset: 25515},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 903, col: 1, offset: 25521},
			expr: &choiceExpr{
				pos: position{line: 904, col: 5, offset: 25534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 904, col: 5, offset: 25534},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 904, col: 5, offset: 25534},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 904, col: 5, offset: 25534},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 25540},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 904, col: 19, offset: 25548},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 904, col: 24, offset: 25553},
										expr: &actionExpr{
											pos: position{line: 904, col: 25, offset: 25554},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 904, col: 25, offset: 25554},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 904, col: 30, offset: 25559},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 907, col: 5, offset: 25677},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 907, col: 5, offset: 25677},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 909, col: 1, offset: 25701},
			expr: &actionExpr{
				pos: position{line: 910, col: 5, offset: 25713},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 910, col: 5, offset: 25713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 910, col: 5, offset: 25713},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 11, offset: 25719},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 24, offset: 25732},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 26, offset: 25734},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 31, offset: 25739},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 910, col: 33, offset: 25741},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 39, offset: 25747},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 48, offset: 25756},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 54, offset: 25762},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 63, offset: 25771},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 65, offset: 25773},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 68, offset: 25776},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 910, col: 70, offset: 25778},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 78, offset: 25786},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 86, offset: 25794},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 910, col: 89, offset: 25797},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 93, offset: 25801},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 910, col: 96, offset: 25804},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 105, offset: 25813},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 929, col: 1, offset: 26048},
			expr: &choiceExpr{
				pos: position{line: 930, col: 5, offset: 26065},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 26065},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 930, col: 5, offset: 26065},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 930, col: 5, offset: 26065},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 930, col: 7, offset: 26067},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 930, col: 14, offset: 26074},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 930, col: 14, offset: 26074},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 930, col: 21, offset: 26081},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 930, col: 29, offset: 26089},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 26122},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 931, col: 5, offset: 26122},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 933, col: 1, offset: 26158},
			expr: &choiceExpr{
				pos: position{line: 934, col: 5, offset: 26171},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 26171},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 26171},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 934, col: 5, offset: 26171},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 934, col: 7, offset: 26173},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 934, col: 13, offset: 26179},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 934, col: 15, offset: 26181},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 20, offset: 26186},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 26225},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 935, col: 5, offset: 26225},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 937, col: 1, offset: 26249},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 26264},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 26264},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 26264},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 938, col: 5, offset: 26264},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 7, offset: 26266},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 13, offset: 26272},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 15, offset: 26274},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 18, offset: 26277},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 20, offset: 26279},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 28, offset: 26287},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 26326},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 939, col: 5, offset: 26326},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 941, col: 1, offset: 26350},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 26364},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 26364},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 26364},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 942, col: 5, offset: 26364},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 7, offset: 26366},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 14, offset: 26373},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 942, col: 16, offset: 26375},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 21, offset: 26380},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 26419},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 943, col: 5, offset: 26419},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 945, col: 1, offset: 26443},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 26458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 26458},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 946, col: 5, offset: 26458},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 946, col: 5, offset: 26458},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 7, offset: 26460},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 13, offset: 26466},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 15, offset: 26468},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 18, offset: 26471},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 946, col: 20, offset: 26473},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 25, offset: 26478},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 946, col: 31, offset: 26484},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 37, offset: 26490},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 5, offset: 26603},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 949, col: 5, offset: 26603},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 951, col: 1, offset: 26627},
			expr: &choiceExpr{
				pos: position{line: 952, col: 5, offset: 26640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 26640},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 952, col: 5, offset: 26640},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 952, col: 5, offset: 26640},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 952, col: 7, offset: 26642},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 952, col: 12, offset: 26647},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 952, col: 12, offset: 26647},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 952, col: 18, offset: 26653},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 26683},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 953, col: 5, offset: 26683},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 955, col: 1, offset: 26709},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 26722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 26722},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 26722},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 956, col: 5, offset: 26722},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 956, col: 7, offset: 26724},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 956, col: 13, offset: 26730},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 956, col: 15, offset: 26732},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 21, offset: 26738},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 26769},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 957, col: 5, offset: 26769},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 959, col: 1, offset: 26791},
			expr: &actionExpr{
				pos: position{line: 959, col: 10, offset: 26800},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 959, col: 10, offset: 26800},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 960, col: 1, offset: 26835},
			expr: &actionExpr{
				pos: position{line: 960, col: 6, offset: 26840},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 960, col: 6, offset: 26840},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 961, col: 1, offset: 26867},
			expr: &actionExpr{
				pos: position{line: 961, col: 8, offset: 26874},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 961, col: 8, offset: 26874},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 962, col: 1, offset: 26905},
			expr: &actionExpr{
				pos: position{line: 962, col: 8, offset: 26912},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 962, col: 8, offset: 26912},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 963, col: 1, offset: 26943},
			expr: &actionExpr{
				pos: position{line: 963, col: 9, offset: 26951},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 963, col: 9, offset: 26951},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 964, col: 1, offset: 26984},
			expr: &actionExpr{
				pos: position{line: 964, col: 9, offset: 26992},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 964, col: 9, offset: 26992},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 965, col: 1, offset: 27025},
			expr: &ruleRefExpr{
				pos:  position{line: 965, col: 6, offset: 27030},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 966, col: 1, offset: 27038},
			expr: &actionExpr{
				pos: position{line: 966, col: 10, offset: 27047},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 966, col: 10, offset: 27047},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 967, col: 1, offset: 27082},
			expr: &actionExpr{
				pos: position{line: 967, col: 9, offset: 27090},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 967, col: 9, offset: 27090},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 968, col: 1, offset: 27123},
			expr: &actionExpr{
				pos: position{line: 968, col: 6, offset: 27128},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 968, col: 6, offset: 27128},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 969, col: 1, offset: 27155},
			expr: &actionExpr{
				pos: position{line: 969, col: 9, offset: 27163},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 969, col: 9, offset: 27163},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 970, col: 1, offset: 27196},
			expr: &actionExpr{
				pos: position{line: 970, col: 7, offset: 27202},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 970, col: 7, offset: 27202},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 971, col: 1, offset: 27231},
			expr: &actionExpr{
				pos: position{line: 971, col: 8, offset: 27238},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 971, col: 8, offset: 27238},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 972, col: 1, offset: 27269},
			expr: &actionExpr{
				pos: position{line: 972, col: 8, offset: 27276},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 972, col: 8, offset: 27276},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 973, col: 1, offset: 27307},
			expr: &actionExpr{
				pos: position{line: 973, col: 9, offset: 27315},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 973, col: 9, offset: 27315},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 974, col: 1, offset: 27348},
			expr: &actionExpr{
				pos: position{line: 974, col: 9, offset: 27356},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 974, col: 9, offset: 27356},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 976, col: 1, offset: 27390},
			expr: &choiceExpr{
				pos: position{line: 977, col: 5, offset: 27412},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 27412},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 14, offset: 27421},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 19, offset: 27426},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 27, offset: 27434},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 34, offset: 27441},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 42, offset: 27449},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 50, offset: 27457},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 59, offset: 27466},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 67, offset: 27474},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 75, offset: 27482},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 981, col: 1, offset: 27508},
			expr: &choiceExpr{
				pos: position{line: 982, col: 5, offset: 27520},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 27520},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 5, offset: 27536},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 5, offset: 27554},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 27572},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 27591},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 27604},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 5, offset: 27613},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 5, offset: 27630},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 5, offset: 27649},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 27668},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 993, col: 1, offset: 27681},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 27699},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 994, col: 5, offset: 27699},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 994, col: 7, offset: 27701},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 998, col: 1, offset: 27814},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 27832},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 27832},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 999, col: 5, offset: 27832},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 999, col: 5, offset: 27832},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 7, offset: 27834},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 999, col: 14, offset: 27841},
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 15, offset: 27842},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 27957},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1002, col: 5, offset: 27957},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 7, offset: 27959},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1006, col: 1, offset: 28063},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 28082},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 28082},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 28082},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 5, offset: 28082},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 7, offset: 28084},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1007, col: 11, offset: 28088},
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 12, offset: 28089},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 28203},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1010, col: 5, offset: 28203},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1010, col: 7, offset: 28205},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1014, col: 1, offset: 28304},
			expr: &actionExpr{
				pos: position{line: 1015, col: 5, offset: 28321},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1015, col: 5, offset: 28321},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1015, col: 7, offset: 28323},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1019, col: 1, offset: 28436},
			expr: &actionExpr{
				pos: position{line: 1020, col: 5, offset: 28455},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1020, col: 5, offset: 28455},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1020, col: 7, offset: 28457},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1024, col: 1, offset: 28566},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 28585},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28585},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1025, col: 5, offset: 28585},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 28698},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1026, col: 5, offset: 28698},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1028, col: 1, offset: 28809},
			expr: &actionExpr{
				pos: position{line: 1029, col: 5, offset: 28825},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1029, col: 5, offset: 28825},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1031, col: 1, offset: 28931},
			expr: &actionExpr{
				pos: position{line: 1032, col: 5, offset: 28947},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1032, col: 5, offset: 28947},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1032, col: 5, offset: 28947},
							expr: &seqExpr{
								pos: position{line: 1032, col: 7, offset: 28949},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1032, col: 7, offset: 28949},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 1032, col: 25, offset: 28967},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 30, offset: 28972},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1032, col: 34, offset: 28976},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1036, col: 1, offset: 29074},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 5, offset: 29087},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 5, offset: 29087},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 29104},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 1040, col: 1, offset: 29119},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 29136},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 29136},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 29153},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29177},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 29177},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 5, offset: 29177},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 9, offset: 29181},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 1043, col: 31, offset: 29203},
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 32, offset: 29204},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1045, col: 1, offset: 29240},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 5, offset: 29249},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 29249},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 29266},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 5, offset: 29284},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 1050, col: 1, offset: 29297},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 5, offset: 29314},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 29314},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 1051, col: 5, offset: 29314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1051, col: 5, offset: 29314},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1051, col: 12, offset: 29321},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1051, col: 15, offset: 29324},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1051, col: 19, offset: 29328},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1051, col: 22, offset: 29331},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1051, col: 26, offset: 29335},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1051, col: 31, offset: 29340},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1051, col: 34, offset: 29343},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29370},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 29370},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1052, col: 5, offset: 29370},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 12, offset: 29377},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1052, col: 15, offset: 29380},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 19, offset: 29384},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1052, col: 22, offset: 29387},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 26, offset: 29391},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 36, offset: 29401},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1052, col: 39, offset: 29404},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1054, col: 1, offset: 29429},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 5, offset: 29447},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29447},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 29447},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1055, col: 5, offset: 29447},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 10, offset: 29452},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1055, col: 24, offset: 29466},
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 25, offset: 29467},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 29507},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1056, col: 5, offset: 29507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1056, col: 5, offset: 29507},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1056, col: 10, offset: 29512},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 25, offset: 29527},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1056, col: 28, offset: 29530},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 32, offset: 29534},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1056, col: 35, offset: 29537},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 39, offset: 29541},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1056, col: 42, offset: 29544},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1056, col: 46, offset: 29548},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 51, offset: 29553},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1056, col: 54, offset: 29556},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1059, col: 5, offset: 29657},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1059, col: 5, offset: 29657},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1059, col: 10, offset: 29662},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 29764},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 29764},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1062, col: 5, offset: 29764},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 9, offset: 29768},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 12, offset: 29771},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 14, offset: 29773},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 25, offset: 29784},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1064, col: 1, offset: 29807},
			expr: &actionExpr{
				pos: position{line: 1065, col: 5, offset: 29821},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1065, col: 5, offset: 29821},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 29827},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1069, col: 1, offset: 29923},
			expr: &actionExpr{
				pos: position{line: 1070, col: 5, offset: 29936},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1070, col: 5, offset: 29936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 29936},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 11, offset: 29942},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 16, offset: 29947},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1070, col: 21, offset: 29952},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 21, offset: 29952},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1074, col: 1, offset: 30046},
			expr: &actionExpr{
				pos: position{line: 1074, col: 16, offset: 30061},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 16, offset: 30061},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1074, col: 16, offset: 30061},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1074, col: 19, offset: 30064},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1074, col: 23, offset: 30068},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 26, offset: 30071},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 30, offset: 30075},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1076, col: 1, offset: 30101},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 5, offset: 30117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30117},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1077, col: 5, offset: 30117},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 5, offset: 30117},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1077, col: 9, offset: 30121},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 12, offset: 30124},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 19, offset: 30131},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1077, col: 33, offset: 30145},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1077, col: 36, offset: 30148},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30243},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30243},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1080, col: 5, offset: 30243},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 9, offset: 30247},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 12, offset: 30250},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 16, offset: 30254},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 21, offset: 30259},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1080, col: 24, offset: 30262},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 30351},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 30351},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1083, col: 5, offset: 30351},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1083, col: 10, offset: 30356},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 14, offset: 30360},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 18, offset: 30364},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1083, col: 23, offset: 30369},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1083, col: 26, offset: 30372},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1086, col: 5, offset: 30460},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1086, col: 5, offset: 30460},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1086, col: 5, offset: 30460},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 10, offset: 30465},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 13, offset: 30468},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 21, offset: 30476},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 26, offset: 30481},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1086, col: 29, offset: 30484},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 33, offset: 30488},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 36, offset: 30491},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 44, offset: 30499},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 49, offset: 30504},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1086, col: 52, offset: 30507},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1090, col: 1, offset: 30621},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 5, offset: 30645},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1091, col: 5, offset: 30645},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1091, col: 5, offset: 30645},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 5, offset: 30645},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 9, offset: 30649},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 12, offset: 30652},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 19, offset: 30659},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 33, offset: 30673},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1091, col: 36, offset: 30676},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 30771},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 30771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 30771},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 9, offset: 30775},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 12, offset: 30778},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 16, offset: 30782},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 29, offset: 30795},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1094, col: 32, offset: 30798},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 30887},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 30887},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1097, col: 5, offset: 30887},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 10, offset: 30892},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1097, col: 13, offset: 30895},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 17, offset: 30899},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 30, offset: 30912},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1097, col: 33, offset: 30915},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1100, col: 5, offset: 31003},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1100, col: 5, offset: 31003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 5, offset: 31003},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 10, offset: 31008},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 13, offset: 31011},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 21, offset: 31019},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 34, offset: 31032},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1100, col: 37, offset: 31035},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 41, offset: 31039},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 44, offset: 31042},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 52, offset: 31050},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 65, offset: 31063},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1100, col: 68, offset: 31066},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1104, col: 1, offset: 31180},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 31198},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1105, col: 5, offset: 31198},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 5, offset: 31224},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1112, col: 1, offset: 31483},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 31509},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1113, col: 9, offset: 31513},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1113, col: 9, offset: 31513},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 19, offset: 31523},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 30, offset: 31534},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 41, offset: 31545},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 9, offset: 31562},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 18, offset: 31571},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 28, offset: 31581},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 38, offset: 31591},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1115, col: 9, offset: 31607},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1116, col: 9, offset: 31625},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1116, col: 18, offset: 31634},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1127, col: 1, offset: 32275},
			expr: &actionExpr{
				pos: position{line: 1128, col: 5, offset: 32301},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1128, col: 9, offset: 32305},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1128, col: 9, offset: 32305},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1128, col: 22, offset: 32318},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1129, col: 9, offset: 32333},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1130, col: 9, offset: 32349},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1131, col: 9, offset: 32367},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1131, col: 16, offset: 32374},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 9, offset: 32388},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 18, offset: 32397},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 28, offset: 32407},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1136, col: 1, offset: 32523},
			expr: &actionExpr{
				pos: position{line: 1137, col: 5, offset: 32541},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1137, col: 5, offset: 32541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1137, col: 5, offset: 32541},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1137, col: 11, offset: 32547},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1137, col: 21, offset: 32557},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1137, col: 26, offset: 32562},
								expr: &ruleRefExpr{
									pos:  position{line: 1137, col: 26, offset: 32562},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1141, col: 1, offset: 32661},
			expr: &actionExpr{
				pos: position{line: 1141, col: 21, offset: 32681},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1141, col: 21, offset: 32681},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1141, col: 21, offset: 32681},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1141, col: 24, offset: 32684},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1141, col: 28, offset: 32688},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1141, col: 31, offset: 32691},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1141, col: 35, offset: 32695},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1143, col: 1, offset: 32726},
			expr: &actionExpr{
				pos: position{line: 1144, col: 5, offset: 32740},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1144, col: 5, offset: 32740},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1144, col: 5, offset: 32740},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1144, col: 10, offset: 32745},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1144, col: 20, offset: 32755},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1144, col: 23, offset: 32758},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1144, col: 27, offset: 32762},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1144, col: 30, offset: 32765},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1144, col: 34, offset: 32769},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1148, col: 1, offset: 32851},
			expr: &actionExpr{
				pos: position{line: 1149, col: 5, offset: 32877},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 5, offset: 32877},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 32877},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 11, offset: 32883},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 21, offset: 32893},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1149, col: 26, offset: 32898},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 26, offset: 32898},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1153, col: 1, offset: 33005},
			expr: &actionExpr{
				pos: position{line: 1153, col: 29, offset: 33033},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 29, offset: 33033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1153, col: 29, offset: 33033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1153, col: 32, offset: 33036},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 36, offset: 33040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 39, offset: 33043},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 43, offset: 33047},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1155, col: 1, offset: 33086},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 33108},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 33108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1156, col: 5, offset: 33108},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 10, offset: 33113},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 20, offset: 33123},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1156, col: 23, offset: 33126},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 27, offset: 33130},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 30, offset: 33133},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 34, offset: 33137},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1160, col: 1, offset: 33227},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 33241},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1161, col: 5, offset: 33241},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 5, offset: 33260},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1164, col: 1, offset: 33274},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 33292},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1165, col: 5, offset: 33292},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 24, offset: 33311},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1167, col: 1, offset: 33329},
			expr: &actionExpr{
				pos: position{line: 1167, col: 12, offset: 33340},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 12, offset: 33340},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 12, offset: 33340},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1167, col: 19, offset: 33347},
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 20, offset: 33348},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1168, col: 1, offset: 33385},
			expr: &actionExpr{
				pos: position{line: 1168, col: 11, offset: 33395},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1168, col: 11, offset: 33395},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1168, col: 11, offset: 33395},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1168, col: 17, offset: 33401},
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 18, offset: 33402},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1169, col: 1, offset: 33438},
			expr: &actionExpr{
				pos: position{line: 1169, col: 11, offset: 33448},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1169, col: 11, offset: 33448},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1169, col: 11, offset: 33448},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1169, col: 17, offset: 33454},
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 18, offset: 33455},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1170, col: 1, offset: 33491},
			expr: &actionExpr{
				pos: position{line: 1170, col: 12, offset: 33502},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 12, offset: 33502},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1170, col: 12, offset: 33502},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1170, col: 19, offset: 33509},
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 20, offset: 33510},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1171, col: 1, offset: 33547},
			expr: &actionExpr{
				pos: position{line: 1171, col: 11, offset: 33557},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 11, offset: 33557},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1171, col: 11, offset: 33557},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1171, col: 17, offset: 33563},
							expr: &ruleRefExpr{
								pos:  position{line: 1171, col: 18, offset: 33564},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1173, col: 1, offset: 33601},
			expr: &charClassMatcher{
				pos:        position{line: 1173, col: 19, offset: 33619},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1175, col: 1, offset: 33631},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 18, offset: 33648},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1175, col: 18, offset: 33648},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1175, col: 36, offset: 33666},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1177, col: 1, offset: 33673},
			expr: &actionExpr{
				pos: position{line: 1178, col: 5, offset: 33688},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1178, col: 5, offset: 33688},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1178, col: 8, offset: 33691},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1180, col: 1, offset: 33772},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 33791},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1181, col: 5, offset: 33791},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1181, col: 5, offset: 33791},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1181, col: 5, offset: 33791},
									expr: &seqExpr{
										pos: position{line: 1181, col: 7, offset: 33793},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1181, col: 7, offset: 33793},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1181, col: 15, offset: 33801},
												expr: &ruleRefExpr{
													pos:  position{line: 1181, col: 16, offset: 33802},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 32, offset: 33818},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1181, col: 48, offset: 33834},
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 48, offset: 33834},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 33886},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1182, col: 5, offset: 33886},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1183, col: 5, offset: 33925},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1183, col: 5, offset: 33925},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1183, col: 5, offset: 33925},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 10, offset: 33930},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1183, col: 13, offset: 33933},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1185, col: 5, offset: 34024},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1185, col: 5, offset: 34024},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1186, col: 5, offset: 34066},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1186, col: 5, offset: 34066},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1186, col: 5, offset: 34066},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 8, offset: 34069},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1186, col: 26, offset: 34087},
									expr: &seqExpr{
										pos: position{line: 1186, col: 28, offset: 34089},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1186, col: 28, offset: 34089},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1186, col: 31, offset: 34092},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1188, col: 1, offset: 34117},
			expr: &choiceExpr{
				pos: position{line: 1189, col: 5, offset: 34129},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1189, col: 5, offset: 34129},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 5, offset: 34148},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1191, col: 5, offset: 34164},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 5, offset: 34181},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1194, col: 1, offset: 34194},
			expr: &actionExpr{
				pos: position{line: 1195, col: 5, offset: 34203},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 5, offset: 34203},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1195, col: 5, offset: 34203},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1195, col: 14, offset: 34212},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 18, offset: 34216},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1199, col: 1, offset: 34336},
			expr: &seqExpr{
				pos: position{line: 1199, col: 12, offset: 34347},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 12, offset: 34347},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1199, col: 15, offset: 34350},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 19, offset: 34354},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1199, col: 22, offset: 34357},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 26, offset: 34361},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1201, col: 1, offset: 34365},
			expr: &seqExpr{
				pos: position{line: 1201, col: 6, offset: 34370},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1201, col: 6, offset: 34370},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1201, col: 11, offset: 34375},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1201, col: 16, offset: 34380},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1201, col: 21, offset: 34385},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1202, col: 1, offset: 34391},
			expr: &seqExpr{
				pos: position{line: 1202, col: 6, offset: 34396},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1202, col: 6, offset: 34396},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1202, col: 11, offset: 34401},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1204, col: 1, offset: 34408},
			expr: &seqExpr{
				pos: position{line: 1204, col: 12, offset: 34419},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1204, col: 12, offset: 34419},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 24, offset: 34431},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1206, col: 1, offset: 34443},
			expr: &seqExpr{
				pos: position{line: 1206, col: 15, offset: 34457},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1206, col: 15, offset: 34457},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1206, col: 18, offset: 34460},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 22, offset: 34464},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1206, col: 25, offset: 34467},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 29, offset: 34471},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1206, col: 32, offset: 34474},
						expr: &seqExpr{
							pos: position{line: 1206, col: 33, offset: 34475},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1206, col: 33, offset: 34475},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1206, col: 37, offset: 34479},
									expr: &charClassMatcher{
										pos:        position{line: 1206, col: 37, offset: 34479},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1208, col: 1, offset: 34489},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 34504},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1209, col: 5, offset: 34504},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1210, col: 5, offset: 34512},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1210, col: 6, offset: 34513},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1210, col: 6, offset: 34513},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1210, col: 12, offset: 34519},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1210, col: 17, offset: 34524},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1210, col: 20, offset: 34527},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1210, col: 24, offset: 34531},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1210, col: 27, offset: 34534},
								expr: &seqExpr{
									pos: position{line: 1210, col: 28, offset: 34535},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1210, col: 28, offset: 34535},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1210, col: 32, offset: 34539},
											expr: &charClassMatcher{
												pos:        position{line: 1210, col: 32, offset: 34539},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1212, col: 1, offset: 34549},
			expr: &actionExpr{
				pos: position{line: 1213, col: 5, offset: 34562},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 5, offset: 34562},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1213, col: 5, offset: 34562},
							expr: &litMatcher{
								pos:        position{line: 1213, col: 5, offset: 34562},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1213, col: 10, offset: 34567},
							expr: &seqExpr{
								pos: position{line: 1213, col: 11, offset: 34568},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1213, col: 11, offset: 34568},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1213, col: 19, offset: 34576},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1217, col: 1, offset: 34702},
			expr: &seqExpr{
				pos: position{line: 1217, col: 11, offset: 34712},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 34712},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1217, col: 16, offset: 34717},
						expr: &seqExpr{
							pos: position{line: 1217, col: 17, offset: 34718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1217, col: 17, offset: 34718},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1217, col: 21, offset: 34722},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1219, col: 1, offset: 34730},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 5, offset: 34743},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1220, col: 5, offset: 34743},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1221, col: 5, offset: 34753},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1222, col: 5, offset: 34763},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1223, col: 5, offset: 34773},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1224, col: 5, offset: 34782},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1225, col: 5, offset: 34791},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1226, col: 5, offset: 34800},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1227, col: 5, offset: 34809},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1228, col: 5, offset: 34818},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1230, col: 1, offset: 34824},
			expr: &actionExpr{
				pos: position{line: 1231, col: 5, offset: 34831},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 5, offset: 34831},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1231, col: 5, offset: 34831},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1231, col: 10, offset: 34836},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1231, col: 14, offset: 34840},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1231, col: 19, offset: 34845},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1231, col: 23, offset: 34849},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1231, col: 28, offset: 34854},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1231, col: 32, offset: 34858},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1233, col: 1, offset: 34895},
			expr: &actionExpr{
				pos: position{line: 1234, col: 5, offset: 34903},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1234, col: 5, offset: 34903},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1234, col: 5, offset: 34903},
							expr: &seqExpr{
								pos: position{line: 1234, col: 8, offset: 34906},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1234, col: 8, offset: 34906},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1234, col: 12, offset: 34910},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 16, offset: 34914},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1234, col: 20, offset: 34918},
										expr: &choiceExpr{
											pos: position{line: 1234, col: 22, offset: 34920},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1234, col: 22, offset: 34920},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1234, col: 33, offset: 34931},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 39, offset: 34937},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1234, col: 41, offset: 34939},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1238, col: 1, offset: 35103},
			expr: &choiceExpr{
				pos: position{line: 1239, col: 5, offset: 35121},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1239, col: 5, offset: 35121},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1239, col: 5, offset: 35121},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1239, col: 5, offset: 35121},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1239, col: 7, offset: 35123},
										expr: &ruleRefExpr{
											pos:  position{line: 1239, col: 7, offset: 35123},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 17, offset: 35133},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1239, col: 19, offset: 35135},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 35199},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 35199},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 35199},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 7, offset: 35201},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 11, offset: 35205},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1242, col: 13, offset: 35207},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 13, offset: 35207},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 23, offset: 35217},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 28, offset: 35222},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1242, col: 30, offset: 35224},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 30, offset: 35224},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 40, offset: 35234},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 42, offset: 35236},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 35335},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 35335},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1245, col: 5, offset: 35335},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 10, offset: 35340},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1245, col: 12, offset: 35342},
										expr: &ruleRefExpr{
											pos:  position{line: 1245, col: 12, offset: 35342},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 22, offset: 35352},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 24, offset: 35354},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 35425},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 35425},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1248, col: 5, offset: 35425},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 7, offset: 35427},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 11, offset: 35431},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1248, col: 13, offset: 35433},
										expr: &ruleRefExpr{
											pos:  position{line: 1248, col: 13, offset: 35433},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1248, col: 23, offset: 35443},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 35511},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1251, col: 5, offset: 35511},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1255, col: 1, offset: 35548},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 5, offset: 35560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 5, offset: 35560},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 5, offset: 35567},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1259, col: 1, offset: 35572},
			expr: &actionExpr{
				pos: position{line: 1259, col: 12, offset: 35583},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 12, offset: 35583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1259, col: 12, offset: 35583},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 16, offset: 35587},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 18, offset: 35589},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1261, col: 1, offset: 35627},
			expr: &actionExpr{
				pos: position{line: 1261, col: 12, offset: 35638},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 12, offset: 35638},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1261, col: 12, offset: 35638},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 14, offset: 35640},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1261, col: 18, offset: 35644},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1263, col: 1, offset: 35682},
			expr: &actionExpr{
				pos: position{line: 1264, col: 5, offset: 35693},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1264, col: 5, offset: 35693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1264, col: 5, offset: 35693},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1264, col: 7, offset: 35695},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1264, col: 10, offset: 35698},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1264, col: 14, offset: 35702},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1264, col: 16, offset: 35704},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1268, col: 1, offset: 35777},
			expr: &actionExpr{
				pos: position{line: 1269, col: 5, offset: 35788},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 5, offset: 35788},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1269, col: 5, offset: 35788},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 7, offset: 35790},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1269, col: 11, offset: 35794},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 15, offset: 35798},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 17, offset: 35800},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1273, col: 1, offset: 35863},
			expr: &actionExpr{
				pos: position{line: 1274, col: 4, offset: 35871},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1274, col: 4, offset: 35871},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1274, col: 6, offset: 35873},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1276, col: 1, offset: 35913},
			expr: &choiceExpr{
				pos: position{line: 1277, col: 5, offset: 35927},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1277, col: 5, offset: 35927},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 5, offset: 35942},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1280, col: 1, offset: 35958},
			expr: &actionExpr{
				pos: position{line: 1280, col: 14, offset: 35971},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1280, col: 14, offset: 35971},
					expr: &charClassMatcher{
						pos:        position{line: 1280, col: 14, offset: 35971},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1282, col: 1, offset: 36010},
			expr: &actionExpr{
				pos: position{line: 1283, col: 5, offset: 36029},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1283, col: 5, offset: 36029},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1283, col: 5, offset: 36029},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1283, col: 9, offset: 36033},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1285, col: 1, offset: 36076},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 5, offset: 36092},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 36092},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1286, col: 5, offset: 36092},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1286, col: 5, offset: 36092},
									expr: &litMatcher{
										pos:        position{line: 1286, col: 5, offset: 36092},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1286, col: 10, offset: 36097},
									expr: &charClassMatcher{
										pos:        position{line: 1286, col: 10, offset: 36097},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1286, col: 17, offset: 36104},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1286, col: 21, offset: 36108},
									expr: &charClassMatcher{
										pos:        position{line: 1286, col: 21, offset: 36108},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1286, col: 28, offset: 36115},
									expr: &ruleRefExpr{
										pos:  position{line: 1286, col: 28, offset: 36115},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1289, col: 5, offset: 36174},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1289, col: 5, offset: 36174},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1289, col: 5, offset: 36174},
									expr: &litMatcher{
										pos:        position{line: 1289, col: 5, offset: 36174},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1289, col: 10, offset: 36179},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1289, col: 14, offset: 36183},
									expr: &charClassMatcher{
										pos:        position{line: 1289, col: 14, offset: 36183},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1289, col: 21, offset: 36190},
									expr: &ruleRefExpr{
										pos:  position{line: 1289, col: 21, offset: 36190},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1293, col: 1, offset: 36246},
			expr: &seqExpr{
				pos: position{line: 1293, col: 16, offset: 36261},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 16, offset: 36261},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1293, col: 21, offset: 36266},
						expr: &charClassMatcher{
							pos:        position{line: 1293, col: 21, offset: 36266},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 27, offset: 36272},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1295, col: 1, offset: 36284},
			expr: &actionExpr{
				pos: position{line: 1295, col: 7, offset: 36290},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1295, col: 7, offset: 36290},
					expr: &ruleRefExpr{
						pos:  position{line: 1295, col: 7, offset: 36290},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1297, col: 1, offset: 36332},
			expr: &charClassMatcher{
				pos:        position{line: 1297, col: 12, offset: 36343},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1300, col: 1, offset: 36357},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 5, offset: 36374},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 36374},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1301, col: 5, offset: 36374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1301, col: 5, offset: 36374},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1301, col: 9, offset: 36378},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1301, col: 11, offset: 36380},
										expr: &ruleRefExpr{
											pos:  position{line: 1301, col: 11, offset: 36380},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1301, col: 29, offset: 36398},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 36435},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1302, col: 5, offset: 36435},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1302, col: 5, offset: 36435},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1302, col: 9, offset: 36439},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1302, col: 11, offset: 36441},
										expr: &ruleRefExpr{
											pos:  position{line: 1302, col: 11, offset: 36441},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 29, offset: 36459},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1304, col: 1, offset: 36493},
			expr: &choiceExpr{
				pos: position{line: 1305, col: 5, offset: 36514},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36514},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36514},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1305, col: 5, offset: 36514},
									expr: &choiceExpr{
										pos: position{line: 1305, col: 7, offset: 36516},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1305, col: 7, offset: 36516},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1305, col: 13, offset: 36522},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1305, col: 26, offset: 36535,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 36572},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1306, col: 5, offset: 36572},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1306, col: 5, offset: 36572},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1306, col: 10, offset: 36577},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1306, col: 12, offset: 36579},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1308, col: 1, offset: 36613},
			expr: &actionExpr{
				pos: position{line: 1309, col: 5, offset: 36625},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1309, col: 5, offset: 36625},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1309, col: 5, offset: 36625},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1309, col: 10, offset: 36630},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1309, col: 23, offset: 36643},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1309, col: 28, offset: 36648},
								expr: &ruleRefExpr{
									pos:  position{line: 1309, col: 28, offset: 36648},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1311, col: 1, offset: 36710},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 36727},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 5, offset: 36727},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 5, offset: 36744},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1315, col: 1, offset: 36756},
			expr: &actionExpr{
				pos: position{line: 1315, col: 16, offset: 36771},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1315, col: 16, offset: 36771},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1317, col: 1, offset: 36820},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 5, offset: 36836},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1318, col: 5, offset: 36836},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1319, col: 5, offset: 36853},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1321, col: 1, offset: 36860},
			expr: &actionExpr{
				pos: position{line: 1321, col: 14, offset: 36873},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 14, offset: 36873},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1321, col: 14, offset: 36873},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 19, offset: 36878},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1321, col: 22, offset: 36881},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1321, col: 22, offset: 36881},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1321, col: 38, offset: 36897},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1323, col: 1, offset: 36933},
			expr: &actionExpr{
				pos: position{line: 1324, col: 5, offset: 36942},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1324, col: 5, offset: 36942},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1324, col: 5, offset: 36942},
							expr: &ruleRefExpr{
								pos:  position{line: 1324, col: 6, offset: 36943},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1324, col: 22, offset: 36959},
							expr: &ruleRefExpr{
								pos:  position{line: 1324, col: 23, offset: 36960},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 35, offset: 36972},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1324, col: 40, offset: 36977},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 50, offset: 36987},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1324, col: 55, offset: 36992},
								expr: &ruleRefExpr{
									pos:  position{line: 1324, col: 55, offset: 36992},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1328, col: 1, offset: 37076},
			expr: &seqExpr{
				pos: position{line: 1328, col: 19, offset: 37094},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1328, col: 19, offset: 37094},
						expr: &litMatcher{
							pos:        position{line: 1328, col: 19, offset: 37094},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 24, offset: 37099},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1329, col: 1, offset: 37112},
			expr: &seqExpr{
				pos: position{line: 1329, col: 15, offset: 37126},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1329, col: 15, offset: 37126},
						expr: &ruleRefExpr{
							pos:  position{line: 1329, col: 15, offset: 37126},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1329, col: 28, offset: 37139},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1331, col: 1, offset: 37144},
			expr: &choiceExpr{
				pos: position{line: 1332, col: 5, offset: 37158},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1332, col: 5, offset: 37158},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 5, offset: 37175},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1334, col: 5, offset: 37187},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1334, col: 5, offset: 37187},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1336, col: 1, offset: 37211},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 5, offset: 37224},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1337, col: 5, offset: 37224},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1338, col: 5, offset: 37238},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1340, col: 1, offset: 37245},
			expr: &actionExpr{
				pos: position{line: 1340, col: 11, offset: 37255},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1340, col: 11, offset: 37255},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1340, col: 11, offset: 37255},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 16, offset: 37260},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1340, col: 19, offset: 37263},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1340, col: 19, offset: 37263},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1340, col: 32, offset: 37276},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1342, col: 1, offset: 37312},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 5, offset: 37327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1343, col: 5, offset: 37327},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1343, col: 5, offset: 37327},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 5, offset: 37355},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1344, col: 5, offset: 37355},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1345, col: 5, offset: 37385},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1348, col: 1, offset: 37392},
			expr: &choiceExpr{
				pos: position{line: 1349, col: 5, offset: 37413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1349, col: 5, offset: 37413},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1349, col: 5, offset: 37413},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1349, col: 5, offset: 37413},
									expr: &choiceExpr{
										pos: position{line: 1349, col: 7, offset: 37415},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1349, col: 7, offset: 37415},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1349, col: 13, offset: 37421},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1349, col: 26, offset: 37434,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1350, col: 5, offset: 37471},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1350, col: 5, offset: 37471},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1350, col: 5, offset: 37471},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1350, col: 10, offset: 37476},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1350, col: 12, offset: 37478},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1352, col: 1, offset: 37512},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 5, offset: 37531},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 37531},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1353, col: 5, offset: 37531},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 5, offset: 37531},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1353, col: 9, offset: 37535},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1353, col: 18, offset: 37544},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 5, offset: 37595},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 5, offset: 37616},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1357, col: 1, offset: 37631},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 37652},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1358, col: 5, offset: 37652},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1359, col: 5, offset: 37660},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1359, col: 5, offset: 37660},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1360, col: 5, offset: 37700},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1361, col: 5, offset: 37709},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1361, col: 5, offset: 37709},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1362, col: 5, offset: 37738},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1362, col: 5, offset: 37738},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1363, col: 5, offset: 37767},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1363, col: 5, offset: 37767},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1364, col: 5, offset: 37796},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1364, col: 5, offset: 37796},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 5, offset: 37825},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1365, col: 5, offset: 37825},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1366, col: 5, offset: 37854},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1366, col: 5, offset: 37854},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1368, col: 1, offset: 37880},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 5, offset: 37898},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1369, col: 5, offset: 37898},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1369, col: 5, offset: 37898},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1370, col: 5, offset: 37926},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1370, col: 5, offset: 37926},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1371, col: 5, offset: 37954},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1373, col: 1, offset: 37960},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 5, offset: 37978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1374, col: 5, offset: 37978},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1374, col: 5, offset: 37978},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1374, col: 5, offset: 37978},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1374, col: 9, offset: 37982},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1374, col: 16, offset: 37989},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1374, col: 16, offset: 37989},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1374, col: 25, offset: 37998},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1374, col: 34, offset: 38007},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1374, col: 43, offset: 38016},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1377, col: 5, offset: 38079},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1377, col: 5, offset: 38079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1377, col: 5, offset: 38079},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1377, col: 9, offset: 38083},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1377, col: 13, offset: 38087},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1377, col: 20, offset: 38094},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1377, col: 20, offset: 38094},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1377, col: 29, offset: 38103},
												expr: &ruleRefExpr{
													pos:  position{line: 1377, col: 29, offset: 38103},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1377, col: 39, offset: 38113},
												expr: &ruleRefExpr{
													pos:  position{line: 1377, col: 39, offset: 38113},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1377, col: 49, offset: 38123},
												expr: &ruleRefExpr{
													pos:  position{line: 1377, col: 49, offset: 38123},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1377, col: 59, offset: 38133},
												expr: &ruleRefExpr{
													pos:  position{line: 1377, col: 59, offset: 38133},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1377, col: 69, offset: 38143},
												expr: &ruleRefExpr{
													pos:  position{line: 1377, col: 69, offset: 38143},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1377, col: 80, offset: 38154},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1381, col: 1, offset: 38208},
			expr: &actionExpr{
				pos: position{line: 1382, col: 5, offset: 38219},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 5, offset: 38219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1382, col: 5, offset: 38219},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1382, col: 9, offset: 38223},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1382, col: 14, offset: 38228},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1382, col: 25, offset: 38239},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1382, col: 29, offset: 38243},
							expr: &ruleRefExpr{
								pos:  position{line: 1382, col: 30, offset: 38244},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1384, col: 1, offset: 38279},
			expr: &actionExpr{
				pos: position{line: 1385, col: 5, offset: 38294},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1385, col: 5, offset: 38294},
					expr: &choiceExpr{
						pos: position{line: 1385, col: 6, offset: 38295},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1385, col: 6, offset: 38295},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1385, col: 13, offset: 38302},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1387, col: 1, offset: 38342},
			expr: &charClassMatcher{
				pos:        position{line: 1388, col: 5, offset: 38358},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1390, col: 1, offset: 38373},
			expr: &oneOrMoreExpr{
				pos: position{line: 1390, col: 6, offset: 38378},
				expr: &ruleRefExpr{
					pos:  position{line: 1390, col: 6, offset: 38378},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1392, col: 1, offset: 38389},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1392, col: 6, offset: 38394},
				expr: &ruleRefExpr{
					pos:  position{line: 1392, col: 6, offset: 38394},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1394, col: 1, offset: 38405},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 5, offset: 38418},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1395, col: 5, offset: 38418},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 5, offset: 38433},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 5, offset: 38452},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1399, col: 1, offset: 38461},
			expr: &anyMatcher{
				line: 1400, col: 5, offset: 38481,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1402, col: 1, offset: 38484},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 5, offset: 38512},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1403, col: 5, offset: 38512},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1404, col: 5, offset: 38521},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 38530},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1406, col: 5, offset: 38539},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1407, col: 5, offset: 38547},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1408, col: 5, offset: 38560},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1410, col: 1, offset: 38570},
			expr: &charClassMatcher{
				pos:        position{line: 1411, col: 5, offset: 38589},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1417, col: 1, offset: 38919},
			expr: &ruleRefExpr{
				pos:  position{line: 1420, col: 5, offset: 38990},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1422, col: 1, offset: 39009},
			expr: &seqExpr{
				pos: position{line: 1423, col: 5, offset: 39030},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1423, col: 5, offset: 39030},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1423, col: 10, offset: 39035},
						expr: &seqExpr{
							pos: position{line: 1423, col: 11, offset: 39036},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1423, col: 11, offset: 39036},
									expr: &litMatcher{
										pos:        position{line: 1423, col: 12, offset: 39037},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1423, col: 17, offset: 39042},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1423, col: 35, offset: 39060},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1425, col: 1, offset: 39066},
			expr: &seqExpr{
				pos: position{line: 1426, col: 5, offset: 39088},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1426, col: 5, offset: 39088},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1426, col: 10, offset: 39093},
						expr: &seqExpr{
							pos: position{line: 1426, col: 11, offset: 39094},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1426, col: 11, offset: 39094},
									expr: &ruleRefExpr{
										pos:  position{line: 1426, col: 12, offset: 39095},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1426, col: 27, offset: 39110},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1428, col: 1, offset: 39129},
			expr: &seqExpr{
				pos: position{line: 1428, col: 7, offset: 39135},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1428, col: 7, offset: 39135},
						expr: &ruleRefExpr{
							pos:  position{line: 1428, col: 7, offset: 39135},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 19, offset: 39147},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1430, col: 1, offset: 39163},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 7, offset: 39169},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1430, col: 7, offset: 39169},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 11, offset: 39173},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1432, col: 1, offset: 39178},
			expr: &notExpr{
				pos: position{line: 1432, col: 7, offset: 39184},
				expr: &anyMatcher{
					line: 1432, col: 8, offset: 39185,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonParallel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel1(stack["s"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq2(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq2(stack["seq"])
}

func (c *current) onFromTrunkSeq9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonFromTrunkSeq9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq9()
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation46(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation46(stack["f"])
}

func (c *current) onOperation52(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation52(stack["a"])
}

func (c *current) onOperation58(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation58(stack["expr"])
}

func (c *current) onSwitchLiteralClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLiteralClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLiteralClause1(stack["expr"], stack["proc"])
}

func (c *current) onSwitchSearchBooleanClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchSearchBooleanClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchSearchBooleanClause1(stack["expr"], stack["proc"])
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor14(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor14(stack["expr"])
}

func (c *current) onTBD2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonTBD2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD2(stack["compareOp"], stack["v"])
}

func (c *current) onTBD11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonTBD11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD11(stack["match"])
}

func (c *current) onTBD17(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonTBD17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD17(stack["v"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr10(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr10(stack["v"])
}

func (c *current) onSearchExpr20() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr20()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(name, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "name": name, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["name"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt2(stack["id"])
}

func (c *current) onPoolAt9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolAt9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt9()
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange2(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange2(stack["lower"], stack["upper"])
}

func (c *current) onPoolRange14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolRange14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange14()
}

func (c *current) onPoolTo2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonPoolTo2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo2(stack["val"])
}

func (c *current) onPoolTo9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolTo9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo9()
}

func (c *current) onPoolName2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonPoolName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName2(stack["name"])
}

func (c *current) onPoolName5(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolName5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName5(stack["id"])
}

func (c *current) onPoolName8(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonPoolName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName8(stack["s"])
}

func (c *current) onLayoutArg2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg2(stack["keys"], stack["order"])
}

func (c *current) onLayoutArg11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonLayoutArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg11()
}

func (c *current) onFormatArg2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg2(stack["val"])
}

func (c *current) onFormatArg9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonFormatArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg9()
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onOrderArg14() (interface{}, error) {
	return "", nil
}

func (p *parser) callonOrderArg14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg14()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg2(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg2(stack["lhs"])
}

func (c *current) onAsArg9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAsArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg9()
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
