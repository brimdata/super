// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 4, col: 1, offset: 23},
			expr: &choiceExpr{
				pos: position{line: 5, col: 5, offset: 33},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 5, col: 5, offset: 33},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 5, col: 5, offset: 33},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 5, col: 5, offset: 33},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 5, col: 8, offset: 36},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 5, col: 14, offset: 42},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 20, offset: 48},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 23, offset: 51},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 6, col: 5, offset: 81},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 6, col: 5, offset: 81},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 6, col: 5, offset: 81},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 6, col: 8, offset: 84},
									label: "body",
									expr: &ruleRefExpr{
										pos:  position{line: 6, col: 13, offset: 89},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 24, offset: 100},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 27, offset: 103},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 9, col: 1, offset: 201},
			expr: &actionExpr{
				pos: position{line: 10, col: 5, offset: 211},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 10, col: 5, offset: 211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 5, offset: 211},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 10, col: 11, offset: 217},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 11, offset: 217},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 17, offset: 223},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 22, offset: 228},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 13, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 14, col: 5, offset: 350},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 14, col: 5, offset: 350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 14, col: 5, offset: 350},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 11, offset: 356},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 14, col: 21, offset: 366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 14, col: 26, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 14, col: 26, offset: 371},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 522},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 539},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 539},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 539},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 542},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 547},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 550},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 552},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 18, col: 1, offset: 580},
			expr: &actionExpr{
				pos: position{line: 19, col: 5, offset: 589},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 19, col: 5, offset: 589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 589},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 19, col: 8, offset: 592},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 19, col: 8, offset: 592},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 19, col: 20, offset: 604},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 19, col: 30, offset: 614},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 20, col: 1, offset: 634},
			expr: &choiceExpr{
				pos: position{line: 21, col: 5, offset: 648},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 648},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 21, col: 5, offset: 648},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 21, col: 5, offset: 648},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 21, col: 13, offset: 656},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 21, col: 15, offset: 658},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 21, col: 18, offset: 661},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 21, col: 33, offset: 676},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 21, col: 36, offset: 679},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 21, col: 40, offset: 683},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 21, col: 43, offset: 686},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 21, col: 48, offset: 691},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 793},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 24, col: 5, offset: 793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 24, col: 5, offset: 793},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 12, offset: 800},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 14, offset: 802},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 24, col: 18, offset: 806},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 24, col: 18, offset: 806},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 24, col: 35, offset: 823},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 49, offset: 837},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 24, col: 52, offset: 840},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 56, offset: 844},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 59, offset: 847},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 24, col: 63, offset: 851},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 27, col: 1, offset: 1057},
			expr: &actionExpr{
				pos: position{line: 28, col: 5, offset: 1070},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 28, col: 5, offset: 1070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 28, col: 5, offset: 1070},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 12, offset: 1077},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 14, offset: 1079},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 17, offset: 1082},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 32, offset: 1097},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 35, offset: 1100},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 39, offset: 1104},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 42, offset: 1107},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 49, offset: 1114},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 65, offset: 1130},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 68, offset: 1133},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 72, offset: 1137},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 75, offset: 1140},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 79, offset: 1144},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 82, offset: 1147},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 86, offset: 1151},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 89, offset: 1154},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 94, offset: 1159},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 99, offset: 1164},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 28, col: 102, offset: 1167},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 31, col: 1, offset: 1280},
			expr: &choiceExpr{
				pos: position{line: 32, col: 5, offset: 1294},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 32, col: 5, offset: 1294},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 32, col: 5, offset: 1294},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 32, col: 5, offset: 1294},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 12, offset: 1301},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 32, col: 15, offset: 1304},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 32, col: 19, offset: 1308},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 32, col: 23, offset: 1312},
										expr: &ruleRefExpr{
											pos:  position{line: 32, col: 23, offset: 1312},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 28, offset: 1317},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 32, col: 31, offset: 1320},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1409},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1409},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 35, col: 5, offset: 1409},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 35, col: 14, offset: 1418},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 35, col: 16, offset: 1420},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 21, offset: 1425},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 35, col: 26, offset: 1430},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 35, col: 28, offset: 1432},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 35, col: 32, offset: 1436},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 38, offset: 1442},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 38, offset: 1442},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 35, col: 49, offset: 1453},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 35, col: 52, offset: 1456},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1561},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 38, col: 5, offset: 1561},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 38, col: 5, offset: 1561},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 38, col: 14, offset: 1570},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 38, col: 17, offset: 1573},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 38, col: 21, offset: 1577},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 38, col: 27, offset: 1583},
										expr: &ruleRefExpr{
											pos:  position{line: 38, col: 27, offset: 1583},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 38, col: 38, offset: 1594},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 38, col: 41, offset: 1597},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 1701},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 1701},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 41, col: 5, offset: 1701},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 12, offset: 1708},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 15, offset: 1711},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 41, col: 19, offset: 1715},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 41, col: 26, offset: 1722},
										expr: &ruleRefExpr{
											pos:  position{line: 41, col: 26, offset: 1722},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 41, col: 35, offset: 1731},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 41, col: 38, offset: 1734},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 44, col: 5, offset: 1825},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 44, col: 5, offset: 1825},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 44, col: 5, offset: 1825},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 44, col: 9, offset: 1829},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 44, col: 12, offset: 1832},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 18, offset: 1838},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 44, col: 24, offset: 1844},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 44, col: 27, offset: 1847},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 45, col: 5, offset: 1877},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 45, col: 8, offset: 1880},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1893},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 46, col: 5, offset: 1893},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 7, offset: 1895},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 46, col: 20, offset: 1908},
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 21, offset: 1909},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 1939},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 1939},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 47, col: 5, offset: 1939},
									expr: &seqExpr{
										pos: position{line: 47, col: 7, offset: 1941},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 47, col: 7, offset: 1941},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 47, col: 16, offset: 1950},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 47, col: 25, offset: 1959},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 27, offset: 1961},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 47, col: 39, offset: 1973},
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 40, offset: 1974},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 2004},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 2004},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 48, col: 5, offset: 2004},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 14, offset: 2013},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 48, col: 16, offset: 2015},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 21, offset: 2020},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 2119},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 51, col: 5, offset: 2119},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 10, offset: 2124},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 2223},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 54, col: 5, offset: 2223},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 10, offset: 2228},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 2316},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 57, col: 5, offset: 2316},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 10, offset: 2321},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 60, col: 1, offset: 2407},
			expr: &seqExpr{
				pos: position{line: 60, col: 11, offset: 2417},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 2417},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 60, col: 15, offset: 2421},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 60, col: 15, offset: 2421},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 22, offset: 2428},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 60, col: 43, offset: 2449},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 60, col: 50, offset: 2456},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 56, offset: 2462},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 61, col: 1, offset: 2467},
			expr: &seqExpr{
				pos: position{line: 61, col: 8, offset: 2474},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 61, col: 8, offset: 2474},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 61, col: 12, offset: 2478},
						expr: &choiceExpr{
							pos: position{line: 61, col: 14, offset: 2480},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 14, offset: 2480},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 61, col: 20, offset: 2486},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 62, col: 1, offset: 2491},
			expr: &actionExpr{
				pos: position{line: 62, col: 7, offset: 2497},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 62, col: 7, offset: 2497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 62, col: 7, offset: 2497},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 62, col: 10, offset: 2500},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 15, offset: 2505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 18, offset: 2508},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 22, offset: 2512},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 63, col: 1, offset: 2543},
			expr: &actionExpr{
				pos: position{line: 64, col: 5, offset: 2557},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 64, col: 5, offset: 2557},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 64, col: 5, offset: 2557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 8, offset: 2560},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 13, offset: 2565},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 64, col: 18, offset: 2570},
							label: "leg",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 22, offset: 2574},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 67, col: 1, offset: 2652},
			expr: &choiceExpr{
				pos: position{line: 68, col: 5, offset: 2661},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2661},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2661},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 2661},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 12, offset: 2668},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 68, col: 14, offset: 2670},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 19, offset: 2675},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 2705},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 69, col: 5, offset: 2705},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 70, col: 1, offset: 2735},
			expr: &actionExpr{
				pos: position{line: 71, col: 5, offset: 2747},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 71, col: 5, offset: 2747},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 71, col: 5, offset: 2747},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 8, offset: 2750},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 15, offset: 2757},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 71, col: 26, offset: 2768},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 71, col: 30, offset: 2772},
								expr: &seqExpr{
									pos: position{line: 71, col: 31, offset: 2773},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 71, col: 31, offset: 2773},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 71, col: 34, offset: 2776},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 71, col: 39, offset: 2781},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 71, col: 42, offset: 2784},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 78, col: 1, offset: 2981},
			expr: &choiceExpr{
				pos: position{line: 79, col: 5, offset: 2996},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 79, col: 5, offset: 2996},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 5, offset: 3005},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 3013},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 5, offset: 3022},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 83, col: 1, offset: 3029},
			expr: &seqExpr{
				pos: position{line: 83, col: 13, offset: 3041},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 83, col: 13, offset: 3041},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 83, col: 17, offset: 3045},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 83, col: 18, offset: 3046},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 83, col: 18, offset: 3046},
										expr: &litMatcher{
											pos:        position{line: 83, col: 19, offset: 3047},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 24, offset: 3052},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 38, offset: 3066},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 57, offset: 3085},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 83, col: 82, offset: 3110},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 88, offset: 3116},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 94, offset: 3122},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 83, col: 100, offset: 3128},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 84, col: 1, offset: 3133},
			expr: &actionExpr{
				pos: position{line: 84, col: 14, offset: 3146},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 84, col: 15, offset: 3147},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 84, col: 15, offset: 3147},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 22, offset: 3154},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 84, col: 30, offset: 3162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 84, col: 30, offset: 3162},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 84, col: 35, offset: 3167},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 36, offset: 3168},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 84, col: 54, offset: 3186},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 61, offset: 3193},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 67, offset: 3199},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 84, col: 74, offset: 3206},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 85, col: 1, offset: 3242},
			expr: &actionExpr{
				pos: position{line: 86, col: 5, offset: 3260},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 86, col: 5, offset: 3260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 3260},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 11, offset: 3266},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 21, offset: 3276},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 86, col: 26, offset: 3281},
								expr: &ruleRefExpr{
									pos:  position{line: 86, col: 26, offset: 3281},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 89, col: 1, offset: 3354},
			expr: &actionExpr{
				pos: position{line: 89, col: 16, offset: 3369},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 89, col: 16, offset: 3369},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 16, offset: 3369},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 18, offset: 3371},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 26, offset: 3379},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 28, offset: 3381},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 30, offset: 3383},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 90, col: 1, offset: 3432},
			expr: &actionExpr{
				pos: position{line: 91, col: 5, offset: 3446},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 91, col: 5, offset: 3446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 91, col: 5, offset: 3446},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 11, offset: 3452},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 3469},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 92, col: 10, offset: 3474},
								expr: &actionExpr{
									pos: position{line: 92, col: 11, offset: 3475},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 92, col: 11, offset: 3475},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 92, col: 11, offset: 3475},
												expr: &seqExpr{
													pos: position{line: 92, col: 12, offset: 3476},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 92, col: 12, offset: 3476},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 92, col: 14, offset: 3478},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 92, col: 25, offset: 3489},
												name: "_",
											},
											&notExpr{
												pos: position{line: 92, col: 27, offset: 3491},
												expr: &choiceExpr{
													pos: position{line: 92, col: 29, offset: 3493},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 92, col: 29, offset: 3493},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 92, col: 39, offset: 3503},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 92, col: 59, offset: 3523},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 92, col: 64, offset: 3528},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 95, col: 1, offset: 3643},
			expr: &choiceExpr{
				pos: position{line: 96, col: 5, offset: 3666},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 96, col: 5, offset: 3666},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 5, offset: 3666},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 16, offset: 3677},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 96, col: 19, offset: 3680},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 24, offset: 3685},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 97, col: 5, offset: 3692},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 97, col: 5, offset: 3692},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 10, offset: 3697},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 98, col: 1, offset: 3700},
			expr: &choiceExpr{
				pos: position{line: 99, col: 5, offset: 3717},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 3717},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 99, col: 5, offset: 3717},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 99, col: 6, offset: 3718},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 99, col: 6, offset: 3718},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 99, col: 6, offset: 3718},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 99, col: 15, offset: 3727},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 99, col: 19, offset: 3731},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 99, col: 19, offset: 3731},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 99, col: 23, offset: 3735},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 99, col: 27, offset: 3739},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 29, offset: 3741},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 3853},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 102, col: 5, offset: 3853},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 102, col: 5, offset: 3853},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 102, col: 9, offset: 3857},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 102, col: 12, offset: 3860},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 17, offset: 3865},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 102, col: 31, offset: 3879},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 102, col: 34, offset: 3882},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3911},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 104, col: 1, offset: 3922},
			expr: &choiceExpr{
				pos: position{line: 105, col: 5, offset: 3937},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 105, col: 5, offset: 3937},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 3946},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 3957},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 3957},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 107, col: 5, offset: 3957},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 7, offset: 3959},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 107, col: 20, offset: 3972},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 107, col: 20, offset: 3972},
											expr: &ruleRefExpr{
												pos:  position{line: 107, col: 21, offset: 3973},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 107, col: 33, offset: 3985},
											expr: &seqExpr{
												pos: position{line: 107, col: 35, offset: 3987},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 107, col: 35, offset: 3987},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 107, col: 37, offset: 3989},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 4101},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 4101},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 110, col: 5, offset: 4101},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 110, col: 9, offset: 4105},
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 10, offset: 4106},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 5, offset: 4222},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 114, col: 1, offset: 4238},
			expr: &choiceExpr{
				pos: position{line: 115, col: 5, offset: 4258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 115, col: 5, offset: 4258},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 115, col: 5, offset: 4258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 115, col: 5, offset: 4258},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 9, offset: 4262},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 22, offset: 4275},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 115, col: 25, offset: 4278},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 28, offset: 4281},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 39, offset: 4292},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 115, col: 42, offset: 4295},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 46, offset: 4299},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 118, col: 6, offset: 4422},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 118, col: 6, offset: 4422},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 118, col: 6, offset: 4422},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 12, offset: 4428},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 118, col: 21, offset: 4437},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 118, col: 26, offset: 4442},
										expr: &ruleRefExpr{
											pos:  position{line: 118, col: 27, offset: 4443},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 121, col: 1, offset: 4514},
			expr: &choiceExpr{
				pos: position{line: 122, col: 5, offset: 4530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 122, col: 5, offset: 4530},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 123, col: 5, offset: 4542},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 123, col: 5, offset: 4542},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 123, col: 5, offset: 4542},
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 6, offset: 4543},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 123, col: 20, offset: 4557},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 22, offset: 4559},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 126, col: 1, offset: 4666},
			expr: &actionExpr{
				pos: position{line: 127, col: 5, offset: 4675},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 127, col: 5, offset: 4675},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 127, col: 13, offset: 4683},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 130, col: 1, offset: 4778},
			expr: &actionExpr{
				pos: position{line: 131, col: 5, offset: 4789},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 131, col: 5, offset: 4789},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 131, col: 13, offset: 4797},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 134, col: 1, offset: 4896},
			expr: &choiceExpr{
				pos: position{line: 135, col: 5, offset: 4912},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 5, offset: 4912},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 135, col: 5, offset: 4912},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 135, col: 5, offset: 4912},
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 5, offset: 4912},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 135, col: 16, offset: 4923},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 21, offset: 4928},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 135, col: 33, offset: 4940},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 39, offset: 4946},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 5072},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 138, col: 5, offset: 5072},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 138, col: 5, offset: 5072},
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 5, offset: 5072},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 16, offset: 5083},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 21, offset: 5088},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 36, offset: 5103},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 138, col: 41, offset: 5108},
										expr: &seqExpr{
											pos: position{line: 138, col: 42, offset: 5109},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 138, col: 42, offset: 5109},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 44, offset: 5111},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 58, offset: 5125},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 64, offset: 5131},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 145, col: 1, offset: 5344},
			expr: &seqExpr{
				pos: position{line: 145, col: 13, offset: 5356},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 145, col: 13, offset: 5356},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 145, col: 25, offset: 5368},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 146, col: 1, offset: 5370},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 5386},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 147, col: 5, offset: 5386},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 147, col: 5, offset: 5386},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 5394},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 15, offset: 5396},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 23, offset: 5404},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 148, col: 1, offset: 5444},
			expr: &choiceExpr{
				pos: position{line: 149, col: 5, offset: 5457},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 5457},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 5457},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 149, col: 5, offset: 5457},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 149, col: 7, offset: 5459},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 14, offset: 5466},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 149, col: 16, offset: 5468},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 25, offset: 5477},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 149, col: 27, offset: 5479},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 33, offset: 5485},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 5516},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 150, col: 5, offset: 5516},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 151, col: 1, offset: 5537},
			expr: &choiceExpr{
				pos: position{line: 152, col: 5, offset: 5556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 152, col: 5, offset: 5556},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 5571},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 153, col: 5, offset: 5571},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 153, col: 10, offset: 5576},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 154, col: 1, offset: 5667},
			expr: &actionExpr{
				pos: position{line: 155, col: 5, offset: 5687},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 155, col: 5, offset: 5687},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 155, col: 5, offset: 5687},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 155, col: 11, offset: 5693},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 155, col: 26, offset: 5708},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 155, col: 31, offset: 5713},
								expr: &actionExpr{
									pos: position{line: 155, col: 32, offset: 5714},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 155, col: 32, offset: 5714},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 155, col: 32, offset: 5714},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 155, col: 35, offset: 5717},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 155, col: 39, offset: 5721},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 155, col: 42, offset: 5724},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 155, col: 47, offset: 5729},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 158, col: 1, offset: 5849},
			expr: &choiceExpr{
				pos: position{line: 159, col: 5, offset: 5867},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 5867},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 5867},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 159, col: 5, offset: 5867},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 10, offset: 5872},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 159, col: 15, offset: 5877},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 159, col: 18, offset: 5880},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 159, col: 23, offset: 5885},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 159, col: 26, offset: 5888},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 30, offset: 5892},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 5996},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 162, col: 5, offset: 5996},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 9, offset: 6000},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 165, col: 1, offset: 6099},
			expr: &actionExpr{
				pos: position{line: 166, col: 5, offset: 6107},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 166, col: 5, offset: 6107},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 166, col: 5, offset: 6107},
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 6, offset: 6108},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 16, offset: 6118},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 19, offset: 6121},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 27, offset: 6129},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 166, col: 30, offset: 6132},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 34, offset: 6136},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 37, offset: 6139},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 42, offset: 6144},
								expr: &choiceExpr{
									pos: position{line: 166, col: 43, offset: 6145},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 166, col: 43, offset: 6145},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 166, col: 54, offset: 6156},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 61, offset: 6163},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 166, col: 64, offset: 6166},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 166, col: 68, offset: 6170},
							expr: &seqExpr{
								pos: position{line: 166, col: 70, offset: 6172},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 166, col: 70, offset: 6172},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 166, col: 73, offset: 6175},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 78, offset: 6180},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 166, col: 84, offset: 6186},
								expr: &ruleRefExpr{
									pos:  position{line: 166, col: 84, offset: 6186},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 173, col: 1, offset: 6375},
			expr: &choiceExpr{
				pos: position{line: 174, col: 5, offset: 6387},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 174, col: 5, offset: 6387},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 6406},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 5, offset: 6419},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 177, col: 1, offset: 6427},
			expr: &actionExpr{
				pos: position{line: 177, col: 15, offset: 6441},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 177, col: 15, offset: 6441},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 177, col: 15, offset: 6441},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 177, col: 17, offset: 6443},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 25, offset: 6451},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 27, offset: 6453},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 32, offset: 6458},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 178, col: 1, offset: 6493},
			expr: &actionExpr{
				pos: position{line: 179, col: 5, offset: 6512},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 179, col: 5, offset: 6512},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 179, col: 5, offset: 6512},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 11, offset: 6518},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 179, col: 25, offset: 6532},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 179, col: 30, offset: 6537},
								expr: &seqExpr{
									pos: position{line: 179, col: 31, offset: 6538},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 179, col: 31, offset: 6538},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 179, col: 34, offset: 6541},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 179, col: 38, offset: 6545},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 179, col: 41, offset: 6548},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 186, col: 1, offset: 6746},
			expr: &choiceExpr{
				pos: position{line: 187, col: 5, offset: 6759},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 6759},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 6772},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 6783},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 6793},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 6803},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 6814},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 6825},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 5, offset: 6836},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 195, col: 5, offset: 6848},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 6859},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 5, offset: 6869},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 5, offset: 6882},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 6893},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6905},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6916},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 202, col: 5, offset: 6929},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6939},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6950},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6961},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 6975},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6987},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6998},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 5, offset: 7010},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 210, col: 1, offset: 7017},
			expr: &actionExpr{
				pos: position{line: 211, col: 5, offset: 7030},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 211, col: 5, offset: 7030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 211, col: 5, offset: 7030},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 14, offset: 7039},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 16, offset: 7041},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 211, col: 22, offset: 7047},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 211, col: 22, offset: 7047},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 24, offset: 7049},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 214, col: 1, offset: 7948},
			expr: &actionExpr{
				pos: position{line: 215, col: 5, offset: 7959},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 215, col: 5, offset: 7959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 215, col: 5, offset: 7959},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 215, col: 12, offset: 7966},
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 13, offset: 7967},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 215, col: 18, offset: 7972},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 23, offset: 7977},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 215, col: 32, offset: 7986},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 215, col: 37, offset: 7991},
								expr: &actionExpr{
									pos: position{line: 215, col: 38, offset: 7992},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 215, col: 38, offset: 7992},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 215, col: 38, offset: 7992},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 215, col: 40, offset: 7994},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 215, col: 42, offset: 7996},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 228, col: 1, offset: 8404},
			expr: &actionExpr{
				pos: position{line: 228, col: 12, offset: 8415},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 228, col: 12, offset: 8415},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 228, col: 17, offset: 8420},
						expr: &actionExpr{
							pos: position{line: 228, col: 18, offset: 8421},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 228, col: 18, offset: 8421},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 228, col: 18, offset: 8421},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 228, col: 20, offset: 8423},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 228, col: 22, offset: 8425},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 229, col: 1, offset: 8480},
			expr: &choiceExpr{
				pos: position{line: 230, col: 5, offset: 8492},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 8492},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 230, col: 5, offset: 8492},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 8567},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 231, col: 5, offset: 8567},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 231, col: 5, offset: 8567},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 231, col: 14, offset: 8576},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 231, col: 16, offset: 8578},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 231, col: 23, offset: 8585},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 231, col: 24, offset: 8586},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 231, col: 24, offset: 8586},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 231, col: 34, offset: 8596},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 232, col: 1, offset: 8709},
			expr: &actionExpr{
				pos: position{line: 233, col: 5, offset: 8719},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 233, col: 5, offset: 8719},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 5, offset: 8719},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 233, col: 11, offset: 8725},
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 12, offset: 8726},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 17, offset: 8731},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 233, col: 23, offset: 8737},
								expr: &actionExpr{
									pos: position{line: 233, col: 24, offset: 8738},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 233, col: 24, offset: 8738},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 24, offset: 8738},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 26, offset: 8740},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 28, offset: 8742},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 52, offset: 8766},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 233, col: 58, offset: 8772},
								expr: &seqExpr{
									pos: position{line: 233, col: 59, offset: 8773},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 59, offset: 8773},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 233, col: 61, offset: 8775},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 72, offset: 8786},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 233, col: 79, offset: 8793},
								expr: &actionExpr{
									pos: position{line: 233, col: 80, offset: 8794},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 233, col: 80, offset: 8794},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 80, offset: 8794},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 82, offset: 8796},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 84, offset: 8798},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 246, col: 1, offset: 9132},
			expr: &actionExpr{
				pos: position{line: 247, col: 5, offset: 9142},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 247, col: 5, offset: 9142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 5, offset: 9142},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 11, offset: 9148},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 13, offset: 9150},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 18, offset: 9155},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 250, col: 1, offset: 9249},
			expr: &actionExpr{
				pos: position{line: 251, col: 5, offset: 9260},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 251, col: 5, offset: 9260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 5, offset: 9260},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 12, offset: 9267},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 14, offset: 9269},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 19, offset: 9274},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 254, col: 1, offset: 9364},
			expr: &choiceExpr{
				pos: position{line: 255, col: 5, offset: 9375},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 255, col: 5, offset: 9375},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 255, col: 5, offset: 9375},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 255, col: 5, offset: 9375},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 255, col: 12, offset: 9382},
									name: "_",
								},
								&notExpr{
									pos: position{line: 255, col: 14, offset: 9384},
									expr: &ruleRefExpr{
										pos:  position{line: 255, col: 15, offset: 9385},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 255, col: 23, offset: 9393},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 255, col: 29, offset: 9399},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 9479},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 256, col: 5, offset: 9479},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 257, col: 1, offset: 9625},
			expr: &choiceExpr{
				pos: position{line: 258, col: 5, offset: 9636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 258, col: 5, offset: 9636},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 258, col: 5, offset: 9636},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 258, col: 5, offset: 9636},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 258, col: 12, offset: 9643},
									name: "_",
								},
								&notExpr{
									pos: position{line: 258, col: 14, offset: 9645},
									expr: &ruleRefExpr{
										pos:  position{line: 258, col: 15, offset: 9646},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 258, col: 23, offset: 9654},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 258, col: 29, offset: 9660},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 9740},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 259, col: 5, offset: 9740},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 260, col: 1, offset: 9886},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 9898},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 9898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 261, col: 5, offset: 9898},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 261, col: 13, offset: 9906},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 15, offset: 9908},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 20, offset: 9913},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 264, col: 1, offset: 9998},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 10009},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 10009},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 265, col: 5, offset: 10009},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 265, col: 5, offset: 10009},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 265, col: 12, offset: 10016},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 265, col: 14, offset: 10018},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 5, offset: 10107},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 268, col: 5, offset: 10107},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 271, col: 1, offset: 10195},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 10205},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 10205},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 272, col: 5, offset: 10205},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 11, offset: 10211},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 13, offset: 10213},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 18, offset: 10218},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 275, col: 1, offset: 10308},
			expr: &actionExpr{
				pos: position{line: 276, col: 5, offset: 10321},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 276, col: 5, offset: 10321},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 5, offset: 10321},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 14, offset: 10330},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 16, offset: 10332},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 22, offset: 10338},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 276, col: 33, offset: 10349},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 276, col: 38, offset: 10354},
								expr: &actionExpr{
									pos: position{line: 276, col: 39, offset: 10355},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 276, col: 39, offset: 10355},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 276, col: 39, offset: 10355},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 276, col: 42, offset: 10358},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 276, col: 46, offset: 10362},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 276, col: 49, offset: 10365},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 276, col: 52, offset: 10368},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 279, col: 1, offset: 10532},
			expr: &actionExpr{
				pos: position{line: 280, col: 5, offset: 10543},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 280, col: 5, offset: 10543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 5, offset: 10543},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 280, col: 12, offset: 10550},
							expr: &seqExpr{
								pos: position{line: 280, col: 14, offset: 10552},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 280, col: 14, offset: 10552},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 280, col: 17, offset: 10555},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 280, col: 22, offset: 10560},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 23, offset: 10561},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 283, col: 1, offset: 10631},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 10643},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 10643},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 5, offset: 10643},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 284, col: 13, offset: 10651},
							expr: &seqExpr{
								pos: position{line: 284, col: 15, offset: 10653},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 284, col: 15, offset: 10653},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 284, col: 18, offset: 10656},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 284, col: 23, offset: 10661},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 24, offset: 10662},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 287, col: 1, offset: 10733},
			expr: &actionExpr{
				pos: position{line: 288, col: 5, offset: 10744},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 288, col: 5, offset: 10744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 5, offset: 10744},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 11, offset: 10750},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 288, col: 21, offset: 10760},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 288, col: 28, offset: 10767},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 39, offset: 10778},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 54, offset: 10793},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 57, offset: 10796},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 59, offset: 10798},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 63, offset: 10802},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 71, offset: 10810},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 78, offset: 10817},
								expr: &seqExpr{
									pos: position{line: 288, col: 79, offset: 10818},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 288, col: 79, offset: 10818},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 288, col: 82, offset: 10821},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 86, offset: 10825},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 89, offset: 10828},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 99, offset: 10838},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 107, offset: 10846},
								expr: &seqExpr{
									pos: position{line: 288, col: 108, offset: 10847},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 288, col: 108, offset: 10847},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 110, offset: 10849},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 298, col: 1, offset: 11204},
			expr: &choiceExpr{
				pos: position{line: 299, col: 5, offset: 11218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 11218},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 299, col: 5, offset: 11218},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 299, col: 5, offset: 11218},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 12, offset: 11225},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 300, col: 5, offset: 11254},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 300, col: 5, offset: 11254},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 300, col: 5, offset: 11254},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 13, offset: 11262},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 11292},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 301, col: 5, offset: 11292},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 301, col: 5, offset: 11292},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 301, col: 12, offset: 11299},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 302, col: 5, offset: 11328},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 302, col: 5, offset: 11328},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 302, col: 5, offset: 11328},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 13, offset: 11336},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 303, col: 5, offset: 11366},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 303, col: 5, offset: 11366},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 304, col: 1, offset: 11393},
			expr: &choiceExpr{
				pos: position{line: 305, col: 5, offset: 11412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 305, col: 5, offset: 11412},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 305, col: 5, offset: 11412},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 305, col: 5, offset: 11412},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 305, col: 8, offset: 11415},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 305, col: 12, offset: 11419},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 305, col: 15, offset: 11422},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 305, col: 17, offset: 11424},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 305, col: 28, offset: 11435},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 305, col: 31, offset: 11438},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 305, col: 35, offset: 11442},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 11467},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 306, col: 5, offset: 11467},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 307, col: 1, offset: 11489},
			expr: &choiceExpr{
				pos: position{line: 308, col: 5, offset: 11501},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 308, col: 5, offset: 11501},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 11510},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 11510},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 309, col: 5, offset: 11510},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 309, col: 9, offset: 11514},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 309, col: 14, offset: 11519},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 309, col: 19, offset: 11524},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 310, col: 1, offset: 11549},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 11562},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 11562},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 5, offset: 11562},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 311, col: 14, offset: 11571},
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 15, offset: 11572},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 20, offset: 11577},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 22, offset: 11579},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 314, col: 1, offset: 12315},
			expr: &actionExpr{
				pos: position{line: 315, col: 5, offset: 12332},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 315, col: 5, offset: 12332},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 315, col: 7, offset: 12334},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 318, col: 1, offset: 12433},
			expr: &choiceExpr{
				pos: position{line: 319, col: 5, offset: 12448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 319, col: 5, offset: 12448},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 319, col: 5, offset: 12448},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 319, col: 5, offset: 12448},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 319, col: 7, offset: 12450},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 319, col: 12, offset: 12455},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 12484},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 320, col: 5, offset: 12484},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 321, col: 1, offset: 12554},
			expr: &actionExpr{
				pos: position{line: 322, col: 7, offset: 12567},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 322, col: 7, offset: 12567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 7, offset: 12567},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 14, offset: 12574},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 16, offset: 12576},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 21, offset: 12581},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 36, offset: 12596},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 43, offset: 12603},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 43, offset: 12603},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 55, offset: 12615},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 62, offset: 12622},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 62, offset: 12622},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 73, offset: 12633},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 81, offset: 12641},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 81, offset: 12641},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 93, offset: 12653},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 98, offset: 12658},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 98, offset: 12658},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 325, col: 1, offset: 12818},
			expr: &actionExpr{
				pos: position{line: 326, col: 5, offset: 12832},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 326, col: 5, offset: 12832},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 326, col: 5, offset: 12832},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 326, col: 7, offset: 12834},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 16, offset: 12843},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 18, offset: 12845},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 22, offset: 12849},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 327, col: 1, offset: 12882},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 12897},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 12897},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 328, col: 5, offset: 12897},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 328, col: 7, offset: 12899},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 17, offset: 12909},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 19, offset: 12911},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 23, offset: 12915},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 329, col: 1, offset: 12948},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 12960},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 12960},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 330, col: 5, offset: 12960},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 330, col: 7, offset: 12962},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 330, col: 14, offset: 12969},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 16, offset: 12971},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 20, offset: 12975},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 331, col: 1, offset: 13008},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 13023},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 13023},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 13023},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 9, offset: 13027},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 332, col: 17, offset: 13035},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 332, col: 17, offset: 13035},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 332, col: 34, offset: 13052},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 333, col: 1, offset: 13089},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 13100},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 334, col: 5, offset: 13100},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 334, col: 12, offset: 13107},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 337, col: 1, offset: 13262},
			expr: &choiceExpr{
				pos: position{line: 338, col: 5, offset: 13274},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 13274},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 13283},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 13291},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 341, col: 1, offset: 13296},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 13305},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 13305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 5, offset: 13305},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 12, offset: 13312},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 14, offset: 13314},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 19, offset: 13319},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 24, offset: 13324},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 342, col: 31, offset: 13331},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 31, offset: 13331},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 42, offset: 13342},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 342, col: 51, offset: 13351},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 51, offset: 13351},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 345, col: 1, offset: 13482},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 13491},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 13491},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 5, offset: 13491},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 346, col: 12, offset: 13498},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 14, offset: 13500},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 19, offset: 13505},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 347, col: 1, offset: 13535},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 13544},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 13544},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 13544},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 12, offset: 13551},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 14, offset: 13553},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 19, offset: 13558},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 349, col: 1, offset: 13588},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 13601},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 13601},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 350, col: 5, offset: 13601},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 10, offset: 13606},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 19, offset: 13615},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 22, offset: 13618},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 22, offset: 13618},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 353, col: 1, offset: 13715},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 13723},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 13723},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 5, offset: 13723},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 11, offset: 13729},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 354, col: 13, offset: 13731},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 17, offset: 13735},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 21, offset: 13739},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 28, offset: 13746},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 28, offset: 13746},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 39, offset: 13757},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 48, offset: 13766},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 48, offset: 13766},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 357, col: 1, offset: 13895},
			expr: &actionExpr{
				pos: position{line: 357, col: 7, offset: 13901},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 357, col: 7, offset: 13901},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 357, col: 8, offset: 13902},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 8, offset: 13902},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 357, col: 18, offset: 13912},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 28, offset: 13922},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 358, col: 1, offset: 13958},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 13967},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 13967},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 359, col: 5, offset: 13967},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 7, offset: 13969},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 14004},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 360, col: 5, offset: 14004},
							expr: &charClassMatcher{
								pos:        position{line: 360, col: 5, offset: 14004},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 361, col: 1, offset: 14072},
			expr: &actionExpr{
				pos: position{line: 362, col: 5, offset: 14083},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 362, col: 5, offset: 14083},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 362, col: 5, offset: 14083},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 362, col: 7, offset: 14085},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 12, offset: 14090},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 362, col: 14, offset: 14092},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 17, offset: 14095},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 363, col: 1, offset: 14120},
			expr: &actionExpr{
				pos: position{line: 363, col: 9, offset: 14128},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 363, col: 9, offset: 14128},
					expr: &charClassMatcher{
						pos:        position{line: 363, col: 10, offset: 14129},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 364, col: 1, offset: 14174},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 14187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 14187},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 14187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 365, col: 5, offset: 14187},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 10, offset: 14192},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 19, offset: 14201},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 365, col: 26, offset: 14208},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 26, offset: 14208},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 38, offset: 14220},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 365, col: 43, offset: 14225},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 43, offset: 14225},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 365, col: 53, offset: 14235},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 57, offset: 14239},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 14356},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 368, col: 5, offset: 14356},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 10, offset: 14361},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 371, col: 1, offset: 14461},
			expr: &actionExpr{
				pos: position{line: 372, col: 5, offset: 14476},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 372, col: 5, offset: 14476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 5, offset: 14476},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 372, col: 9, offset: 14480},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 16, offset: 14487},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 373, col: 1, offset: 14525},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 14538},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 374, col: 5, offset: 14538},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 5, offset: 14538},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 374, col: 9, offset: 14542},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 14, offset: 14547},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 375, col: 1, offset: 14583},
			expr: &choiceExpr{
				pos: position{line: 376, col: 5, offset: 14596},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 376, col: 5, offset: 14596},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 377, col: 5, offset: 14605},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 377, col: 5, offset: 14605},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 377, col: 5, offset: 14605},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 377, col: 9, offset: 14609},
									expr: &ruleRefExpr{
										pos:  position{line: 377, col: 10, offset: 14610},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 14695},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 379, col: 5, offset: 14706},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 379, col: 5, offset: 14706},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 10, offset: 14711},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 380, col: 1, offset: 14797},
			expr: &choiceExpr{
				pos: position{line: 381, col: 5, offset: 14816},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 381, col: 5, offset: 14816},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 5, offset: 14835},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 5, offset: 14845},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 384, col: 1, offset: 14858},
			expr: &actionExpr{
				pos: position{line: 385, col: 5, offset: 14877},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 385, col: 5, offset: 14877},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 385, col: 6, offset: 14878},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 385, col: 6, offset: 14878},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 385, col: 24, offset: 14896},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 29, offset: 14901},
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 14902},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 14902},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 385, col: 47, offset: 14919},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 386, col: 1, offset: 14956},
			expr: &actionExpr{
				pos: position{line: 387, col: 5, offset: 14971},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 387, col: 5, offset: 14971},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 387, col: 5, offset: 14971},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 387, col: 7, offset: 14973},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 15, offset: 14981},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 17, offset: 14983},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 22, offset: 14988},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 33, offset: 14999},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 39, offset: 15005},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 390, col: 1, offset: 15115},
			expr: &choiceExpr{
				pos: position{line: 391, col: 5, offset: 15126},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 391, col: 5, offset: 15126},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 391, col: 5, offset: 15126},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 391, col: 5, offset: 15126},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 391, col: 7, offset: 15128},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 392, col: 5, offset: 15159},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 392, col: 5, offset: 15159},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 393, col: 1, offset: 15184},
			expr: &actionExpr{
				pos: position{line: 394, col: 5, offset: 15198},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 394, col: 5, offset: 15198},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 394, col: 5, offset: 15198},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 394, col: 7, offset: 15200},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 16, offset: 15209},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 18, offset: 15211},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 22, offset: 15215},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 395, col: 1, offset: 15250},
			expr: &choiceExpr{
				pos: position{line: 396, col: 5, offset: 15266},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 15266},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 396, col: 5, offset: 15266},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 397, col: 5, offset: 15299},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 397, col: 5, offset: 15299},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 15334},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 398, col: 5, offset: 15334},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 399, col: 1, offset: 15359},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 15370},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 15370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 5, offset: 15370},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 400, col: 12, offset: 15377},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 13, offset: 15378},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 403, col: 1, offset: 15447},
			expr: &actionExpr{
				pos: position{line: 404, col: 5, offset: 15461},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 404, col: 5, offset: 15461},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 404, col: 5, offset: 15461},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 404, col: 15, offset: 15471},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 17, offset: 15473},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 22, offset: 15478},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 28, offset: 15484},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 32, offset: 15488},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 40, offset: 15496},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 404, col: 43, offset: 15499},
								expr: &ruleRefExpr{
									pos:  position{line: 404, col: 43, offset: 15499},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 407, col: 1, offset: 15610},
			expr: &actionExpr{
				pos: position{line: 408, col: 5, offset: 15622},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 408, col: 5, offset: 15622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 408, col: 5, offset: 15622},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 13, offset: 15630},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 15, offset: 15632},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 20, offset: 15637},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 411, col: 1, offset: 15717},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 15728},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 412, col: 5, offset: 15728},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 412, col: 5, offset: 15728},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 412, col: 12, offset: 15735},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 14, offset: 15737},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 20, offset: 15743},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 26, offset: 15749},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 412, col: 33, offset: 15756},
								expr: &ruleRefExpr{
									pos:  position{line: 412, col: 33, offset: 15756},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 41, offset: 15764},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 412, col: 46, offset: 15769},
								expr: &ruleRefExpr{
									pos:  position{line: 412, col: 46, offset: 15769},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 415, col: 1, offset: 15891},
			expr: &choiceExpr{
				pos: position{line: 416, col: 5, offset: 15903},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 15903},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 15903},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 416, col: 5, offset: 15903},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 8, offset: 15906},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 13, offset: 15911},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 16, offset: 15914},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 20, offset: 15918},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 416, col: 23, offset: 15921},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 29, offset: 15927},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 35, offset: 15933},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 38, offset: 15936},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 15966},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 15966},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 417, col: 5, offset: 15966},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 417, col: 8, offset: 15969},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 13, offset: 15974},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 417, col: 16, offset: 15977},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 20, offset: 15981},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 417, col: 23, offset: 15984},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 27, offset: 15988},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 38, offset: 15999},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 417, col: 41, offset: 16002},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 418, col: 1, offset: 16026},
			expr: &actionExpr{
				pos: position{line: 419, col: 5, offset: 16037},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 419, col: 5, offset: 16037},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 419, col: 5, offset: 16037},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 419, col: 7, offset: 16039},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 419, col: 14, offset: 16046},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 16, offset: 16048},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 22, offset: 16054},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 39, offset: 16071},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 419, col: 44, offset: 16076},
								expr: &actionExpr{
									pos: position{line: 419, col: 45, offset: 16077},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 419, col: 45, offset: 16077},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 419, col: 45, offset: 16077},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 419, col: 48, offset: 16080},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 419, col: 52, offset: 16084},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 419, col: 55, offset: 16087},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 419, col: 57, offset: 16089},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 422, col: 1, offset: 16208},
			expr: &actionExpr{
				pos: position{line: 423, col: 5, offset: 16229},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 423, col: 5, offset: 16229},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 5, offset: 16229},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 10, offset: 16234},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 423, col: 25, offset: 16249},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 423, col: 29, offset: 16253},
								expr: &seqExpr{
									pos: position{line: 423, col: 30, offset: 16254},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 423, col: 30, offset: 16254},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 423, col: 33, offset: 16257},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 423, col: 37, offset: 16261},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 423, col: 40, offset: 16264},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 430, col: 1, offset: 16484},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 16496},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 16496},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 16496},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 13, offset: 16504},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 15, offset: 16506},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 21, offset: 16512},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 434, col: 1, offset: 16595},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 16607},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 435, col: 5, offset: 16607},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 435, col: 5, offset: 16607},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 7, offset: 16609},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 10, offset: 16612},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 435, col: 12, offset: 16614},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 16, offset: 16618},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 436, col: 1, offset: 16642},
			expr: &actionExpr{
				pos: position{line: 437, col: 5, offset: 16652},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 437, col: 5, offset: 16652},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 437, col: 5, offset: 16652},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 7, offset: 16654},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 10, offset: 16657},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 12, offset: 16659},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 16, offset: 16663},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 438, col: 1, offset: 16688},
			expr: &ruleRefExpr{
				pos:  position{line: 438, col: 8, offset: 16695},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 439, col: 1, offset: 16705},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 16715},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 16715},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 5, offset: 16715},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 11, offset: 16721},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 16726},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 440, col: 21, offset: 16731},
								expr: &actionExpr{
									pos: position{line: 440, col: 22, offset: 16732},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 440, col: 22, offset: 16732},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 440, col: 22, offset: 16732},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 440, col: 25, offset: 16735},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 440, col: 29, offset: 16739},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 440, col: 32, offset: 16742},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 37, offset: 16747},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 443, col: 1, offset: 16857},
			expr: &ruleRefExpr{
				pos:  position{line: 443, col: 13, offset: 16869},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 444, col: 1, offset: 16874},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 16889},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 16889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 5, offset: 16889},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 11, offset: 16895},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 21, offset: 16905},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 445, col: 26, offset: 16910},
								expr: &seqExpr{
									pos: position{line: 445, col: 27, offset: 16911},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 445, col: 27, offset: 16911},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 445, col: 30, offset: 16914},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 445, col: 34, offset: 16918},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 445, col: 37, offset: 16921},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 452, col: 1, offset: 17115},
			expr: &actionExpr{
				pos: position{line: 453, col: 5, offset: 17131},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 453, col: 5, offset: 17131},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 5, offset: 17131},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 11, offset: 17137},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 22, offset: 17148},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 27, offset: 17153},
								expr: &actionExpr{
									pos: position{line: 453, col: 28, offset: 17154},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 453, col: 28, offset: 17154},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 453, col: 28, offset: 17154},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 453, col: 31, offset: 17157},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 453, col: 35, offset: 17161},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 453, col: 38, offset: 17164},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 453, col: 40, offset: 17166},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 456, col: 1, offset: 17275},
			expr: &actionExpr{
				pos: position{line: 457, col: 5, offset: 17290},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 457, col: 5, offset: 17290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 457, col: 5, offset: 17290},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 9, offset: 17294},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 14, offset: 17299},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 457, col: 17, offset: 17302},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 22, offset: 17307},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 457, col: 25, offset: 17310},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 29, offset: 17314},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 458, col: 1, offset: 17404},
			expr: &ruleRefExpr{
				pos:  position{line: 458, col: 8, offset: 17411},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 459, col: 1, offset: 17427},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 17447},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 460, col: 5, offset: 17447},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 460, col: 5, offset: 17447},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 10, offset: 17452},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 460, col: 24, offset: 17466},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 460, col: 28, offset: 17470},
								expr: &seqExpr{
									pos: position{line: 460, col: 29, offset: 17471},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 460, col: 29, offset: 17471},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 460, col: 32, offset: 17474},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 36, offset: 17478},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 39, offset: 17481},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 44, offset: 17486},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 460, col: 47, offset: 17489},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 51, offset: 17493},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 54, offset: 17496},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 468, col: 1, offset: 17756},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 17774},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 17774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 469, col: 5, offset: 17774},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 17780},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 470, col: 5, offset: 17799},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 470, col: 10, offset: 17804},
								expr: &actionExpr{
									pos: position{line: 470, col: 11, offset: 17805},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 470, col: 11, offset: 17805},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 470, col: 11, offset: 17805},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 470, col: 14, offset: 17808},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 470, col: 17, offset: 17811},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 470, col: 25, offset: 17819},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 470, col: 28, offset: 17822},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 470, col: 33, offset: 17827},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 473, col: 1, offset: 17944},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 17963},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 17963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 474, col: 5, offset: 17963},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 17969},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 475, col: 5, offset: 17988},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 475, col: 10, offset: 17993},
								expr: &actionExpr{
									pos: position{line: 475, col: 11, offset: 17994},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 475, col: 11, offset: 17994},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 475, col: 11, offset: 17994},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 475, col: 14, offset: 17997},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 475, col: 17, offset: 18000},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 475, col: 26, offset: 18009},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 475, col: 29, offset: 18012},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 475, col: 34, offset: 18017},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 478, col: 1, offset: 18134},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 18153},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 479, col: 5, offset: 18153},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 479, col: 5, offset: 18153},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 9, offset: 18157},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 479, col: 22, offset: 18170},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 479, col: 31, offset: 18179},
								expr: &choiceExpr{
									pos: position{line: 479, col: 32, offset: 18180},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 479, col: 32, offset: 18180},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 479, col: 32, offset: 18180},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 35, offset: 18183},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 46, offset: 18194},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 49, offset: 18197},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 479, col: 64, offset: 18212},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 479, col: 64, offset: 18212},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 479, col: 68, offset: 18216},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 479, col: 68, offset: 18216},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 104, offset: 18252},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 479, col: 107, offset: 18255},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 487, col: 1, offset: 18515},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 18532},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 18532},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 488, col: 5, offset: 18532},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 11, offset: 18538},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 18561},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 489, col: 10, offset: 18566},
								expr: &actionExpr{
									pos: position{line: 489, col: 11, offset: 18567},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 489, col: 11, offset: 18567},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 489, col: 11, offset: 18567},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 489, col: 14, offset: 18570},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 489, col: 17, offset: 18573},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 489, col: 34, offset: 18590},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 489, col: 37, offset: 18593},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 489, col: 42, offset: 18598},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 492, col: 1, offset: 18719},
			expr: &actionExpr{
				pos: position{line: 492, col: 20, offset: 18738},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 492, col: 21, offset: 18739},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 492, col: 21, offset: 18739},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 492, col: 27, offset: 18745},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 493, col: 1, offset: 18781},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 18804},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 18804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 494, col: 5, offset: 18804},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 18810},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 495, col: 5, offset: 18822},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 495, col: 10, offset: 18827},
								expr: &actionExpr{
									pos: position{line: 495, col: 11, offset: 18828},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 495, col: 11, offset: 18828},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 495, col: 11, offset: 18828},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 495, col: 14, offset: 18831},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 17, offset: 18834},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 495, col: 40, offset: 18857},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 495, col: 43, offset: 18860},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 48, offset: 18865},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 498, col: 1, offset: 18975},
			expr: &actionExpr{
				pos: position{line: 498, col: 26, offset: 19000},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 498, col: 27, offset: 19001},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 498, col: 27, offset: 19001},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 498, col: 33, offset: 19007},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 498, col: 39, offset: 19013},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 499, col: 1, offset: 19049},
			expr: &choiceExpr{
				pos: position{line: 500, col: 5, offset: 19061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 500, col: 5, offset: 19061},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 500, col: 5, offset: 19061},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 500, col: 5, offset: 19061},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 500, col: 9, offset: 19065},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 500, col: 12, offset: 19068},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 500, col: 14, offset: 19070},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 5, offset: 19179},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 504, col: 1, offset: 19192},
			expr: &choiceExpr{
				pos: position{line: 505, col: 5, offset: 19209},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 19209},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 505, col: 5, offset: 19209},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 505, col: 5, offset: 19209},
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 6, offset: 19210},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 505, col: 14, offset: 19218},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 505, col: 18, offset: 19222},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 505, col: 21, offset: 19225},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 23, offset: 19227},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 508, col: 5, offset: 19337},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 509, col: 1, offset: 19346},
			expr: &choiceExpr{
				pos: position{line: 510, col: 5, offset: 19359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 19359},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 19359},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 510, col: 5, offset: 19359},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 11, offset: 19365},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 510, col: 16, offset: 19370},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 510, col: 21, offset: 19375},
										expr: &ruleRefExpr{
											pos:  position{line: 510, col: 22, offset: 19376},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 19447},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 513, col: 5, offset: 19447},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 513, col: 5, offset: 19447},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 513, col: 11, offset: 19453},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 513, col: 20, offset: 19462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 513, col: 25, offset: 19467},
										expr: &ruleRefExpr{
											pos:  position{line: 513, col: 26, offset: 19468},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 516, col: 5, offset: 19539},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 5, offset: 19553},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 518, col: 1, offset: 19561},
			expr: &seqExpr{
				pos: position{line: 518, col: 13, offset: 19573},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 518, col: 13, offset: 19573},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 22, offset: 19582},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 518, col: 25, offset: 19585},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 519, col: 1, offset: 19589},
			expr: &choiceExpr{
				pos: position{line: 520, col: 5, offset: 19602},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 520, col: 5, offset: 19602},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 521, col: 5, offset: 19612},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 522, col: 1, offset: 19621},
			expr: &actionExpr{
				pos: position{line: 523, col: 5, offset: 19630},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 523, col: 5, offset: 19630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 523, col: 5, offset: 19630},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 9, offset: 19634},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 18, offset: 19643},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 523, col: 21, offset: 19646},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 25, offset: 19650},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 28, offset: 19653},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 523, col: 34, offset: 19659},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 523, col: 34, offset: 19659},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 523, col: 45, offset: 19670},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 51, offset: 19676},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 523, col: 54, offset: 19679},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 526, col: 1, offset: 19775},
			expr: &choiceExpr{
				pos: position{line: 527, col: 5, offset: 19788},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 527, col: 5, offset: 19788},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 19797},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 528, col: 5, offset: 19797},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 528, col: 5, offset: 19797},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 14, offset: 19806},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 17, offset: 19809},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 21, offset: 19813},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 24, offset: 19816},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 33, offset: 19825},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 47, offset: 19839},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 50, offset: 19842},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 54, offset: 19846},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 57, offset: 19849},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 62, offset: 19854},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 67, offset: 19859},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 70, offset: 19862},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 528, col: 74, offset: 19866},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 528, col: 80, offset: 19872},
										expr: &ruleRefExpr{
											pos:  position{line: 528, col: 80, offset: 19872},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 20120},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 532, col: 5, offset: 20120},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 532, col: 5, offset: 20120},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 22, offset: 20137},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 25, offset: 20140},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 29, offset: 20144},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 32, offset: 20147},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 37, offset: 20152},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 42, offset: 20157},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 45, offset: 20160},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 49, offset: 20164},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 52, offset: 20167},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 61, offset: 20176},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 75, offset: 20190},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 78, offset: 20193},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 82, offset: 20197},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 85, offset: 20200},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 90, offset: 20205},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 95, offset: 20210},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 98, offset: 20213},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 532, col: 102, offset: 20217},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 532, col: 108, offset: 20223},
										expr: &ruleRefExpr{
											pos:  position{line: 532, col: 108, offset: 20223},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 20485},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 536, col: 5, offset: 20485},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 536, col: 5, offset: 20485},
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 6, offset: 20486},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 536, col: 16, offset: 20496},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 19, offset: 20499},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 536, col: 34, offset: 20514},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 536, col: 37, offset: 20517},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 536, col: 41, offset: 20521},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 536, col: 44, offset: 20524},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 49, offset: 20529},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 536, col: 62, offset: 20542},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 536, col: 65, offset: 20545},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 536, col: 69, offset: 20549},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 536, col: 75, offset: 20555},
										expr: &ruleRefExpr{
											pos:  position{line: 536, col: 75, offset: 20555},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 539, col: 1, offset: 20675},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 20692},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 20692},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 540, col: 5, offset: 20692},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 7, offset: 20694},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 20740},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 542, col: 1, offset: 20754},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 20763},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 20763},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 5, offset: 20763},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 12, offset: 20770},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 543, col: 15, offset: 20773},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 19, offset: 20777},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 22, offset: 20780},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 30, offset: 20788},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 38, offset: 20796},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 41, offset: 20799},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 543, col: 45, offset: 20803},
								expr: &seqExpr{
									pos: position{line: 543, col: 46, offset: 20804},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 543, col: 46, offset: 20804},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 543, col: 50, offset: 20808},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 543, col: 55, offset: 20813},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 543, col: 55, offset: 20813},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 543, col: 66, offset: 20824},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 543, col: 72, offset: 20830},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 543, col: 77, offset: 20835},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 550, col: 1, offset: 21075},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 21087},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 551, col: 5, offset: 21087},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 5, offset: 21098},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 21107},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 553, col: 5, offset: 21107},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 7, offset: 21109},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 556, col: 1, offset: 21200},
			expr: &choiceExpr{
				pos: position{line: 557, col: 5, offset: 21218},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 557, col: 5, offset: 21218},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 558, col: 5, offset: 21228},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 558, col: 5, offset: 21228},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 559, col: 1, offset: 21263},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 21273},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 21273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 21273},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 11, offset: 21279},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 16, offset: 21284},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 21, offset: 21289},
								expr: &actionExpr{
									pos: position{line: 560, col: 22, offset: 21290},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 560, col: 22, offset: 21290},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 560, col: 22, offset: 21290},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 560, col: 25, offset: 21293},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 560, col: 29, offset: 21297},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 32, offset: 21300},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 34, offset: 21302},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 563, col: 1, offset: 21409},
			expr: &actionExpr{
				pos: position{line: 564, col: 5, offset: 21423},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 564, col: 5, offset: 21423},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 564, col: 5, offset: 21423},
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 6, offset: 21424},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 10, offset: 21428},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 16, offset: 21434},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 27, offset: 21445},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 564, col: 32, offset: 21450},
								expr: &ruleRefExpr{
									pos:  position{line: 564, col: 33, offset: 21451},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 567, col: 1, offset: 21518},
			expr: &choiceExpr{
				pos: position{line: 568, col: 5, offset: 21528},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 21528},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 568, col: 5, offset: 21528},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 568, col: 5, offset: 21528},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 568, col: 9, offset: 21532},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 14, offset: 21537},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 27, offset: 21550},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 568, col: 30, offset: 21553},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 34, offset: 21557},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 568, col: 37, offset: 21560},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 568, col: 40, offset: 21563},
										expr: &ruleRefExpr{
											pos:  position{line: 568, col: 40, offset: 21563},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 568, col: 54, offset: 21577},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 21708},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 571, col: 5, offset: 21708},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 571, col: 5, offset: 21708},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 9, offset: 21712},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 571, col: 12, offset: 21715},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 16, offset: 21719},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 571, col: 19, offset: 21722},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 22, offset: 21725},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 571, col: 35, offset: 21738},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 21869},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 574, col: 5, offset: 21869},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 574, col: 5, offset: 21869},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 574, col: 9, offset: 21873},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 574, col: 14, offset: 21878},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 574, col: 19, offset: 21883},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 21932},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 575, col: 5, offset: 21932},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 575, col: 5, offset: 21932},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 575, col: 9, offset: 21936},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 575, col: 12, offset: 21939},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 576, col: 1, offset: 21989},
			expr: &choiceExpr{
				pos: position{line: 577, col: 5, offset: 22001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 577, col: 5, offset: 22001},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 5, offset: 22012},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 5, offset: 22022},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 580, col: 5, offset: 22030},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 581, col: 5, offset: 22038},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 582, col: 5, offset: 22050},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 582, col: 5, offset: 22050},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 582, col: 5, offset: 22050},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 9, offset: 22054},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 582, col: 12, offset: 22057},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 582, col: 17, offset: 22062},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 26, offset: 22071},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 582, col: 29, offset: 22074},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 583, col: 5, offset: 22103},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 583, col: 5, offset: 22103},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 583, col: 5, offset: 22103},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 9, offset: 22107},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 583, col: 12, offset: 22110},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 583, col: 17, offset: 22115},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 22, offset: 22120},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 583, col: 25, offset: 22123},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 584, col: 1, offset: 22148},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 22161},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 22161},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 22161},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 12, offset: 22168},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 14, offset: 22170},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 20, offset: 22176},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 26, offset: 22182},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 585, col: 33, offset: 22189},
								expr: &ruleRefExpr{
									pos:  position{line: 585, col: 33, offset: 22189},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 41, offset: 22197},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 585, col: 44, offset: 22200},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 48, offset: 22204},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 51, offset: 22207},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 56, offset: 22212},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 588, col: 1, offset: 22340},
			expr: &actionExpr{
				pos: position{line: 589, col: 5, offset: 22351},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 589, col: 5, offset: 22351},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 589, col: 5, offset: 22351},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 9, offset: 22355},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 12, offset: 22358},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 18, offset: 22364},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 30, offset: 22376},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 589, col: 33, offset: 22379},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 592, col: 1, offset: 22468},
			expr: &choiceExpr{
				pos: position{line: 593, col: 5, offset: 22484},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 22484},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 593, col: 5, offset: 22484},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 593, col: 5, offset: 22484},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 593, col: 11, offset: 22490},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 593, col: 22, offset: 22501},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 593, col: 27, offset: 22506},
										expr: &ruleRefExpr{
											pos:  position{line: 593, col: 27, offset: 22506},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 596, col: 5, offset: 22604},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 5, offset: 22604},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 597, col: 1, offset: 22639},
			expr: &actionExpr{
				pos: position{line: 597, col: 18, offset: 22656},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 597, col: 18, offset: 22656},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 597, col: 18, offset: 22656},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 597, col: 21, offset: 22659},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 25, offset: 22663},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 28, offset: 22666},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 33, offset: 22671},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 598, col: 1, offset: 22703},
			expr: &choiceExpr{
				pos: position{line: 599, col: 5, offset: 22718},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 599, col: 5, offset: 22718},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 600, col: 5, offset: 22729},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 601, col: 5, offset: 22739},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 602, col: 1, offset: 22750},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 22761},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 22761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 5, offset: 22761},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 11, offset: 22767},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 14, offset: 22770},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 19, offset: 22775},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 606, col: 1, offset: 22860},
			expr: &actionExpr{
				pos: position{line: 607, col: 5, offset: 22870},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 607, col: 5, offset: 22870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 22870},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 10, offset: 22875},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 20, offset: 22885},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 607, col: 23, offset: 22888},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 27, offset: 22892},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 30, offset: 22895},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 36, offset: 22901},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 610, col: 1, offset: 23000},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 23010},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 23010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 611, col: 5, offset: 23010},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 9, offset: 23014},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 12, offset: 23017},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 18, offset: 23023},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 30, offset: 23035},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 611, col: 33, offset: 23038},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 614, col: 1, offset: 23126},
			expr: &actionExpr{
				pos: position{line: 615, col: 5, offset: 23134},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 615, col: 5, offset: 23134},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 615, col: 5, offset: 23134},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 10, offset: 23139},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 13, offset: 23142},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 19, offset: 23148},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 31, offset: 23160},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 615, col: 34, offset: 23163},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 618, col: 1, offset: 23250},
			expr: &choiceExpr{
				pos: position{line: 619, col: 5, offset: 23266},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 23266},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 23266},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 619, col: 5, offset: 23266},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 11, offset: 23272},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 619, col: 22, offset: 23283},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 619, col: 27, offset: 23288},
										expr: &actionExpr{
											pos: position{line: 619, col: 28, offset: 23289},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 619, col: 28, offset: 23289},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 619, col: 28, offset: 23289},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 619, col: 31, offset: 23292},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 619, col: 35, offset: 23296},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 619, col: 38, offset: 23299},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 619, col: 40, offset: 23301},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 23418},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 622, col: 5, offset: 23418},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 623, col: 1, offset: 23453},
			expr: &choiceExpr{
				pos: position{line: 624, col: 5, offset: 23468},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 624, col: 5, offset: 23468},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 23479},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 625, col: 5, offset: 23479},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 7, offset: 23481},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 626, col: 1, offset: 23556},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 23564},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 627, col: 5, offset: 23564},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 627, col: 5, offset: 23564},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 10, offset: 23569},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 627, col: 13, offset: 23572},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 19, offset: 23578},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 27, offset: 23586},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 627, col: 30, offset: 23589},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 630, col: 1, offset: 23678},
			expr: &choiceExpr{
				pos: position{line: 631, col: 5, offset: 23690},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 631, col: 5, offset: 23690},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 631, col: 5, offset: 23690},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 631, col: 5, offset: 23690},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 631, col: 11, offset: 23696},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 631, col: 17, offset: 23702},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 631, col: 22, offset: 23707},
										expr: &ruleRefExpr{
											pos:  position{line: 631, col: 22, offset: 23707},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 634, col: 5, offset: 23800},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 634, col: 5, offset: 23800},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 635, col: 1, offset: 23835},
			expr: &actionExpr{
				pos: position{line: 635, col: 13, offset: 23847},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 635, col: 13, offset: 23847},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 635, col: 13, offset: 23847},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 635, col: 16, offset: 23850},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 20, offset: 23854},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 635, col: 23, offset: 23857},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 25, offset: 23859},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 636, col: 1, offset: 23883},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 23893},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 637, col: 5, offset: 23893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 23893},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 9, offset: 23897},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 14, offset: 23902},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 637, col: 17, offset: 23905},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 21, offset: 23909},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 24, offset: 23912},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 30, offset: 23918},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 640, col: 1, offset: 24000},
			expr: &actionExpr{
				pos: position{line: 641, col: 5, offset: 24010},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 641, col: 5, offset: 24010},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 24010},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 15, offset: 24020},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 642, col: 5, offset: 24034},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 642, col: 10, offset: 24039},
								expr: &ruleRefExpr{
									pos:  position{line: 642, col: 10, offset: 24039},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 24052},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 643, col: 11, offset: 24058},
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 11, offset: 24058},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 24072},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 11, offset: 24078},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 11, offset: 24078},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 24092},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 645, col: 13, offset: 24100},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 13, offset: 24100},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 24116},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 646, col: 12, offset: 24123},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 12, offset: 24123},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 24138},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 647, col: 13, offset: 24146},
								expr: &ruleRefExpr{
									pos:  position{line: 647, col: 13, offset: 24146},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 24162},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 11, offset: 24168},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 652, col: 1, offset: 24392},
			expr: &choiceExpr{
				pos: position{line: 653, col: 5, offset: 24406},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 24406},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 24406},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 653, col: 5, offset: 24406},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 653, col: 12, offset: 24413},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 653, col: 14, offset: 24415},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 654, col: 5, offset: 24443},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 654, col: 5, offset: 24443},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 654, col: 5, offset: 24443},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 654, col: 12, offset: 24450},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 654, col: 14, offset: 24452},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 654, col: 26, offset: 24464},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 655, col: 1, offset: 24507},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 24525},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 24525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 24525},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 9, offset: 24529},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 14, offset: 24534},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 656, col: 18, offset: 24538},
								expr: &seqExpr{
									pos: position{line: 656, col: 19, offset: 24539},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 656, col: 19, offset: 24539},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 21, offset: 24541},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 24, offset: 24544},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 656, col: 26, offset: 24546},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 663, col: 1, offset: 24736},
			expr: &actionExpr{
				pos: position{line: 664, col: 5, offset: 24755},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 664, col: 5, offset: 24755},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 24755},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 24761},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 25, offset: 24775},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 664, col: 30, offset: 24780},
								expr: &actionExpr{
									pos: position{line: 664, col: 31, offset: 24781},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 664, col: 31, offset: 24781},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 664, col: 31, offset: 24781},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 664, col: 34, offset: 24784},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 664, col: 38, offset: 24788},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 41, offset: 24791},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 46, offset: 24796},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 667, col: 1, offset: 24915},
			expr: &choiceExpr{
				pos: position{line: 668, col: 5, offset: 24927},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 24927},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 668, col: 5, offset: 24927},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 668, col: 5, offset: 24927},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 668, col: 7, offset: 24929},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 668, col: 12, offset: 24934},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 668, col: 14, offset: 24936},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 668, col: 20, offset: 24942},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 668, col: 29, offset: 24951},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 668, col: 35, offset: 24957},
										expr: &ruleRefExpr{
											pos:  position{line: 668, col: 35, offset: 24957},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 25052},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 25052},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 671, col: 5, offset: 25052},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 671, col: 7, offset: 25054},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 671, col: 12, offset: 25059},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 671, col: 14, offset: 25061},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 672, col: 1, offset: 25085},
			expr: &choiceExpr{
				pos: position{line: 673, col: 5, offset: 25098},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 25098},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 25098},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 673, col: 5, offset: 25098},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 7, offset: 25100},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 10, offset: 25103},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 673, col: 12, offset: 25105},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 15, offset: 25108},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 25136},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 25136},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 674, col: 5, offset: 25136},
									name: "_",
								},
								&notExpr{
									pos: position{line: 674, col: 7, offset: 25138},
									expr: &seqExpr{
										pos: position{line: 674, col: 9, offset: 25140},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 674, col: 9, offset: 25140},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 674, col: 27, offset: 25158},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 674, col: 30, offset: 25161},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 674, col: 33, offset: 25164},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 675, col: 1, offset: 25188},
			expr: &ruleRefExpr{
				pos:  position{line: 676, col: 5, offset: 25201},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 677, col: 1, offset: 25206},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 25219},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 678, col: 5, offset: 25219},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 5, offset: 25219},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 25225},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 678, col: 19, offset: 25233},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 678, col: 24, offset: 25238},
								expr: &actionExpr{
									pos: position{line: 678, col: 25, offset: 25239},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 678, col: 25, offset: 25239},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 678, col: 30, offset: 25244},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 681, col: 1, offset: 25357},
			expr: &actionExpr{
				pos: position{line: 682, col: 5, offset: 25369},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 682, col: 5, offset: 25369},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 682, col: 5, offset: 25369},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 11, offset: 25375},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 24, offset: 25388},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 26, offset: 25390},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 31, offset: 25395},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 33, offset: 25397},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 39, offset: 25403},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 48, offset: 25412},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 682, col: 54, offset: 25418},
								expr: &ruleRefExpr{
									pos:  position{line: 682, col: 54, offset: 25418},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 64, offset: 25428},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 66, offset: 25430},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 69, offset: 25433},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 71, offset: 25435},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 79, offset: 25443},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 87, offset: 25451},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 682, col: 90, offset: 25454},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 94, offset: 25458},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 682, col: 97, offset: 25461},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 106, offset: 25470},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 685, col: 1, offset: 25619},
			expr: &choiceExpr{
				pos: position{line: 686, col: 5, offset: 25636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 25636},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 25636},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 686, col: 5, offset: 25636},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 686, col: 7, offset: 25638},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 686, col: 14, offset: 25645},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 686, col: 14, offset: 25645},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 21, offset: 25652},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 29, offset: 25660},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 36, offset: 25667},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 25700},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 687, col: 5, offset: 25700},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 688, col: 1, offset: 25727},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 25740},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 25740},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 689, col: 5, offset: 25740},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 7, offset: 25742},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 13, offset: 25748},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 15, offset: 25750},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 20, offset: 25755},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 690, col: 1, offset: 25790},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 25805},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 691, col: 5, offset: 25805},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 5, offset: 25805},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 7, offset: 25807},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 13, offset: 25813},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 15, offset: 25815},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 18, offset: 25818},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 20, offset: 25820},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 28, offset: 25828},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 692, col: 1, offset: 25863},
			expr: &actionExpr{
				pos: position{line: 693, col: 5, offset: 25877},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 693, col: 5, offset: 25877},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 693, col: 5, offset: 25877},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 7, offset: 25879},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 14, offset: 25886},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 16, offset: 25888},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 21, offset: 25893},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 694, col: 1, offset: 25928},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 25943},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 25943},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 695, col: 5, offset: 25943},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 7, offset: 25945},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 13, offset: 25951},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 15, offset: 25953},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 18, offset: 25956},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 695, col: 20, offset: 25958},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 25, offset: 25963},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 31, offset: 25969},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 37, offset: 25975},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 698, col: 1, offset: 26084},
			expr: &choiceExpr{
				pos: position{line: 699, col: 5, offset: 26097},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 26097},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 26097},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 699, col: 5, offset: 26097},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 7, offset: 26099},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 699, col: 12, offset: 26104},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 699, col: 12, offset: 26104},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 699, col: 18, offset: 26110},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 26140},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 700, col: 5, offset: 26140},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 701, col: 1, offset: 26165},
			expr: &choiceExpr{
				pos: position{line: 702, col: 5, offset: 26178},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 26178},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 702, col: 5, offset: 26178},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 702, col: 5, offset: 26178},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 702, col: 7, offset: 26180},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 702, col: 13, offset: 26186},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 702, col: 15, offset: 26188},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 702, col: 21, offset: 26194},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 26225},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 703, col: 5, offset: 26225},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 704, col: 1, offset: 26246},
			expr: &actionExpr{
				pos: position{line: 704, col: 10, offset: 26255},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 704, col: 10, offset: 26255},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 705, col: 1, offset: 26290},
			expr: &actionExpr{
				pos: position{line: 705, col: 6, offset: 26295},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 705, col: 6, offset: 26295},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 706, col: 1, offset: 26322},
			expr: &actionExpr{
				pos: position{line: 706, col: 8, offset: 26329},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 706, col: 8, offset: 26329},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 707, col: 1, offset: 26360},
			expr: &actionExpr{
				pos: position{line: 707, col: 8, offset: 26367},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 707, col: 8, offset: 26367},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 708, col: 1, offset: 26398},
			expr: &actionExpr{
				pos: position{line: 708, col: 9, offset: 26406},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 708, col: 9, offset: 26406},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 709, col: 1, offset: 26439},
			expr: &actionExpr{
				pos: position{line: 709, col: 9, offset: 26447},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 709, col: 9, offset: 26447},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 710, col: 1, offset: 26480},
			expr: &actionExpr{
				pos: position{line: 710, col: 6, offset: 26485},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 710, col: 6, offset: 26485},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 711, col: 1, offset: 26512},
			expr: &actionExpr{
				pos: position{line: 711, col: 10, offset: 26521},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 711, col: 10, offset: 26521},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 712, col: 1, offset: 26556},
			expr: &actionExpr{
				pos: position{line: 712, col: 9, offset: 26564},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 712, col: 9, offset: 26564},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 713, col: 1, offset: 26597},
			expr: &actionExpr{
				pos: position{line: 713, col: 6, offset: 26602},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 713, col: 6, offset: 26602},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 714, col: 1, offset: 26629},
			expr: &actionExpr{
				pos: position{line: 714, col: 9, offset: 26637},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 714, col: 9, offset: 26637},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 715, col: 1, offset: 26670},
			expr: &actionExpr{
				pos: position{line: 715, col: 7, offset: 26676},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 715, col: 7, offset: 26676},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 716, col: 1, offset: 26705},
			expr: &actionExpr{
				pos: position{line: 716, col: 8, offset: 26712},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 716, col: 8, offset: 26712},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 717, col: 1, offset: 26743},
			expr: &actionExpr{
				pos: position{line: 717, col: 8, offset: 26750},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 717, col: 8, offset: 26750},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 718, col: 1, offset: 26781},
			expr: &actionExpr{
				pos: position{line: 718, col: 8, offset: 26788},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 718, col: 8, offset: 26788},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 719, col: 1, offset: 26819},
			expr: &actionExpr{
				pos: position{line: 719, col: 9, offset: 26827},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 719, col: 9, offset: 26827},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 720, col: 1, offset: 26860},
			expr: &actionExpr{
				pos: position{line: 720, col: 9, offset: 26868},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 720, col: 9, offset: 26868},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 721, col: 1, offset: 26901},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 26923},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 26923},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 14, offset: 26932},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 19, offset: 26937},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 26, offset: 26944},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 33, offset: 26951},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 41, offset: 26959},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 49, offset: 26967},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 58, offset: 26976},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 66, offset: 26984},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 74, offset: 26992},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 723, col: 1, offset: 26995},
			expr: &choiceExpr{
				pos: position{line: 724, col: 5, offset: 27007},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 27007},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 27023},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 27043},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 27061},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 728, col: 5, offset: 27080},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 729, col: 5, offset: 27097},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 27110},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 27119},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 27136},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 733, col: 5, offset: 27155},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 27174},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 735, col: 1, offset: 27186},
			expr: &choiceExpr{
				pos: position{line: 736, col: 5, offset: 27204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 27204},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 27204},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 736, col: 5, offset: 27204},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 7, offset: 27206},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 736, col: 14, offset: 27213},
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 15, offset: 27214},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 27329},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 739, col: 5, offset: 27329},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 7, offset: 27331},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 742, col: 1, offset: 27434},
			expr: &choiceExpr{
				pos: position{line: 743, col: 5, offset: 27453},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 27453},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 27453},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 743, col: 5, offset: 27453},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 7, offset: 27455},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 743, col: 11, offset: 27459},
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 12, offset: 27460},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 27574},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 746, col: 5, offset: 27574},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 7, offset: 27576},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 749, col: 1, offset: 27674},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 27691},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 750, col: 5, offset: 27691},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 750, col: 7, offset: 27693},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 753, col: 1, offset: 27805},
			expr: &actionExpr{
				pos: position{line: 754, col: 5, offset: 27824},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 754, col: 5, offset: 27824},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 754, col: 7, offset: 27826},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 757, col: 1, offset: 27934},
			expr: &choiceExpr{
				pos: position{line: 758, col: 5, offset: 27953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 758, col: 5, offset: 27953},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 758, col: 5, offset: 27953},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 28056},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 759, col: 5, offset: 28056},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 760, col: 1, offset: 28157},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 28173},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 761, col: 5, offset: 28173},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 762, col: 1, offset: 28268},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 28285},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 763, col: 5, offset: 28285},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 763, col: 5, offset: 28285},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 763, col: 10, offset: 28290},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 10, offset: 28290},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 766, col: 1, offset: 28404},
			expr: &actionExpr{
				pos: position{line: 767, col: 5, offset: 28420},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 767, col: 5, offset: 28420},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 767, col: 5, offset: 28420},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 767, col: 9, offset: 28424},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 13, offset: 28428},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 767, col: 18, offset: 28433},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 770, col: 1, offset: 28521},
			expr: &choiceExpr{
				pos: position{line: 771, col: 5, offset: 28534},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 771, col: 5, offset: 28534},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 28550},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 772, col: 5, offset: 28550},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 9, offset: 28554},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 775, col: 1, offset: 28652},
			expr: &choiceExpr{
				pos: position{line: 776, col: 5, offset: 28661},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 776, col: 5, offset: 28661},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 777, col: 5, offset: 28677},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 778, col: 5, offset: 28695},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 779, col: 1, offset: 28707},
			expr: &choiceExpr{
				pos: position{line: 780, col: 5, offset: 28725},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 780, col: 5, offset: 28725},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 780, col: 5, offset: 28725},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 780, col: 5, offset: 28725},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 780, col: 10, offset: 28730},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 780, col: 24, offset: 28744},
									expr: &ruleRefExpr{
										pos:  position{line: 780, col: 25, offset: 28745},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 28785},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 28785},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 28785},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 10, offset: 28790},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 781, col: 25, offset: 28805},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 781, col: 29, offset: 28809},
										expr: &seqExpr{
											pos: position{line: 781, col: 30, offset: 28810},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 781, col: 30, offset: 28810},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 781, col: 33, offset: 28813},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 781, col: 37, offset: 28817},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 781, col: 40, offset: 28820},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 29052},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 787, col: 5, offset: 29052},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 10, offset: 29057},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 790, col: 5, offset: 29157},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 790, col: 5, offset: 29157},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 790, col: 5, offset: 29157},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 790, col: 9, offset: 29161},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 790, col: 12, offset: 29164},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 790, col: 14, offset: 29166},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 790, col: 24, offset: 29176},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 791, col: 1, offset: 29198},
			expr: &actionExpr{
				pos: position{line: 792, col: 5, offset: 29212},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 792, col: 5, offset: 29212},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 792, col: 11, offset: 29218},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 795, col: 1, offset: 29313},
			expr: &actionExpr{
				pos: position{line: 796, col: 5, offset: 29326},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 796, col: 5, offset: 29326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 796, col: 5, offset: 29326},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 796, col: 11, offset: 29332},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 796, col: 16, offset: 29337},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 796, col: 21, offset: 29342},
								expr: &ruleRefExpr{
									pos:  position{line: 796, col: 21, offset: 29342},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 799, col: 1, offset: 29434},
			expr: &actionExpr{
				pos: position{line: 799, col: 16, offset: 29449},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 799, col: 16, offset: 29449},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 799, col: 16, offset: 29449},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 799, col: 19, offset: 29452},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 23, offset: 29456},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 799, col: 26, offset: 29459},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 30, offset: 29463},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 800, col: 1, offset: 29488},
			expr: &choiceExpr{
				pos: position{line: 801, col: 5, offset: 29504},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 801, col: 5, offset: 29504},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 801, col: 5, offset: 29504},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 801, col: 5, offset: 29504},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 801, col: 9, offset: 29508},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 801, col: 12, offset: 29511},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 801, col: 19, offset: 29518},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 801, col: 33, offset: 29532},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 801, col: 36, offset: 29535},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 29630},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 804, col: 5, offset: 29630},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 804, col: 5, offset: 29630},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 9, offset: 29634},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 804, col: 12, offset: 29637},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 804, col: 16, offset: 29641},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 21, offset: 29646},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 804, col: 24, offset: 29649},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 807, col: 5, offset: 29738},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 807, col: 5, offset: 29738},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 807, col: 5, offset: 29738},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 807, col: 10, offset: 29743},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 807, col: 13, offset: 29746},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 17, offset: 29750},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 807, col: 22, offset: 29755},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 807, col: 25, offset: 29758},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 29846},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 29846},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 810, col: 5, offset: 29846},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 10, offset: 29851},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 810, col: 13, offset: 29854},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 21, offset: 29862},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 26, offset: 29867},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 810, col: 29, offset: 29870},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 33, offset: 29874},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 810, col: 36, offset: 29877},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 44, offset: 29885},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 49, offset: 29890},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 810, col: 52, offset: 29893},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 813, col: 1, offset: 30006},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 30026},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 814, col: 5, offset: 30026},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 814, col: 7, offset: 30028},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 820, col: 1, offset: 30243},
			expr: &choiceExpr{
				pos: position{line: 821, col: 5, offset: 30268},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 30268},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 821, col: 5, offset: 30268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 821, col: 5, offset: 30268},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 821, col: 9, offset: 30272},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 821, col: 11, offset: 30274},
										expr: &ruleRefExpr{
											pos:  position{line: 821, col: 11, offset: 30274},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 37, offset: 30300},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 822, col: 5, offset: 30326},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 822, col: 5, offset: 30326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 822, col: 5, offset: 30326},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 822, col: 9, offset: 30330},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 822, col: 11, offset: 30332},
										expr: &ruleRefExpr{
											pos:  position{line: 822, col: 11, offset: 30332},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 822, col: 37, offset: 30358},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 823, col: 1, offset: 30380},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 30409},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 824, col: 5, offset: 30409},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 30426},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 825, col: 5, offset: 30426},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 825, col: 7, offset: 30428},
								expr: &ruleRefExpr{
									pos:  position{line: 825, col: 7, offset: 30428},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 828, col: 1, offset: 30564},
			expr: &choiceExpr{
				pos: position{line: 829, col: 5, offset: 30593},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 30593},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 829, col: 5, offset: 30593},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 829, col: 5, offset: 30593},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 829, col: 10, offset: 30598},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 829, col: 12, offset: 30600},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 830, col: 5, offset: 30627},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 830, col: 5, offset: 30627},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 830, col: 5, offset: 30627},
									expr: &litMatcher{
										pos:        position{line: 830, col: 8, offset: 30630},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 830, col: 15, offset: 30637},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 830, col: 17, offset: 30639},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 831, col: 1, offset: 30674},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 30703},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 832, col: 5, offset: 30703},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 30720},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 833, col: 5, offset: 30720},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 833, col: 7, offset: 30722},
								expr: &ruleRefExpr{
									pos:  position{line: 833, col: 7, offset: 30722},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 836, col: 1, offset: 30858},
			expr: &choiceExpr{
				pos: position{line: 837, col: 5, offset: 30887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 837, col: 5, offset: 30887},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 837, col: 5, offset: 30887},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 837, col: 5, offset: 30887},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 837, col: 10, offset: 30892},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 837, col: 12, offset: 30894},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 30921},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 838, col: 5, offset: 30921},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 838, col: 5, offset: 30921},
									expr: &litMatcher{
										pos:        position{line: 838, col: 8, offset: 30924},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 838, col: 15, offset: 30931},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 838, col: 17, offset: 30933},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 839, col: 1, offset: 30968},
			expr: &actionExpr{
				pos: position{line: 840, col: 5, offset: 30985},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 840, col: 5, offset: 30985},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 840, col: 5, offset: 30985},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 840, col: 10, offset: 30990},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 840, col: 13, offset: 30993},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 840, col: 15, offset: 30995},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 840, col: 20, offset: 31000},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 840, col: 23, offset: 31003},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 843, col: 1, offset: 31212},
			expr: &actionExpr{
				pos: position{line: 844, col: 5, offset: 31230},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 844, col: 7, offset: 31232},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 844, col: 7, offset: 31232},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 17, offset: 31242},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 28, offset: 31253},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 39, offset: 31264},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 9, offset: 31281},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 18, offset: 31290},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 28, offset: 31300},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 38, offset: 31310},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 9, offset: 31326},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 21, offset: 31338},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 33, offset: 31350},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 9, offset: 31368},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 18, offset: 31377},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 9, offset: 31394},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 22, offset: 31407},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 849, col: 9, offset: 31422},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 850, col: 9, offset: 31438},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 850, col: 16, offset: 31445},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 851, col: 9, offset: 31459},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 851, col: 18, offset: 31468},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 854, col: 1, offset: 31583},
			expr: &choiceExpr{
				pos: position{line: 855, col: 5, offset: 31601},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 855, col: 5, offset: 31601},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 855, col: 5, offset: 31601},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 855, col: 5, offset: 31601},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 31607},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 855, col: 21, offset: 31617},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 855, col: 26, offset: 31622},
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 26, offset: 31622},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 31723},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 858, col: 5, offset: 31723},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 859, col: 1, offset: 31746},
			expr: &actionExpr{
				pos: position{line: 859, col: 21, offset: 31766},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 859, col: 21, offset: 31766},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 859, col: 21, offset: 31766},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 859, col: 24, offset: 31769},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 859, col: 28, offset: 31773},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 859, col: 31, offset: 31776},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 35, offset: 31780},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 860, col: 1, offset: 31810},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 31824},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 31824},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 861, col: 5, offset: 31824},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 10, offset: 31829},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 20, offset: 31839},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 23, offset: 31842},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 27, offset: 31846},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 30, offset: 31849},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 34, offset: 31853},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 864, col: 1, offset: 31934},
			expr: &choiceExpr{
				pos: position{line: 865, col: 5, offset: 31948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 865, col: 5, offset: 31948},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 866, col: 5, offset: 31967},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 867, col: 1, offset: 31980},
			expr: &actionExpr{
				pos: position{line: 867, col: 12, offset: 31991},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 867, col: 12, offset: 31991},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 867, col: 13, offset: 31992},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 867, col: 13, offset: 31992},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 867, col: 21, offset: 32000},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 867, col: 28, offset: 32007},
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 29, offset: 32008},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 868, col: 1, offset: 32045},
			expr: &actionExpr{
				pos: position{line: 868, col: 11, offset: 32055},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 868, col: 11, offset: 32055},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 868, col: 12, offset: 32056},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 868, col: 12, offset: 32056},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 868, col: 19, offset: 32063},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 868, col: 25, offset: 32069},
							expr: &ruleRefExpr{
								pos:  position{line: 868, col: 26, offset: 32070},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 869, col: 1, offset: 32106},
			expr: &actionExpr{
				pos: position{line: 869, col: 11, offset: 32116},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 869, col: 11, offset: 32116},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 869, col: 11, offset: 32116},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 869, col: 16, offset: 32121},
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 17, offset: 32122},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 870, col: 1, offset: 32158},
			expr: &actionExpr{
				pos: position{line: 870, col: 12, offset: 32169},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 870, col: 12, offset: 32169},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 870, col: 13, offset: 32170},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 870, col: 13, offset: 32170},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 870, col: 21, offset: 32178},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 870, col: 28, offset: 32185},
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 29, offset: 32186},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 871, col: 1, offset: 32223},
			expr: &actionExpr{
				pos: position{line: 871, col: 11, offset: 32233},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 871, col: 11, offset: 32233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 871, col: 11, offset: 32233},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 871, col: 16, offset: 32238},
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 17, offset: 32239},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 872, col: 1, offset: 32275},
			expr: &charClassMatcher{
				pos:        position{line: 872, col: 19, offset: 32293},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 873, col: 1, offset: 32304},
			expr: &choiceExpr{
				pos: position{line: 873, col: 18, offset: 32321},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 873, col: 18, offset: 32321},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 873, col: 36, offset: 32339},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 874, col: 1, offset: 32345},
			expr: &actionExpr{
				pos: position{line: 875, col: 5, offset: 32360},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 875, col: 5, offset: 32360},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 875, col: 8, offset: 32363},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 876, col: 1, offset: 32443},
			expr: &choiceExpr{
				pos: position{line: 877, col: 5, offset: 32462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 32462},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 32462},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 877, col: 5, offset: 32462},
									expr: &seqExpr{
										pos: position{line: 877, col: 7, offset: 32464},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 877, col: 7, offset: 32464},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 877, col: 15, offset: 32472},
												expr: &ruleRefExpr{
													pos:  position{line: 877, col: 16, offset: 32473},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 877, col: 32, offset: 32489},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 877, col: 48, offset: 32505},
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 48, offset: 32505},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 32556},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 878, col: 5, offset: 32556},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 32595},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 879, col: 5, offset: 32595},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 879, col: 5, offset: 32595},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 879, col: 10, offset: 32600},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 879, col: 13, offset: 32603},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 32634},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 880, col: 5, offset: 32634},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 32676},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 32676},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 32676},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 8, offset: 32679},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 881, col: 26, offset: 32697},
									expr: &seqExpr{
										pos: position{line: 881, col: 28, offset: 32699},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 881, col: 28, offset: 32699},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 881, col: 31, offset: 32702},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 882, col: 1, offset: 32726},
			expr: &actionExpr{
				pos: position{line: 883, col: 5, offset: 32746},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 883, col: 5, offset: 32746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 32746},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 11, offset: 32752},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 26, offset: 32767},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 883, col: 31, offset: 32772},
								expr: &actionExpr{
									pos: position{line: 883, col: 32, offset: 32773},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 883, col: 32, offset: 32773},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 883, col: 32, offset: 32773},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 883, col: 35, offset: 32776},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 883, col: 39, offset: 32780},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 883, col: 42, offset: 32783},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 883, col: 45, offset: 32786},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 886, col: 1, offset: 32899},
			expr: &choiceExpr{
				pos: position{line: 887, col: 5, offset: 32911},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 887, col: 5, offset: 32911},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 888, col: 5, offset: 32930},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 889, col: 5, offset: 32946},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 5, offset: 32954},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 891, col: 1, offset: 32963},
			expr: &actionExpr{
				pos: position{line: 892, col: 5, offset: 32972},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 892, col: 5, offset: 32972},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 892, col: 5, offset: 32972},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 892, col: 14, offset: 32981},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 892, col: 18, offset: 32985},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 895, col: 1, offset: 33104},
			expr: &seqExpr{
				pos: position{line: 895, col: 12, offset: 33115},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 895, col: 12, offset: 33115},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 895, col: 15, offset: 33118},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 19, offset: 33122},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 895, col: 22, offset: 33125},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 26, offset: 33129},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 896, col: 1, offset: 33132},
			expr: &seqExpr{
				pos: position{line: 896, col: 6, offset: 33137},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 896, col: 6, offset: 33137},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 896, col: 11, offset: 33142},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 896, col: 16, offset: 33147},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 896, col: 21, offset: 33152},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 897, col: 1, offset: 33158},
			expr: &seqExpr{
				pos: position{line: 897, col: 6, offset: 33163},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 897, col: 6, offset: 33163},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 897, col: 11, offset: 33168},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 898, col: 1, offset: 33174},
			expr: &seqExpr{
				pos: position{line: 898, col: 12, offset: 33185},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 898, col: 12, offset: 33185},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 898, col: 24, offset: 33197},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 899, col: 1, offset: 33208},
			expr: &seqExpr{
				pos: position{line: 899, col: 15, offset: 33222},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 899, col: 15, offset: 33222},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 899, col: 18, offset: 33225},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 22, offset: 33229},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 899, col: 25, offset: 33232},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 29, offset: 33236},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 899, col: 32, offset: 33239},
						expr: &seqExpr{
							pos: position{line: 899, col: 33, offset: 33240},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 899, col: 33, offset: 33240},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 899, col: 37, offset: 33244},
									expr: &charClassMatcher{
										pos:        position{line: 899, col: 37, offset: 33244},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 900, col: 1, offset: 33253},
			expr: &choiceExpr{
				pos: position{line: 901, col: 5, offset: 33268},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 901, col: 5, offset: 33268},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 902, col: 5, offset: 33276},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 902, col: 6, offset: 33277},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 902, col: 6, offset: 33277},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 902, col: 12, offset: 33283},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 902, col: 17, offset: 33288},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 902, col: 20, offset: 33291},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 902, col: 24, offset: 33295},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 902, col: 27, offset: 33298},
								expr: &seqExpr{
									pos: position{line: 902, col: 28, offset: 33299},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 902, col: 28, offset: 33299},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 902, col: 32, offset: 33303},
											expr: &charClassMatcher{
												pos:        position{line: 902, col: 32, offset: 33303},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 903, col: 1, offset: 33312},
			expr: &actionExpr{
				pos: position{line: 904, col: 5, offset: 33325},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 904, col: 5, offset: 33325},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 904, col: 5, offset: 33325},
							expr: &litMatcher{
								pos:        position{line: 904, col: 5, offset: 33325},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 904, col: 10, offset: 33330},
							expr: &seqExpr{
								pos: position{line: 904, col: 11, offset: 33331},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 33331},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 19, offset: 33339},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 907, col: 1, offset: 33464},
			expr: &seqExpr{
				pos: position{line: 907, col: 11, offset: 33474},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 907, col: 11, offset: 33474},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 907, col: 16, offset: 33479},
						expr: &seqExpr{
							pos: position{line: 907, col: 17, offset: 33480},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 907, col: 17, offset: 33480},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 907, col: 21, offset: 33484},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 908, col: 1, offset: 33491},
			expr: &choiceExpr{
				pos: position{line: 909, col: 5, offset: 33504},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 909, col: 5, offset: 33504},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 910, col: 5, offset: 33513},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 911, col: 5, offset: 33522},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 912, col: 5, offset: 33531},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 913, col: 5, offset: 33539},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 914, col: 5, offset: 33547},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 915, col: 5, offset: 33555},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 916, col: 5, offset: 33563},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 917, col: 5, offset: 33571},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 918, col: 1, offset: 33575},
			expr: &actionExpr{
				pos: position{line: 919, col: 5, offset: 33582},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 919, col: 5, offset: 33582},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 919, col: 5, offset: 33582},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 919, col: 10, offset: 33587},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 919, col: 14, offset: 33591},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 919, col: 19, offset: 33596},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 919, col: 23, offset: 33600},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 919, col: 28, offset: 33605},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 919, col: 32, offset: 33609},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 920, col: 1, offset: 33645},
			expr: &actionExpr{
				pos: position{line: 921, col: 5, offset: 33653},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 921, col: 5, offset: 33653},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 921, col: 5, offset: 33653},
							expr: &seqExpr{
								pos: position{line: 921, col: 8, offset: 33656},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 921, col: 8, offset: 33656},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 921, col: 12, offset: 33660},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 16, offset: 33664},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 921, col: 20, offset: 33668},
										expr: &choiceExpr{
											pos: position{line: 921, col: 22, offset: 33670},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 921, col: 22, offset: 33670},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 921, col: 33, offset: 33681},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 921, col: 39, offset: 33687},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 921, col: 41, offset: 33689},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 922, col: 1, offset: 33721},
			expr: &choiceExpr{
				pos: position{line: 923, col: 5, offset: 33739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 33739},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 923, col: 5, offset: 33739},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 923, col: 5, offset: 33739},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 923, col: 7, offset: 33741},
										expr: &ruleRefExpr{
											pos:  position{line: 923, col: 7, offset: 33741},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 923, col: 17, offset: 33751},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 19, offset: 33753},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 926, col: 5, offset: 33817},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 926, col: 5, offset: 33817},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 926, col: 5, offset: 33817},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 7, offset: 33819},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 926, col: 11, offset: 33823},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 926, col: 13, offset: 33825},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 13, offset: 33825},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 926, col: 23, offset: 33835},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 926, col: 28, offset: 33840},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 926, col: 30, offset: 33842},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 30, offset: 33842},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 926, col: 40, offset: 33852},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 42, offset: 33854},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 929, col: 5, offset: 33953},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 929, col: 5, offset: 33953},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 929, col: 5, offset: 33953},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 929, col: 10, offset: 33958},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 929, col: 12, offset: 33960},
										expr: &ruleRefExpr{
											pos:  position{line: 929, col: 12, offset: 33960},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 929, col: 22, offset: 33970},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 929, col: 24, offset: 33972},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 34043},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 34043},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 932, col: 5, offset: 34043},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 7, offset: 34045},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 932, col: 11, offset: 34049},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 932, col: 13, offset: 34051},
										expr: &ruleRefExpr{
											pos:  position{line: 932, col: 13, offset: 34051},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 23, offset: 34061},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 34129},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 935, col: 5, offset: 34129},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 938, col: 1, offset: 34165},
			expr: &choiceExpr{
				pos: position{line: 939, col: 5, offset: 34177},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 939, col: 5, offset: 34177},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 5, offset: 34184},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 941, col: 1, offset: 34188},
			expr: &actionExpr{
				pos: position{line: 941, col: 12, offset: 34199},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 941, col: 12, offset: 34199},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 941, col: 12, offset: 34199},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 941, col: 16, offset: 34203},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 941, col: 18, offset: 34205},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 942, col: 1, offset: 34242},
			expr: &actionExpr{
				pos: position{line: 942, col: 12, offset: 34253},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 942, col: 12, offset: 34253},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 942, col: 12, offset: 34253},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 14, offset: 34255},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 942, col: 18, offset: 34259},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 943, col: 1, offset: 34296},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 34307},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 34307},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 34307},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 7, offset: 34309},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 944, col: 10, offset: 34312},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 944, col: 14, offset: 34316},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 16, offset: 34318},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 947, col: 1, offset: 34390},
			expr: &actionExpr{
				pos: position{line: 948, col: 5, offset: 34401},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 948, col: 5, offset: 34401},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 948, col: 5, offset: 34401},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 7, offset: 34403},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 948, col: 11, offset: 34407},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 948, col: 15, offset: 34411},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 17, offset: 34413},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 951, col: 1, offset: 34475},
			expr: &actionExpr{
				pos: position{line: 952, col: 4, offset: 34483},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 952, col: 4, offset: 34483},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 952, col: 6, offset: 34485},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 953, col: 1, offset: 34524},
			expr: &choiceExpr{
				pos: position{line: 954, col: 5, offset: 34538},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 34538},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 5, offset: 34553},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 956, col: 1, offset: 34568},
			expr: &actionExpr{
				pos: position{line: 956, col: 14, offset: 34581},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 956, col: 14, offset: 34581},
					expr: &charClassMatcher{
						pos:        position{line: 956, col: 14, offset: 34581},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 957, col: 1, offset: 34619},
			expr: &actionExpr{
				pos: position{line: 958, col: 5, offset: 34638},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 958, col: 5, offset: 34638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 958, col: 5, offset: 34638},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 958, col: 9, offset: 34642},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 959, col: 1, offset: 34684},
			expr: &choiceExpr{
				pos: position{line: 960, col: 5, offset: 34700},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 960, col: 5, offset: 34700},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 960, col: 5, offset: 34700},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 960, col: 5, offset: 34700},
									expr: &litMatcher{
										pos:        position{line: 960, col: 5, offset: 34700},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 960, col: 10, offset: 34705},
									expr: &charClassMatcher{
										pos:        position{line: 960, col: 10, offset: 34705},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 960, col: 17, offset: 34712},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 960, col: 21, offset: 34716},
									expr: &charClassMatcher{
										pos:        position{line: 960, col: 21, offset: 34716},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 960, col: 28, offset: 34723},
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 28, offset: 34723},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 963, col: 5, offset: 34782},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 963, col: 5, offset: 34782},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 963, col: 5, offset: 34782},
									expr: &litMatcher{
										pos:        position{line: 963, col: 5, offset: 34782},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 963, col: 10, offset: 34787},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 963, col: 14, offset: 34791},
									expr: &charClassMatcher{
										pos:        position{line: 963, col: 14, offset: 34791},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 963, col: 21, offset: 34798},
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 21, offset: 34798},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 34857},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 966, col: 7, offset: 34859},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 966, col: 7, offset: 34859},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 966, col: 13, offset: 34865},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 967, col: 1, offset: 34907},
			expr: &seqExpr{
				pos: position{line: 967, col: 16, offset: 34922},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 967, col: 16, offset: 34922},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 967, col: 21, offset: 34927},
						expr: &charClassMatcher{
							pos:        position{line: 967, col: 21, offset: 34927},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 27, offset: 34933},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 968, col: 1, offset: 34944},
			expr: &litMatcher{
				pos:        position{line: 968, col: 7, offset: 34950},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 969, col: 1, offset: 34956},
			expr: &seqExpr{
				pos: position{line: 969, col: 12, offset: 34967},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 969, col: 12, offset: 34967},
						expr: &choiceExpr{
							pos: position{line: 969, col: 13, offset: 34968},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 969, col: 13, offset: 34968},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 969, col: 19, offset: 34974},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 969, col: 25, offset: 34980},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 970, col: 1, offset: 34986},
			expr: &actionExpr{
				pos: position{line: 970, col: 7, offset: 34992},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 970, col: 7, offset: 34992},
					expr: &ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 34992},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 971, col: 1, offset: 35033},
			expr: &charClassMatcher{
				pos:        position{line: 971, col: 12, offset: 35044},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 972, col: 1, offset: 35056},
			expr: &choiceExpr{
				pos: position{line: 973, col: 5, offset: 35073},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 35073},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 35073},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 973, col: 5, offset: 35073},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 973, col: 9, offset: 35077},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 973, col: 11, offset: 35079},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 11, offset: 35079},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 29, offset: 35097},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 974, col: 5, offset: 35134},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 974, col: 5, offset: 35134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 974, col: 5, offset: 35134},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 974, col: 9, offset: 35138},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 974, col: 11, offset: 35140},
										expr: &ruleRefExpr{
											pos:  position{line: 974, col: 11, offset: 35140},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 974, col: 29, offset: 35158},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 975, col: 1, offset: 35191},
			expr: &choiceExpr{
				pos: position{line: 976, col: 5, offset: 35212},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 35212},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 35212},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 976, col: 5, offset: 35212},
									expr: &choiceExpr{
										pos: position{line: 976, col: 7, offset: 35214},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 976, col: 7, offset: 35214},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 13, offset: 35220},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 976, col: 26, offset: 35233,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 977, col: 5, offset: 35270},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 977, col: 5, offset: 35270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 977, col: 5, offset: 35270},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 977, col: 10, offset: 35275},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 12, offset: 35277},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 978, col: 1, offset: 35310},
			expr: &actionExpr{
				pos: position{line: 979, col: 5, offset: 35322},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 979, col: 5, offset: 35322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 979, col: 5, offset: 35322},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 10, offset: 35327},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 979, col: 23, offset: 35340},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 979, col: 28, offset: 35345},
								expr: &ruleRefExpr{
									pos:  position{line: 979, col: 28, offset: 35345},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 980, col: 1, offset: 35406},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 35423},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 981, col: 5, offset: 35423},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 35440},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 983, col: 1, offset: 35451},
			expr: &actionExpr{
				pos: position{line: 983, col: 16, offset: 35466},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 983, col: 16, offset: 35466},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 984, col: 1, offset: 35514},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 35530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 35530},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 986, col: 5, offset: 35547},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 987, col: 1, offset: 35553},
			expr: &actionExpr{
				pos: position{line: 987, col: 14, offset: 35566},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 987, col: 14, offset: 35566},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 987, col: 14, offset: 35566},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 987, col: 19, offset: 35571},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 987, col: 22, offset: 35574},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 987, col: 22, offset: 35574},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 38, offset: 35590},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 988, col: 1, offset: 35624},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 35640},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 989, col: 5, offset: 35640},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 989, col: 5, offset: 35640},
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 6, offset: 35641},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 989, col: 22, offset: 35657},
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 23, offset: 35658},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 35, offset: 35670},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 40, offset: 35675},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 989, col: 50, offset: 35685},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 989, col: 55, offset: 35690},
								expr: &ruleRefExpr{
									pos:  position{line: 989, col: 55, offset: 35690},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 992, col: 1, offset: 35758},
			expr: &choiceExpr{
				pos: position{line: 992, col: 19, offset: 35776},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 19, offset: 35776},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 992, col: 34, offset: 35791},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 992, col: 34, offset: 35791},
								expr: &litMatcher{
									pos:        position{line: 992, col: 34, offset: 35791},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 992, col: 39, offset: 35796},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 993, col: 1, offset: 35808},
			expr: &seqExpr{
				pos: position{line: 993, col: 15, offset: 35822},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 993, col: 15, offset: 35822},
						expr: &ruleRefExpr{
							pos:  position{line: 993, col: 15, offset: 35822},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 993, col: 28, offset: 35835},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 994, col: 1, offset: 35839},
			expr: &choiceExpr{
				pos: position{line: 995, col: 5, offset: 35853},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 995, col: 5, offset: 35853},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 5, offset: 35870},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 997, col: 5, offset: 35882},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 997, col: 5, offset: 35882},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 998, col: 1, offset: 35905},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 35918},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 35918},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1000, col: 5, offset: 35932},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1001, col: 1, offset: 35938},
			expr: &actionExpr{
				pos: position{line: 1001, col: 11, offset: 35948},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 11, offset: 35948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1001, col: 11, offset: 35948},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1001, col: 16, offset: 35953},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1001, col: 19, offset: 35956},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1001, col: 19, offset: 35956},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1001, col: 32, offset: 35969},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1002, col: 1, offset: 36003},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 36018},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 36018},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1003, col: 5, offset: 36018},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 36046},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1004, col: 5, offset: 36046},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1005, col: 5, offset: 36076},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1006, col: 1, offset: 36081},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 36102},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 36102},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 36102},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1007, col: 5, offset: 36102},
									expr: &choiceExpr{
										pos: position{line: 1007, col: 7, offset: 36104},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1007, col: 7, offset: 36104},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1007, col: 13, offset: 36110},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1007, col: 26, offset: 36123,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 36160},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 36160},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1008, col: 5, offset: 36160},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1008, col: 10, offset: 36165},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 12, offset: 36167},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1009, col: 1, offset: 36200},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 36219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1010, col: 5, offset: 36219},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1011, col: 5, offset: 36240},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1012, col: 1, offset: 36254},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 5, offset: 36275},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1013, col: 5, offset: 36275},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 36283},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1014, col: 5, offset: 36283},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1015, col: 5, offset: 36323},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 36332},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1016, col: 5, offset: 36332},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 36361},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1017, col: 5, offset: 36361},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 36390},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1018, col: 5, offset: 36390},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 36419},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1019, col: 5, offset: 36419},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 36448},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1020, col: 5, offset: 36448},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 36477},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1021, col: 5, offset: 36477},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1022, col: 1, offset: 36502},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 5, offset: 36520},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 36520},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1023, col: 5, offset: 36520},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1024, col: 5, offset: 36548},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1024, col: 5, offset: 36548},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1025, col: 5, offset: 36576},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1026, col: 1, offset: 36581},
			expr: &choiceExpr{
				pos: position{line: 1027, col: 5, offset: 36599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1027, col: 5, offset: 36599},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1027, col: 5, offset: 36599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1027, col: 5, offset: 36599},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 9, offset: 36603},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1027, col: 16, offset: 36610},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1027, col: 16, offset: 36610},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 25, offset: 36619},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 34, offset: 36628},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 43, offset: 36637},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 36700},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 36700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1030, col: 5, offset: 36700},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1030, col: 9, offset: 36704},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 13, offset: 36708},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1030, col: 20, offset: 36715},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1030, col: 20, offset: 36715},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 29, offset: 36724},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 29, offset: 36724},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 39, offset: 36734},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 39, offset: 36734},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 49, offset: 36744},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 49, offset: 36744},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 59, offset: 36754},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 59, offset: 36754},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1030, col: 69, offset: 36764},
												expr: &ruleRefExpr{
													pos:  position{line: 1030, col: 69, offset: 36764},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 80, offset: 36775},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1033, col: 1, offset: 36828},
			expr: &actionExpr{
				pos: position{line: 1034, col: 5, offset: 36846},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 5, offset: 36846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1034, col: 5, offset: 36846},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 9, offset: 36850},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 14, offset: 36855},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 25, offset: 36866},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1034, col: 29, offset: 36870},
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 30, offset: 36871},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1035, col: 1, offset: 36905},
			expr: &actionExpr{
				pos: position{line: 1036, col: 5, offset: 36920},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1036, col: 5, offset: 36920},
					expr: &choiceExpr{
						pos: position{line: 1036, col: 6, offset: 36921},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1036, col: 6, offset: 36921},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1036, col: 15, offset: 36930},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1036, col: 15, offset: 36930},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1036, col: 20, offset: 36935,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1037, col: 1, offset: 36970},
			expr: &charClassMatcher{
				pos:        position{line: 1038, col: 5, offset: 36986},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1039, col: 1, offset: 37000},
			expr: &oneOrMoreExpr{
				pos: position{line: 1039, col: 5, offset: 37004},
				expr: &ruleRefExpr{
					pos:  position{line: 1039, col: 5, offset: 37004},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1040, col: 1, offset: 37014},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1040, col: 6, offset: 37019},
				expr: &ruleRefExpr{
					pos:  position{line: 1040, col: 6, offset: 37019},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1041, col: 1, offset: 37029},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 5, offset: 37042},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 37042},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 37057},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 37076},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1045, col: 1, offset: 37084},
			expr: &anyMatcher{
				line: 1046, col: 5, offset: 37104,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1047, col: 1, offset: 37106},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 5, offset: 37134},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1048, col: 5, offset: 37134},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1049, col: 5, offset: 37143},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1050, col: 5, offset: 37152},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1051, col: 5, offset: 37161},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1052, col: 5, offset: 37169},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1053, col: 5, offset: 37182},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1054, col: 1, offset: 37191},
			expr: &charClassMatcher{
				pos:        position{line: 1055, col: 5, offset: 37210},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1056, col: 1, offset: 37229},
			expr: &ruleRefExpr{
				pos:  position{line: 1057, col: 5, offset: 37251},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1058, col: 1, offset: 37269},
			expr: &seqExpr{
				pos: position{line: 1059, col: 5, offset: 37290},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1059, col: 5, offset: 37290},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1059, col: 10, offset: 37295},
						expr: &seqExpr{
							pos: position{line: 1059, col: 11, offset: 37296},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1059, col: 11, offset: 37296},
									expr: &litMatcher{
										pos:        position{line: 1059, col: 12, offset: 37297},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1059, col: 17, offset: 37302},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1059, col: 35, offset: 37320},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1060, col: 1, offset: 37325},
			expr: &seqExpr{
				pos: position{line: 1061, col: 5, offset: 37347},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1061, col: 5, offset: 37347},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1061, col: 10, offset: 37352},
						expr: &seqExpr{
							pos: position{line: 1061, col: 11, offset: 37353},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1061, col: 11, offset: 37353},
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 12, offset: 37354},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 27, offset: 37369},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1062, col: 1, offset: 37387},
			expr: &seqExpr{
				pos: position{line: 1062, col: 7, offset: 37393},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1062, col: 7, offset: 37393},
						expr: &ruleRefExpr{
							pos:  position{line: 1062, col: 7, offset: 37393},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 19, offset: 37405},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1063, col: 1, offset: 37420},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 7, offset: 37426},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1063, col: 7, offset: 37426},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 11, offset: 37430},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1064, col: 1, offset: 37434},
			expr: &notExpr{
				pos: position{line: 1064, col: 7, offset: 37440},
				expr: &anyMatcher{
					line: 1064, col: 8, offset: 37441,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1065, col: 1, offset: 37443},
			expr: &notExpr{
				pos: position{line: 1065, col: 8, offset: 37450},
				expr: &ruleRefExpr{
					pos:  position{line: 1065, col: 9, offset: 37451},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "body": body, "decls": nil}, nil

}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["body"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "body": body, "decls": decls}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSequential1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "FuncDecl", "name": id, "params": params, "expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, leg interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": leg}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["leg"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "Conditional", "cond": expr.([]interface{})[0], "then": map[string]interface{}{"kind": "ID", "name": "this"}, "else": map[string]interface{}{"kind": "Call", "name": "error", "args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{"kind": "Primitive", "text": "assertion failed", "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{"kind": "ID", "name": "this"}}}}}, "where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": []interface{}{map[string]interface{}{"kind": "Summarize", "keys": []interface{}{map[string]interface{}{"kind": "Assignment", "lhs": map[string]interface{}{"kind": "ID", "name": "shape"}, "rhs": map[string]interface{}{"kind": "Call", "name": "typeof", "args": []interface{}{e}, "where": nil}}}, "aggs": []interface{}{map[string]interface{}{"kind": "Assignment", "lhs": map[string]interface{}{"kind": "ID", "name": "sample"}, "rhs": map[string]interface{}{"kind": "Agg", "name": "any", "expr": e, "where": nil}}}, "limit": 0}, map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLExpr", "select": selection, "from": from, "joins": joins, "where": where, "group_by": groupby, "having": having, "order_by": orderby, "limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "style": style, "left_key": leftKey, "right_key": rightKey, "alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
