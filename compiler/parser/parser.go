// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 12, offset: 1037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 15, offset: 1040},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 19, offset: 1044},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 29, offset: 1054},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 29, offset: 1054},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 34, offset: 1059},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 37, offset: 1062},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1159},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1159},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1168},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1170},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1175},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1180},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1182},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1186},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1192},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1192},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1203},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1206},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1311},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1311},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1320},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1323},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1327},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1333},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1333},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1344},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1347},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1451},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1451},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1458},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1461},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1465},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1472},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1472},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1481},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1484},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1575},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1578},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1591},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1591},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1593},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 20, offset: 1606},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 21, offset: 1607},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1637},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1637},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 54, col: 5, offset: 1637},
									expr: &seqExpr{
										pos: position{line: 54, col: 7, offset: 1639},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 54, col: 7, offset: 1639},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 54, col: 16, offset: 1648},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 54, col: 25, offset: 1657},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 27, offset: 1659},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 39, offset: 1671},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 40, offset: 1672},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1703},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 55, col: 5, offset: 1703},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 55, col: 14, offset: 1712},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 55, col: 16, offset: 1714},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 21, offset: 1719},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1818},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1818},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 10, offset: 1823},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 1922},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1922},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 10, offset: 1927},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2015},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 64, col: 5, offset: 2015},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 10, offset: 2020},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 68, col: 1, offset: 2107},
			expr: &seqExpr{
				pos: position{line: 68, col: 11, offset: 2117},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2117},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 68, col: 15, offset: 2121},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 68, col: 15, offset: 2121},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 22, offset: 2128},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 68, col: 43, offset: 2149},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 68, col: 50, offset: 2156},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 56, offset: 2162},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 69, col: 1, offset: 2167},
			expr: &seqExpr{
				pos: position{line: 69, col: 8, offset: 2174},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 69, col: 8, offset: 2174},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 69, col: 12, offset: 2178},
						expr: &choiceExpr{
							pos: position{line: 69, col: 14, offset: 2180},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 69, col: 14, offset: 2180},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 69, col: 20, offset: 2186},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 71, col: 1, offset: 2192},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 2200},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 72, col: 5, offset: 2200},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 72, col: 5, offset: 2200},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 72, col: 8, offset: 2203},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 13, offset: 2208},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 16, offset: 2211},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 18, offset: 2213},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 74, col: 1, offset: 2243},
			expr: &actionExpr{
				pos: position{line: 75, col: 5, offset: 2257},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 75, col: 5, offset: 2257},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 75, col: 5, offset: 2257},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 8, offset: 2260},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 13, offset: 2265},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 18, offset: 2270},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 75, col: 21, offset: 2273},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 26, offset: 2278},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 29, offset: 2281},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 34, offset: 2286},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 79, col: 1, offset: 2375},
			expr: &choiceExpr{
				pos: position{line: 80, col: 5, offset: 2384},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2384},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2384},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 80, col: 5, offset: 2384},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 12, offset: 2391},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 80, col: 14, offset: 2393},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 19, offset: 2398},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2428},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 81, col: 5, offset: 2428},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 83, col: 1, offset: 2459},
			expr: &choiceExpr{
				pos: position{line: 84, col: 5, offset: 2471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2471},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2471},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 84, col: 5, offset: 2471},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 8, offset: 2474},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 15, offset: 2481},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 24, offset: 2490},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 28, offset: 2494},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 32, offset: 2498},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2609},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 87, col: 5, offset: 2609},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 87, col: 5, offset: 2609},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 87, col: 8, offset: 2612},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 15, offset: 2619},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 91, col: 1, offset: 2727},
			expr: &actionExpr{
				pos: position{line: 92, col: 5, offset: 2740},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 92, col: 5, offset: 2740},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2740},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 9, offset: 2744},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 20, offset: 2755},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 92, col: 23, offset: 2758},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 94, col: 1, offset: 2784},
			expr: &choiceExpr{
				pos: position{line: 95, col: 5, offset: 2799},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2799},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2808},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 2816},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 2825},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 100, col: 1, offset: 2835},
			expr: &seqExpr{
				pos: position{line: 100, col: 13, offset: 2847},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 100, col: 13, offset: 2847},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 100, col: 17, offset: 2851},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 100, col: 18, offset: 2852},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 100, col: 18, offset: 2852},
										expr: &litMatcher{
											pos:        position{line: 100, col: 19, offset: 2853},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 24, offset: 2858},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 38, offset: 2872},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 57, offset: 2891},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 100, col: 82, offset: 2916},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 88, offset: 2922},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 94, offset: 2928},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 100, offset: 2934},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 102, col: 1, offset: 2940},
			expr: &actionExpr{
				pos: position{line: 102, col: 14, offset: 2953},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 102, col: 15, offset: 2954},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 15, offset: 2954},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 22, offset: 2961},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 102, col: 30, offset: 2969},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 102, col: 30, offset: 2969},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 102, col: 35, offset: 2974},
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 36, offset: 2975},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 102, col: 54, offset: 2993},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 61, offset: 3000},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 67, offset: 3006},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 74, offset: 3013},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 104, col: 1, offset: 3050},
			expr: &actionExpr{
				pos: position{line: 105, col: 5, offset: 3068},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 105, col: 5, offset: 3068},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3068},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 11, offset: 3074},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 21, offset: 3084},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 26, offset: 3089},
								expr: &ruleRefExpr{
									pos:  position{line: 105, col: 26, offset: 3089},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 109, col: 1, offset: 3163},
			expr: &actionExpr{
				pos: position{line: 109, col: 16, offset: 3178},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 109, col: 16, offset: 3178},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 109, col: 16, offset: 3178},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 18, offset: 3180},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 26, offset: 3188},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 109, col: 28, offset: 3190},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 30, offset: 3192},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 111, col: 1, offset: 3242},
			expr: &actionExpr{
				pos: position{line: 112, col: 5, offset: 3256},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 112, col: 5, offset: 3256},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 3256},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 11, offset: 3262},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 5, offset: 3279},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 10, offset: 3284},
								expr: &actionExpr{
									pos: position{line: 113, col: 11, offset: 3285},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 113, col: 11, offset: 3285},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 113, col: 11, offset: 3285},
												expr: &seqExpr{
													pos: position{line: 113, col: 12, offset: 3286},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 113, col: 12, offset: 3286},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 14, offset: 3288},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 113, col: 25, offset: 3299},
												name: "_",
											},
											&notExpr{
												pos: position{line: 113, col: 27, offset: 3301},
												expr: &choiceExpr{
													pos: position{line: 113, col: 29, offset: 3303},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 113, col: 29, offset: 3303},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 39, offset: 3313},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 113, col: 59, offset: 3333},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 113, col: 64, offset: 3338},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 117, col: 1, offset: 3454},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3477},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 118, col: 5, offset: 3477},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 118, col: 5, offset: 3477},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 118, col: 14, offset: 3486},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 119, col: 5, offset: 3493},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 119, col: 5, offset: 3493},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 119, col: 10, offset: 3498},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 121, col: 1, offset: 3502},
			expr: &choiceExpr{
				pos: position{line: 122, col: 5, offset: 3519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 122, col: 5, offset: 3519},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 122, col: 5, offset: 3519},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 122, col: 6, offset: 3520},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 122, col: 6, offset: 3520},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 122, col: 6, offset: 3520},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 15, offset: 3529},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 122, col: 19, offset: 3533},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 122, col: 19, offset: 3533},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 23, offset: 3537},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 122, col: 27, offset: 3541},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 122, col: 29, offset: 3543},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 3655},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 125, col: 5, offset: 3655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 125, col: 5, offset: 3655},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 9, offset: 3659},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 125, col: 12, offset: 3662},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 17, offset: 3667},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 31, offset: 3681},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 125, col: 34, offset: 3684},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3713},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 128, col: 1, offset: 3725},
			expr: &choiceExpr{
				pos: position{line: 129, col: 5, offset: 3740},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 129, col: 5, offset: 3740},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 130, col: 5, offset: 3749},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 131, col: 5, offset: 3760},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 131, col: 5, offset: 3760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 131, col: 5, offset: 3760},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 7, offset: 3762},
										name: "SearchValue",
									},
								},
								&andExpr{
									pos: position{line: 131, col: 19, offset: 3774},
									expr: &seqExpr{
										pos: position{line: 131, col: 21, offset: 3776},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 131, col: 21, offset: 3776},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 131, col: 23, offset: 3778},
												name: "Glob",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3889},
						run: (*parser).callonSearchExpr12,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3889},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 134, col: 5, offset: 3889},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 7, offset: 3891},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 134, col: 19, offset: 3903},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 20, offset: 3904},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4019},
						run: (*parser).callonSearchExpr18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4019},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 5, offset: 4019},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 137, col: 9, offset: 4023},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 10, offset: 4024},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 5, offset: 4140},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 142, col: 1, offset: 4157},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 4177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4177},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4177},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4177},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 9, offset: 4181},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 22, offset: 4194},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 25, offset: 4197},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 28, offset: 4200},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 39, offset: 4211},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 42, offset: 4214},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 46, offset: 4218},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 6, offset: 4341},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 146, col: 6, offset: 4341},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 6, offset: 4341},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 12, offset: 4347},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 146, col: 21, offset: 4356},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 146, col: 26, offset: 4361},
										expr: &ruleRefExpr{
											pos:  position{line: 146, col: 27, offset: 4362},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 150, col: 1, offset: 4434},
			expr: &choiceExpr{
				pos: position{line: 151, col: 5, offset: 4450},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 151, col: 5, offset: 4450},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4462},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4462},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 152, col: 5, offset: 4462},
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 6, offset: 4463},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 152, col: 20, offset: 4477},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 22, offset: 4479},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 156, col: 1, offset: 4587},
			expr: &actionExpr{
				pos: position{line: 157, col: 5, offset: 4596},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 157, col: 5, offset: 4596},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 157, col: 13, offset: 4604},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 161, col: 1, offset: 4700},
			expr: &actionExpr{
				pos: position{line: 162, col: 5, offset: 4711},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 162, col: 5, offset: 4711},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 162, col: 13, offset: 4719},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 168, col: 1, offset: 4845},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 4861},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4861},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4861},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 169, col: 5, offset: 4861},
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 5, offset: 4861},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 16, offset: 4872},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 21, offset: 4877},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 33, offset: 4889},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 39, offset: 4895},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 5021},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 172, col: 5, offset: 5021},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 172, col: 5, offset: 5021},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 5, offset: 5021},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 16, offset: 5032},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 21, offset: 5037},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 36, offset: 5052},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 172, col: 41, offset: 5057},
										expr: &seqExpr{
											pos: position{line: 172, col: 42, offset: 5058},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 172, col: 42, offset: 5058},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 172, col: 44, offset: 5060},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 58, offset: 5074},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 64, offset: 5080},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 180, col: 1, offset: 5294},
			expr: &seqExpr{
				pos: position{line: 180, col: 13, offset: 5306},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 180, col: 13, offset: 5306},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 25, offset: 5318},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 182, col: 1, offset: 5321},
			expr: &actionExpr{
				pos: position{line: 183, col: 5, offset: 5337},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 183, col: 5, offset: 5337},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 183, col: 5, offset: 5337},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 13, offset: 5345},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 15, offset: 5347},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 23, offset: 5355},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 185, col: 1, offset: 5396},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5409},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5409},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5409},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 186, col: 5, offset: 5409},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 186, col: 7, offset: 5411},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 14, offset: 5418},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 186, col: 16, offset: 5420},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 25, offset: 5429},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 27, offset: 5431},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 33, offset: 5437},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5468},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 187, col: 5, offset: 5468},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 192, col: 1, offset: 5728},
			expr: &choiceExpr{
				pos: position{line: 193, col: 5, offset: 5747},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 5747},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5762},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 194, col: 5, offset: 5762},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 10, offset: 5767},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 196, col: 1, offset: 5859},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5879},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 197, col: 5, offset: 5879},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 5879},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 11, offset: 5885},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 26, offset: 5900},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 197, col: 31, offset: 5905},
								expr: &actionExpr{
									pos: position{line: 197, col: 32, offset: 5906},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 197, col: 32, offset: 5906},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 197, col: 32, offset: 5906},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 197, col: 35, offset: 5909},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 197, col: 39, offset: 5913},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 197, col: 42, offset: 5916},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 197, col: 47, offset: 5921},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 201, col: 1, offset: 6043},
			expr: &choiceExpr{
				pos: position{line: 202, col: 5, offset: 6061},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6061},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 202, col: 5, offset: 6061},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 202, col: 5, offset: 6061},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 10, offset: 6066},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 15, offset: 6071},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 202, col: 18, offset: 6074},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 23, offset: 6079},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 202, col: 26, offset: 6082},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 30, offset: 6086},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 6190},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 205, col: 5, offset: 6190},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 9, offset: 6194},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 209, col: 1, offset: 6294},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6302},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6302},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 210, col: 5, offset: 6302},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 6, offset: 6303},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 16, offset: 6313},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 19, offset: 6316},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 27, offset: 6324},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 210, col: 30, offset: 6327},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 34, offset: 6331},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 37, offset: 6334},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 42, offset: 6339},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 42, offset: 6339},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 49, offset: 6346},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 210, col: 52, offset: 6349},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 210, col: 56, offset: 6353},
							expr: &seqExpr{
								pos: position{line: 210, col: 58, offset: 6355},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 210, col: 58, offset: 6355},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 210, col: 61, offset: 6358},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 66, offset: 6363},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 72, offset: 6369},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 72, offset: 6369},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 218, col: 1, offset: 6559},
			expr: &choiceExpr{
				pos: position{line: 219, col: 5, offset: 6571},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 5, offset: 6571},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 5, offset: 6590},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 5, offset: 6603},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 223, col: 1, offset: 6612},
			expr: &actionExpr{
				pos: position{line: 223, col: 15, offset: 6626},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 223, col: 15, offset: 6626},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 223, col: 15, offset: 6626},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 6628},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 25, offset: 6636},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 27, offset: 6638},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 32, offset: 6643},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 225, col: 1, offset: 6679},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 6698},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 6698},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6698},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 11, offset: 6704},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 6718},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 30, offset: 6723},
								expr: &seqExpr{
									pos: position{line: 226, col: 31, offset: 6724},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 226, col: 31, offset: 6724},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 226, col: 34, offset: 6727},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 226, col: 38, offset: 6731},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 226, col: 41, offset: 6734},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 236, col: 1, offset: 6970},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 6983},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6983},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6996},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7008},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 7020},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 7033},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 7046},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7059},
						name: "WhereProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7073},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7086},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7098},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7113},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7126},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7140},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7153},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7168},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7180},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7193},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7206},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7222},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7236},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7249},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 259, col: 1, offset: 7260},
			expr: &actionExpr{
				pos: position{line: 260, col: 5, offset: 7273},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 260, col: 5, offset: 7273},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 5, offset: 7273},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 260, col: 12, offset: 7280},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 17, offset: 7285},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 260, col: 26, offset: 7294},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 260, col: 31, offset: 7299},
								expr: &actionExpr{
									pos: position{line: 260, col: 32, offset: 7300},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 260, col: 32, offset: 7300},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 260, col: 32, offset: 7300},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 260, col: 34, offset: 7302},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 36, offset: 7304},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 274, col: 1, offset: 7723},
			expr: &actionExpr{
				pos: position{line: 274, col: 12, offset: 7734},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 274, col: 12, offset: 7734},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 274, col: 17, offset: 7739},
						expr: &actionExpr{
							pos: position{line: 274, col: 18, offset: 7740},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 274, col: 18, offset: 7740},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 274, col: 18, offset: 7740},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 274, col: 20, offset: 7742},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 274, col: 22, offset: 7744},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 276, col: 1, offset: 7800},
			expr: &choiceExpr{
				pos: position{line: 277, col: 5, offset: 7812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 277, col: 5, offset: 7812},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 277, col: 5, offset: 7812},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 278, col: 5, offset: 7887},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 278, col: 5, offset: 7887},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 278, col: 5, offset: 7887},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 14, offset: 7896},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 278, col: 16, offset: 7898},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 278, col: 23, offset: 7905},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 278, col: 24, offset: 7906},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 278, col: 24, offset: 7906},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 278, col: 34, offset: 7916},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 280, col: 1, offset: 8030},
			expr: &actionExpr{
				pos: position{line: 281, col: 5, offset: 8042},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 281, col: 5, offset: 8042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 5, offset: 8042},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 11, offset: 8048},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 17, offset: 8054},
								expr: &actionExpr{
									pos: position{line: 281, col: 18, offset: 8055},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 281, col: 18, offset: 8055},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 281, col: 18, offset: 8055},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 20, offset: 8057},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 22, offset: 8059},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 46, offset: 8083},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 52, offset: 8089},
								expr: &seqExpr{
									pos: position{line: 281, col: 53, offset: 8090},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 281, col: 53, offset: 8090},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 281, col: 55, offset: 8092},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 66, offset: 8103},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 73, offset: 8110},
								expr: &actionExpr{
									pos: position{line: 281, col: 74, offset: 8111},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 281, col: 74, offset: 8111},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 281, col: 74, offset: 8111},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 76, offset: 8113},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 78, offset: 8115},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 295, col: 1, offset: 8460},
			expr: &actionExpr{
				pos: position{line: 296, col: 5, offset: 8472},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 296, col: 5, offset: 8472},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 5, offset: 8472},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 11, offset: 8478},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 13, offset: 8480},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 18, offset: 8485},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 300, col: 1, offset: 8580},
			expr: &actionExpr{
				pos: position{line: 301, col: 5, offset: 8593},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 301, col: 5, offset: 8593},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 5, offset: 8593},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 12, offset: 8600},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 14, offset: 8602},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 19, offset: 8607},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 305, col: 1, offset: 8698},
			expr: &choiceExpr{
				pos: position{line: 306, col: 5, offset: 8711},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 8711},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 306, col: 5, offset: 8711},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 306, col: 5, offset: 8711},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 306, col: 12, offset: 8718},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 306, col: 14, offset: 8720},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 306, col: 20, offset: 8726},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8806},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 307, col: 5, offset: 8806},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 309, col: 1, offset: 8881},
			expr: &choiceExpr{
				pos: position{line: 310, col: 5, offset: 8894},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 8894},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 310, col: 5, offset: 8894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 310, col: 5, offset: 8894},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 310, col: 12, offset: 8901},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 310, col: 14, offset: 8903},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 20, offset: 8909},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 8989},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 311, col: 5, offset: 8989},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereProc",
			pos:  position{line: 313, col: 1, offset: 9064},
			expr: &actionExpr{
				pos: position{line: 314, col: 5, offset: 9078},
				run: (*parser).callonWhereProc1,
				expr: &seqExpr{
					pos: position{line: 314, col: 5, offset: 9078},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 9078},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 13, offset: 9086},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 15, offset: 9088},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 20, offset: 9093},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 318, col: 1, offset: 9179},
			expr: &choiceExpr{
				pos: position{line: 319, col: 5, offset: 9192},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 319, col: 5, offset: 9192},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 319, col: 5, offset: 9192},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 319, col: 5, offset: 9192},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 319, col: 12, offset: 9199},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 319, col: 14, offset: 9201},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 9290},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 322, col: 5, offset: 9290},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 326, col: 1, offset: 9379},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 9391},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 327, col: 5, offset: 9391},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 5, offset: 9391},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 11, offset: 9397},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 13, offset: 9399},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 18, offset: 9404},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 331, col: 1, offset: 9495},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 9510},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 9510},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 9510},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 332, col: 14, offset: 9519},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 16, offset: 9521},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 22, offset: 9527},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 33, offset: 9538},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 332, col: 38, offset: 9543},
								expr: &actionExpr{
									pos: position{line: 332, col: 39, offset: 9544},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 332, col: 39, offset: 9544},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 332, col: 39, offset: 9544},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 332, col: 42, offset: 9547},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 332, col: 46, offset: 9551},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 49, offset: 9554},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 52, offset: 9557},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 340, col: 1, offset: 9966},
			expr: &actionExpr{
				pos: position{line: 341, col: 5, offset: 9979},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 341, col: 5, offset: 9979},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 5, offset: 9979},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 341, col: 12, offset: 9986},
							expr: &seqExpr{
								pos: position{line: 341, col: 14, offset: 9988},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 341, col: 14, offset: 9988},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 341, col: 17, offset: 9991},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 345, col: 1, offset: 10062},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 10076},
				run: (*parser).callonShapeProc1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 10076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 5, offset: 10076},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 346, col: 13, offset: 10084},
							expr: &seqExpr{
								pos: position{line: 346, col: 15, offset: 10086},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 346, col: 15, offset: 10086},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 346, col: 18, offset: 10089},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 350, col: 1, offset: 10161},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 10174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10174},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10174},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 10174},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 11, offset: 10180},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 351, col: 21, offset: 10190},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 28, offset: 10197},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 30, offset: 10199},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 33, offset: 10202},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 35, offset: 10204},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 43, offset: 10212},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 51, offset: 10220},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 351, col: 54, offset: 10223},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 58, offset: 10227},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 61, offset: 10230},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 70, offset: 10239},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 351, col: 78, offset: 10247},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 351, col: 86, offset: 10255},
										expr: &seqExpr{
											pos: position{line: 351, col: 87, offset: 10256},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 351, col: 87, offset: 10256},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 351, col: 89, offset: 10258},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10524},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10524},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 358, col: 5, offset: 10524},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 11, offset: 10530},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 358, col: 22, offset: 10541},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 29, offset: 10548},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 31, offset: 10550},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 34, offset: 10553},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 358, col: 36, offset: 10555},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 40, offset: 10559},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 358, col: 48, offset: 10567},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 358, col: 56, offset: 10575},
										expr: &seqExpr{
											pos: position{line: 358, col: 57, offset: 10576},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 358, col: 57, offset: 10576},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 358, col: 59, offset: 10578},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 366, col: 1, offset: 10832},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10846},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10846},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 10846},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 367, col: 5, offset: 10846},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 367, col: 12, offset: 10853},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10883},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10883},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10883},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 13, offset: 10891},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10921},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 10921},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 369, col: 5, offset: 10921},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 369, col: 13, offset: 10929},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10958},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10958},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10958},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 13, offset: 10966},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10996},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10996},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 373, col: 1, offset: 11032},
			expr: &choiceExpr{
				pos: position{line: 374, col: 5, offset: 11044},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 374, col: 5, offset: 11044},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 11053},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 375, col: 5, offset: 11053},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 375, col: 5, offset: 11053},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 375, col: 9, offset: 11057},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 375, col: 14, offset: 11062},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 375, col: 19, offset: 11067},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 377, col: 1, offset: 11093},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 11108},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 11108},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 11108},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 14, offset: 11117},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 16, offset: 11119},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 420, col: 1, offset: 12613},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 12630},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 421, col: 5, offset: 12630},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 421, col: 7, offset: 12632},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 425, col: 1, offset: 12732},
			expr: &choiceExpr{
				pos: position{line: 426, col: 5, offset: 12747},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12747},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 12747},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 426, col: 5, offset: 12747},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 426, col: 7, offset: 12749},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 426, col: 12, offset: 12754},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12783},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 427, col: 5, offset: 12783},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 429, col: 1, offset: 12854},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12867},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 430, col: 5, offset: 12867},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 430, col: 12, offset: 12874},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 434, col: 1, offset: 13030},
			expr: &choiceExpr{
				pos: position{line: 435, col: 5, offset: 13042},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 435, col: 5, offset: 13042},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 5, offset: 13051},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 5, offset: 13059},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 439, col: 1, offset: 13065},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 13074},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 13074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13074},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 12, offset: 13081},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 14, offset: 13083},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 19, offset: 13088},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 24, offset: 13093},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 440, col: 31, offset: 13100},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 31, offset: 13100},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 42, offset: 13111},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 440, col: 49, offset: 13118},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 49, offset: 13118},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 444, col: 1, offset: 13247},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13256},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 13256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 5, offset: 13256},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 445, col: 12, offset: 13263},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 14, offset: 13265},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 19, offset: 13270},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 447, col: 1, offset: 13301},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 13310},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 13310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 448, col: 5, offset: 13310},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 12, offset: 13317},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 14, offset: 13319},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 19, offset: 13324},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 450, col: 1, offset: 13355},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13368},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 13368},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 10, offset: 13373},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 19, offset: 13382},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 22, offset: 13385},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 22, offset: 13385},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 30, offset: 13393},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 35, offset: 13398},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 35, offset: 13398},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 46, offset: 13409},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 52, offset: 13415},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 52, offset: 13415},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 455, col: 1, offset: 13551},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 13559},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 13559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 456, col: 5, offset: 13559},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 11, offset: 13565},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 13, offset: 13567},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 17, offset: 13571},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 21, offset: 13575},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 28, offset: 13582},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 28, offset: 13582},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 39, offset: 13593},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 46, offset: 13600},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 46, offset: 13600},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 460, col: 1, offset: 13726},
			expr: &actionExpr{
				pos: position{line: 460, col: 7, offset: 13732},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 460, col: 7, offset: 13732},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 460, col: 8, offset: 13733},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 460, col: 8, offset: 13733},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 460, col: 18, offset: 13743},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 28, offset: 13753},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 462, col: 1, offset: 13790},
			expr: &choiceExpr{
				pos: position{line: 463, col: 5, offset: 13799},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 13799},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 463, col: 5, offset: 13799},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 7, offset: 13801},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 13836},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 464, col: 5, offset: 13836},
							expr: &charClassMatcher{
								pos:        position{line: 464, col: 5, offset: 13836},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 467, col: 1, offset: 13941},
			expr: &actionExpr{
				pos: position{line: 468, col: 5, offset: 13952},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 468, col: 5, offset: 13952},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 468, col: 5, offset: 13952},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 468, col: 7, offset: 13954},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 12, offset: 13959},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 14, offset: 13961},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 17, offset: 13964},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 471, col: 1, offset: 14030},
			expr: &actionExpr{
				pos: position{line: 471, col: 9, offset: 14038},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 471, col: 9, offset: 14038},
					expr: &charClassMatcher{
						pos:        position{line: 471, col: 10, offset: 14039},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 473, col: 1, offset: 14085},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 14099},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 14099},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 5, offset: 14099},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 7, offset: 14101},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 15, offset: 14109},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 17, offset: 14111},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 23, offset: 14117},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 31, offset: 14125},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 33, offset: 14127},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 38, offset: 14132},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 40, offset: 14134},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 46, offset: 14140},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 478, col: 1, offset: 14245},
			expr: &choiceExpr{
				pos: position{line: 479, col: 5, offset: 14258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 479, col: 5, offset: 14258},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 479, col: 5, offset: 14258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 479, col: 5, offset: 14258},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 479, col: 10, offset: 14263},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 479, col: 19, offset: 14272},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 479, col: 26, offset: 14279},
										expr: &ruleRefExpr{
											pos:  position{line: 479, col: 26, offset: 14279},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 479, col: 38, offset: 14291},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 479, col: 43, offset: 14296},
										expr: &ruleRefExpr{
											pos:  position{line: 479, col: 43, offset: 14296},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 482, col: 5, offset: 14405},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 482, col: 5, offset: 14405},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 10, offset: 14410},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 486, col: 1, offset: 14511},
			expr: &actionExpr{
				pos: position{line: 487, col: 5, offset: 14526},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 487, col: 5, offset: 14526},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 487, col: 5, offset: 14526},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 487, col: 9, offset: 14530},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 16, offset: 14537},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 489, col: 1, offset: 14570},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 14583},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 14583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 490, col: 5, offset: 14583},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 490, col: 9, offset: 14587},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 14, offset: 14592},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 492, col: 1, offset: 14629},
			expr: &choiceExpr{
				pos: position{line: 493, col: 5, offset: 14642},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14642},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 5, offset: 14661},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 495, col: 5, offset: 14671},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 497, col: 1, offset: 14685},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 14704},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 14704},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 498, col: 6, offset: 14705},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 498, col: 6, offset: 14705},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 498, col: 24, offset: 14723},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 498, col: 29, offset: 14728},
							expr: &choiceExpr{
								pos: position{line: 498, col: 30, offset: 14729},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 498, col: 30, offset: 14729},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 498, col: 47, offset: 14746},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 500, col: 1, offset: 14785},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14799},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14799},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 501, col: 5, offset: 14799},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 501, col: 7, offset: 14801},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 15, offset: 14809},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 17, offset: 14811},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 22, offset: 14816},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 33, offset: 14827},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 39, offset: 14833},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 505, col: 1, offset: 14943},
			expr: &actionExpr{
				pos: position{line: 506, col: 5, offset: 14957},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 506, col: 5, offset: 14957},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 506, col: 5, offset: 14957},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 506, col: 7, offset: 14959},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 506, col: 16, offset: 14968},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 506, col: 18, offset: 14970},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 22, offset: 14974},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 508, col: 1, offset: 15010},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 15026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 15026},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 509, col: 5, offset: 15026},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15060},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 510, col: 5, offset: 15060},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 15096},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 511, col: 5, offset: 15096},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 513, col: 1, offset: 15122},
			expr: &choiceExpr{
				pos: position{line: 514, col: 5, offset: 15135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 15135},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 514, col: 5, offset: 15135},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 514, col: 5, offset: 15135},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 514, col: 7, offset: 15137},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 514, col: 15, offset: 15145},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 514, col: 17, offset: 15147},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15180},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 515, col: 5, offset: 15180},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 515, col: 5, offset: 15180},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 7, offset: 15182},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 15, offset: 15190},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 17, offset: 15192},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 517, col: 1, offset: 15224},
			expr: &actionExpr{
				pos: position{line: 518, col: 5, offset: 15237},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 518, col: 5, offset: 15237},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 524, col: 1, offset: 15431},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 15447},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 15447},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 5, offset: 15447},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 15, offset: 15457},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 17, offset: 15459},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 22, offset: 15464},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 28, offset: 15470},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 32, offset: 15474},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 40, offset: 15482},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 43, offset: 15485},
								expr: &ruleRefExpr{
									pos:  position{line: 525, col: 43, offset: 15485},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 529, col: 1, offset: 15597},
			expr: &actionExpr{
				pos: position{line: 530, col: 5, offset: 15611},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 530, col: 5, offset: 15611},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 530, col: 5, offset: 15611},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 13, offset: 15619},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 15, offset: 15621},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 20, offset: 15626},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 534, col: 1, offset: 15707},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 15720},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15720},
						run: (*parser).callonOverProc2,
						expr: &seqExpr{
							pos: position{line: 535, col: 5, offset: 15720},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 535, col: 5, offset: 15720},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 12, offset: 15727},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 14, offset: 15729},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 20, offset: 15735},
										name: "Exprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 26, offset: 15741},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 535, col: 28, offset: 15743},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 35, offset: 15750},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 37, offset: 15752},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 44, offset: 15759},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 59, offset: 15774},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 62, offset: 15777},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 68, offset: 15783},
										name: "Scope",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 15949},
						run: (*parser).callonOverProc16,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 15949},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 538, col: 5, offset: 15949},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 12, offset: 15956},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 538, col: 14, offset: 15958},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 20, offset: 15964},
										name: "Exprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 26, offset: 15970},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 538, col: 29, offset: 15973},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 35, offset: 15979},
										name: "Scope",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 16083},
						run: (*parser).callonOverProc25,
						expr: &seqExpr{
							pos: position{line: 541, col: 5, offset: 16083},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 541, col: 5, offset: 16083},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 541, col: 12, offset: 16090},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 541, col: 14, offset: 16092},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 20, offset: 16098},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 545, col: 1, offset: 16197},
			expr: &actionExpr{
				pos: position{line: 545, col: 9, offset: 16205},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 545, col: 9, offset: 16205},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 9, offset: 16205},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 14, offset: 16210},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 545, col: 17, offset: 16213},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 21, offset: 16217},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 24, offset: 16220},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 28, offset: 16224},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 39, offset: 16235},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 545, col: 42, offset: 16238},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 547, col: 1, offset: 16263},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 16282},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 16282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 548, col: 5, offset: 16282},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 11, offset: 16288},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 25, offset: 16302},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 548, col: 30, offset: 16307},
								expr: &actionExpr{
									pos: position{line: 548, col: 31, offset: 16308},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 548, col: 31, offset: 16308},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 548, col: 31, offset: 16308},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 548, col: 34, offset: 16311},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 548, col: 38, offset: 16315},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 548, col: 41, offset: 16318},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 548, col: 43, offset: 16320},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 552, col: 1, offset: 16438},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 16456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 16456},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 553, col: 5, offset: 16456},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 553, col: 5, offset: 16456},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 553, col: 8, offset: 16459},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 553, col: 23, offset: 16474},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 553, col: 26, offset: 16477},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 553, col: 30, offset: 16481},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 553, col: 33, offset: 16484},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 553, col: 38, offset: 16489},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16571},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 556, col: 5, offset: 16571},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 8, offset: 16574},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 560, col: 1, offset: 16704},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 16718},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 16718},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 561, col: 5, offset: 16718},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 13, offset: 16726},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 15, offset: 16728},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 21, offset: 16734},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 565, col: 1, offset: 16818},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16830},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16830},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 566, col: 5, offset: 16830},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 7, offset: 16832},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 10, offset: 16835},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 12, offset: 16837},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 16, offset: 16841},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 568, col: 1, offset: 16866},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 16876},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 569, col: 5, offset: 16876},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 569, col: 5, offset: 16876},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 7, offset: 16878},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 10, offset: 16881},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 12, offset: 16883},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 16, offset: 16887},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 573, col: 1, offset: 16938},
			expr: &ruleRefExpr{
				pos:  position{line: 573, col: 8, offset: 16945},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 575, col: 1, offset: 16956},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 16966},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 16966},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 16966},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 11, offset: 16972},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 576, col: 16, offset: 16977},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 576, col: 21, offset: 16982},
								expr: &actionExpr{
									pos: position{line: 576, col: 22, offset: 16983},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 576, col: 22, offset: 16983},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 576, col: 22, offset: 16983},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 576, col: 25, offset: 16986},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 576, col: 29, offset: 16990},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 576, col: 32, offset: 16993},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 576, col: 37, offset: 16998},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 580, col: 1, offset: 17110},
			expr: &ruleRefExpr{
				pos:  position{line: 580, col: 13, offset: 17122},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 582, col: 1, offset: 17128},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 17143},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 17143},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 17143},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 17149},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 21, offset: 17159},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 583, col: 26, offset: 17164},
								expr: &seqExpr{
									pos: position{line: 583, col: 27, offset: 17165},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 583, col: 27, offset: 17165},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 583, col: 30, offset: 17168},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 583, col: 34, offset: 17172},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 583, col: 37, offset: 17175},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 593, col: 1, offset: 17374},
			expr: &actionExpr{
				pos: position{line: 594, col: 5, offset: 17390},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 594, col: 5, offset: 17390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 17390},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 11, offset: 17396},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 22, offset: 17407},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 594, col: 27, offset: 17412},
								expr: &actionExpr{
									pos: position{line: 594, col: 28, offset: 17413},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 594, col: 28, offset: 17413},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 594, col: 28, offset: 17413},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 594, col: 31, offset: 17416},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 594, col: 35, offset: 17420},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 594, col: 38, offset: 17423},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 594, col: 40, offset: 17425},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 598, col: 1, offset: 17536},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17551},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17551},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 5, offset: 17551},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 9, offset: 17555},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 14, offset: 17560},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 599, col: 17, offset: 17563},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 22, offset: 17568},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 25, offset: 17571},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 29, offset: 17575},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 601, col: 1, offset: 17666},
			expr: &ruleRefExpr{
				pos:  position{line: 601, col: 8, offset: 17673},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 603, col: 1, offset: 17690},
			expr: &choiceExpr{
				pos: position{line: 604, col: 5, offset: 17710},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 604, col: 5, offset: 17710},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 604, col: 5, offset: 17710},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 604, col: 5, offset: 17710},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 15, offset: 17720},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 29, offset: 17734},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 604, col: 32, offset: 17737},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 36, offset: 17741},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 604, col: 39, offset: 17744},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 50, offset: 17755},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 55, offset: 17760},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 604, col: 58, offset: 17763},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 62, offset: 17767},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 604, col: 65, offset: 17770},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 76, offset: 17781},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 607, col: 5, offset: 17921},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 609, col: 1, offset: 17936},
			expr: &actionExpr{
				pos: position{line: 610, col: 5, offset: 17954},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 610, col: 5, offset: 17954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 17954},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 11, offset: 17960},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 5, offset: 17979},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 611, col: 10, offset: 17984},
								expr: &actionExpr{
									pos: position{line: 611, col: 11, offset: 17985},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 611, col: 11, offset: 17985},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 611, col: 11, offset: 17985},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 611, col: 14, offset: 17988},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 17, offset: 17991},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 611, col: 25, offset: 17999},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 611, col: 28, offset: 18002},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 33, offset: 18007},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 615, col: 1, offset: 18125},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 18144},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 18144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 18144},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 11, offset: 18150},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 18169},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 617, col: 10, offset: 18174},
								expr: &actionExpr{
									pos: position{line: 617, col: 11, offset: 18175},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 617, col: 11, offset: 18175},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 617, col: 11, offset: 18175},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 617, col: 14, offset: 18178},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 617, col: 17, offset: 18181},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 617, col: 26, offset: 18190},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 617, col: 29, offset: 18193},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 617, col: 34, offset: 18198},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 621, col: 1, offset: 18316},
			expr: &choiceExpr{
				pos: position{line: 622, col: 5, offset: 18335},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18335},
						run: (*parser).callonComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 18335},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 18335},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 9, offset: 18339},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 22, offset: 18352},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 25, offset: 18355},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 28, offset: 18358},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 39, offset: 18369},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 42, offset: 18372},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 46, offset: 18376},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18500},
						run: (*parser).callonComparisonExpr12,
						expr: &seqExpr{
							pos: position{line: 625, col: 5, offset: 18500},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 625, col: 5, offset: 18500},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 625, col: 9, offset: 18504},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 625, col: 22, offset: 18517},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 625, col: 25, offset: 18520},
									val:        "~",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 625, col: 29, offset: 18524},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 625, col: 32, offset: 18527},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 625, col: 36, offset: 18531},
										name: "Regexp",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 5, offset: 18650},
						name: "AdditiveExpr",
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 630, col: 1, offset: 18664},
			expr: &actionExpr{
				pos: position{line: 631, col: 5, offset: 18681},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 631, col: 5, offset: 18681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 5, offset: 18681},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 11, offset: 18687},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 632, col: 5, offset: 18710},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 632, col: 10, offset: 18715},
								expr: &actionExpr{
									pos: position{line: 632, col: 11, offset: 18716},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 632, col: 11, offset: 18716},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 632, col: 11, offset: 18716},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 632, col: 14, offset: 18719},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 632, col: 17, offset: 18722},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 632, col: 34, offset: 18739},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 632, col: 37, offset: 18742},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 632, col: 42, offset: 18747},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 636, col: 1, offset: 18869},
			expr: &actionExpr{
				pos: position{line: 636, col: 20, offset: 18888},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 636, col: 21, offset: 18889},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 21, offset: 18889},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 636, col: 27, offset: 18895},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 638, col: 1, offset: 18932},
			expr: &actionExpr{
				pos: position{line: 639, col: 5, offset: 18955},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 639, col: 5, offset: 18955},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 18955},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 11, offset: 18961},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18973},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 640, col: 10, offset: 18978},
								expr: &actionExpr{
									pos: position{line: 640, col: 11, offset: 18979},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 640, col: 11, offset: 18979},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 11, offset: 18979},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 14, offset: 18982},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 17, offset: 18985},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 40, offset: 19008},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 43, offset: 19011},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 48, offset: 19016},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 644, col: 1, offset: 19127},
			expr: &actionExpr{
				pos: position{line: 644, col: 26, offset: 19152},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 644, col: 27, offset: 19153},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 644, col: 27, offset: 19153},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 644, col: 33, offset: 19159},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 644, col: 39, offset: 19165},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 646, col: 1, offset: 19202},
			expr: &choiceExpr{
				pos: position{line: 647, col: 5, offset: 19214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 647, col: 5, offset: 19214},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 647, col: 5, offset: 19214},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 647, col: 5, offset: 19214},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 647, col: 9, offset: 19218},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 647, col: 12, offset: 19221},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 647, col: 14, offset: 19223},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 650, col: 5, offset: 19332},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 652, col: 1, offset: 19346},
			expr: &choiceExpr{
				pos: position{line: 653, col: 5, offset: 19363},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 19363},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 19363},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 653, col: 5, offset: 19363},
									expr: &ruleRefExpr{
										pos:  position{line: 653, col: 6, offset: 19364},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 653, col: 14, offset: 19372},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 653, col: 18, offset: 19376},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 653, col: 21, offset: 19379},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 653, col: 23, offset: 19381},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 656, col: 5, offset: 19491},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 658, col: 1, offset: 19501},
			expr: &choiceExpr{
				pos: position{line: 659, col: 5, offset: 19514},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 659, col: 5, offset: 19514},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 659, col: 5, offset: 19514},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 659, col: 5, offset: 19514},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 659, col: 11, offset: 19520},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 659, col: 16, offset: 19525},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 659, col: 21, offset: 19530},
										expr: &ruleRefExpr{
											pos:  position{line: 659, col: 22, offset: 19531},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19602},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19602},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 662, col: 5, offset: 19602},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 19608},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 662, col: 20, offset: 19617},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 662, col: 25, offset: 19622},
										expr: &ruleRefExpr{
											pos:  position{line: 662, col: 26, offset: 19623},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 665, col: 5, offset: 19694},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 666, col: 5, offset: 19708},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 668, col: 1, offset: 19717},
			expr: &seqExpr{
				pos: position{line: 668, col: 13, offset: 19729},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 668, col: 13, offset: 19729},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 668, col: 22, offset: 19738},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 668, col: 25, offset: 19741},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 670, col: 1, offset: 19746},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 19759},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 671, col: 5, offset: 19759},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 672, col: 5, offset: 19769},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 674, col: 1, offset: 19779},
			expr: &actionExpr{
				pos: position{line: 675, col: 5, offset: 19788},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 675, col: 5, offset: 19788},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 19788},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 9, offset: 19792},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 18, offset: 19801},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 675, col: 21, offset: 19804},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 25, offset: 19808},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 28, offset: 19811},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 33, offset: 19816},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 38, offset: 19821},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 675, col: 41, offset: 19824},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 679, col: 1, offset: 19921},
			expr: &choiceExpr{
				pos: position{line: 680, col: 5, offset: 19934},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 680, col: 5, offset: 19934},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 19943},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 19943},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 681, col: 5, offset: 19943},
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 6, offset: 19944},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 681, col: 16, offset: 19954},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 19, offset: 19957},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 681, col: 34, offset: 19972},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 681, col: 37, offset: 19975},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 681, col: 41, offset: 19979},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 681, col: 44, offset: 19982},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 49, offset: 19987},
										name: "OptionalExprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 681, col: 63, offset: 20001},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 681, col: 66, offset: 20004},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 681, col: 70, offset: 20008},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 681, col: 76, offset: 20014},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 76, offset: 20014},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 685, col: 1, offset: 20135},
			expr: &choiceExpr{
				pos: position{line: 686, col: 5, offset: 20144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 20144},
						run: (*parser).callonGrep2,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 20144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 686, col: 5, offset: 20144},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 686, col: 12, offset: 20151},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 686, col: 15, offset: 20154},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 686, col: 19, offset: 20158},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 686, col: 22, offset: 20161},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 686, col: 30, offset: 20169},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 686, col: 38, offset: 20177},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 686, col: 41, offset: 20180},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20335},
						run: (*parser).callonGrep12,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20335},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 689, col: 5, offset: 20335},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 12, offset: 20342},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 689, col: 15, offset: 20345},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 19, offset: 20349},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 689, col: 22, offset: 20352},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 30, offset: 20360},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 38, offset: 20368},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 689, col: 42, offset: 20372},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 46, offset: 20376},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 689, col: 49, offset: 20379},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 54, offset: 20384},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 59, offset: 20389},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 689, col: 62, offset: 20392},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 693, col: 1, offset: 20496},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20508},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 694, col: 5, offset: 20508},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 695, col: 5, offset: 20519},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 20528},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 696, col: 5, offset: 20528},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 7, offset: 20530},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 700, col: 1, offset: 20622},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20640},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 701, col: 5, offset: 20640},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 20650},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 702, col: 5, offset: 20650},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 704, col: 1, offset: 20686},
			expr: &actionExpr{
				pos: position{line: 705, col: 5, offset: 20696},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 705, col: 5, offset: 20696},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 705, col: 5, offset: 20696},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 11, offset: 20702},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 16, offset: 20707},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 705, col: 21, offset: 20712},
								expr: &actionExpr{
									pos: position{line: 705, col: 22, offset: 20713},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 705, col: 22, offset: 20713},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 705, col: 22, offset: 20713},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 705, col: 25, offset: 20716},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 705, col: 29, offset: 20720},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 705, col: 32, offset: 20723},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 705, col: 34, offset: 20725},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 709, col: 1, offset: 20834},
			expr: &actionExpr{
				pos: position{line: 710, col: 5, offset: 20848},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 710, col: 5, offset: 20848},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 710, col: 5, offset: 20848},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 6, offset: 20849},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 710, col: 10, offset: 20853},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 16, offset: 20859},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 710, col: 27, offset: 20870},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 710, col: 32, offset: 20875},
								expr: &ruleRefExpr{
									pos:  position{line: 710, col: 33, offset: 20876},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 714, col: 1, offset: 20944},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20954},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20954},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 20954},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 715, col: 5, offset: 20954},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 715, col: 9, offset: 20958},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 14, offset: 20963},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 27, offset: 20976},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 715, col: 30, offset: 20979},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 34, offset: 20983},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 715, col: 37, offset: 20986},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 40, offset: 20989},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 715, col: 53, offset: 21002},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 21173},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 21173},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 721, col: 5, offset: 21173},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 9, offset: 21177},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 721, col: 12, offset: 21180},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 16, offset: 21184},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 19, offset: 21187},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 22, offset: 21190},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 721, col: 35, offset: 21203},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21374},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 21374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 727, col: 5, offset: 21374},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 727, col: 9, offset: 21378},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 14, offset: 21383},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 27, offset: 21396},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 727, col: 30, offset: 21399},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 34, offset: 21403},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 727, col: 37, offset: 21406},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21579},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 733, col: 5, offset: 21579},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 733, col: 5, offset: 21579},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 733, col: 9, offset: 21583},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 14, offset: 21588},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 733, col: 19, offset: 21593},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 734, col: 5, offset: 21642},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 734, col: 5, offset: 21642},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 734, col: 5, offset: 21642},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 734, col: 9, offset: 21646},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 734, col: 12, offset: 21649},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 736, col: 1, offset: 21700},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 21712},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 737, col: 5, offset: 21712},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 738, col: 5, offset: 21723},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 739, col: 5, offset: 21733},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 740, col: 5, offset: 21741},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 5, offset: 21749},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21761},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21761},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 742, col: 5, offset: 21761},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 9, offset: 21765},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 742, col: 12, offset: 21768},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 17, offset: 21773},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 22, offset: 21778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 25, offset: 21781},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 744, col: 1, offset: 21807},
			expr: &actionExpr{
				pos: position{line: 745, col: 5, offset: 21818},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 745, col: 5, offset: 21818},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 745, col: 5, offset: 21818},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 9, offset: 21822},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 745, col: 12, offset: 21825},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 18, offset: 21831},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 30, offset: 21843},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 745, col: 33, offset: 21846},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 749, col: 1, offset: 21936},
			expr: &choiceExpr{
				pos: position{line: 750, col: 5, offset: 21952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 750, col: 5, offset: 21952},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 750, col: 5, offset: 21952},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 750, col: 5, offset: 21952},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 21958},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 750, col: 22, offset: 21969},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 750, col: 27, offset: 21974},
										expr: &ruleRefExpr{
											pos:  position{line: 750, col: 27, offset: 21974},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 22073},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 753, col: 5, offset: 22073},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 755, col: 1, offset: 22109},
			expr: &actionExpr{
				pos: position{line: 755, col: 18, offset: 22126},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 755, col: 18, offset: 22126},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 755, col: 18, offset: 22126},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 21, offset: 22129},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 25, offset: 22133},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 28, offset: 22136},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 33, offset: 22141},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 757, col: 1, offset: 22174},
			expr: &choiceExpr{
				pos: position{line: 758, col: 5, offset: 22189},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 758, col: 5, offset: 22189},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 759, col: 5, offset: 22200},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 760, col: 5, offset: 22210},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 762, col: 1, offset: 22222},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 22233},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 763, col: 5, offset: 22233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 763, col: 5, offset: 22233},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 11, offset: 22239},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 763, col: 14, offset: 22242},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 19, offset: 22247},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 767, col: 1, offset: 22333},
			expr: &actionExpr{
				pos: position{line: 768, col: 5, offset: 22343},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 768, col: 5, offset: 22343},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 768, col: 5, offset: 22343},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 10, offset: 22348},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 20, offset: 22358},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 768, col: 23, offset: 22361},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 27, offset: 22365},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 30, offset: 22368},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 36, offset: 22374},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 772, col: 1, offset: 22474},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 22484},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 22484},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 773, col: 5, offset: 22484},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 9, offset: 22488},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 12, offset: 22491},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 18, offset: 22497},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 32, offset: 22511},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 773, col: 35, offset: 22514},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 777, col: 1, offset: 22604},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 22612},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 22612},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 778, col: 5, offset: 22612},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 10, offset: 22617},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 778, col: 13, offset: 22620},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 19, offset: 22626},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 33, offset: 22640},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 778, col: 36, offset: 22643},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 782, col: 1, offset: 22732},
			expr: &actionExpr{
				pos: position{line: 783, col: 5, offset: 22740},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 783, col: 5, offset: 22740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 783, col: 5, offset: 22740},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 10, offset: 22745},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 783, col: 13, offset: 22748},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 19, offset: 22754},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 27, offset: 22762},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 783, col: 30, offset: 22765},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 787, col: 1, offset: 22856},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 22868},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22868},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 22868},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 788, col: 5, offset: 22868},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 11, offset: 22874},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 788, col: 17, offset: 22880},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 788, col: 22, offset: 22885},
										expr: &ruleRefExpr{
											pos:  position{line: 788, col: 22, offset: 22885},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 791, col: 5, offset: 22979},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 791, col: 5, offset: 22979},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 794, col: 1, offset: 23016},
			expr: &actionExpr{
				pos: position{line: 794, col: 13, offset: 23028},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 794, col: 13, offset: 23028},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 794, col: 13, offset: 23028},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 794, col: 16, offset: 23031},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 20, offset: 23035},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 23, offset: 23038},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 25, offset: 23040},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 796, col: 1, offset: 23065},
			expr: &actionExpr{
				pos: position{line: 797, col: 5, offset: 23075},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 797, col: 5, offset: 23075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 797, col: 5, offset: 23075},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 9, offset: 23079},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 797, col: 14, offset: 23084},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 797, col: 17, offset: 23087},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 797, col: 21, offset: 23091},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 797, col: 24, offset: 23094},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 30, offset: 23100},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 803, col: 1, offset: 23207},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 23219},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 23219},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 804, col: 5, offset: 23219},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 15, offset: 23229},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 5, offset: 23243},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 805, col: 10, offset: 23248},
								expr: &ruleRefExpr{
									pos:  position{line: 805, col: 10, offset: 23248},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 806, col: 5, offset: 23261},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 806, col: 11, offset: 23267},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 11, offset: 23267},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 807, col: 5, offset: 23281},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 807, col: 11, offset: 23287},
								expr: &ruleRefExpr{
									pos:  position{line: 807, col: 11, offset: 23287},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 808, col: 5, offset: 23301},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 808, col: 13, offset: 23309},
								expr: &ruleRefExpr{
									pos:  position{line: 808, col: 13, offset: 23309},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 809, col: 5, offset: 23325},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 809, col: 12, offset: 23332},
								expr: &ruleRefExpr{
									pos:  position{line: 809, col: 12, offset: 23332},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 5, offset: 23347},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 810, col: 13, offset: 23355},
								expr: &ruleRefExpr{
									pos:  position{line: 810, col: 13, offset: 23355},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 811, col: 5, offset: 23371},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 23377},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 835, col: 1, offset: 23744},
			expr: &choiceExpr{
				pos: position{line: 836, col: 5, offset: 23758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 23758},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 836, col: 5, offset: 23758},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 836, col: 5, offset: 23758},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 836, col: 12, offset: 23765},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 836, col: 14, offset: 23767},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 837, col: 5, offset: 23795},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 837, col: 5, offset: 23795},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 837, col: 5, offset: 23795},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 837, col: 12, offset: 23802},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 837, col: 14, offset: 23804},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 837, col: 26, offset: 23816},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 839, col: 1, offset: 23860},
			expr: &choiceExpr{
				pos: position{line: 840, col: 5, offset: 23878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 23878},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 840, col: 5, offset: 23878},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 840, col: 5, offset: 23878},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 9, offset: 23882},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 14, offset: 23887},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 16, offset: 23889},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 19, offset: 23892},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 840, col: 21, offset: 23894},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 25, offset: 23898},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 841, col: 5, offset: 23992},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 841, col: 5, offset: 23992},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 10, offset: 23997},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 843, col: 1, offset: 24089},
			expr: &actionExpr{
				pos: position{line: 844, col: 5, offset: 24108},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 844, col: 5, offset: 24108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 844, col: 5, offset: 24108},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 11, offset: 24114},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 844, col: 25, offset: 24128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 844, col: 30, offset: 24133},
								expr: &actionExpr{
									pos: position{line: 844, col: 31, offset: 24134},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 844, col: 31, offset: 24134},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 844, col: 31, offset: 24134},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 844, col: 34, offset: 24137},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 38, offset: 24141},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 844, col: 41, offset: 24144},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 844, col: 46, offset: 24149},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 848, col: 1, offset: 24270},
			expr: &choiceExpr{
				pos: position{line: 849, col: 5, offset: 24282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24282},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 849, col: 5, offset: 24282},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 849, col: 5, offset: 24282},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 7, offset: 24284},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 12, offset: 24289},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 849, col: 14, offset: 24291},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 20, offset: 24297},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 849, col: 29, offset: 24306},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 849, col: 35, offset: 24312},
										expr: &ruleRefExpr{
											pos:  position{line: 849, col: 35, offset: 24312},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 24407},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 852, col: 5, offset: 24407},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 852, col: 5, offset: 24407},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 7, offset: 24409},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 12, offset: 24414},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 852, col: 14, offset: 24416},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 854, col: 1, offset: 24441},
			expr: &choiceExpr{
				pos: position{line: 855, col: 5, offset: 24454},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 855, col: 5, offset: 24454},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 855, col: 5, offset: 24454},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 855, col: 5, offset: 24454},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 855, col: 7, offset: 24456},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 855, col: 10, offset: 24459},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 855, col: 12, offset: 24461},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 855, col: 15, offset: 24464},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 24492},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 856, col: 5, offset: 24492},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 856, col: 5, offset: 24492},
									name: "_",
								},
								&notExpr{
									pos: position{line: 856, col: 7, offset: 24494},
									expr: &seqExpr{
										pos: position{line: 856, col: 9, offset: 24496},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 856, col: 9, offset: 24496},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 856, col: 27, offset: 24514},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 856, col: 30, offset: 24517},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 856, col: 33, offset: 24520},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 858, col: 1, offset: 24545},
			expr: &ruleRefExpr{
				pos:  position{line: 859, col: 5, offset: 24558},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 861, col: 1, offset: 24564},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 24577},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 24577},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 24577},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 11, offset: 24583},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 862, col: 19, offset: 24591},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 862, col: 24, offset: 24596},
								expr: &actionExpr{
									pos: position{line: 862, col: 25, offset: 24597},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 862, col: 25, offset: 24597},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 862, col: 30, offset: 24602},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 866, col: 1, offset: 24717},
			expr: &actionExpr{
				pos: position{line: 867, col: 5, offset: 24729},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 867, col: 5, offset: 24729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 24729},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 11, offset: 24735},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 24, offset: 24748},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 26, offset: 24750},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 31, offset: 24755},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 33, offset: 24757},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 39, offset: 24763},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 48, offset: 24772},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 867, col: 54, offset: 24778},
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 54, offset: 24778},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 64, offset: 24788},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 66, offset: 24790},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 69, offset: 24793},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 71, offset: 24795},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 79, offset: 24803},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 87, offset: 24811},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 867, col: 90, offset: 24814},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 94, offset: 24818},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 97, offset: 24821},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 106, offset: 24830},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 886, col: 1, offset: 25065},
			expr: &choiceExpr{
				pos: position{line: 887, col: 5, offset: 25082},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 887, col: 5, offset: 25082},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 887, col: 5, offset: 25082},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 887, col: 5, offset: 25082},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 7, offset: 25084},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 887, col: 14, offset: 25091},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 887, col: 14, offset: 25091},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 21, offset: 25098},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 29, offset: 25106},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 36, offset: 25113},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 25146},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 888, col: 5, offset: 25146},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 890, col: 1, offset: 25174},
			expr: &actionExpr{
				pos: position{line: 891, col: 5, offset: 25187},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 891, col: 5, offset: 25187},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 891, col: 5, offset: 25187},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 7, offset: 25189},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 13, offset: 25195},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 891, col: 15, offset: 25197},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 20, offset: 25202},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 893, col: 1, offset: 25238},
			expr: &actionExpr{
				pos: position{line: 894, col: 5, offset: 25253},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 894, col: 5, offset: 25253},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 894, col: 5, offset: 25253},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 7, offset: 25255},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 13, offset: 25261},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 15, offset: 25263},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 18, offset: 25266},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 894, col: 20, offset: 25268},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 28, offset: 25276},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 896, col: 1, offset: 25312},
			expr: &actionExpr{
				pos: position{line: 897, col: 5, offset: 25326},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 897, col: 5, offset: 25326},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 897, col: 5, offset: 25326},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 897, col: 7, offset: 25328},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 897, col: 14, offset: 25335},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 897, col: 16, offset: 25337},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 21, offset: 25342},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 899, col: 1, offset: 25378},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 25393},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 25393},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 900, col: 5, offset: 25393},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 7, offset: 25395},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 13, offset: 25401},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 15, offset: 25403},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 18, offset: 25406},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 900, col: 20, offset: 25408},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 25, offset: 25413},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 31, offset: 25419},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 37, offset: 25425},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 904, col: 1, offset: 25535},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 25548},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 905, col: 5, offset: 25548},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 905, col: 5, offset: 25548},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 905, col: 5, offset: 25548},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 905, col: 7, offset: 25550},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 905, col: 12, offset: 25555},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 905, col: 12, offset: 25555},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 905, col: 18, offset: 25561},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 906, col: 5, offset: 25591},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 906, col: 5, offset: 25591},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 908, col: 1, offset: 25617},
			expr: &choiceExpr{
				pos: position{line: 909, col: 5, offset: 25630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 909, col: 5, offset: 25630},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 909, col: 5, offset: 25630},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 909, col: 5, offset: 25630},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 909, col: 7, offset: 25632},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 909, col: 13, offset: 25638},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 909, col: 15, offset: 25640},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 21, offset: 25646},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 910, col: 5, offset: 25677},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 910, col: 5, offset: 25677},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 912, col: 1, offset: 25699},
			expr: &actionExpr{
				pos: position{line: 912, col: 10, offset: 25708},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 912, col: 10, offset: 25708},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 913, col: 1, offset: 25743},
			expr: &actionExpr{
				pos: position{line: 913, col: 6, offset: 25748},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 913, col: 6, offset: 25748},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 914, col: 1, offset: 25775},
			expr: &actionExpr{
				pos: position{line: 914, col: 8, offset: 25782},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 914, col: 8, offset: 25782},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 915, col: 1, offset: 25813},
			expr: &actionExpr{
				pos: position{line: 915, col: 8, offset: 25820},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 915, col: 8, offset: 25820},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 916, col: 1, offset: 25851},
			expr: &actionExpr{
				pos: position{line: 916, col: 9, offset: 25859},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 916, col: 9, offset: 25859},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 917, col: 1, offset: 25892},
			expr: &actionExpr{
				pos: position{line: 917, col: 9, offset: 25900},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 917, col: 9, offset: 25900},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 918, col: 1, offset: 25933},
			expr: &actionExpr{
				pos: position{line: 918, col: 6, offset: 25938},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 918, col: 6, offset: 25938},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 919, col: 1, offset: 25965},
			expr: &actionExpr{
				pos: position{line: 919, col: 10, offset: 25974},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 919, col: 10, offset: 25974},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 920, col: 1, offset: 26009},
			expr: &actionExpr{
				pos: position{line: 920, col: 9, offset: 26017},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 920, col: 9, offset: 26017},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 921, col: 1, offset: 26050},
			expr: &actionExpr{
				pos: position{line: 921, col: 6, offset: 26055},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 921, col: 6, offset: 26055},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 922, col: 1, offset: 26082},
			expr: &actionExpr{
				pos: position{line: 922, col: 9, offset: 26090},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 922, col: 9, offset: 26090},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 923, col: 1, offset: 26123},
			expr: &actionExpr{
				pos: position{line: 923, col: 7, offset: 26129},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 923, col: 7, offset: 26129},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 924, col: 1, offset: 26158},
			expr: &actionExpr{
				pos: position{line: 924, col: 8, offset: 26165},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 924, col: 8, offset: 26165},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 925, col: 1, offset: 26196},
			expr: &actionExpr{
				pos: position{line: 925, col: 8, offset: 26203},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 8, offset: 26203},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 926, col: 1, offset: 26234},
			expr: &actionExpr{
				pos: position{line: 926, col: 8, offset: 26241},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 8, offset: 26241},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 927, col: 1, offset: 26272},
			expr: &actionExpr{
				pos: position{line: 927, col: 9, offset: 26280},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 9, offset: 26280},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 928, col: 1, offset: 26313},
			expr: &actionExpr{
				pos: position{line: 928, col: 9, offset: 26321},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 9, offset: 26321},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 930, col: 1, offset: 26355},
			expr: &choiceExpr{
				pos: position{line: 931, col: 5, offset: 26377},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 931, col: 5, offset: 26377},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 14, offset: 26386},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 19, offset: 26391},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 27, offset: 26399},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 34, offset: 26406},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 42, offset: 26414},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 50, offset: 26422},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 59, offset: 26431},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 67, offset: 26439},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 75, offset: 26447},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 935, col: 1, offset: 26473},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 26485},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 936, col: 5, offset: 26485},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 937, col: 5, offset: 26501},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 5, offset: 26521},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 939, col: 5, offset: 26539},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 5, offset: 26558},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 5, offset: 26575},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 942, col: 5, offset: 26588},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 5, offset: 26597},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 5, offset: 26614},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 5, offset: 26633},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 5, offset: 26652},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 948, col: 1, offset: 26665},
			expr: &choiceExpr{
				pos: position{line: 949, col: 5, offset: 26683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 949, col: 5, offset: 26683},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 949, col: 5, offset: 26683},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 949, col: 5, offset: 26683},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 7, offset: 26685},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 949, col: 14, offset: 26692},
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 15, offset: 26693},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 26808},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 952, col: 5, offset: 26808},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 7, offset: 26810},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 956, col: 1, offset: 26914},
			expr: &choiceExpr{
				pos: position{line: 957, col: 5, offset: 26933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 26933},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 957, col: 5, offset: 26933},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 957, col: 5, offset: 26933},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 7, offset: 26935},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 957, col: 11, offset: 26939},
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 12, offset: 26940},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 960, col: 5, offset: 27054},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 960, col: 5, offset: 27054},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 7, offset: 27056},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 964, col: 1, offset: 27155},
			expr: &actionExpr{
				pos: position{line: 965, col: 5, offset: 27172},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 965, col: 5, offset: 27172},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 965, col: 7, offset: 27174},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 969, col: 1, offset: 27287},
			expr: &actionExpr{
				pos: position{line: 970, col: 5, offset: 27306},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 970, col: 5, offset: 27306},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 27308},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 974, col: 1, offset: 27417},
			expr: &choiceExpr{
				pos: position{line: 975, col: 5, offset: 27436},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 975, col: 5, offset: 27436},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 975, col: 5, offset: 27436},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 27549},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 976, col: 5, offset: 27549},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 978, col: 1, offset: 27660},
			expr: &actionExpr{
				pos: position{line: 979, col: 5, offset: 27676},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 979, col: 5, offset: 27676},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 981, col: 1, offset: 27782},
			expr: &actionExpr{
				pos: position{line: 982, col: 5, offset: 27799},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 982, col: 5, offset: 27799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 982, col: 5, offset: 27799},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 982, col: 10, offset: 27804},
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 10, offset: 27804},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 986, col: 1, offset: 27919},
			expr: &actionExpr{
				pos: position{line: 987, col: 5, offset: 27935},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 987, col: 5, offset: 27935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 987, col: 5, offset: 27935},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 987, col: 9, offset: 27939},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 13, offset: 27943},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 987, col: 18, offset: 27948},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 991, col: 1, offset: 28037},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 28050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 28050},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 28066},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 993, col: 5, offset: 28066},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 9, offset: 28070},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 997, col: 1, offset: 28169},
			expr: &choiceExpr{
				pos: position{line: 998, col: 5, offset: 28178},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 28178},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 28194},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 5, offset: 28212},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1002, col: 1, offset: 28225},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 28243},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28243},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 28243},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1003, col: 5, offset: 28243},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 10, offset: 28248},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1003, col: 24, offset: 28262},
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 25, offset: 28263},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28303},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1004, col: 5, offset: 28303},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1004, col: 5, offset: 28303},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 10, offset: 28308},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 25, offset: 28323},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1004, col: 28, offset: 28326},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 32, offset: 28330},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 35, offset: 28333},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 39, offset: 28337},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 28439},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1007, col: 5, offset: 28439},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 10, offset: 28444},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 28546},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1010, col: 5, offset: 28546},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1010, col: 5, offset: 28546},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1010, col: 9, offset: 28550},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 12, offset: 28553},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 14, offset: 28555},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 25, offset: 28566},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1012, col: 1, offset: 28589},
			expr: &actionExpr{
				pos: position{line: 1013, col: 5, offset: 28603},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1013, col: 5, offset: 28603},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1013, col: 11, offset: 28609},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1017, col: 1, offset: 28705},
			expr: &actionExpr{
				pos: position{line: 1018, col: 5, offset: 28718},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1018, col: 5, offset: 28718},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1018, col: 5, offset: 28718},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1018, col: 11, offset: 28724},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1018, col: 16, offset: 28729},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1018, col: 21, offset: 28734},
								expr: &ruleRefExpr{
									pos:  position{line: 1018, col: 21, offset: 28734},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1022, col: 1, offset: 28828},
			expr: &actionExpr{
				pos: position{line: 1022, col: 16, offset: 28843},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1022, col: 16, offset: 28843},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1022, col: 16, offset: 28843},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1022, col: 19, offset: 28846},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1022, col: 23, offset: 28850},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1022, col: 26, offset: 28853},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1022, col: 30, offset: 28857},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1024, col: 1, offset: 28883},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 28899},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28899},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 28899},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 28899},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 9, offset: 28903},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 12, offset: 28906},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 19, offset: 28913},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 33, offset: 28927},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1025, col: 36, offset: 28930},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 29025},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 29025},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1028, col: 5, offset: 29025},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 9, offset: 29029},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 12, offset: 29032},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 16, offset: 29036},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 21, offset: 29041},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1028, col: 24, offset: 29044},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 29133},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1031, col: 5, offset: 29133},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1031, col: 5, offset: 29133},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 10, offset: 29138},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 14, offset: 29142},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 18, offset: 29146},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 23, offset: 29151},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1031, col: 26, offset: 29154},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29242},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1034, col: 5, offset: 29242},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1034, col: 5, offset: 29242},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 10, offset: 29247},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 13, offset: 29250},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 21, offset: 29258},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 26, offset: 29263},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1034, col: 29, offset: 29266},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 33, offset: 29270},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 36, offset: 29273},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 44, offset: 29281},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 49, offset: 29286},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1034, col: 52, offset: 29289},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1038, col: 1, offset: 29403},
			expr: &actionExpr{
				pos: position{line: 1039, col: 5, offset: 29423},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1039, col: 5, offset: 29423},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1039, col: 7, offset: 29425},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1046, col: 1, offset: 29641},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 5, offset: 29666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1047, col: 5, offset: 29666},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1047, col: 5, offset: 29666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1047, col: 5, offset: 29666},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1047, col: 9, offset: 29670},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1047, col: 11, offset: 29672},
										expr: &ruleRefExpr{
											pos:  position{line: 1047, col: 11, offset: 29672},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1047, col: 37, offset: 29698},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1048, col: 5, offset: 29724},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1048, col: 5, offset: 29724},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1048, col: 5, offset: 29724},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 9, offset: 29728},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1048, col: 11, offset: 29730},
										expr: &ruleRefExpr{
											pos:  position{line: 1048, col: 11, offset: 29730},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 37, offset: 29756},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1050, col: 1, offset: 29779},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 5, offset: 29808},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29808},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29825},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1052, col: 5, offset: 29825},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1052, col: 7, offset: 29827},
								expr: &ruleRefExpr{
									pos:  position{line: 1052, col: 7, offset: 29827},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1056, col: 1, offset: 29964},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 5, offset: 29993},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 29993},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1057, col: 5, offset: 29993},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1057, col: 5, offset: 29993},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1057, col: 10, offset: 29998},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1057, col: 12, offset: 30000},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 30027},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1058, col: 5, offset: 30027},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1058, col: 5, offset: 30027},
									expr: &litMatcher{
										pos:        position{line: 1058, col: 8, offset: 30030},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 15, offset: 30037},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 17, offset: 30039},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1060, col: 1, offset: 30075},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 5, offset: 30104},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1061, col: 5, offset: 30104},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 30121},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1062, col: 5, offset: 30121},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1062, col: 7, offset: 30123},
								expr: &ruleRefExpr{
									pos:  position{line: 1062, col: 7, offset: 30123},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1066, col: 1, offset: 30260},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 5, offset: 30289},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 30289},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1067, col: 5, offset: 30289},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1067, col: 5, offset: 30289},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1067, col: 10, offset: 30294},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1067, col: 12, offset: 30296},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 30323},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1068, col: 5, offset: 30323},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1068, col: 5, offset: 30323},
									expr: &litMatcher{
										pos:        position{line: 1068, col: 8, offset: 30326},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 15, offset: 30333},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1068, col: 17, offset: 30335},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1070, col: 1, offset: 30371},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 30388},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1071, col: 5, offset: 30388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1071, col: 5, offset: 30388},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1071, col: 10, offset: 30393},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1071, col: 13, offset: 30396},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1071, col: 15, offset: 30398},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1071, col: 20, offset: 30403},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1071, col: 23, offset: 30406},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1090, col: 1, offset: 30706},
			expr: &actionExpr{
				pos: position{line: 1091, col: 5, offset: 30724},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1091, col: 9, offset: 30728},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1091, col: 9, offset: 30728},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 19, offset: 30738},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 30, offset: 30749},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 41, offset: 30760},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 9, offset: 30777},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 18, offset: 30786},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 28, offset: 30796},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 38, offset: 30806},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 9, offset: 30822},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 21, offset: 30834},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1094, col: 9, offset: 30852},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1094, col: 18, offset: 30861},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1095, col: 9, offset: 30878},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1095, col: 22, offset: 30891},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1096, col: 9, offset: 30906},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1097, col: 9, offset: 30922},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1097, col: 16, offset: 30929},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1098, col: 9, offset: 30943},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1098, col: 18, offset: 30952},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1102, col: 1, offset: 31068},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 31086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 31086},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 31086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1103, col: 5, offset: 31086},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 31092},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 21, offset: 31102},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1103, col: 26, offset: 31107},
										expr: &ruleRefExpr{
											pos:  position{line: 1103, col: 26, offset: 31107},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 5, offset: 31209},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1106, col: 5, offset: 31209},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1108, col: 1, offset: 31233},
			expr: &actionExpr{
				pos: position{line: 1108, col: 21, offset: 31253},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 21, offset: 31253},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1108, col: 21, offset: 31253},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1108, col: 24, offset: 31256},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1108, col: 28, offset: 31260},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 31, offset: 31263},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 35, offset: 31267},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1110, col: 1, offset: 31298},
			expr: &actionExpr{
				pos: position{line: 1111, col: 5, offset: 31312},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 5, offset: 31312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1111, col: 5, offset: 31312},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 10, offset: 31317},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 20, offset: 31327},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1111, col: 23, offset: 31330},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 27, offset: 31334},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 30, offset: 31337},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 34, offset: 31341},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1115, col: 1, offset: 31423},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 5, offset: 31437},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1116, col: 5, offset: 31437},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 5, offset: 31456},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1119, col: 1, offset: 31470},
			expr: &actionExpr{
				pos: position{line: 1119, col: 12, offset: 31481},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 12, offset: 31481},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1119, col: 13, offset: 31482},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1119, col: 13, offset: 31482},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1119, col: 21, offset: 31490},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1119, col: 28, offset: 31497},
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 29, offset: 31498},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1120, col: 1, offset: 31535},
			expr: &actionExpr{
				pos: position{line: 1120, col: 11, offset: 31545},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 11, offset: 31545},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1120, col: 12, offset: 31546},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 12, offset: 31546},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1120, col: 19, offset: 31553},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1120, col: 25, offset: 31559},
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 26, offset: 31560},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1121, col: 1, offset: 31596},
			expr: &actionExpr{
				pos: position{line: 1121, col: 11, offset: 31606},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 11, offset: 31606},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1121, col: 11, offset: 31606},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1121, col: 16, offset: 31611},
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 17, offset: 31612},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1122, col: 1, offset: 31648},
			expr: &actionExpr{
				pos: position{line: 1122, col: 12, offset: 31659},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 12, offset: 31659},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1122, col: 13, offset: 31660},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1122, col: 13, offset: 31660},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1122, col: 21, offset: 31668},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1122, col: 28, offset: 31675},
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 29, offset: 31676},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1123, col: 1, offset: 31713},
			expr: &actionExpr{
				pos: position{line: 1123, col: 11, offset: 31723},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 11, offset: 31723},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1123, col: 11, offset: 31723},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1123, col: 16, offset: 31728},
							expr: &ruleRefExpr{
								pos:  position{line: 1123, col: 17, offset: 31729},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1125, col: 1, offset: 31766},
			expr: &charClassMatcher{
				pos:        position{line: 1125, col: 19, offset: 31784},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1127, col: 1, offset: 31796},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 18, offset: 31813},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 18, offset: 31813},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1127, col: 36, offset: 31831},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1129, col: 1, offset: 31838},
			expr: &actionExpr{
				pos: position{line: 1130, col: 5, offset: 31853},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1130, col: 5, offset: 31853},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1130, col: 8, offset: 31856},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1132, col: 1, offset: 31937},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 5, offset: 31956},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 31956},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1133, col: 5, offset: 31956},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1133, col: 5, offset: 31956},
									expr: &seqExpr{
										pos: position{line: 1133, col: 7, offset: 31958},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1133, col: 7, offset: 31958},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1133, col: 15, offset: 31966},
												expr: &ruleRefExpr{
													pos:  position{line: 1133, col: 16, offset: 31967},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 32, offset: 31983},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1133, col: 48, offset: 31999},
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 48, offset: 31999},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 32051},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1134, col: 5, offset: 32051},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 32090},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1135, col: 5, offset: 32090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1135, col: 5, offset: 32090},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 10, offset: 32095},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1135, col: 13, offset: 32098},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 32189},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1137, col: 5, offset: 32189},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 32231},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1138, col: 5, offset: 32231},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1138, col: 5, offset: 32231},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 8, offset: 32234},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1138, col: 26, offset: 32252},
									expr: &seqExpr{
										pos: position{line: 1138, col: 28, offset: 32254},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1138, col: 28, offset: 32254},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1138, col: 31, offset: 32257},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1140, col: 1, offset: 32282},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 32294},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1141, col: 5, offset: 32294},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 5, offset: 32313},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 5, offset: 32329},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 5, offset: 32337},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1146, col: 1, offset: 32347},
			expr: &actionExpr{
				pos: position{line: 1147, col: 5, offset: 32356},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1147, col: 5, offset: 32356},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1147, col: 5, offset: 32356},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1147, col: 14, offset: 32365},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1147, col: 18, offset: 32369},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1151, col: 1, offset: 32489},
			expr: &seqExpr{
				pos: position{line: 1151, col: 12, offset: 32500},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1151, col: 12, offset: 32500},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1151, col: 15, offset: 32503},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 19, offset: 32507},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1151, col: 22, offset: 32510},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 26, offset: 32514},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1153, col: 1, offset: 32518},
			expr: &seqExpr{
				pos: position{line: 1153, col: 6, offset: 32523},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1153, col: 6, offset: 32523},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1153, col: 11, offset: 32528},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1153, col: 16, offset: 32533},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1153, col: 21, offset: 32538},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1154, col: 1, offset: 32544},
			expr: &seqExpr{
				pos: position{line: 1154, col: 6, offset: 32549},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1154, col: 6, offset: 32549},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1154, col: 11, offset: 32554},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1156, col: 1, offset: 32561},
			expr: &seqExpr{
				pos: position{line: 1156, col: 12, offset: 32572},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1156, col: 12, offset: 32572},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 24, offset: 32584},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1158, col: 1, offset: 32596},
			expr: &seqExpr{
				pos: position{line: 1158, col: 15, offset: 32610},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 15, offset: 32610},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1158, col: 18, offset: 32613},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 22, offset: 32617},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1158, col: 25, offset: 32620},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 29, offset: 32624},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1158, col: 32, offset: 32627},
						expr: &seqExpr{
							pos: position{line: 1158, col: 33, offset: 32628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 33, offset: 32628},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1158, col: 37, offset: 32632},
									expr: &charClassMatcher{
										pos:        position{line: 1158, col: 37, offset: 32632},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1160, col: 1, offset: 32642},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 32657},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1161, col: 5, offset: 32657},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1162, col: 5, offset: 32665},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1162, col: 6, offset: 32666},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1162, col: 6, offset: 32666},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1162, col: 12, offset: 32672},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 17, offset: 32677},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1162, col: 20, offset: 32680},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 24, offset: 32684},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1162, col: 27, offset: 32687},
								expr: &seqExpr{
									pos: position{line: 1162, col: 28, offset: 32688},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1162, col: 28, offset: 32688},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1162, col: 32, offset: 32692},
											expr: &charClassMatcher{
												pos:        position{line: 1162, col: 32, offset: 32692},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1164, col: 1, offset: 32702},
			expr: &actionExpr{
				pos: position{line: 1165, col: 5, offset: 32715},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 5, offset: 32715},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1165, col: 5, offset: 32715},
							expr: &litMatcher{
								pos:        position{line: 1165, col: 5, offset: 32715},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1165, col: 10, offset: 32720},
							expr: &seqExpr{
								pos: position{line: 1165, col: 11, offset: 32721},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1165, col: 11, offset: 32721},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1165, col: 19, offset: 32729},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1169, col: 1, offset: 32855},
			expr: &seqExpr{
				pos: position{line: 1169, col: 11, offset: 32865},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1169, col: 11, offset: 32865},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1169, col: 16, offset: 32870},
						expr: &seqExpr{
							pos: position{line: 1169, col: 17, offset: 32871},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1169, col: 17, offset: 32871},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1169, col: 21, offset: 32875},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1171, col: 1, offset: 32883},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 5, offset: 32896},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1172, col: 5, offset: 32896},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1173, col: 5, offset: 32905},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1174, col: 5, offset: 32914},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1175, col: 5, offset: 32923},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1176, col: 5, offset: 32931},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1177, col: 5, offset: 32939},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1178, col: 5, offset: 32947},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1179, col: 5, offset: 32955},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1180, col: 5, offset: 32963},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1182, col: 1, offset: 32968},
			expr: &actionExpr{
				pos: position{line: 1183, col: 5, offset: 32975},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 5, offset: 32975},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1183, col: 5, offset: 32975},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1183, col: 10, offset: 32980},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 14, offset: 32984},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1183, col: 19, offset: 32989},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 23, offset: 32993},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1183, col: 28, offset: 32998},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 32, offset: 33002},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1185, col: 1, offset: 33039},
			expr: &actionExpr{
				pos: position{line: 1186, col: 5, offset: 33047},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1186, col: 5, offset: 33047},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1186, col: 5, offset: 33047},
							expr: &seqExpr{
								pos: position{line: 1186, col: 8, offset: 33050},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1186, col: 8, offset: 33050},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1186, col: 12, offset: 33054},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1186, col: 16, offset: 33058},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1186, col: 20, offset: 33062},
										expr: &choiceExpr{
											pos: position{line: 1186, col: 22, offset: 33064},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1186, col: 22, offset: 33064},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1186, col: 33, offset: 33075},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 39, offset: 33081},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 41, offset: 33083},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1190, col: 1, offset: 33247},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 5, offset: 33265},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 33265},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1191, col: 5, offset: 33265},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1191, col: 5, offset: 33265},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 7, offset: 33267},
										expr: &ruleRefExpr{
											pos:  position{line: 1191, col: 7, offset: 33267},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1191, col: 17, offset: 33277},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1191, col: 19, offset: 33279},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1194, col: 5, offset: 33343},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1194, col: 5, offset: 33343},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1194, col: 5, offset: 33343},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 7, offset: 33345},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 11, offset: 33349},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1194, col: 13, offset: 33351},
										expr: &ruleRefExpr{
											pos:  position{line: 1194, col: 13, offset: 33351},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1194, col: 23, offset: 33361},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 28, offset: 33366},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1194, col: 30, offset: 33368},
										expr: &ruleRefExpr{
											pos:  position{line: 1194, col: 30, offset: 33368},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 40, offset: 33378},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 42, offset: 33380},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 33479},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 33479},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1197, col: 5, offset: 33479},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 10, offset: 33484},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1197, col: 12, offset: 33486},
										expr: &ruleRefExpr{
											pos:  position{line: 1197, col: 12, offset: 33486},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 22, offset: 33496},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 24, offset: 33498},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1200, col: 5, offset: 33569},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1200, col: 5, offset: 33569},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1200, col: 5, offset: 33569},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 7, offset: 33571},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 11, offset: 33575},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1200, col: 13, offset: 33577},
										expr: &ruleRefExpr{
											pos:  position{line: 1200, col: 13, offset: 33577},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1200, col: 23, offset: 33587},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1203, col: 5, offset: 33655},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1203, col: 5, offset: 33655},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1207, col: 1, offset: 33692},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 5, offset: 33704},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1208, col: 5, offset: 33704},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 5, offset: 33711},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1211, col: 1, offset: 33716},
			expr: &actionExpr{
				pos: position{line: 1211, col: 12, offset: 33727},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 12, offset: 33727},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1211, col: 12, offset: 33727},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 16, offset: 33731},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 18, offset: 33733},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1213, col: 1, offset: 33771},
			expr: &actionExpr{
				pos: position{line: 1213, col: 12, offset: 33782},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 12, offset: 33782},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1213, col: 12, offset: 33782},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 14, offset: 33784},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1213, col: 18, offset: 33788},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1215, col: 1, offset: 33826},
			expr: &actionExpr{
				pos: position{line: 1216, col: 5, offset: 33837},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 5, offset: 33837},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 33837},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 7, offset: 33839},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1216, col: 10, offset: 33842},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 14, offset: 33846},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 16, offset: 33848},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1220, col: 1, offset: 33921},
			expr: &actionExpr{
				pos: position{line: 1221, col: 5, offset: 33932},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 5, offset: 33932},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1221, col: 5, offset: 33932},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 7, offset: 33934},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1221, col: 11, offset: 33938},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 15, offset: 33942},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 17, offset: 33944},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1225, col: 1, offset: 34007},
			expr: &actionExpr{
				pos: position{line: 1226, col: 4, offset: 34015},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1226, col: 4, offset: 34015},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1226, col: 6, offset: 34017},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1228, col: 1, offset: 34057},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 34071},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1229, col: 5, offset: 34071},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 5, offset: 34086},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1232, col: 1, offset: 34102},
			expr: &actionExpr{
				pos: position{line: 1232, col: 14, offset: 34115},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1232, col: 14, offset: 34115},
					expr: &charClassMatcher{
						pos:        position{line: 1232, col: 14, offset: 34115},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1234, col: 1, offset: 34154},
			expr: &actionExpr{
				pos: position{line: 1235, col: 5, offset: 34173},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 5, offset: 34173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 5, offset: 34173},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1235, col: 9, offset: 34177},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1237, col: 1, offset: 34220},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 34236},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1238, col: 5, offset: 34236},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1238, col: 5, offset: 34236},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1238, col: 5, offset: 34236},
									expr: &litMatcher{
										pos:        position{line: 1238, col: 5, offset: 34236},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1238, col: 10, offset: 34241},
									expr: &charClassMatcher{
										pos:        position{line: 1238, col: 10, offset: 34241},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1238, col: 17, offset: 34248},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1238, col: 21, offset: 34252},
									expr: &charClassMatcher{
										pos:        position{line: 1238, col: 21, offset: 34252},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1238, col: 28, offset: 34259},
									expr: &ruleRefExpr{
										pos:  position{line: 1238, col: 28, offset: 34259},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 34318},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1241, col: 5, offset: 34318},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1241, col: 5, offset: 34318},
									expr: &litMatcher{
										pos:        position{line: 1241, col: 5, offset: 34318},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 10, offset: 34323},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1241, col: 14, offset: 34327},
									expr: &charClassMatcher{
										pos:        position{line: 1241, col: 14, offset: 34327},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1241, col: 21, offset: 34334},
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 21, offset: 34334},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1244, col: 5, offset: 34393},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1244, col: 7, offset: 34395},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1244, col: 7, offset: 34395},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1244, col: 13, offset: 34401},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1247, col: 1, offset: 34445},
			expr: &seqExpr{
				pos: position{line: 1247, col: 16, offset: 34460},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1247, col: 16, offset: 34460},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1247, col: 21, offset: 34465},
						expr: &charClassMatcher{
							pos:        position{line: 1247, col: 21, offset: 34465},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 27, offset: 34471},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1249, col: 1, offset: 34483},
			expr: &litMatcher{
				pos:        position{line: 1249, col: 7, offset: 34489},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1251, col: 1, offset: 34496},
			expr: &seqExpr{
				pos: position{line: 1251, col: 12, offset: 34507},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1251, col: 12, offset: 34507},
						expr: &choiceExpr{
							pos: position{line: 1251, col: 13, offset: 34508},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1251, col: 13, offset: 34508},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1251, col: 19, offset: 34514},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1251, col: 25, offset: 34520},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1253, col: 1, offset: 34527},
			expr: &actionExpr{
				pos: position{line: 1253, col: 7, offset: 34533},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1253, col: 7, offset: 34533},
					expr: &ruleRefExpr{
						pos:  position{line: 1253, col: 7, offset: 34533},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1255, col: 1, offset: 34575},
			expr: &charClassMatcher{
				pos:        position{line: 1255, col: 12, offset: 34586},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1257, col: 1, offset: 34599},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 5, offset: 34616},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 34616},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1258, col: 5, offset: 34616},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1258, col: 5, offset: 34616},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 9, offset: 34620},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1258, col: 11, offset: 34622},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 11, offset: 34622},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 29, offset: 34640},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1259, col: 5, offset: 34677},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1259, col: 5, offset: 34677},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1259, col: 5, offset: 34677},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 9, offset: 34681},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1259, col: 11, offset: 34683},
										expr: &ruleRefExpr{
											pos:  position{line: 1259, col: 11, offset: 34683},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 29, offset: 34701},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1261, col: 1, offset: 34735},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 34756},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1262, col: 5, offset: 34756},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1262, col: 5, offset: 34756},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1262, col: 5, offset: 34756},
									expr: &choiceExpr{
										pos: position{line: 1262, col: 7, offset: 34758},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1262, col: 7, offset: 34758},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1262, col: 13, offset: 34764},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1262, col: 26, offset: 34777,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1263, col: 5, offset: 34814},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1263, col: 5, offset: 34814},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1263, col: 5, offset: 34814},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1263, col: 10, offset: 34819},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 12, offset: 34821},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1265, col: 1, offset: 34855},
			expr: &actionExpr{
				pos: position{line: 1266, col: 5, offset: 34867},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 5, offset: 34867},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1266, col: 5, offset: 34867},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 10, offset: 34872},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 23, offset: 34885},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1266, col: 28, offset: 34890},
								expr: &ruleRefExpr{
									pos:  position{line: 1266, col: 28, offset: 34890},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1268, col: 1, offset: 34952},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 5, offset: 34969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1269, col: 5, offset: 34969},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 5, offset: 34986},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1272, col: 1, offset: 34998},
			expr: &actionExpr{
				pos: position{line: 1272, col: 16, offset: 35013},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1272, col: 16, offset: 35013},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1274, col: 1, offset: 35062},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 5, offset: 35078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1275, col: 5, offset: 35078},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1276, col: 5, offset: 35095},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1278, col: 1, offset: 35102},
			expr: &actionExpr{
				pos: position{line: 1278, col: 14, offset: 35115},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 14, offset: 35115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1278, col: 14, offset: 35115},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 19, offset: 35120},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1278, col: 22, offset: 35123},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1278, col: 22, offset: 35123},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 38, offset: 35139},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1280, col: 1, offset: 35175},
			expr: &actionExpr{
				pos: position{line: 1281, col: 5, offset: 35191},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 5, offset: 35191},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1281, col: 5, offset: 35191},
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 6, offset: 35192},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1281, col: 22, offset: 35208},
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 23, offset: 35209},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 35, offset: 35221},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 40, offset: 35226},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 50, offset: 35236},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1281, col: 55, offset: 35241},
								expr: &ruleRefExpr{
									pos:  position{line: 1281, col: 55, offset: 35241},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1285, col: 1, offset: 35310},
			expr: &seqExpr{
				pos: position{line: 1285, col: 19, offset: 35328},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1285, col: 19, offset: 35328},
						expr: &litMatcher{
							pos:        position{line: 1285, col: 19, offset: 35328},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 24, offset: 35333},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1286, col: 1, offset: 35346},
			expr: &seqExpr{
				pos: position{line: 1286, col: 15, offset: 35360},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1286, col: 15, offset: 35360},
						expr: &ruleRefExpr{
							pos:  position{line: 1286, col: 15, offset: 35360},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1286, col: 28, offset: 35373},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1288, col: 1, offset: 35378},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 5, offset: 35392},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 5, offset: 35392},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 5, offset: 35409},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 35421},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1291, col: 5, offset: 35421},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1293, col: 1, offset: 35445},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 35458},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 35458},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1295, col: 5, offset: 35472},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1297, col: 1, offset: 35479},
			expr: &actionExpr{
				pos: position{line: 1297, col: 11, offset: 35489},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1297, col: 11, offset: 35489},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1297, col: 11, offset: 35489},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1297, col: 16, offset: 35494},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1297, col: 19, offset: 35497},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1297, col: 19, offset: 35497},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1297, col: 32, offset: 35510},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1299, col: 1, offset: 35546},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 35561},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35561},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1300, col: 5, offset: 35561},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 35589},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 35589},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1302, col: 5, offset: 35619},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1305, col: 1, offset: 35626},
			expr: &choiceExpr{
				pos: position{line: 1306, col: 5, offset: 35647},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 35647},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1306, col: 5, offset: 35647},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1306, col: 5, offset: 35647},
									expr: &choiceExpr{
										pos: position{line: 1306, col: 7, offset: 35649},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1306, col: 7, offset: 35649},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1306, col: 13, offset: 35655},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1306, col: 26, offset: 35668,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 5, offset: 35705},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1307, col: 5, offset: 35705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1307, col: 5, offset: 35705},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1307, col: 10, offset: 35710},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 12, offset: 35712},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1309, col: 1, offset: 35746},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 35765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1310, col: 5, offset: 35765},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 5, offset: 35786},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1313, col: 1, offset: 35801},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 5, offset: 35822},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1314, col: 5, offset: 35822},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 35830},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1315, col: 5, offset: 35830},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1316, col: 5, offset: 35870},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 35879},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1317, col: 5, offset: 35879},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1318, col: 5, offset: 35908},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1318, col: 5, offset: 35908},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 35937},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1319, col: 5, offset: 35937},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 35966},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1320, col: 5, offset: 35966},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1321, col: 5, offset: 35995},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1321, col: 5, offset: 35995},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 36024},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1322, col: 5, offset: 36024},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1324, col: 1, offset: 36050},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 5, offset: 36068},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1325, col: 5, offset: 36068},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1325, col: 5, offset: 36068},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 36096},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1326, col: 5, offset: 36096},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1327, col: 5, offset: 36124},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1329, col: 1, offset: 36130},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 5, offset: 36148},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1330, col: 5, offset: 36148},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1330, col: 5, offset: 36148},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1330, col: 5, offset: 36148},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1330, col: 9, offset: 36152},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1330, col: 16, offset: 36159},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1330, col: 16, offset: 36159},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1330, col: 25, offset: 36168},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1330, col: 34, offset: 36177},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1330, col: 43, offset: 36186},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1333, col: 5, offset: 36249},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1333, col: 5, offset: 36249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1333, col: 5, offset: 36249},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1333, col: 9, offset: 36253},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1333, col: 13, offset: 36257},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1333, col: 20, offset: 36264},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1333, col: 20, offset: 36264},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 29, offset: 36273},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 29, offset: 36273},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 39, offset: 36283},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 39, offset: 36283},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 49, offset: 36293},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 49, offset: 36293},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 59, offset: 36303},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 59, offset: 36303},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 69, offset: 36313},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 69, offset: 36313},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1333, col: 80, offset: 36324},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1337, col: 1, offset: 36378},
			expr: &actionExpr{
				pos: position{line: 1338, col: 5, offset: 36396},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 5, offset: 36396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1338, col: 5, offset: 36396},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 9, offset: 36400},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 14, offset: 36405},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1338, col: 25, offset: 36416},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1338, col: 29, offset: 36420},
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 30, offset: 36421},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1340, col: 1, offset: 36456},
			expr: &actionExpr{
				pos: position{line: 1341, col: 5, offset: 36471},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1341, col: 5, offset: 36471},
					expr: &choiceExpr{
						pos: position{line: 1341, col: 6, offset: 36472},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1341, col: 6, offset: 36472},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1341, col: 15, offset: 36481},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1341, col: 15, offset: 36481},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1341, col: 20, offset: 36486,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1343, col: 1, offset: 36522},
			expr: &charClassMatcher{
				pos:        position{line: 1344, col: 5, offset: 36538},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1346, col: 1, offset: 36553},
			expr: &oneOrMoreExpr{
				pos: position{line: 1346, col: 6, offset: 36558},
				expr: &ruleRefExpr{
					pos:  position{line: 1346, col: 6, offset: 36558},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1348, col: 1, offset: 36569},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1348, col: 6, offset: 36574},
				expr: &ruleRefExpr{
					pos:  position{line: 1348, col: 6, offset: 36574},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1350, col: 1, offset: 36585},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 5, offset: 36598},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1351, col: 5, offset: 36598},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 5, offset: 36613},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 5, offset: 36632},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1355, col: 1, offset: 36641},
			expr: &anyMatcher{
				line: 1356, col: 5, offset: 36661,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1358, col: 1, offset: 36664},
			expr: &choiceExpr{
				pos: position{line: 1359, col: 5, offset: 36692},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1359, col: 5, offset: 36692},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1360, col: 5, offset: 36701},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1361, col: 5, offset: 36710},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1362, col: 5, offset: 36719},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1363, col: 5, offset: 36727},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1364, col: 5, offset: 36740},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1366, col: 1, offset: 36750},
			expr: &charClassMatcher{
				pos:        position{line: 1367, col: 5, offset: 36769},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1373, col: 1, offset: 37099},
			expr: &ruleRefExpr{
				pos:  position{line: 1376, col: 5, offset: 37170},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1378, col: 1, offset: 37189},
			expr: &seqExpr{
				pos: position{line: 1379, col: 5, offset: 37210},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1379, col: 5, offset: 37210},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1379, col: 10, offset: 37215},
						expr: &seqExpr{
							pos: position{line: 1379, col: 11, offset: 37216},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1379, col: 11, offset: 37216},
									expr: &litMatcher{
										pos:        position{line: 1379, col: 12, offset: 37217},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1379, col: 17, offset: 37222},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1379, col: 35, offset: 37240},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1381, col: 1, offset: 37246},
			expr: &seqExpr{
				pos: position{line: 1382, col: 5, offset: 37268},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1382, col: 5, offset: 37268},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1382, col: 10, offset: 37273},
						expr: &seqExpr{
							pos: position{line: 1382, col: 11, offset: 37274},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1382, col: 11, offset: 37274},
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 12, offset: 37275},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1382, col: 27, offset: 37290},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1384, col: 1, offset: 37309},
			expr: &seqExpr{
				pos: position{line: 1384, col: 7, offset: 37315},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1384, col: 7, offset: 37315},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 7, offset: 37315},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 19, offset: 37327},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1386, col: 1, offset: 37343},
			expr: &choiceExpr{
				pos: position{line: 1386, col: 7, offset: 37349},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1386, col: 7, offset: 37349},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 37353},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1388, col: 1, offset: 37358},
			expr: &notExpr{
				pos: position{line: 1388, col: 7, offset: 37364},
				expr: &anyMatcher{
					line: 1388, col: 8, offset: 37365,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr12(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr12(stack["v"])
}

func (c *current) onSearchExpr18() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr18()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onWhereProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereProc1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["expr"])
}

func (c *current) onOverProc2(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onOverProc16(exprs, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverProc16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc16(stack["exprs"], stack["scope"])
}

func (c *current) onOverProc25(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil}, nil

}

func (p *parser) callonOverProc25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc25(stack["exprs"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onComparisonExpr12(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "~", "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr12(stack["lhs"], stack["rhs"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onGrep2(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}, nil

}

func (p *parser) callonGrep2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep2(stack["pattern"])
}

func (c *current) onGrep12(pattern, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": expr}, nil

}

func (p *parser) callonGrep12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep12(stack["pattern"], stack["expr"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
