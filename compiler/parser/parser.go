// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &actionExpr{
				pos: position{line: 10, col: 5, offset: 95},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 10, col: 5, offset: 95},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 5, offset: 95},
							label: "consts",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 12, offset: 102},
								name: "Consts",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 19, offset: 109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 22, offset: 112},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 28, offset: 118},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 38, offset: 128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 43, offset: 133},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 43, offset: 133},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 14, col: 1, offset: 303},
			expr: &actionExpr{
				pos: position{line: 14, col: 18, offset: 320},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 14, col: 18, offset: 320},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 14, col: 18, offset: 320},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 21, offset: 323},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 26, offset: 328},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 14, col: 29, offset: 331},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 31, offset: 333},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 16, col: 1, offset: 362},
			expr: &choiceExpr{
				pos: position{line: 17, col: 5, offset: 373},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 17, col: 5, offset: 373},
						expr: &ruleRefExpr{
							pos:  position{line: 17, col: 5, offset: 373},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 384},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 18, col: 5, offset: 384},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 20, col: 1, offset: 420},
			expr: &actionExpr{
				pos: position{line: 20, col: 9, offset: 428},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 20, col: 9, offset: 428},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 20, col: 9, offset: 428},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 20, col: 12, offset: 431},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 14, offset: 433},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 22, col: 1, offset: 461},
			expr: &choiceExpr{
				pos: position{line: 23, col: 5, offset: 474},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 23, col: 5, offset: 474},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 23, col: 5, offset: 474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 23, col: 5, offset: 474},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 13, offset: 482},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 23, col: 15, offset: 484},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 18, offset: 487},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 33, offset: 502},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 23, col: 36, offset: 505},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 40, offset: 509},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 23, col: 43, offset: 512},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 48, offset: 517},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 599},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 599},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 12, offset: 606},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 14, offset: 608},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 26, col: 18, offset: 612},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 26, col: 18, offset: 612},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 26, col: 35, offset: 629},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 49, offset: 643},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 52, offset: 646},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 56, offset: 650},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 59, offset: 653},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 63, offset: 657},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 36, col: 1, offset: 881},
			expr: &choiceExpr{
				pos: position{line: 37, col: 5, offset: 895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 37, col: 5, offset: 895},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 37, col: 5, offset: 895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 37, col: 5, offset: 895},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 37, col: 12, offset: 902},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 37, col: 15, offset: 905},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 37, col: 19, offset: 909},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 37, col: 23, offset: 913},
										expr: &ruleRefExpr{
											pos:  position{line: 37, col: 23, offset: 913},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 37, col: 28, offset: 918},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 37, col: 31, offset: 921},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1010},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1010},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1010},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 14, offset: 1019},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 40, col: 16, offset: 1021},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 40, col: 21, offset: 1026},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 26, offset: 1031},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 40, col: 28, offset: 1033},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 32, offset: 1037},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 38, offset: 1043},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 38, offset: 1043},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 49, offset: 1054},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 52, offset: 1057},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1162},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1162},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1171},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 17, offset: 1174},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 21, offset: 1178},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 27, offset: 1184},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 27, offset: 1184},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 38, offset: 1195},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 41, offset: 1198},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1302},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1302},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1302},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 12, offset: 1309},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 15, offset: 1312},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 19, offset: 1316},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 26, offset: 1323},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 26, offset: 1323},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 35, offset: 1332},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 38, offset: 1335},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 49, col: 5, offset: 1426},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 49, col: 8, offset: 1429},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 50, col: 5, offset: 1442},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 50, col: 5, offset: 1442},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 50, col: 5, offset: 1442},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 50, col: 7, offset: 1444},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 50, col: 20, offset: 1457},
									expr: &ruleRefExpr{
										pos:  position{line: 50, col: 21, offset: 1458},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1488},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 51, col: 5, offset: 1488},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 51, col: 5, offset: 1488},
									expr: &seqExpr{
										pos: position{line: 51, col: 7, offset: 1490},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 51, col: 7, offset: 1490},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 51, col: 16, offset: 1499},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 51, col: 25, offset: 1508},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 51, col: 27, offset: 1510},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 51, col: 39, offset: 1522},
									expr: &ruleRefExpr{
										pos:  position{line: 51, col: 40, offset: 1523},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 52, col: 5, offset: 1554},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 52, col: 5, offset: 1554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 52, col: 5, offset: 1554},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 52, col: 14, offset: 1563},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 52, col: 16, offset: 1565},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 52, col: 21, offset: 1570},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1669},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 55, col: 5, offset: 1669},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 10, offset: 1674},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1773},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1773},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 10, offset: 1778},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 1866},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1866},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 10, offset: 1871},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 65, col: 1, offset: 1958},
			expr: &seqExpr{
				pos: position{line: 65, col: 11, offset: 1968},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1968},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 65, col: 15, offset: 1972},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 15, offset: 1972},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 65, col: 22, offset: 1979},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 65, col: 43, offset: 2000},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 65, col: 50, offset: 2007},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 65, col: 56, offset: 2013},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 66, col: 1, offset: 2018},
			expr: &seqExpr{
				pos: position{line: 66, col: 8, offset: 2025},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 66, col: 8, offset: 2025},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 66, col: 12, offset: 2029},
						expr: &choiceExpr{
							pos: position{line: 66, col: 14, offset: 2031},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 14, offset: 2031},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 66, col: 20, offset: 2037},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 68, col: 1, offset: 2043},
			expr: &actionExpr{
				pos: position{line: 69, col: 5, offset: 2051},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 69, col: 5, offset: 2051},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 69, col: 5, offset: 2051},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 69, col: 8, offset: 2054},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 69, col: 13, offset: 2059},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 69, col: 16, offset: 2062},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 18, offset: 2064},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 71, col: 1, offset: 2094},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 2108},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 72, col: 5, offset: 2108},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 72, col: 5, offset: 2108},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 8, offset: 2111},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 13, offset: 2116},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 18, offset: 2121},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 72, col: 21, offset: 2124},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 26, offset: 2129},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 29, offset: 2132},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 32, offset: 2135},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 76, col: 1, offset: 2220},
			expr: &choiceExpr{
				pos: position{line: 77, col: 5, offset: 2229},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2229},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2229},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 77, col: 5, offset: 2229},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 77, col: 12, offset: 2236},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 77, col: 14, offset: 2238},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 19, offset: 2243},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2273},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 78, col: 5, offset: 2273},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 80, col: 1, offset: 2304},
			expr: &actionExpr{
				pos: position{line: 81, col: 5, offset: 2316},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 81, col: 5, offset: 2316},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 81, col: 5, offset: 2316},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 81, col: 8, offset: 2319},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 15, offset: 2326},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 26, offset: 2337},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 81, col: 30, offset: 2341},
								expr: &seqExpr{
									pos: position{line: 81, col: 31, offset: 2342},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 81, col: 31, offset: 2342},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 81, col: 34, offset: 2345},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 81, col: 39, offset: 2350},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 81, col: 43, offset: 2354},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 89, col: 1, offset: 2552},
			expr: &choiceExpr{
				pos: position{line: 90, col: 5, offset: 2567},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2567},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 5, offset: 2576},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2584},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 5, offset: 2593},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 95, col: 1, offset: 2601},
			expr: &seqExpr{
				pos: position{line: 95, col: 13, offset: 2613},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 13, offset: 2613},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 95, col: 17, offset: 2617},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 95, col: 18, offset: 2618},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 95, col: 18, offset: 2618},
										expr: &litMatcher{
											pos:        position{line: 95, col: 19, offset: 2619},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 95, col: 24, offset: 2624},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 38, offset: 2638},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 57, offset: 2657},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 95, col: 82, offset: 2682},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 95, col: 88, offset: 2688},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 95, col: 94, offset: 2694},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 95, col: 100, offset: 2700},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 97, col: 1, offset: 2706},
			expr: &actionExpr{
				pos: position{line: 97, col: 14, offset: 2719},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 97, col: 15, offset: 2720},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 97, col: 15, offset: 2720},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 22, offset: 2727},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 97, col: 30, offset: 2735},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 97, col: 30, offset: 2735},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 97, col: 35, offset: 2740},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 36, offset: 2741},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 97, col: 54, offset: 2759},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 61, offset: 2766},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 67, offset: 2772},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 74, offset: 2779},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 99, col: 1, offset: 2816},
			expr: &actionExpr{
				pos: position{line: 100, col: 5, offset: 2834},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 100, col: 5, offset: 2834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 100, col: 5, offset: 2834},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 11, offset: 2840},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 21, offset: 2850},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 100, col: 26, offset: 2855},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 26, offset: 2855},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 104, col: 1, offset: 2929},
			expr: &actionExpr{
				pos: position{line: 104, col: 16, offset: 2944},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 16, offset: 2944},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 104, col: 16, offset: 2944},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 18, offset: 2946},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 26, offset: 2954},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 104, col: 28, offset: 2956},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 30, offset: 2958},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 106, col: 1, offset: 3008},
			expr: &actionExpr{
				pos: position{line: 107, col: 5, offset: 3022},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 107, col: 5, offset: 3022},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3022},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 11, offset: 3028},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 5, offset: 3045},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 108, col: 10, offset: 3050},
								expr: &actionExpr{
									pos: position{line: 108, col: 11, offset: 3051},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 108, col: 11, offset: 3051},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 108, col: 11, offset: 3051},
												expr: &seqExpr{
													pos: position{line: 108, col: 12, offset: 3052},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 108, col: 12, offset: 3052},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 108, col: 14, offset: 3054},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 25, offset: 3065},
												name: "_",
											},
											&notExpr{
												pos: position{line: 108, col: 27, offset: 3067},
												expr: &choiceExpr{
													pos: position{line: 108, col: 29, offset: 3069},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 108, col: 29, offset: 3069},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 108, col: 39, offset: 3079},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 108, col: 59, offset: 3099},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 64, offset: 3104},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 112, col: 1, offset: 3220},
			expr: &choiceExpr{
				pos: position{line: 113, col: 5, offset: 3243},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 113, col: 5, offset: 3243},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 5, offset: 3243},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 16, offset: 3254},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 113, col: 19, offset: 3257},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3262},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 114, col: 5, offset: 3269},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 114, col: 5, offset: 3269},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 10, offset: 3274},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 116, col: 1, offset: 3278},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 3295},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3295},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3295},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 117, col: 6, offset: 3296},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 117, col: 6, offset: 3296},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 117, col: 6, offset: 3296},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 15, offset: 3305},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 117, col: 19, offset: 3309},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 117, col: 19, offset: 3309},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 23, offset: 3313},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 117, col: 27, offset: 3317},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 29, offset: 3319},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3431},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3431},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 5, offset: 3431},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 9, offset: 3435},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 120, col: 12, offset: 3438},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 17, offset: 3443},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 31, offset: 3457},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 120, col: 34, offset: 3460},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 121, col: 5, offset: 3489},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 123, col: 1, offset: 3501},
			expr: &choiceExpr{
				pos: position{line: 124, col: 5, offset: 3516},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 124, col: 5, offset: 3516},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 5, offset: 3525},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 126, col: 5, offset: 3536},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 126, col: 5, offset: 3536},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 126, col: 5, offset: 3536},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 7, offset: 3538},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 126, col: 20, offset: 3551},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 126, col: 20, offset: 3551},
											expr: &ruleRefExpr{
												pos:  position{line: 126, col: 21, offset: 3552},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 126, col: 33, offset: 3564},
											expr: &seqExpr{
												pos: position{line: 126, col: 35, offset: 3566},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 126, col: 35, offset: 3566},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 126, col: 37, offset: 3568},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 129, col: 5, offset: 3680},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 129, col: 5, offset: 3680},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 129, col: 5, offset: 3680},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 129, col: 9, offset: 3684},
									expr: &ruleRefExpr{
										pos:  position{line: 129, col: 10, offset: 3685},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 132, col: 5, offset: 3801},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 134, col: 1, offset: 3818},
			expr: &choiceExpr{
				pos: position{line: 135, col: 5, offset: 3838},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 5, offset: 3838},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 135, col: 5, offset: 3838},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 135, col: 5, offset: 3838},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 9, offset: 3842},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 22, offset: 3855},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 135, col: 25, offset: 3858},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 28, offset: 3861},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 39, offset: 3872},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 135, col: 42, offset: 3875},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 135, col: 46, offset: 3879},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 138, col: 6, offset: 4002},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 138, col: 6, offset: 4002},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 138, col: 6, offset: 4002},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 12, offset: 4008},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 21, offset: 4017},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 138, col: 26, offset: 4022},
										expr: &ruleRefExpr{
											pos:  position{line: 138, col: 27, offset: 4023},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 142, col: 1, offset: 4095},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 4111},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 143, col: 5, offset: 4111},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 4123},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 4123},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 144, col: 5, offset: 4123},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 6, offset: 4124},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 144, col: 20, offset: 4138},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 22, offset: 4140},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 148, col: 1, offset: 4248},
			expr: &actionExpr{
				pos: position{line: 149, col: 5, offset: 4257},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 149, col: 5, offset: 4257},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 149, col: 13, offset: 4265},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 153, col: 1, offset: 4361},
			expr: &actionExpr{
				pos: position{line: 154, col: 5, offset: 4372},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 154, col: 5, offset: 4372},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 154, col: 13, offset: 4380},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 160, col: 1, offset: 4506},
			expr: &choiceExpr{
				pos: position{line: 161, col: 5, offset: 4522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 161, col: 5, offset: 4522},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 161, col: 5, offset: 4522},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 161, col: 5, offset: 4522},
									expr: &ruleRefExpr{
										pos:  position{line: 161, col: 5, offset: 4522},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 161, col: 16, offset: 4533},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 161, col: 21, offset: 4538},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 161, col: 33, offset: 4550},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 161, col: 39, offset: 4556},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 164, col: 5, offset: 4682},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 164, col: 5, offset: 4682},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 164, col: 5, offset: 4682},
									expr: &ruleRefExpr{
										pos:  position{line: 164, col: 5, offset: 4682},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 164, col: 16, offset: 4693},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 164, col: 21, offset: 4698},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 164, col: 36, offset: 4713},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 164, col: 41, offset: 4718},
										expr: &seqExpr{
											pos: position{line: 164, col: 42, offset: 4719},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 164, col: 42, offset: 4719},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 164, col: 44, offset: 4721},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 164, col: 58, offset: 4735},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 164, col: 64, offset: 4741},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 172, col: 1, offset: 4955},
			expr: &seqExpr{
				pos: position{line: 172, col: 13, offset: 4967},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 172, col: 13, offset: 4967},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 172, col: 25, offset: 4979},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 174, col: 1, offset: 4982},
			expr: &actionExpr{
				pos: position{line: 175, col: 5, offset: 4998},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 175, col: 5, offset: 4998},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 175, col: 5, offset: 4998},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 13, offset: 5006},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 15, offset: 5008},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 23, offset: 5016},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 177, col: 1, offset: 5057},
			expr: &choiceExpr{
				pos: position{line: 178, col: 5, offset: 5070},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5070},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 178, col: 5, offset: 5070},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 178, col: 5, offset: 5070},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 178, col: 7, offset: 5072},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 14, offset: 5079},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 178, col: 16, offset: 5081},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 25, offset: 5090},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 178, col: 27, offset: 5092},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 33, offset: 5098},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5129},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 179, col: 5, offset: 5129},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 184, col: 1, offset: 5389},
			expr: &choiceExpr{
				pos: position{line: 185, col: 5, offset: 5408},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 185, col: 5, offset: 5408},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5423},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 186, col: 5, offset: 5423},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 10, offset: 5428},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 188, col: 1, offset: 5520},
			expr: &actionExpr{
				pos: position{line: 189, col: 5, offset: 5540},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 189, col: 5, offset: 5540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 189, col: 5, offset: 5540},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 11, offset: 5546},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 26, offset: 5561},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 189, col: 31, offset: 5566},
								expr: &actionExpr{
									pos: position{line: 189, col: 32, offset: 5567},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 189, col: 32, offset: 5567},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 189, col: 32, offset: 5567},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 189, col: 35, offset: 5570},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 189, col: 39, offset: 5574},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 189, col: 42, offset: 5577},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 189, col: 47, offset: 5582},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 193, col: 1, offset: 5704},
			expr: &choiceExpr{
				pos: position{line: 194, col: 5, offset: 5722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5722},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 5722},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 194, col: 5, offset: 5722},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 10, offset: 5727},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 15, offset: 5732},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 194, col: 18, offset: 5735},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 23, offset: 5740},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 194, col: 26, offset: 5743},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 30, offset: 5747},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5851},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 197, col: 5, offset: 5851},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 9, offset: 5855},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 201, col: 1, offset: 5955},
			expr: &actionExpr{
				pos: position{line: 202, col: 5, offset: 5963},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 202, col: 5, offset: 5963},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 202, col: 5, offset: 5963},
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 6, offset: 5964},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 202, col: 16, offset: 5974},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 19, offset: 5977},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 27, offset: 5985},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 202, col: 30, offset: 5988},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 34, offset: 5992},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 37, offset: 5995},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 202, col: 42, offset: 6000},
								expr: &choiceExpr{
									pos: position{line: 202, col: 43, offset: 6001},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 202, col: 43, offset: 6001},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 202, col: 54, offset: 6012},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 62, offset: 6020},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 202, col: 65, offset: 6023},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 202, col: 69, offset: 6027},
							expr: &seqExpr{
								pos: position{line: 202, col: 71, offset: 6029},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 202, col: 71, offset: 6029},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 202, col: 74, offset: 6032},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 202, col: 79, offset: 6037},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 202, col: 85, offset: 6043},
								expr: &ruleRefExpr{
									pos:  position{line: 202, col: 85, offset: 6043},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 210, col: 1, offset: 6233},
			expr: &choiceExpr{
				pos: position{line: 211, col: 5, offset: 6245},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6245},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6264},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6277},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 215, col: 1, offset: 6286},
			expr: &actionExpr{
				pos: position{line: 215, col: 15, offset: 6300},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 215, col: 15, offset: 6300},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 215, col: 15, offset: 6300},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 215, col: 17, offset: 6302},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 25, offset: 6310},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 27, offset: 6312},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 32, offset: 6317},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 217, col: 1, offset: 6353},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 6372},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 6372},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 218, col: 5, offset: 6372},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 11, offset: 6378},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 25, offset: 6392},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 218, col: 30, offset: 6397},
								expr: &seqExpr{
									pos: position{line: 218, col: 31, offset: 6398},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 218, col: 31, offset: 6398},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 218, col: 34, offset: 6401},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 218, col: 38, offset: 6405},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 218, col: 41, offset: 6408},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 228, col: 1, offset: 6632},
			expr: &choiceExpr{
				pos: position{line: 229, col: 5, offset: 6645},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6645},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6658},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6669},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6679},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6689},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6700},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6711},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6722},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6734},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6745},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6755},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6768},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6779},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6791},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 6802},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6815},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6825},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 6836},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 6847},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 6861},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 6873},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 6884},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 252, col: 1, offset: 6893},
			expr: &actionExpr{
				pos: position{line: 253, col: 5, offset: 6906},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 253, col: 5, offset: 6906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 253, col: 5, offset: 6906},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 14, offset: 6915},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 16, offset: 6917},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 253, col: 22, offset: 6923},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 253, col: 22, offset: 6923},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 24, offset: 6925},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 289, col: 1, offset: 8276},
			expr: &actionExpr{
				pos: position{line: 290, col: 5, offset: 8287},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 290, col: 5, offset: 8287},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 5, offset: 8287},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 290, col: 12, offset: 8294},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 13, offset: 8295},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 18, offset: 8300},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 23, offset: 8305},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 32, offset: 8314},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 37, offset: 8319},
								expr: &actionExpr{
									pos: position{line: 290, col: 38, offset: 8320},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 290, col: 38, offset: 8320},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 290, col: 38, offset: 8320},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 290, col: 40, offset: 8322},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 290, col: 42, offset: 8324},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 304, col: 1, offset: 8735},
			expr: &actionExpr{
				pos: position{line: 304, col: 12, offset: 8746},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 304, col: 12, offset: 8746},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 304, col: 17, offset: 8751},
						expr: &actionExpr{
							pos: position{line: 304, col: 18, offset: 8752},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 304, col: 18, offset: 8752},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 304, col: 18, offset: 8752},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 304, col: 20, offset: 8754},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 304, col: 22, offset: 8756},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 306, col: 1, offset: 8812},
			expr: &choiceExpr{
				pos: position{line: 307, col: 5, offset: 8824},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8824},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 307, col: 5, offset: 8824},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 8899},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 308, col: 5, offset: 8899},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 308, col: 5, offset: 8899},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 308, col: 14, offset: 8908},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 308, col: 16, offset: 8910},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 308, col: 23, offset: 8917},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 308, col: 24, offset: 8918},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 308, col: 24, offset: 8918},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 308, col: 34, offset: 8928},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 310, col: 1, offset: 9042},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9052},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 5, offset: 9052},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 311, col: 11, offset: 9058},
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 12, offset: 9059},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 17, offset: 9064},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 23, offset: 9070},
								expr: &actionExpr{
									pos: position{line: 311, col: 24, offset: 9071},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 311, col: 24, offset: 9071},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 311, col: 24, offset: 9071},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 311, col: 26, offset: 9073},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 311, col: 28, offset: 9075},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 52, offset: 9099},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 58, offset: 9105},
								expr: &seqExpr{
									pos: position{line: 311, col: 59, offset: 9106},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 311, col: 59, offset: 9106},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 311, col: 61, offset: 9108},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 72, offset: 9119},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 79, offset: 9126},
								expr: &actionExpr{
									pos: position{line: 311, col: 80, offset: 9127},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 311, col: 80, offset: 9127},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 311, col: 80, offset: 9127},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 311, col: 82, offset: 9129},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 311, col: 84, offset: 9131},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 325, col: 1, offset: 9466},
			expr: &actionExpr{
				pos: position{line: 326, col: 5, offset: 9476},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 326, col: 5, offset: 9476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 326, col: 5, offset: 9476},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 11, offset: 9482},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 13, offset: 9484},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 18, offset: 9489},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 330, col: 1, offset: 9584},
			expr: &actionExpr{
				pos: position{line: 331, col: 5, offset: 9595},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 331, col: 5, offset: 9595},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 9595},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 12, offset: 9602},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 14, offset: 9604},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 19, offset: 9609},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 335, col: 1, offset: 9700},
			expr: &choiceExpr{
				pos: position{line: 336, col: 5, offset: 9711},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 336, col: 5, offset: 9711},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 336, col: 5, offset: 9711},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 336, col: 5, offset: 9711},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 336, col: 12, offset: 9718},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 336, col: 14, offset: 9720},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 336, col: 20, offset: 9726},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 9806},
						run: (*parser).callonHeadOp8,
						expr: &litMatcher{
							pos:        position{line: 337, col: 5, offset: 9806},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 339, col: 1, offset: 9881},
			expr: &choiceExpr{
				pos: position{line: 340, col: 5, offset: 9892},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 340, col: 5, offset: 9892},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 340, col: 5, offset: 9892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 340, col: 5, offset: 9892},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 12, offset: 9899},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 340, col: 14, offset: 9901},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 340, col: 20, offset: 9907},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 9987},
						run: (*parser).callonTailOp8,
						expr: &litMatcher{
							pos:        position{line: 341, col: 5, offset: 9987},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 343, col: 1, offset: 10062},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 10074},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 10074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 10074},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 13, offset: 10082},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 15, offset: 10084},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 20, offset: 10089},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 348, col: 1, offset: 10175},
			expr: &choiceExpr{
				pos: position{line: 349, col: 5, offset: 10186},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 349, col: 5, offset: 10186},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 349, col: 5, offset: 10186},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 349, col: 5, offset: 10186},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 12, offset: 10193},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 349, col: 14, offset: 10195},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10284},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 352, col: 5, offset: 10284},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 356, col: 1, offset: 10373},
			expr: &actionExpr{
				pos: position{line: 357, col: 5, offset: 10383},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 357, col: 5, offset: 10383},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 5, offset: 10383},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 11, offset: 10389},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 13, offset: 10391},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 18, offset: 10396},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 361, col: 1, offset: 10487},
			expr: &actionExpr{
				pos: position{line: 362, col: 5, offset: 10500},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 362, col: 5, offset: 10500},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 362, col: 5, offset: 10500},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 14, offset: 10509},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 362, col: 16, offset: 10511},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 22, offset: 10517},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 362, col: 33, offset: 10528},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 362, col: 38, offset: 10533},
								expr: &actionExpr{
									pos: position{line: 362, col: 39, offset: 10534},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 362, col: 39, offset: 10534},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 362, col: 39, offset: 10534},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 362, col: 42, offset: 10537},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 362, col: 46, offset: 10541},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 362, col: 49, offset: 10544},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 362, col: 52, offset: 10547},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 370, col: 1, offset: 10954},
			expr: &actionExpr{
				pos: position{line: 371, col: 5, offset: 10965},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 371, col: 5, offset: 10965},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 5, offset: 10965},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 371, col: 12, offset: 10972},
							expr: &seqExpr{
								pos: position{line: 371, col: 14, offset: 10974},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 371, col: 14, offset: 10974},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 371, col: 17, offset: 10977},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 371, col: 22, offset: 10982},
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 23, offset: 10983},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 375, col: 1, offset: 11054},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 11066},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 376, col: 5, offset: 11066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 376, col: 5, offset: 11066},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 376, col: 13, offset: 11074},
							expr: &seqExpr{
								pos: position{line: 376, col: 15, offset: 11076},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 376, col: 15, offset: 11076},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 376, col: 18, offset: 11079},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 376, col: 23, offset: 11084},
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 24, offset: 11085},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 380, col: 1, offset: 11157},
			expr: &actionExpr{
				pos: position{line: 381, col: 5, offset: 11168},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 381, col: 5, offset: 11168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 381, col: 5, offset: 11168},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 11, offset: 11174},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 381, col: 21, offset: 11184},
							val:        "join",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 28, offset: 11191},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 30, offset: 11193},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 33, offset: 11196},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 35, offset: 11198},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 39, offset: 11202},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 47, offset: 11210},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 381, col: 54, offset: 11217},
								expr: &seqExpr{
									pos: position{line: 381, col: 55, offset: 11218},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 381, col: 55, offset: 11218},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 381, col: 58, offset: 11221},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 381, col: 62, offset: 11225},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 381, col: 65, offset: 11228},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 75, offset: 11238},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 381, col: 83, offset: 11246},
								expr: &seqExpr{
									pos: position{line: 381, col: 84, offset: 11247},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 381, col: 84, offset: 11247},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 381, col: 86, offset: 11249},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 392, col: 1, offset: 11578},
			expr: &choiceExpr{
				pos: position{line: 393, col: 5, offset: 11592},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 11592},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 11592},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 393, col: 5, offset: 11592},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 12, offset: 11599},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 5, offset: 11629},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 394, col: 5, offset: 11629},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 394, col: 5, offset: 11629},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 394, col: 13, offset: 11637},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 395, col: 5, offset: 11667},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 395, col: 5, offset: 11667},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 395, col: 5, offset: 11667},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 395, col: 13, offset: 11675},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 11704},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 396, col: 5, offset: 11704},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 396, col: 5, offset: 11704},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 396, col: 13, offset: 11712},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 397, col: 5, offset: 11742},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 397, col: 5, offset: 11742},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 399, col: 1, offset: 11778},
			expr: &choiceExpr{
				pos: position{line: 400, col: 5, offset: 11790},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 400, col: 5, offset: 11790},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 401, col: 5, offset: 11799},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 401, col: 5, offset: 11799},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 401, col: 5, offset: 11799},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 401, col: 9, offset: 11803},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 401, col: 14, offset: 11808},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 401, col: 19, offset: 11813},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 403, col: 1, offset: 11839},
			expr: &actionExpr{
				pos: position{line: 404, col: 5, offset: 11852},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 404, col: 5, offset: 11852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 404, col: 5, offset: 11852},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 404, col: 14, offset: 11861},
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 15, offset: 11862},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 20, offset: 11867},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 22, offset: 11869},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 446, col: 1, offset: 13369},
			expr: &actionExpr{
				pos: position{line: 447, col: 5, offset: 13386},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 447, col: 5, offset: 13386},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 447, col: 7, offset: 13388},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 451, col: 1, offset: 13488},
			expr: &choiceExpr{
				pos: position{line: 452, col: 5, offset: 13503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 452, col: 5, offset: 13503},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 452, col: 5, offset: 13503},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 452, col: 5, offset: 13503},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 452, col: 7, offset: 13505},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 452, col: 12, offset: 13510},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 13539},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 453, col: 5, offset: 13539},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 455, col: 1, offset: 13610},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 13621},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 456, col: 5, offset: 13621},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 456, col: 12, offset: 13628},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 460, col: 1, offset: 13784},
			expr: &choiceExpr{
				pos: position{line: 461, col: 5, offset: 13796},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 461, col: 5, offset: 13796},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 5, offset: 13805},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 463, col: 5, offset: 13813},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 465, col: 1, offset: 13819},
			expr: &actionExpr{
				pos: position{line: 466, col: 5, offset: 13828},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 466, col: 5, offset: 13828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 466, col: 5, offset: 13828},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 12, offset: 13835},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 14, offset: 13837},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 19, offset: 13842},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 466, col: 24, offset: 13847},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 466, col: 31, offset: 13854},
								expr: &ruleRefExpr{
									pos:  position{line: 466, col: 31, offset: 13854},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 466, col: 42, offset: 13865},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 466, col: 49, offset: 13872},
								expr: &ruleRefExpr{
									pos:  position{line: 466, col: 49, offset: 13872},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 470, col: 1, offset: 14001},
			expr: &actionExpr{
				pos: position{line: 471, col: 5, offset: 14010},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 471, col: 5, offset: 14010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 471, col: 5, offset: 14010},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 471, col: 12, offset: 14017},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 471, col: 14, offset: 14019},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 19, offset: 14024},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 473, col: 1, offset: 14055},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 14064},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 14064},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 474, col: 5, offset: 14064},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 12, offset: 14071},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 14, offset: 14073},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 19, offset: 14078},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 476, col: 1, offset: 14109},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14122},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 477, col: 5, offset: 14122},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 10, offset: 14127},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 477, col: 19, offset: 14136},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 477, col: 22, offset: 14139},
								expr: &ruleRefExpr{
									pos:  position{line: 477, col: 22, offset: 14139},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 477, col: 30, offset: 14147},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 477, col: 35, offset: 14152},
								expr: &ruleRefExpr{
									pos:  position{line: 477, col: 35, offset: 14152},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 477, col: 46, offset: 14163},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 477, col: 52, offset: 14169},
								expr: &ruleRefExpr{
									pos:  position{line: 477, col: 52, offset: 14169},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 481, col: 1, offset: 14305},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14313},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14313},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 5, offset: 14313},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 482, col: 11, offset: 14319},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 13, offset: 14321},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 17, offset: 14325},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 21, offset: 14329},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 482, col: 28, offset: 14336},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 28, offset: 14336},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 39, offset: 14347},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 482, col: 46, offset: 14354},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 46, offset: 14354},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 486, col: 1, offset: 14480},
			expr: &actionExpr{
				pos: position{line: 486, col: 7, offset: 14486},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 486, col: 7, offset: 14486},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 486, col: 8, offset: 14487},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 486, col: 8, offset: 14487},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 486, col: 18, offset: 14497},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 28, offset: 14507},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 488, col: 1, offset: 14544},
			expr: &choiceExpr{
				pos: position{line: 489, col: 5, offset: 14553},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 489, col: 5, offset: 14553},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 489, col: 5, offset: 14553},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 7, offset: 14555},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 490, col: 5, offset: 14590},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 490, col: 5, offset: 14590},
							expr: &charClassMatcher{
								pos:        position{line: 490, col: 5, offset: 14590},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 493, col: 1, offset: 14695},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 14706},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 14706},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 494, col: 5, offset: 14706},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 494, col: 7, offset: 14708},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 12, offset: 14713},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 14, offset: 14715},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 17, offset: 14718},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 497, col: 1, offset: 14784},
			expr: &actionExpr{
				pos: position{line: 497, col: 9, offset: 14792},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 497, col: 9, offset: 14792},
					expr: &charClassMatcher{
						pos:        position{line: 497, col: 10, offset: 14793},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 499, col: 1, offset: 14839},
			expr: &actionExpr{
				pos: position{line: 500, col: 5, offset: 14853},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 500, col: 5, offset: 14853},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 500, col: 5, offset: 14853},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 500, col: 7, offset: 14855},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 15, offset: 14863},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 17, offset: 14865},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 23, offset: 14871},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 31, offset: 14879},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 500, col: 33, offset: 14881},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 38, offset: 14886},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 40, offset: 14888},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 46, offset: 14894},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 504, col: 1, offset: 14999},
			expr: &choiceExpr{
				pos: position{line: 505, col: 5, offset: 15012},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 15012},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 505, col: 5, offset: 15012},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 505, col: 5, offset: 15012},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 505, col: 10, offset: 15017},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 505, col: 19, offset: 15026},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 505, col: 26, offset: 15033},
										expr: &ruleRefExpr{
											pos:  position{line: 505, col: 26, offset: 15033},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 505, col: 38, offset: 15045},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 505, col: 43, offset: 15050},
										expr: &ruleRefExpr{
											pos:  position{line: 505, col: 43, offset: 15050},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 508, col: 5, offset: 15159},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 508, col: 5, offset: 15159},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 10, offset: 15164},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 512, col: 1, offset: 15265},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15280},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 513, col: 5, offset: 15280},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 513, col: 5, offset: 15280},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 513, col: 9, offset: 15284},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 16, offset: 15291},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 515, col: 1, offset: 15324},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 15337},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 516, col: 5, offset: 15337},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 516, col: 5, offset: 15337},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 516, col: 9, offset: 15341},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 14, offset: 15346},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 518, col: 1, offset: 15383},
			expr: &choiceExpr{
				pos: position{line: 519, col: 5, offset: 15396},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 519, col: 5, offset: 15396},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 5, offset: 15415},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 521, col: 5, offset: 15425},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 523, col: 1, offset: 15439},
			expr: &actionExpr{
				pos: position{line: 524, col: 5, offset: 15458},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 524, col: 5, offset: 15458},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 524, col: 6, offset: 15459},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 524, col: 6, offset: 15459},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 524, col: 24, offset: 15477},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 524, col: 29, offset: 15482},
							expr: &choiceExpr{
								pos: position{line: 524, col: 30, offset: 15483},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 524, col: 30, offset: 15483},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 524, col: 47, offset: 15500},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 526, col: 1, offset: 15539},
			expr: &actionExpr{
				pos: position{line: 527, col: 5, offset: 15553},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 527, col: 5, offset: 15553},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 527, col: 5, offset: 15553},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 527, col: 7, offset: 15555},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 15, offset: 15563},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 17, offset: 15565},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 22, offset: 15570},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 527, col: 33, offset: 15581},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 39, offset: 15587},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 531, col: 1, offset: 15697},
			expr: &actionExpr{
				pos: position{line: 532, col: 5, offset: 15711},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 532, col: 5, offset: 15711},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 532, col: 5, offset: 15711},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 532, col: 7, offset: 15713},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 532, col: 16, offset: 15722},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 18, offset: 15724},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 22, offset: 15728},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 534, col: 1, offset: 15764},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 15780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15780},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 535, col: 5, offset: 15780},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 15814},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 536, col: 5, offset: 15814},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 537, col: 5, offset: 15850},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 537, col: 5, offset: 15850},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 539, col: 1, offset: 15876},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 15889},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 15889},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 540, col: 5, offset: 15889},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 540, col: 5, offset: 15889},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 540, col: 7, offset: 15891},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 540, col: 15, offset: 15899},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 540, col: 17, offset: 15901},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 15934},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 541, col: 5, offset: 15934},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 541, col: 5, offset: 15934},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 541, col: 7, offset: 15936},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 541, col: 15, offset: 15944},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 541, col: 17, offset: 15946},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 543, col: 1, offset: 15978},
			expr: &actionExpr{
				pos: position{line: 544, col: 5, offset: 15989},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 544, col: 5, offset: 15989},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 5, offset: 15989},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 544, col: 12, offset: 15996},
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 13, offset: 15997},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 550, col: 1, offset: 16189},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16203},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16203},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 551, col: 5, offset: 16203},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 551, col: 15, offset: 16213},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 17, offset: 16215},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 22, offset: 16220},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 28, offset: 16226},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 32, offset: 16230},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 40, offset: 16238},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 551, col: 43, offset: 16241},
								expr: &ruleRefExpr{
									pos:  position{line: 551, col: 43, offset: 16241},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 555, col: 1, offset: 16353},
			expr: &actionExpr{
				pos: position{line: 556, col: 5, offset: 16365},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 556, col: 5, offset: 16365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 556, col: 5, offset: 16365},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 556, col: 13, offset: 16373},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 15, offset: 16375},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 20, offset: 16380},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 560, col: 1, offset: 16461},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 16472},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 16472},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 561, col: 5, offset: 16472},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 12, offset: 16479},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 14, offset: 16481},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 20, offset: 16487},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 26, offset: 16493},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 561, col: 33, offset: 16500},
								expr: &ruleRefExpr{
									pos:  position{line: 561, col: 33, offset: 16500},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 41, offset: 16508},
							label: "scope",
							expr: &zeroOrOneExpr{
								pos: position{line: 561, col: 47, offset: 16514},
								expr: &ruleRefExpr{
									pos:  position{line: 561, col: 47, offset: 16514},
									name: "Scope",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 569, col: 1, offset: 16764},
			expr: &actionExpr{
				pos: position{line: 570, col: 5, offset: 16774},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 570, col: 5, offset: 16774},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 570, col: 5, offset: 16774},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 570, col: 8, offset: 16777},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 13, offset: 16782},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 570, col: 16, offset: 16785},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 20, offset: 16789},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 23, offset: 16792},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 27, offset: 16796},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 38, offset: 16807},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 570, col: 41, offset: 16810},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 572, col: 1, offset: 16835},
			expr: &actionExpr{
				pos: position{line: 573, col: 5, offset: 16846},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 573, col: 5, offset: 16846},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 573, col: 5, offset: 16846},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 573, col: 7, offset: 16848},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 14, offset: 16855},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 16, offset: 16857},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 22, offset: 16863},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 39, offset: 16880},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 573, col: 44, offset: 16885},
								expr: &actionExpr{
									pos: position{line: 573, col: 45, offset: 16886},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 573, col: 45, offset: 16886},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 573, col: 45, offset: 16886},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 573, col: 48, offset: 16889},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 573, col: 52, offset: 16893},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 573, col: 55, offset: 16896},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 573, col: 57, offset: 16898},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 577, col: 1, offset: 17019},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17040},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 578, col: 5, offset: 17040},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 10, offset: 17045},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 25, offset: 17060},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 578, col: 29, offset: 17064},
								expr: &seqExpr{
									pos: position{line: 578, col: 30, offset: 17065},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 578, col: 30, offset: 17065},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 578, col: 33, offset: 17068},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 578, col: 37, offset: 17072},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 578, col: 40, offset: 17075},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 586, col: 1, offset: 17296},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 17308},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 17308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 5, offset: 17308},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 13, offset: 17316},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 15, offset: 17318},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 21, offset: 17324},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 591, col: 1, offset: 17408},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 17420},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 17420},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 592, col: 5, offset: 17420},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 7, offset: 17422},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 10, offset: 17425},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 12, offset: 17427},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 16, offset: 17431},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 594, col: 1, offset: 17456},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 17466},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 17466},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 595, col: 5, offset: 17466},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 7, offset: 17468},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 10, offset: 17471},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 12, offset: 17473},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 16, offset: 17477},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 599, col: 1, offset: 17528},
			expr: &ruleRefExpr{
				pos:  position{line: 599, col: 8, offset: 17535},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 601, col: 1, offset: 17546},
			expr: &actionExpr{
				pos: position{line: 602, col: 5, offset: 17556},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 602, col: 5, offset: 17556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 602, col: 5, offset: 17556},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 11, offset: 17562},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 16, offset: 17567},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 602, col: 21, offset: 17572},
								expr: &actionExpr{
									pos: position{line: 602, col: 22, offset: 17573},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 602, col: 22, offset: 17573},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 602, col: 22, offset: 17573},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 602, col: 25, offset: 17576},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 602, col: 29, offset: 17580},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 602, col: 32, offset: 17583},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 602, col: 37, offset: 17588},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 606, col: 1, offset: 17700},
			expr: &ruleRefExpr{
				pos:  position{line: 606, col: 13, offset: 17712},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 608, col: 1, offset: 17718},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 17733},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 609, col: 5, offset: 17733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 17733},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 11, offset: 17739},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 21, offset: 17749},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 609, col: 26, offset: 17754},
								expr: &seqExpr{
									pos: position{line: 609, col: 27, offset: 17755},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 609, col: 27, offset: 17755},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 609, col: 30, offset: 17758},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 609, col: 34, offset: 17762},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 609, col: 37, offset: 17765},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 619, col: 1, offset: 17964},
			expr: &actionExpr{
				pos: position{line: 620, col: 5, offset: 17980},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 620, col: 5, offset: 17980},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 620, col: 5, offset: 17980},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 11, offset: 17986},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 620, col: 22, offset: 17997},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 620, col: 27, offset: 18002},
								expr: &actionExpr{
									pos: position{line: 620, col: 28, offset: 18003},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 620, col: 28, offset: 18003},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 620, col: 28, offset: 18003},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 620, col: 31, offset: 18006},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 620, col: 35, offset: 18010},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 620, col: 38, offset: 18013},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 620, col: 40, offset: 18015},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 624, col: 1, offset: 18126},
			expr: &actionExpr{
				pos: position{line: 625, col: 5, offset: 18141},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 625, col: 5, offset: 18141},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 18141},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 9, offset: 18145},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 14, offset: 18150},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 625, col: 17, offset: 18153},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 22, offset: 18158},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 25, offset: 18161},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 29, offset: 18165},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 627, col: 1, offset: 18256},
			expr: &ruleRefExpr{
				pos:  position{line: 627, col: 8, offset: 18263},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 629, col: 1, offset: 18280},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18300},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18300},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 630, col: 5, offset: 18300},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 10, offset: 18305},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 24, offset: 18319},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 630, col: 28, offset: 18323},
								expr: &seqExpr{
									pos: position{line: 630, col: 29, offset: 18324},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 630, col: 29, offset: 18324},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 630, col: 32, offset: 18327},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 36, offset: 18331},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 39, offset: 18334},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 44, offset: 18339},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 630, col: 47, offset: 18342},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 51, offset: 18346},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 54, offset: 18349},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 639, col: 1, offset: 18610},
			expr: &actionExpr{
				pos: position{line: 640, col: 5, offset: 18628},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 640, col: 5, offset: 18628},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18628},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 11, offset: 18634},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 18653},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 641, col: 10, offset: 18658},
								expr: &actionExpr{
									pos: position{line: 641, col: 11, offset: 18659},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 641, col: 11, offset: 18659},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 641, col: 11, offset: 18659},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 641, col: 14, offset: 18662},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 641, col: 17, offset: 18665},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 641, col: 25, offset: 18673},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 641, col: 28, offset: 18676},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 641, col: 33, offset: 18681},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 645, col: 1, offset: 18799},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 18818},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 646, col: 5, offset: 18818},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 18818},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 11, offset: 18824},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 18843},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 647, col: 10, offset: 18848},
								expr: &actionExpr{
									pos: position{line: 647, col: 11, offset: 18849},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 647, col: 11, offset: 18849},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 11, offset: 18849},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 14, offset: 18852},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 17, offset: 18855},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 26, offset: 18864},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 29, offset: 18867},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 34, offset: 18872},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 651, col: 1, offset: 18990},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 19009},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 19009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 19009},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 9, offset: 19013},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 22, offset: 19026},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 652, col: 31, offset: 19035},
								expr: &choiceExpr{
									pos: position{line: 652, col: 32, offset: 19036},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 652, col: 32, offset: 19036},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 652, col: 32, offset: 19036},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 35, offset: 19039},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 46, offset: 19050},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 49, offset: 19053},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 652, col: 64, offset: 19068},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 652, col: 64, offset: 19068},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 652, col: 68, offset: 19072},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 652, col: 68, offset: 19072},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 104, offset: 19108},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 107, offset: 19111},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 661, col: 1, offset: 19372},
			expr: &actionExpr{
				pos: position{line: 662, col: 5, offset: 19389},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 662, col: 5, offset: 19389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 19389},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 11, offset: 19395},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19418},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 663, col: 10, offset: 19423},
								expr: &actionExpr{
									pos: position{line: 663, col: 11, offset: 19424},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 663, col: 11, offset: 19424},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 663, col: 11, offset: 19424},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 663, col: 14, offset: 19427},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 663, col: 17, offset: 19430},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 663, col: 34, offset: 19447},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 663, col: 37, offset: 19450},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 663, col: 42, offset: 19455},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 667, col: 1, offset: 19577},
			expr: &actionExpr{
				pos: position{line: 667, col: 20, offset: 19596},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 667, col: 21, offset: 19597},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 667, col: 21, offset: 19597},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 667, col: 27, offset: 19603},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 669, col: 1, offset: 19640},
			expr: &actionExpr{
				pos: position{line: 670, col: 5, offset: 19663},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 670, col: 5, offset: 19663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 670, col: 5, offset: 19663},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 670, col: 11, offset: 19669},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 671, col: 5, offset: 19681},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 671, col: 10, offset: 19686},
								expr: &actionExpr{
									pos: position{line: 671, col: 11, offset: 19687},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 671, col: 11, offset: 19687},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 671, col: 11, offset: 19687},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 671, col: 14, offset: 19690},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 671, col: 17, offset: 19693},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 671, col: 40, offset: 19716},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 671, col: 43, offset: 19719},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 671, col: 48, offset: 19724},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 675, col: 1, offset: 19835},
			expr: &actionExpr{
				pos: position{line: 675, col: 26, offset: 19860},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 675, col: 27, offset: 19861},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 675, col: 27, offset: 19861},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 675, col: 33, offset: 19867},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 675, col: 39, offset: 19873},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 677, col: 1, offset: 19910},
			expr: &choiceExpr{
				pos: position{line: 678, col: 5, offset: 19922},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 19922},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 678, col: 5, offset: 19922},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 678, col: 5, offset: 19922},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 678, col: 9, offset: 19926},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 678, col: 12, offset: 19929},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 678, col: 14, offset: 19931},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 681, col: 5, offset: 20040},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 683, col: 1, offset: 20054},
			expr: &choiceExpr{
				pos: position{line: 684, col: 5, offset: 20071},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 684, col: 5, offset: 20071},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 684, col: 5, offset: 20071},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 684, col: 5, offset: 20071},
									expr: &ruleRefExpr{
										pos:  position{line: 684, col: 6, offset: 20072},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 684, col: 14, offset: 20080},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 684, col: 18, offset: 20084},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 684, col: 21, offset: 20087},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 684, col: 23, offset: 20089},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 5, offset: 20199},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 689, col: 1, offset: 20209},
			expr: &choiceExpr{
				pos: position{line: 690, col: 5, offset: 20222},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 690, col: 5, offset: 20222},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 690, col: 5, offset: 20222},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 690, col: 5, offset: 20222},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 20228},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 690, col: 16, offset: 20233},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 690, col: 21, offset: 20238},
										expr: &ruleRefExpr{
											pos:  position{line: 690, col: 22, offset: 20239},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 693, col: 5, offset: 20310},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 693, col: 5, offset: 20310},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 693, col: 5, offset: 20310},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 20316},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 693, col: 20, offset: 20325},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 693, col: 25, offset: 20330},
										expr: &ruleRefExpr{
											pos:  position{line: 693, col: 26, offset: 20331},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 696, col: 5, offset: 20402},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 697, col: 5, offset: 20416},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 699, col: 1, offset: 20425},
			expr: &seqExpr{
				pos: position{line: 699, col: 13, offset: 20437},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 699, col: 13, offset: 20437},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 699, col: 22, offset: 20446},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 699, col: 25, offset: 20449},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 701, col: 1, offset: 20454},
			expr: &choiceExpr{
				pos: position{line: 702, col: 5, offset: 20467},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 702, col: 5, offset: 20467},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 703, col: 5, offset: 20477},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 705, col: 1, offset: 20487},
			expr: &actionExpr{
				pos: position{line: 706, col: 5, offset: 20496},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 706, col: 5, offset: 20496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 706, col: 5, offset: 20496},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 9, offset: 20500},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 18, offset: 20509},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 21, offset: 20512},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 25, offset: 20516},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 28, offset: 20519},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 706, col: 34, offset: 20525},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 706, col: 34, offset: 20525},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 706, col: 45, offset: 20536},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 51, offset: 20542},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 54, offset: 20545},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 710, col: 1, offset: 20642},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20655},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 711, col: 5, offset: 20655},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20664},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20664},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 712, col: 5, offset: 20664},
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 6, offset: 20665},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 712, col: 16, offset: 20675},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 19, offset: 20678},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 34, offset: 20693},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 712, col: 37, offset: 20696},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 41, offset: 20700},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 712, col: 44, offset: 20703},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 49, offset: 20708},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 62, offset: 20721},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 712, col: 65, offset: 20724},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 712, col: 69, offset: 20728},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 712, col: 75, offset: 20734},
										expr: &ruleRefExpr{
											pos:  position{line: 712, col: 75, offset: 20734},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 716, col: 1, offset: 20855},
			expr: &choiceExpr{
				pos: position{line: 717, col: 5, offset: 20872},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 20872},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 717, col: 5, offset: 20872},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 7, offset: 20874},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 5, offset: 20920},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 720, col: 1, offset: 20935},
			expr: &actionExpr{
				pos: position{line: 721, col: 5, offset: 20944},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 721, col: 5, offset: 20944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 721, col: 5, offset: 20944},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 12, offset: 20951},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 721, col: 15, offset: 20954},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 19, offset: 20958},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 721, col: 22, offset: 20961},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 30, offset: 20969},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 38, offset: 20977},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 721, col: 42, offset: 20981},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 721, col: 46, offset: 20985},
								expr: &seqExpr{
									pos: position{line: 721, col: 47, offset: 20986},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 721, col: 47, offset: 20986},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 721, col: 51, offset: 20990},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 721, col: 56, offset: 20995},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 721, col: 56, offset: 20995},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 721, col: 67, offset: 21006},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 721, col: 73, offset: 21012},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 721, col: 78, offset: 21017},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 729, col: 1, offset: 21258},
			expr: &choiceExpr{
				pos: position{line: 730, col: 5, offset: 21270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 21270},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 21281},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 732, col: 5, offset: 21290},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 732, col: 5, offset: 21290},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 7, offset: 21292},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 736, col: 1, offset: 21384},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 21402},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 737, col: 5, offset: 21402},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 21412},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 738, col: 5, offset: 21412},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 740, col: 1, offset: 21448},
			expr: &actionExpr{
				pos: position{line: 741, col: 5, offset: 21458},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 741, col: 5, offset: 21458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 741, col: 5, offset: 21458},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 11, offset: 21464},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 16, offset: 21469},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 741, col: 21, offset: 21474},
								expr: &actionExpr{
									pos: position{line: 741, col: 22, offset: 21475},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 741, col: 22, offset: 21475},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 741, col: 22, offset: 21475},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 741, col: 25, offset: 21478},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 741, col: 29, offset: 21482},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 741, col: 32, offset: 21485},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 741, col: 34, offset: 21487},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 745, col: 1, offset: 21596},
			expr: &actionExpr{
				pos: position{line: 746, col: 5, offset: 21610},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 746, col: 5, offset: 21610},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 746, col: 5, offset: 21610},
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 6, offset: 21611},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 10, offset: 21615},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 16, offset: 21621},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 27, offset: 21632},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 746, col: 32, offset: 21637},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 33, offset: 21638},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 750, col: 1, offset: 21706},
			expr: &choiceExpr{
				pos: position{line: 751, col: 5, offset: 21716},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21716},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 21716},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 751, col: 5, offset: 21716},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 751, col: 9, offset: 21720},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 14, offset: 21725},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 27, offset: 21738},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 30, offset: 21741},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 34, offset: 21745},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 751, col: 37, offset: 21748},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 751, col: 40, offset: 21751},
										expr: &ruleRefExpr{
											pos:  position{line: 751, col: 40, offset: 21751},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 751, col: 54, offset: 21765},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 757, col: 5, offset: 21936},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 757, col: 5, offset: 21936},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 757, col: 5, offset: 21936},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 757, col: 9, offset: 21940},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 757, col: 12, offset: 21943},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 757, col: 16, offset: 21947},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 757, col: 19, offset: 21950},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 757, col: 22, offset: 21953},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 757, col: 35, offset: 21966},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 22137},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 22137},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 763, col: 5, offset: 22137},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 763, col: 9, offset: 22141},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 14, offset: 22146},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 763, col: 19, offset: 22151},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 764, col: 5, offset: 22200},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 764, col: 5, offset: 22200},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 764, col: 5, offset: 22200},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 764, col: 9, offset: 22204},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 764, col: 12, offset: 22207},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 766, col: 1, offset: 22258},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 22270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 22270},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 768, col: 5, offset: 22281},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 769, col: 5, offset: 22291},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 770, col: 5, offset: 22299},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 771, col: 5, offset: 22307},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 22319},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 772, col: 5, offset: 22319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 772, col: 5, offset: 22319},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 9, offset: 22323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 772, col: 12, offset: 22326},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 772, col: 17, offset: 22331},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 26, offset: 22340},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 772, col: 29, offset: 22343},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 773, col: 5, offset: 22373},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 773, col: 5, offset: 22373},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 773, col: 5, offset: 22373},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 773, col: 9, offset: 22377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 773, col: 12, offset: 22380},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 773, col: 17, offset: 22385},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 773, col: 22, offset: 22390},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 773, col: 25, offset: 22393},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 775, col: 1, offset: 22419},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 22432},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 22432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 5, offset: 22432},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 12, offset: 22439},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 14, offset: 22441},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 20, offset: 22447},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 776, col: 26, offset: 22453},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 776, col: 33, offset: 22460},
								expr: &ruleRefExpr{
									pos:  position{line: 776, col: 33, offset: 22460},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 41, offset: 22468},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 776, col: 44, offset: 22471},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 48, offset: 22475},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 51, offset: 22478},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 57, offset: 22484},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 780, col: 1, offset: 22615},
			expr: &actionExpr{
				pos: position{line: 781, col: 5, offset: 22626},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 781, col: 5, offset: 22626},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 781, col: 5, offset: 22626},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 781, col: 9, offset: 22630},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 781, col: 12, offset: 22633},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 781, col: 18, offset: 22639},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 781, col: 30, offset: 22651},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 781, col: 33, offset: 22654},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 785, col: 1, offset: 22744},
			expr: &choiceExpr{
				pos: position{line: 786, col: 5, offset: 22760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 22760},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 22760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 786, col: 5, offset: 22760},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 11, offset: 22766},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 786, col: 22, offset: 22777},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 786, col: 27, offset: 22782},
										expr: &ruleRefExpr{
											pos:  position{line: 786, col: 27, offset: 22782},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 22881},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 789, col: 5, offset: 22881},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 791, col: 1, offset: 22917},
			expr: &actionExpr{
				pos: position{line: 791, col: 18, offset: 22934},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 791, col: 18, offset: 22934},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 791, col: 18, offset: 22934},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 791, col: 21, offset: 22937},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 791, col: 25, offset: 22941},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 791, col: 28, offset: 22944},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 33, offset: 22949},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 793, col: 1, offset: 22982},
			expr: &choiceExpr{
				pos: position{line: 794, col: 5, offset: 22997},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 794, col: 5, offset: 22997},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 795, col: 5, offset: 23008},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 796, col: 5, offset: 23018},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 798, col: 1, offset: 23030},
			expr: &actionExpr{
				pos: position{line: 799, col: 5, offset: 23041},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 799, col: 5, offset: 23041},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 799, col: 5, offset: 23041},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 11, offset: 23047},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 799, col: 14, offset: 23050},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 19, offset: 23055},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 803, col: 1, offset: 23141},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 23151},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 23151},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 804, col: 5, offset: 23151},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 10, offset: 23156},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 20, offset: 23166},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 804, col: 23, offset: 23169},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 27, offset: 23173},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 30, offset: 23176},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 36, offset: 23182},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 808, col: 1, offset: 23282},
			expr: &actionExpr{
				pos: position{line: 809, col: 5, offset: 23292},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 809, col: 5, offset: 23292},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 809, col: 5, offset: 23292},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 9, offset: 23296},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 809, col: 12, offset: 23299},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 18, offset: 23305},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 30, offset: 23317},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 809, col: 33, offset: 23320},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 813, col: 1, offset: 23410},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 23418},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 814, col: 5, offset: 23418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 814, col: 5, offset: 23418},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 10, offset: 23423},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 814, col: 13, offset: 23426},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 19, offset: 23432},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 31, offset: 23444},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 814, col: 34, offset: 23447},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 818, col: 1, offset: 23536},
			expr: &choiceExpr{
				pos: position{line: 819, col: 5, offset: 23552},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 23552},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 819, col: 5, offset: 23552},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 819, col: 5, offset: 23552},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 819, col: 11, offset: 23558},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 819, col: 22, offset: 23569},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 819, col: 27, offset: 23574},
										expr: &actionExpr{
											pos: position{line: 819, col: 28, offset: 23575},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 819, col: 28, offset: 23575},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 819, col: 28, offset: 23575},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 819, col: 31, offset: 23578},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 819, col: 35, offset: 23582},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 819, col: 38, offset: 23585},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 819, col: 40, offset: 23587},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 822, col: 5, offset: 23705},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 822, col: 5, offset: 23705},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 824, col: 1, offset: 23741},
			expr: &choiceExpr{
				pos: position{line: 825, col: 5, offset: 23756},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 825, col: 5, offset: 23756},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 23767},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 826, col: 5, offset: 23767},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 826, col: 7, offset: 23769},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 828, col: 1, offset: 23845},
			expr: &actionExpr{
				pos: position{line: 829, col: 5, offset: 23853},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 829, col: 5, offset: 23853},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 5, offset: 23853},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 10, offset: 23858},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 829, col: 13, offset: 23861},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 19, offset: 23867},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 27, offset: 23875},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 829, col: 30, offset: 23878},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 833, col: 1, offset: 23969},
			expr: &choiceExpr{
				pos: position{line: 834, col: 5, offset: 23981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 23981},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 834, col: 5, offset: 23981},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 834, col: 5, offset: 23981},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 23987},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 834, col: 17, offset: 23993},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 834, col: 22, offset: 23998},
										expr: &ruleRefExpr{
											pos:  position{line: 834, col: 22, offset: 23998},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 837, col: 5, offset: 24092},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 837, col: 5, offset: 24092},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 840, col: 1, offset: 24129},
			expr: &actionExpr{
				pos: position{line: 840, col: 13, offset: 24141},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 840, col: 13, offset: 24141},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 840, col: 13, offset: 24141},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 840, col: 16, offset: 24144},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 840, col: 20, offset: 24148},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 840, col: 23, offset: 24151},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 840, col: 25, offset: 24153},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 842, col: 1, offset: 24178},
			expr: &actionExpr{
				pos: position{line: 843, col: 5, offset: 24188},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 843, col: 5, offset: 24188},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 843, col: 5, offset: 24188},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 9, offset: 24192},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 843, col: 14, offset: 24197},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 843, col: 17, offset: 24200},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 843, col: 21, offset: 24204},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 843, col: 24, offset: 24207},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 30, offset: 24213},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 849, col: 1, offset: 24320},
			expr: &actionExpr{
				pos: position{line: 850, col: 5, offset: 24330},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 850, col: 5, offset: 24330},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 850, col: 5, offset: 24330},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 15, offset: 24340},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 24354},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 851, col: 10, offset: 24359},
								expr: &ruleRefExpr{
									pos:  position{line: 851, col: 10, offset: 24359},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 5, offset: 24372},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 852, col: 11, offset: 24378},
								expr: &ruleRefExpr{
									pos:  position{line: 852, col: 11, offset: 24378},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24392},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 853, col: 11, offset: 24398},
								expr: &ruleRefExpr{
									pos:  position{line: 853, col: 11, offset: 24398},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 854, col: 5, offset: 24412},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 854, col: 13, offset: 24420},
								expr: &ruleRefExpr{
									pos:  position{line: 854, col: 13, offset: 24420},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 855, col: 5, offset: 24436},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 855, col: 12, offset: 24443},
								expr: &ruleRefExpr{
									pos:  position{line: 855, col: 12, offset: 24443},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 856, col: 5, offset: 24458},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 856, col: 13, offset: 24466},
								expr: &ruleRefExpr{
									pos:  position{line: 856, col: 13, offset: 24466},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 857, col: 5, offset: 24482},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 11, offset: 24488},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 881, col: 1, offset: 24855},
			expr: &choiceExpr{
				pos: position{line: 882, col: 5, offset: 24869},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 882, col: 5, offset: 24869},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 882, col: 5, offset: 24869},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 882, col: 5, offset: 24869},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 882, col: 12, offset: 24876},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 882, col: 14, offset: 24878},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 5, offset: 24906},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 883, col: 5, offset: 24906},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 883, col: 5, offset: 24906},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 883, col: 12, offset: 24913},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 883, col: 14, offset: 24915},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 26, offset: 24927},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 885, col: 1, offset: 24971},
			expr: &actionExpr{
				pos: position{line: 886, col: 5, offset: 24989},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 886, col: 5, offset: 24989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 886, col: 5, offset: 24989},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 886, col: 9, offset: 24993},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 886, col: 14, offset: 24998},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 886, col: 18, offset: 25002},
								expr: &seqExpr{
									pos: position{line: 886, col: 19, offset: 25003},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 886, col: 19, offset: 25003},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 886, col: 21, offset: 25005},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 886, col: 24, offset: 25008},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 886, col: 26, offset: 25010},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 894, col: 1, offset: 25201},
			expr: &actionExpr{
				pos: position{line: 895, col: 5, offset: 25220},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 895, col: 5, offset: 25220},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 25220},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 11, offset: 25226},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 25, offset: 25240},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 895, col: 30, offset: 25245},
								expr: &actionExpr{
									pos: position{line: 895, col: 31, offset: 25246},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 895, col: 31, offset: 25246},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 895, col: 31, offset: 25246},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 895, col: 34, offset: 25249},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 895, col: 38, offset: 25253},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 895, col: 41, offset: 25256},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 895, col: 46, offset: 25261},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 899, col: 1, offset: 25382},
			expr: &choiceExpr{
				pos: position{line: 900, col: 5, offset: 25394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 25394},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 900, col: 5, offset: 25394},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 900, col: 5, offset: 25394},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 900, col: 7, offset: 25396},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 900, col: 12, offset: 25401},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 900, col: 14, offset: 25403},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 20, offset: 25409},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 900, col: 29, offset: 25418},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 900, col: 35, offset: 25424},
										expr: &ruleRefExpr{
											pos:  position{line: 900, col: 35, offset: 25424},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 903, col: 5, offset: 25519},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 903, col: 5, offset: 25519},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 903, col: 5, offset: 25519},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 903, col: 7, offset: 25521},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 903, col: 12, offset: 25526},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 903, col: 14, offset: 25528},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 905, col: 1, offset: 25553},
			expr: &choiceExpr{
				pos: position{line: 906, col: 5, offset: 25566},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 906, col: 5, offset: 25566},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 906, col: 5, offset: 25566},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 906, col: 5, offset: 25566},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 906, col: 7, offset: 25568},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 906, col: 10, offset: 25571},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 906, col: 12, offset: 25573},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 906, col: 15, offset: 25576},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 907, col: 5, offset: 25604},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 907, col: 5, offset: 25604},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 907, col: 5, offset: 25604},
									name: "_",
								},
								&notExpr{
									pos: position{line: 907, col: 7, offset: 25606},
									expr: &seqExpr{
										pos: position{line: 907, col: 9, offset: 25608},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 907, col: 9, offset: 25608},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 907, col: 27, offset: 25626},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 907, col: 30, offset: 25629},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 907, col: 33, offset: 25632},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 909, col: 1, offset: 25657},
			expr: &ruleRefExpr{
				pos:  position{line: 910, col: 5, offset: 25670},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 912, col: 1, offset: 25676},
			expr: &actionExpr{
				pos: position{line: 913, col: 5, offset: 25689},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 913, col: 5, offset: 25689},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 913, col: 5, offset: 25689},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 25695},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 19, offset: 25703},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 913, col: 24, offset: 25708},
								expr: &actionExpr{
									pos: position{line: 913, col: 25, offset: 25709},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 913, col: 25, offset: 25709},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 913, col: 30, offset: 25714},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 917, col: 1, offset: 25829},
			expr: &actionExpr{
				pos: position{line: 918, col: 5, offset: 25841},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 918, col: 5, offset: 25841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 5, offset: 25841},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 25847},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 24, offset: 25860},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 26, offset: 25862},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 31, offset: 25867},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 918, col: 33, offset: 25869},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 39, offset: 25875},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 48, offset: 25884},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 918, col: 54, offset: 25890},
								expr: &ruleRefExpr{
									pos:  position{line: 918, col: 54, offset: 25890},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 64, offset: 25900},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 66, offset: 25902},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 69, offset: 25905},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 918, col: 71, offset: 25907},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 79, offset: 25915},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 87, offset: 25923},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 918, col: 90, offset: 25926},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 94, offset: 25930},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 918, col: 97, offset: 25933},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 106, offset: 25942},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 937, col: 1, offset: 26177},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 26194},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 26194},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 26194},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 938, col: 5, offset: 26194},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 7, offset: 26196},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 938, col: 14, offset: 26203},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 938, col: 14, offset: 26203},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 938, col: 21, offset: 26210},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 938, col: 29, offset: 26218},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 938, col: 36, offset: 26225},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 26258},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 939, col: 5, offset: 26258},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 941, col: 1, offset: 26286},
			expr: &actionExpr{
				pos: position{line: 942, col: 5, offset: 26299},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 942, col: 5, offset: 26299},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 942, col: 5, offset: 26299},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 942, col: 7, offset: 26301},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 942, col: 13, offset: 26307},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 942, col: 15, offset: 26309},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 20, offset: 26314},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 944, col: 1, offset: 26350},
			expr: &actionExpr{
				pos: position{line: 945, col: 5, offset: 26365},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 945, col: 5, offset: 26365},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 945, col: 5, offset: 26365},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 945, col: 7, offset: 26367},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 945, col: 13, offset: 26373},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 945, col: 15, offset: 26375},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 945, col: 18, offset: 26378},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 945, col: 20, offset: 26380},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 945, col: 28, offset: 26388},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 947, col: 1, offset: 26424},
			expr: &actionExpr{
				pos: position{line: 948, col: 5, offset: 26438},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 948, col: 5, offset: 26438},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 948, col: 5, offset: 26438},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 7, offset: 26440},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 14, offset: 26447},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 948, col: 16, offset: 26449},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 21, offset: 26454},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 950, col: 1, offset: 26490},
			expr: &actionExpr{
				pos: position{line: 951, col: 5, offset: 26505},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 951, col: 5, offset: 26505},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 951, col: 5, offset: 26505},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 7, offset: 26507},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 13, offset: 26513},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 15, offset: 26515},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 18, offset: 26518},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 951, col: 20, offset: 26520},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 25, offset: 26525},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 951, col: 31, offset: 26531},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 37, offset: 26537},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 955, col: 1, offset: 26647},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 26660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 26660},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 26660},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 956, col: 5, offset: 26660},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 956, col: 7, offset: 26662},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 956, col: 12, offset: 26667},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 956, col: 12, offset: 26667},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 956, col: 18, offset: 26673},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 26703},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 957, col: 5, offset: 26703},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 959, col: 1, offset: 26729},
			expr: &choiceExpr{
				pos: position{line: 960, col: 5, offset: 26742},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 960, col: 5, offset: 26742},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 960, col: 5, offset: 26742},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 960, col: 5, offset: 26742},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 960, col: 7, offset: 26744},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 960, col: 13, offset: 26750},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 960, col: 15, offset: 26752},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 21, offset: 26758},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 26789},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 961, col: 5, offset: 26789},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 963, col: 1, offset: 26811},
			expr: &actionExpr{
				pos: position{line: 963, col: 10, offset: 26820},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 963, col: 10, offset: 26820},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 964, col: 1, offset: 26855},
			expr: &actionExpr{
				pos: position{line: 964, col: 6, offset: 26860},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 964, col: 6, offset: 26860},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 965, col: 1, offset: 26887},
			expr: &actionExpr{
				pos: position{line: 965, col: 8, offset: 26894},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 965, col: 8, offset: 26894},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 966, col: 1, offset: 26925},
			expr: &actionExpr{
				pos: position{line: 966, col: 8, offset: 26932},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 966, col: 8, offset: 26932},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 967, col: 1, offset: 26963},
			expr: &actionExpr{
				pos: position{line: 967, col: 9, offset: 26971},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 967, col: 9, offset: 26971},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 968, col: 1, offset: 27004},
			expr: &actionExpr{
				pos: position{line: 968, col: 9, offset: 27012},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 968, col: 9, offset: 27012},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 969, col: 1, offset: 27045},
			expr: &actionExpr{
				pos: position{line: 969, col: 6, offset: 27050},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 969, col: 6, offset: 27050},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 970, col: 1, offset: 27077},
			expr: &actionExpr{
				pos: position{line: 970, col: 10, offset: 27086},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 970, col: 10, offset: 27086},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 971, col: 1, offset: 27121},
			expr: &actionExpr{
				pos: position{line: 971, col: 9, offset: 27129},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 971, col: 9, offset: 27129},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 972, col: 1, offset: 27162},
			expr: &actionExpr{
				pos: position{line: 972, col: 6, offset: 27167},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 972, col: 6, offset: 27167},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 973, col: 1, offset: 27194},
			expr: &actionExpr{
				pos: position{line: 973, col: 9, offset: 27202},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 973, col: 9, offset: 27202},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 974, col: 1, offset: 27235},
			expr: &actionExpr{
				pos: position{line: 974, col: 7, offset: 27241},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 974, col: 7, offset: 27241},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 975, col: 1, offset: 27270},
			expr: &actionExpr{
				pos: position{line: 975, col: 8, offset: 27277},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 975, col: 8, offset: 27277},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 976, col: 1, offset: 27308},
			expr: &actionExpr{
				pos: position{line: 976, col: 8, offset: 27315},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 976, col: 8, offset: 27315},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 977, col: 1, offset: 27346},
			expr: &actionExpr{
				pos: position{line: 977, col: 8, offset: 27353},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 977, col: 8, offset: 27353},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 978, col: 1, offset: 27384},
			expr: &actionExpr{
				pos: position{line: 978, col: 9, offset: 27392},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 978, col: 9, offset: 27392},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 979, col: 1, offset: 27425},
			expr: &actionExpr{
				pos: position{line: 979, col: 9, offset: 27433},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 979, col: 9, offset: 27433},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 981, col: 1, offset: 27467},
			expr: &choiceExpr{
				pos: position{line: 982, col: 5, offset: 27489},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 27489},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 14, offset: 27498},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 19, offset: 27503},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 27, offset: 27511},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 34, offset: 27518},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 42, offset: 27526},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 50, offset: 27534},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 59, offset: 27543},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 67, offset: 27551},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 75, offset: 27559},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 986, col: 1, offset: 27585},
			expr: &choiceExpr{
				pos: position{line: 987, col: 5, offset: 27597},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 27597},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 5, offset: 27613},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 5, offset: 27633},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 5, offset: 27651},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 27670},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 27687},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 5, offset: 27700},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 5, offset: 27709},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 5, offset: 27726},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 5, offset: 27745},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 5, offset: 27764},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 999, col: 1, offset: 27777},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 5, offset: 27795},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 27795},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1000, col: 5, offset: 27795},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1000, col: 5, offset: 27795},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1000, col: 7, offset: 27797},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1000, col: 14, offset: 27804},
									expr: &ruleRefExpr{
										pos:  position{line: 1000, col: 15, offset: 27805},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 27920},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1003, col: 5, offset: 27920},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1003, col: 7, offset: 27922},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1007, col: 1, offset: 28026},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 5, offset: 28045},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 28045},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 28045},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1008, col: 5, offset: 28045},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 7, offset: 28047},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1008, col: 11, offset: 28051},
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 12, offset: 28052},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 28166},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1011, col: 5, offset: 28166},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 7, offset: 28168},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1015, col: 1, offset: 28267},
			expr: &actionExpr{
				pos: position{line: 1016, col: 5, offset: 28284},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1016, col: 5, offset: 28284},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1016, col: 7, offset: 28286},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1020, col: 1, offset: 28399},
			expr: &actionExpr{
				pos: position{line: 1021, col: 5, offset: 28418},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1021, col: 5, offset: 28418},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1021, col: 7, offset: 28420},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1025, col: 1, offset: 28529},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 5, offset: 28548},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 28548},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1026, col: 5, offset: 28548},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1027, col: 5, offset: 28661},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1027, col: 5, offset: 28661},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1029, col: 1, offset: 28772},
			expr: &actionExpr{
				pos: position{line: 1030, col: 5, offset: 28788},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1030, col: 5, offset: 28788},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1032, col: 1, offset: 28894},
			expr: &actionExpr{
				pos: position{line: 1033, col: 5, offset: 28911},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 5, offset: 28911},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1033, col: 5, offset: 28911},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1033, col: 10, offset: 28916},
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 10, offset: 28916},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1037, col: 1, offset: 29031},
			expr: &actionExpr{
				pos: position{line: 1038, col: 5, offset: 29047},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 5, offset: 29047},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1038, col: 5, offset: 29047},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 9, offset: 29051},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 13, offset: 29055},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1038, col: 18, offset: 29060},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1042, col: 1, offset: 29149},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 29162},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 29162},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1044, col: 5, offset: 29178},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1044, col: 5, offset: 29178},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 9, offset: 29182},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1048, col: 1, offset: 29281},
			expr: &choiceExpr{
				pos: position{line: 1049, col: 5, offset: 29290},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1049, col: 5, offset: 29290},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 5, offset: 29306},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29324},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1053, col: 1, offset: 29337},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 29355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 29355},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1054, col: 5, offset: 29355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1054, col: 5, offset: 29355},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 10, offset: 29360},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1054, col: 24, offset: 29374},
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 25, offset: 29375},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29415},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 29415},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1055, col: 5, offset: 29415},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 10, offset: 29420},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 25, offset: 29435},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1055, col: 29, offset: 29439},
										expr: &seqExpr{
											pos: position{line: 1055, col: 30, offset: 29440},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1055, col: 30, offset: 29440},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1055, col: 33, offset: 29443},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1055, col: 37, offset: 29447},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1055, col: 40, offset: 29450},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 29682},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1061, col: 5, offset: 29682},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 10, offset: 29687},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1064, col: 5, offset: 29787},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1064, col: 5, offset: 29787},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1064, col: 5, offset: 29787},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1064, col: 9, offset: 29791},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1064, col: 12, offset: 29794},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1064, col: 14, offset: 29796},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1064, col: 25, offset: 29807},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1066, col: 1, offset: 29830},
			expr: &actionExpr{
				pos: position{line: 1067, col: 5, offset: 29844},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1067, col: 5, offset: 29844},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 29850},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1071, col: 1, offset: 29946},
			expr: &actionExpr{
				pos: position{line: 1072, col: 5, offset: 29959},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1072, col: 5, offset: 29959},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 29959},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1072, col: 11, offset: 29965},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1072, col: 16, offset: 29970},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1072, col: 21, offset: 29975},
								expr: &ruleRefExpr{
									pos:  position{line: 1072, col: 21, offset: 29975},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1076, col: 1, offset: 30069},
			expr: &actionExpr{
				pos: position{line: 1076, col: 16, offset: 30084},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 16, offset: 30084},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1076, col: 16, offset: 30084},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1076, col: 19, offset: 30087},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1076, col: 23, offset: 30091},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 26, offset: 30094},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 30, offset: 30098},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1078, col: 1, offset: 30124},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 5, offset: 30140},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 30140},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 30140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 30140},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1079, col: 9, offset: 30144},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 12, offset: 30147},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 19, offset: 30154},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1079, col: 33, offset: 30168},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1079, col: 36, offset: 30171},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 30266},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1082, col: 5, offset: 30266},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1082, col: 5, offset: 30266},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1082, col: 9, offset: 30270},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1082, col: 12, offset: 30273},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 16, offset: 30277},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1082, col: 21, offset: 30282},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1082, col: 24, offset: 30285},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1085, col: 5, offset: 30374},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1085, col: 5, offset: 30374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1085, col: 5, offset: 30374},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1085, col: 10, offset: 30379},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 14, offset: 30383},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 18, offset: 30387},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1085, col: 23, offset: 30392},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1085, col: 26, offset: 30395},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 5, offset: 30483},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1088, col: 5, offset: 30483},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1088, col: 5, offset: 30483},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 10, offset: 30488},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 13, offset: 30491},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 21, offset: 30499},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 26, offset: 30504},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1088, col: 29, offset: 30507},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 33, offset: 30511},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 36, offset: 30514},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 44, offset: 30522},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 49, offset: 30527},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1088, col: 52, offset: 30530},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1092, col: 1, offset: 30644},
			expr: &actionExpr{
				pos: position{line: 1093, col: 5, offset: 30664},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1093, col: 5, offset: 30664},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1093, col: 7, offset: 30666},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1100, col: 1, offset: 30882},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 5, offset: 30907},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1101, col: 5, offset: 30907},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1101, col: 5, offset: 30907},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1101, col: 5, offset: 30907},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 9, offset: 30911},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1101, col: 11, offset: 30913},
										expr: &ruleRefExpr{
											pos:  position{line: 1101, col: 11, offset: 30913},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 37, offset: 30939},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1102, col: 5, offset: 30965},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1102, col: 5, offset: 30965},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1102, col: 5, offset: 30965},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 9, offset: 30969},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1102, col: 11, offset: 30971},
										expr: &ruleRefExpr{
											pos:  position{line: 1102, col: 11, offset: 30971},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1102, col: 37, offset: 30997},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1104, col: 1, offset: 31020},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 31049},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1105, col: 5, offset: 31049},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1106, col: 5, offset: 31066},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1106, col: 5, offset: 31066},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1106, col: 7, offset: 31068},
								expr: &ruleRefExpr{
									pos:  position{line: 1106, col: 7, offset: 31068},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1110, col: 1, offset: 31205},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 31234},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 31234},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 31234},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 5, offset: 31234},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 10, offset: 31239},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1111, col: 12, offset: 31241},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 31268},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 31268},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1112, col: 5, offset: 31268},
									expr: &litMatcher{
										pos:        position{line: 1112, col: 8, offset: 31271},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 15, offset: 31278},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 17, offset: 31280},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1114, col: 1, offset: 31316},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 5, offset: 31345},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1115, col: 5, offset: 31345},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 31362},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1116, col: 5, offset: 31362},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1116, col: 7, offset: 31364},
								expr: &ruleRefExpr{
									pos:  position{line: 1116, col: 7, offset: 31364},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1120, col: 1, offset: 31501},
			expr: &choiceExpr{
				pos: position{line: 1121, col: 5, offset: 31530},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 31530},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 31530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1121, col: 5, offset: 31530},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 10, offset: 31535},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1121, col: 12, offset: 31537},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1122, col: 5, offset: 31564},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1122, col: 5, offset: 31564},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1122, col: 5, offset: 31564},
									expr: &litMatcher{
										pos:        position{line: 1122, col: 8, offset: 31567},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 15, offset: 31574},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1122, col: 17, offset: 31576},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1124, col: 1, offset: 31612},
			expr: &actionExpr{
				pos: position{line: 1125, col: 5, offset: 31629},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 5, offset: 31629},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1125, col: 5, offset: 31629},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1125, col: 10, offset: 31634},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 13, offset: 31637},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 15, offset: 31639},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1125, col: 20, offset: 31644},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1125, col: 23, offset: 31647},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1144, col: 1, offset: 31947},
			expr: &actionExpr{
				pos: position{line: 1145, col: 5, offset: 31965},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1145, col: 9, offset: 31969},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1145, col: 9, offset: 31969},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1145, col: 19, offset: 31979},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1145, col: 30, offset: 31990},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1145, col: 41, offset: 32001},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1146, col: 9, offset: 32018},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1146, col: 18, offset: 32027},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1146, col: 28, offset: 32037},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1146, col: 38, offset: 32047},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1147, col: 9, offset: 32063},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1147, col: 21, offset: 32075},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1148, col: 9, offset: 32093},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1148, col: 18, offset: 32102},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1149, col: 9, offset: 32119},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1149, col: 22, offset: 32132},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1150, col: 9, offset: 32147},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1151, col: 9, offset: 32163},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1151, col: 16, offset: 32170},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 9, offset: 32184},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 18, offset: 32193},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1156, col: 1, offset: 32309},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 5, offset: 32327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1157, col: 5, offset: 32327},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1157, col: 5, offset: 32327},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1157, col: 5, offset: 32327},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1157, col: 11, offset: 32333},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1157, col: 21, offset: 32343},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1157, col: 26, offset: 32348},
										expr: &ruleRefExpr{
											pos:  position{line: 1157, col: 26, offset: 32348},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1160, col: 5, offset: 32450},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1160, col: 5, offset: 32450},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1162, col: 1, offset: 32474},
			expr: &actionExpr{
				pos: position{line: 1162, col: 21, offset: 32494},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 21, offset: 32494},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1162, col: 21, offset: 32494},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1162, col: 24, offset: 32497},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1162, col: 28, offset: 32501},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 31, offset: 32504},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 35, offset: 32508},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1164, col: 1, offset: 32539},
			expr: &actionExpr{
				pos: position{line: 1165, col: 5, offset: 32553},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 5, offset: 32553},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 32553},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 10, offset: 32558},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 20, offset: 32568},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1165, col: 23, offset: 32571},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 27, offset: 32575},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 30, offset: 32578},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 34, offset: 32582},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1169, col: 1, offset: 32664},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 5, offset: 32678},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1170, col: 5, offset: 32678},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 5, offset: 32697},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1173, col: 1, offset: 32711},
			expr: &actionExpr{
				pos: position{line: 1173, col: 12, offset: 32722},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1173, col: 12, offset: 32722},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1173, col: 13, offset: 32723},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1173, col: 13, offset: 32723},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1173, col: 21, offset: 32731},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1173, col: 28, offset: 32738},
							expr: &ruleRefExpr{
								pos:  position{line: 1173, col: 29, offset: 32739},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1174, col: 1, offset: 32776},
			expr: &actionExpr{
				pos: position{line: 1174, col: 11, offset: 32786},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 11, offset: 32786},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1174, col: 12, offset: 32787},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1174, col: 12, offset: 32787},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1174, col: 19, offset: 32794},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1174, col: 25, offset: 32800},
							expr: &ruleRefExpr{
								pos:  position{line: 1174, col: 26, offset: 32801},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1175, col: 1, offset: 32837},
			expr: &actionExpr{
				pos: position{line: 1175, col: 11, offset: 32847},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 11, offset: 32847},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1175, col: 11, offset: 32847},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1175, col: 16, offset: 32852},
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 17, offset: 32853},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1176, col: 1, offset: 32889},
			expr: &actionExpr{
				pos: position{line: 1176, col: 12, offset: 32900},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1176, col: 12, offset: 32900},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1176, col: 13, offset: 32901},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1176, col: 13, offset: 32901},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1176, col: 21, offset: 32909},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1176, col: 28, offset: 32916},
							expr: &ruleRefExpr{
								pos:  position{line: 1176, col: 29, offset: 32917},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1177, col: 1, offset: 32954},
			expr: &actionExpr{
				pos: position{line: 1177, col: 11, offset: 32964},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1177, col: 11, offset: 32964},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1177, col: 11, offset: 32964},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1177, col: 16, offset: 32969},
							expr: &ruleRefExpr{
								pos:  position{line: 1177, col: 17, offset: 32970},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1179, col: 1, offset: 33007},
			expr: &charClassMatcher{
				pos:        position{line: 1179, col: 19, offset: 33025},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1181, col: 1, offset: 33037},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 18, offset: 33054},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1181, col: 18, offset: 33054},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1181, col: 36, offset: 33072},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1183, col: 1, offset: 33079},
			expr: &actionExpr{
				pos: position{line: 1184, col: 5, offset: 33094},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1184, col: 5, offset: 33094},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1184, col: 8, offset: 33097},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1186, col: 1, offset: 33178},
			expr: &choiceExpr{
				pos: position{line: 1187, col: 5, offset: 33197},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 33197},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1187, col: 5, offset: 33197},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1187, col: 5, offset: 33197},
									expr: &seqExpr{
										pos: position{line: 1187, col: 7, offset: 33199},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1187, col: 7, offset: 33199},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1187, col: 15, offset: 33207},
												expr: &ruleRefExpr{
													pos:  position{line: 1187, col: 16, offset: 33208},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1187, col: 32, offset: 33224},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1187, col: 48, offset: 33240},
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 48, offset: 33240},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 33292},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1188, col: 5, offset: 33292},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1189, col: 5, offset: 33331},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1189, col: 5, offset: 33331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1189, col: 5, offset: 33331},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1189, col: 10, offset: 33336},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1189, col: 13, offset: 33339},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 33430},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1191, col: 5, offset: 33430},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1192, col: 5, offset: 33472},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1192, col: 5, offset: 33472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1192, col: 5, offset: 33472},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1192, col: 8, offset: 33475},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1192, col: 26, offset: 33493},
									expr: &seqExpr{
										pos: position{line: 1192, col: 28, offset: 33495},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1192, col: 28, offset: 33495},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1192, col: 31, offset: 33498},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1194, col: 1, offset: 33523},
			expr: &choiceExpr{
				pos: position{line: 1195, col: 5, offset: 33535},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1195, col: 5, offset: 33535},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 5, offset: 33554},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 5, offset: 33570},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 5, offset: 33578},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1200, col: 1, offset: 33588},
			expr: &actionExpr{
				pos: position{line: 1201, col: 5, offset: 33597},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 5, offset: 33597},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1201, col: 5, offset: 33597},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1201, col: 14, offset: 33606},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1201, col: 18, offset: 33610},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1205, col: 1, offset: 33730},
			expr: &seqExpr{
				pos: position{line: 1205, col: 12, offset: 33741},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 12, offset: 33741},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1205, col: 15, offset: 33744},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 19, offset: 33748},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1205, col: 22, offset: 33751},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 26, offset: 33755},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1207, col: 1, offset: 33759},
			expr: &seqExpr{
				pos: position{line: 1207, col: 6, offset: 33764},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1207, col: 6, offset: 33764},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1207, col: 11, offset: 33769},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1207, col: 16, offset: 33774},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1207, col: 21, offset: 33779},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1208, col: 1, offset: 33785},
			expr: &seqExpr{
				pos: position{line: 1208, col: 6, offset: 33790},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1208, col: 6, offset: 33790},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1208, col: 11, offset: 33795},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1210, col: 1, offset: 33802},
			expr: &seqExpr{
				pos: position{line: 1210, col: 12, offset: 33813},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1210, col: 12, offset: 33813},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 24, offset: 33825},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1212, col: 1, offset: 33837},
			expr: &seqExpr{
				pos: position{line: 1212, col: 15, offset: 33851},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1212, col: 15, offset: 33851},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1212, col: 18, offset: 33854},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 22, offset: 33858},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1212, col: 25, offset: 33861},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 29, offset: 33865},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1212, col: 32, offset: 33868},
						expr: &seqExpr{
							pos: position{line: 1212, col: 33, offset: 33869},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1212, col: 33, offset: 33869},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1212, col: 37, offset: 33873},
									expr: &charClassMatcher{
										pos:        position{line: 1212, col: 37, offset: 33873},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1214, col: 1, offset: 33883},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 5, offset: 33898},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1215, col: 5, offset: 33898},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1216, col: 5, offset: 33906},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1216, col: 6, offset: 33907},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1216, col: 6, offset: 33907},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1216, col: 12, offset: 33913},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1216, col: 17, offset: 33918},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1216, col: 20, offset: 33921},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1216, col: 24, offset: 33925},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1216, col: 27, offset: 33928},
								expr: &seqExpr{
									pos: position{line: 1216, col: 28, offset: 33929},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1216, col: 28, offset: 33929},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1216, col: 32, offset: 33933},
											expr: &charClassMatcher{
												pos:        position{line: 1216, col: 32, offset: 33933},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1218, col: 1, offset: 33943},
			expr: &actionExpr{
				pos: position{line: 1219, col: 5, offset: 33956},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 5, offset: 33956},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1219, col: 5, offset: 33956},
							expr: &litMatcher{
								pos:        position{line: 1219, col: 5, offset: 33956},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1219, col: 10, offset: 33961},
							expr: &seqExpr{
								pos: position{line: 1219, col: 11, offset: 33962},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1219, col: 11, offset: 33962},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1219, col: 19, offset: 33970},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1223, col: 1, offset: 34096},
			expr: &seqExpr{
				pos: position{line: 1223, col: 11, offset: 34106},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 34106},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1223, col: 16, offset: 34111},
						expr: &seqExpr{
							pos: position{line: 1223, col: 17, offset: 34112},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1223, col: 17, offset: 34112},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1223, col: 21, offset: 34116},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1225, col: 1, offset: 34124},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 5, offset: 34137},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1226, col: 5, offset: 34137},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1227, col: 5, offset: 34146},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1228, col: 5, offset: 34155},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1229, col: 5, offset: 34164},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1230, col: 5, offset: 34172},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1231, col: 5, offset: 34180},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1232, col: 5, offset: 34188},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1233, col: 5, offset: 34196},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1234, col: 5, offset: 34204},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1236, col: 1, offset: 34209},
			expr: &actionExpr{
				pos: position{line: 1237, col: 5, offset: 34216},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 5, offset: 34216},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1237, col: 5, offset: 34216},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1237, col: 10, offset: 34221},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1237, col: 14, offset: 34225},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1237, col: 19, offset: 34230},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1237, col: 23, offset: 34234},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1237, col: 28, offset: 34239},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1237, col: 32, offset: 34243},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1239, col: 1, offset: 34280},
			expr: &actionExpr{
				pos: position{line: 1240, col: 5, offset: 34288},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1240, col: 5, offset: 34288},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1240, col: 5, offset: 34288},
							expr: &seqExpr{
								pos: position{line: 1240, col: 8, offset: 34291},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1240, col: 8, offset: 34291},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1240, col: 12, offset: 34295},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 16, offset: 34299},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1240, col: 20, offset: 34303},
										expr: &choiceExpr{
											pos: position{line: 1240, col: 22, offset: 34305},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1240, col: 22, offset: 34305},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1240, col: 33, offset: 34316},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1240, col: 39, offset: 34322},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1240, col: 41, offset: 34324},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1244, col: 1, offset: 34488},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 5, offset: 34506},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 34506},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 34506},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1245, col: 5, offset: 34506},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1245, col: 7, offset: 34508},
										expr: &ruleRefExpr{
											pos:  position{line: 1245, col: 7, offset: 34508},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 17, offset: 34518},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 19, offset: 34520},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 34584},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 34584},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1248, col: 5, offset: 34584},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 7, offset: 34586},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 11, offset: 34590},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1248, col: 13, offset: 34592},
										expr: &ruleRefExpr{
											pos:  position{line: 1248, col: 13, offset: 34592},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1248, col: 23, offset: 34602},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 28, offset: 34607},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1248, col: 30, offset: 34609},
										expr: &ruleRefExpr{
											pos:  position{line: 1248, col: 30, offset: 34609},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 40, offset: 34619},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 42, offset: 34621},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 34720},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 34720},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1251, col: 5, offset: 34720},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 10, offset: 34725},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1251, col: 12, offset: 34727},
										expr: &ruleRefExpr{
											pos:  position{line: 1251, col: 12, offset: 34727},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 22, offset: 34737},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 24, offset: 34739},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1254, col: 5, offset: 34810},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1254, col: 5, offset: 34810},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1254, col: 5, offset: 34810},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1254, col: 7, offset: 34812},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1254, col: 11, offset: 34816},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1254, col: 13, offset: 34818},
										expr: &ruleRefExpr{
											pos:  position{line: 1254, col: 13, offset: 34818},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1254, col: 23, offset: 34828},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1257, col: 5, offset: 34896},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1257, col: 5, offset: 34896},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1261, col: 1, offset: 34933},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 34945},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1262, col: 5, offset: 34945},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 5, offset: 34952},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1265, col: 1, offset: 34957},
			expr: &actionExpr{
				pos: position{line: 1265, col: 12, offset: 34968},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 12, offset: 34968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1265, col: 12, offset: 34968},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 16, offset: 34972},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 18, offset: 34974},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1267, col: 1, offset: 35012},
			expr: &actionExpr{
				pos: position{line: 1267, col: 12, offset: 35023},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 12, offset: 35023},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1267, col: 12, offset: 35023},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 14, offset: 35025},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1267, col: 18, offset: 35029},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1269, col: 1, offset: 35067},
			expr: &actionExpr{
				pos: position{line: 1270, col: 5, offset: 35078},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 5, offset: 35078},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1270, col: 5, offset: 35078},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 7, offset: 35080},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1270, col: 10, offset: 35083},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 14, offset: 35087},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 16, offset: 35089},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1274, col: 1, offset: 35162},
			expr: &actionExpr{
				pos: position{line: 1275, col: 5, offset: 35173},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 5, offset: 35173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1275, col: 5, offset: 35173},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 7, offset: 35175},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1275, col: 11, offset: 35179},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 15, offset: 35183},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 17, offset: 35185},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1279, col: 1, offset: 35248},
			expr: &actionExpr{
				pos: position{line: 1280, col: 4, offset: 35256},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1280, col: 4, offset: 35256},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1280, col: 6, offset: 35258},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1282, col: 1, offset: 35298},
			expr: &choiceExpr{
				pos: position{line: 1283, col: 5, offset: 35312},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1283, col: 5, offset: 35312},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 5, offset: 35327},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1286, col: 1, offset: 35343},
			expr: &actionExpr{
				pos: position{line: 1286, col: 14, offset: 35356},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1286, col: 14, offset: 35356},
					expr: &charClassMatcher{
						pos:        position{line: 1286, col: 14, offset: 35356},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1288, col: 1, offset: 35395},
			expr: &actionExpr{
				pos: position{line: 1289, col: 5, offset: 35414},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1289, col: 5, offset: 35414},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1289, col: 5, offset: 35414},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1289, col: 9, offset: 35418},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1291, col: 1, offset: 35461},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 5, offset: 35477},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1292, col: 5, offset: 35477},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1292, col: 5, offset: 35477},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1292, col: 5, offset: 35477},
									expr: &litMatcher{
										pos:        position{line: 1292, col: 5, offset: 35477},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1292, col: 10, offset: 35482},
									expr: &charClassMatcher{
										pos:        position{line: 1292, col: 10, offset: 35482},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1292, col: 17, offset: 35489},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1292, col: 21, offset: 35493},
									expr: &charClassMatcher{
										pos:        position{line: 1292, col: 21, offset: 35493},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1292, col: 28, offset: 35500},
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 28, offset: 35500},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1295, col: 5, offset: 35559},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1295, col: 5, offset: 35559},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1295, col: 5, offset: 35559},
									expr: &litMatcher{
										pos:        position{line: 1295, col: 5, offset: 35559},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1295, col: 10, offset: 35564},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1295, col: 14, offset: 35568},
									expr: &charClassMatcher{
										pos:        position{line: 1295, col: 14, offset: 35568},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1295, col: 21, offset: 35575},
									expr: &ruleRefExpr{
										pos:  position{line: 1295, col: 21, offset: 35575},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1298, col: 5, offset: 35634},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1298, col: 7, offset: 35636},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1298, col: 7, offset: 35636},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1298, col: 13, offset: 35642},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1301, col: 1, offset: 35686},
			expr: &seqExpr{
				pos: position{line: 1301, col: 16, offset: 35701},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1301, col: 16, offset: 35701},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1301, col: 21, offset: 35706},
						expr: &charClassMatcher{
							pos:        position{line: 1301, col: 21, offset: 35706},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 27, offset: 35712},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1303, col: 1, offset: 35724},
			expr: &litMatcher{
				pos:        position{line: 1303, col: 7, offset: 35730},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1305, col: 1, offset: 35737},
			expr: &seqExpr{
				pos: position{line: 1305, col: 12, offset: 35748},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1305, col: 12, offset: 35748},
						expr: &choiceExpr{
							pos: position{line: 1305, col: 13, offset: 35749},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1305, col: 13, offset: 35749},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1305, col: 19, offset: 35755},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1305, col: 25, offset: 35761},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1307, col: 1, offset: 35768},
			expr: &actionExpr{
				pos: position{line: 1307, col: 7, offset: 35774},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1307, col: 7, offset: 35774},
					expr: &ruleRefExpr{
						pos:  position{line: 1307, col: 7, offset: 35774},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1309, col: 1, offset: 35816},
			expr: &charClassMatcher{
				pos:        position{line: 1309, col: 12, offset: 35827},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1311, col: 1, offset: 35840},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 35857},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1312, col: 5, offset: 35857},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1312, col: 5, offset: 35857},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1312, col: 5, offset: 35857},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1312, col: 9, offset: 35861},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1312, col: 11, offset: 35863},
										expr: &ruleRefExpr{
											pos:  position{line: 1312, col: 11, offset: 35863},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1312, col: 29, offset: 35881},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1313, col: 5, offset: 35918},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1313, col: 5, offset: 35918},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1313, col: 5, offset: 35918},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1313, col: 9, offset: 35922},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1313, col: 11, offset: 35924},
										expr: &ruleRefExpr{
											pos:  position{line: 1313, col: 11, offset: 35924},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1313, col: 29, offset: 35942},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1315, col: 1, offset: 35976},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 5, offset: 35997},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1316, col: 5, offset: 35997},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1316, col: 5, offset: 35997},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1316, col: 5, offset: 35997},
									expr: &choiceExpr{
										pos: position{line: 1316, col: 7, offset: 35999},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1316, col: 7, offset: 35999},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1316, col: 13, offset: 36005},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1316, col: 26, offset: 36018,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 36055},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1317, col: 5, offset: 36055},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1317, col: 5, offset: 36055},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1317, col: 10, offset: 36060},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1317, col: 12, offset: 36062},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1319, col: 1, offset: 36096},
			expr: &actionExpr{
				pos: position{line: 1320, col: 5, offset: 36108},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 5, offset: 36108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1320, col: 5, offset: 36108},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 10, offset: 36113},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 23, offset: 36126},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1320, col: 28, offset: 36131},
								expr: &ruleRefExpr{
									pos:  position{line: 1320, col: 28, offset: 36131},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1322, col: 1, offset: 36193},
			expr: &choiceExpr{
				pos: position{line: 1323, col: 5, offset: 36210},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1323, col: 5, offset: 36210},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 5, offset: 36227},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1326, col: 1, offset: 36239},
			expr: &actionExpr{
				pos: position{line: 1326, col: 16, offset: 36254},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1326, col: 16, offset: 36254},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1328, col: 1, offset: 36303},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 5, offset: 36319},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1329, col: 5, offset: 36319},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1330, col: 5, offset: 36336},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1332, col: 1, offset: 36343},
			expr: &actionExpr{
				pos: position{line: 1332, col: 14, offset: 36356},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 14, offset: 36356},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1332, col: 14, offset: 36356},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 19, offset: 36361},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1332, col: 22, offset: 36364},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1332, col: 22, offset: 36364},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 38, offset: 36380},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1334, col: 1, offset: 36416},
			expr: &actionExpr{
				pos: position{line: 1335, col: 5, offset: 36432},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 5, offset: 36432},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1335, col: 5, offset: 36432},
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 6, offset: 36433},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1335, col: 22, offset: 36449},
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 23, offset: 36450},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 35, offset: 36462},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 40, offset: 36467},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 50, offset: 36477},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1335, col: 55, offset: 36482},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 55, offset: 36482},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1339, col: 1, offset: 36551},
			expr: &seqExpr{
				pos: position{line: 1339, col: 19, offset: 36569},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1339, col: 19, offset: 36569},
						expr: &litMatcher{
							pos:        position{line: 1339, col: 19, offset: 36569},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 24, offset: 36574},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1340, col: 1, offset: 36587},
			expr: &seqExpr{
				pos: position{line: 1340, col: 15, offset: 36601},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1340, col: 15, offset: 36601},
						expr: &ruleRefExpr{
							pos:  position{line: 1340, col: 15, offset: 36601},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1340, col: 28, offset: 36614},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1342, col: 1, offset: 36619},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 5, offset: 36633},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1343, col: 5, offset: 36633},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 5, offset: 36650},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1345, col: 5, offset: 36662},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1345, col: 5, offset: 36662},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1347, col: 1, offset: 36686},
			expr: &choiceExpr{
				pos: position{line: 1348, col: 5, offset: 36699},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1348, col: 5, offset: 36699},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1349, col: 5, offset: 36713},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1351, col: 1, offset: 36720},
			expr: &actionExpr{
				pos: position{line: 1351, col: 11, offset: 36730},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1351, col: 11, offset: 36730},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1351, col: 11, offset: 36730},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1351, col: 16, offset: 36735},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1351, col: 19, offset: 36738},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1351, col: 19, offset: 36738},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1351, col: 32, offset: 36751},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1353, col: 1, offset: 36787},
			expr: &choiceExpr{
				pos: position{line: 1354, col: 5, offset: 36802},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1354, col: 5, offset: 36802},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1354, col: 5, offset: 36802},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1355, col: 5, offset: 36830},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1355, col: 5, offset: 36830},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1356, col: 5, offset: 36860},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1359, col: 1, offset: 36867},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 5, offset: 36888},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1360, col: 5, offset: 36888},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1360, col: 5, offset: 36888},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1360, col: 5, offset: 36888},
									expr: &choiceExpr{
										pos: position{line: 1360, col: 7, offset: 36890},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1360, col: 7, offset: 36890},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1360, col: 13, offset: 36896},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1360, col: 26, offset: 36909,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1361, col: 5, offset: 36946},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1361, col: 5, offset: 36946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1361, col: 5, offset: 36946},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1361, col: 10, offset: 36951},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1361, col: 12, offset: 36953},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1363, col: 1, offset: 36987},
			expr: &choiceExpr{
				pos: position{line: 1364, col: 5, offset: 37006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1364, col: 5, offset: 37006},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 5, offset: 37027},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1367, col: 1, offset: 37042},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 5, offset: 37063},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1368, col: 5, offset: 37063},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1369, col: 5, offset: 37071},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1369, col: 5, offset: 37071},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1370, col: 5, offset: 37111},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 37120},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1371, col: 5, offset: 37120},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 37149},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1372, col: 5, offset: 37149},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1373, col: 5, offset: 37178},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1373, col: 5, offset: 37178},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1374, col: 5, offset: 37207},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1374, col: 5, offset: 37207},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1375, col: 5, offset: 37236},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1375, col: 5, offset: 37236},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1376, col: 5, offset: 37265},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1376, col: 5, offset: 37265},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1378, col: 1, offset: 37291},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 5, offset: 37309},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1379, col: 5, offset: 37309},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1379, col: 5, offset: 37309},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 37337},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1380, col: 5, offset: 37337},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1381, col: 5, offset: 37365},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1383, col: 1, offset: 37371},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 5, offset: 37389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1384, col: 5, offset: 37389},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1384, col: 5, offset: 37389},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1384, col: 5, offset: 37389},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1384, col: 9, offset: 37393},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1384, col: 16, offset: 37400},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1384, col: 16, offset: 37400},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1384, col: 25, offset: 37409},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1384, col: 34, offset: 37418},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1384, col: 43, offset: 37427},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1387, col: 5, offset: 37490},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1387, col: 5, offset: 37490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1387, col: 5, offset: 37490},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1387, col: 9, offset: 37494},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1387, col: 13, offset: 37498},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1387, col: 20, offset: 37505},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1387, col: 20, offset: 37505},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1387, col: 29, offset: 37514},
												expr: &ruleRefExpr{
													pos:  position{line: 1387, col: 29, offset: 37514},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1387, col: 39, offset: 37524},
												expr: &ruleRefExpr{
													pos:  position{line: 1387, col: 39, offset: 37524},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1387, col: 49, offset: 37534},
												expr: &ruleRefExpr{
													pos:  position{line: 1387, col: 49, offset: 37534},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1387, col: 59, offset: 37544},
												expr: &ruleRefExpr{
													pos:  position{line: 1387, col: 59, offset: 37544},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1387, col: 69, offset: 37554},
												expr: &ruleRefExpr{
													pos:  position{line: 1387, col: 69, offset: 37554},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1387, col: 80, offset: 37565},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1391, col: 1, offset: 37619},
			expr: &actionExpr{
				pos: position{line: 1392, col: 5, offset: 37637},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 5, offset: 37637},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1392, col: 5, offset: 37637},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 9, offset: 37641},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1392, col: 14, offset: 37646},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1392, col: 25, offset: 37657},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1392, col: 29, offset: 37661},
							expr: &ruleRefExpr{
								pos:  position{line: 1392, col: 30, offset: 37662},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1394, col: 1, offset: 37697},
			expr: &actionExpr{
				pos: position{line: 1395, col: 5, offset: 37712},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1395, col: 5, offset: 37712},
					expr: &choiceExpr{
						pos: position{line: 1395, col: 6, offset: 37713},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1395, col: 6, offset: 37713},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1395, col: 15, offset: 37722},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1395, col: 15, offset: 37722},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1395, col: 20, offset: 37727,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1397, col: 1, offset: 37763},
			expr: &charClassMatcher{
				pos:        position{line: 1398, col: 5, offset: 37779},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1400, col: 1, offset: 37794},
			expr: &oneOrMoreExpr{
				pos: position{line: 1400, col: 6, offset: 37799},
				expr: &ruleRefExpr{
					pos:  position{line: 1400, col: 6, offset: 37799},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1402, col: 1, offset: 37810},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1402, col: 6, offset: 37815},
				expr: &ruleRefExpr{
					pos:  position{line: 1402, col: 6, offset: 37815},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1404, col: 1, offset: 37826},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 5, offset: 37839},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1405, col: 5, offset: 37839},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 5, offset: 37854},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 5, offset: 37873},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1409, col: 1, offset: 37882},
			expr: &anyMatcher{
				line: 1410, col: 5, offset: 37902,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1412, col: 1, offset: 37905},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 5, offset: 37933},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1413, col: 5, offset: 37933},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1414, col: 5, offset: 37942},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1415, col: 5, offset: 37951},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1416, col: 5, offset: 37960},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1417, col: 5, offset: 37968},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1418, col: 5, offset: 37981},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1420, col: 1, offset: 37991},
			expr: &charClassMatcher{
				pos:        position{line: 1421, col: 5, offset: 38010},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1427, col: 1, offset: 38340},
			expr: &ruleRefExpr{
				pos:  position{line: 1430, col: 5, offset: 38411},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1432, col: 1, offset: 38430},
			expr: &seqExpr{
				pos: position{line: 1433, col: 5, offset: 38451},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1433, col: 5, offset: 38451},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1433, col: 10, offset: 38456},
						expr: &seqExpr{
							pos: position{line: 1433, col: 11, offset: 38457},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1433, col: 11, offset: 38457},
									expr: &litMatcher{
										pos:        position{line: 1433, col: 12, offset: 38458},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1433, col: 17, offset: 38463},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1433, col: 35, offset: 38481},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1435, col: 1, offset: 38487},
			expr: &seqExpr{
				pos: position{line: 1436, col: 5, offset: 38509},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1436, col: 5, offset: 38509},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1436, col: 10, offset: 38514},
						expr: &seqExpr{
							pos: position{line: 1436, col: 11, offset: 38515},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1436, col: 11, offset: 38515},
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 12, offset: 38516},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1436, col: 27, offset: 38531},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1438, col: 1, offset: 38550},
			expr: &seqExpr{
				pos: position{line: 1438, col: 7, offset: 38556},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1438, col: 7, offset: 38556},
						expr: &ruleRefExpr{
							pos:  position{line: 1438, col: 7, offset: 38556},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 19, offset: 38568},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1440, col: 1, offset: 38584},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 7, offset: 38590},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1440, col: 7, offset: 38590},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 11, offset: 38594},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1442, col: 1, offset: 38599},
			expr: &notExpr{
				pos: position{line: 1442, col: 7, offset: 38605},
				expr: &anyMatcher{
					line: 1442, col: 8, offset: 38606,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1444, col: 1, offset: 38609},
			expr: &notExpr{
				pos: position{line: 1444, col: 8, offset: 38616},
				expr: &ruleRefExpr{
					pos:  position{line: 1444, col: 9, offset: 38617},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential1(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, op interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": op}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["op"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp8()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp8()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, scope interface{}) (interface{}, error) {
	var over = map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}
	if locals != nil {
		return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil
	}
	return over, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
