// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 84},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 84},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 84},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 87},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 91},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 23, offset: 102},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 26, offset: 105},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 130},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 140},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 140},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 140},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 146},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 146},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 152},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 21, offset: 156},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 16, col: 1, offset: 263},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 278},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 278},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 278},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 284},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 294},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 299},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 299},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 21, col: 1, offset: 456},
			expr: &actionExpr{
				pos: position{line: 21, col: 18, offset: 473},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 18, offset: 473},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 18, offset: 473},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 21, offset: 476},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 26, offset: 481},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 29, offset: 484},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 31, offset: 486},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 515},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 524},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 524},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 527},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 527},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 539},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 30, offset: 549},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 570},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 584},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 584},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 584},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 584},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 592},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 594},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 597},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 612},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 615},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 619},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 622},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 627},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 729},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 729},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 736},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 738},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 742},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 742},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 759},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 773},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 776},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 780},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 783},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 787},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 1045},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1058},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1058},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 1058},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1065},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1067},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1070},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1085},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1088},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1092},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1095},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 49, offset: 1102},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 65, offset: 1118},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 68, offset: 1121},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 72, offset: 1125},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 75, offset: 1128},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 79, offset: 1132},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 82, offset: 1135},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 86, offset: 1139},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 89, offset: 1142},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 94, offset: 1147},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 99, offset: 1152},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 102, offset: 1155},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 55, col: 1, offset: 1335},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1349},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1349},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1349},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 56, col: 5, offset: 1349},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 12, offset: 1356},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 15, offset: 1359},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 56, col: 19, offset: 1363},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 56, col: 23, offset: 1367},
										expr: &ruleRefExpr{
											pos:  position{line: 56, col: 23, offset: 1367},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 28, offset: 1372},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 31, offset: 1375},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1464},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 1464},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 14, offset: 1473},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 16, offset: 1475},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 21, offset: 1480},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 26, offset: 1485},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 59, col: 28, offset: 1487},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1491},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 59, col: 38, offset: 1497},
										expr: &ruleRefExpr{
											pos:  position{line: 59, col: 38, offset: 1497},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 49, offset: 1508},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 52, offset: 1511},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1616},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1616},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1616},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 14, offset: 1625},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 17, offset: 1628},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 21, offset: 1632},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 27, offset: 1638},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 27, offset: 1638},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 38, offset: 1649},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 41, offset: 1652},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1756},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 5, offset: 1756},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 12, offset: 1763},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 15, offset: 1766},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 65, col: 19, offset: 1770},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 26, offset: 1777},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 26, offset: 1777},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 35, offset: 1786},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 38, offset: 1789},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 1880},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 1880},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 1880},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 9, offset: 1884},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 68, col: 12, offset: 1887},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 18, offset: 1893},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 24, offset: 1899},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 27, offset: 1902},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 69, col: 5, offset: 1932},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 69, col: 8, offset: 1935},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1948},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1948},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 70, col: 5, offset: 1948},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 7, offset: 1950},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 70, col: 20, offset: 1963},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 21, offset: 1964},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 1994},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 1994},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 71, col: 5, offset: 1994},
									expr: &seqExpr{
										pos: position{line: 71, col: 7, offset: 1996},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 71, col: 7, offset: 1996},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 71, col: 16, offset: 2005},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 71, col: 25, offset: 2014},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 27, offset: 2016},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 71, col: 39, offset: 2028},
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 40, offset: 2029},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2060},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2060},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 14, offset: 2069},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 16, offset: 2071},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 21, offset: 2076},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2175},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 75, col: 5, offset: 2175},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 10, offset: 2180},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2279},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 78, col: 5, offset: 2279},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 10, offset: 2284},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2372},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 81, col: 5, offset: 2372},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 10, offset: 2377},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 85, col: 1, offset: 2464},
			expr: &seqExpr{
				pos: position{line: 85, col: 11, offset: 2474},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 85, col: 11, offset: 2474},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 85, col: 15, offset: 2478},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 85, col: 15, offset: 2478},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 22, offset: 2485},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 85, col: 43, offset: 2506},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 85, col: 50, offset: 2513},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 56, offset: 2519},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 86, col: 1, offset: 2524},
			expr: &seqExpr{
				pos: position{line: 86, col: 8, offset: 2531},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 86, col: 8, offset: 2531},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 86, col: 12, offset: 2535},
						expr: &choiceExpr{
							pos: position{line: 86, col: 14, offset: 2537},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 14, offset: 2537},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 86, col: 20, offset: 2543},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 88, col: 1, offset: 2549},
			expr: &actionExpr{
				pos: position{line: 88, col: 7, offset: 2555},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 88, col: 7, offset: 2555},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 7, offset: 2555},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 10, offset: 2558},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 15, offset: 2563},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 18, offset: 2566},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 22, offset: 2570},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 90, col: 1, offset: 2602},
			expr: &actionExpr{
				pos: position{line: 91, col: 5, offset: 2616},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 91, col: 5, offset: 2616},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 91, col: 5, offset: 2616},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 8, offset: 2619},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 13, offset: 2624},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 18, offset: 2629},
							label: "leg",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 22, offset: 2633},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 95, col: 1, offset: 2712},
			expr: &choiceExpr{
				pos: position{line: 96, col: 5, offset: 2721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2721},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2721},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 5, offset: 2721},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 12, offset: 2728},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 14, offset: 2730},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 19, offset: 2735},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 2765},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 97, col: 5, offset: 2765},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 99, col: 1, offset: 2796},
			expr: &actionExpr{
				pos: position{line: 100, col: 5, offset: 2808},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 100, col: 5, offset: 2808},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 100, col: 5, offset: 2808},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 100, col: 8, offset: 2811},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 15, offset: 2818},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 26, offset: 2829},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 100, col: 30, offset: 2833},
								expr: &seqExpr{
									pos: position{line: 100, col: 31, offset: 2834},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 100, col: 31, offset: 2834},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 100, col: 34, offset: 2837},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 100, col: 39, offset: 2842},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 100, col: 43, offset: 2846},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 108, col: 1, offset: 3044},
			expr: &choiceExpr{
				pos: position{line: 109, col: 5, offset: 3059},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 5, offset: 3059},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 5, offset: 3068},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3076},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3085},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 114, col: 1, offset: 3093},
			expr: &seqExpr{
				pos: position{line: 114, col: 13, offset: 3105},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 114, col: 13, offset: 3105},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 114, col: 17, offset: 3109},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 114, col: 18, offset: 3110},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 114, col: 18, offset: 3110},
										expr: &litMatcher{
											pos:        position{line: 114, col: 19, offset: 3111},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 24, offset: 3116},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 38, offset: 3130},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 57, offset: 3149},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 114, col: 82, offset: 3174},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 88, offset: 3180},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 94, offset: 3186},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 100, offset: 3192},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 116, col: 1, offset: 3198},
			expr: &actionExpr{
				pos: position{line: 116, col: 14, offset: 3211},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 116, col: 15, offset: 3212},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 116, col: 15, offset: 3212},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 22, offset: 3219},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 116, col: 30, offset: 3227},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 30, offset: 3227},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 116, col: 35, offset: 3232},
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 36, offset: 3233},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 54, offset: 3251},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 61, offset: 3258},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 67, offset: 3264},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 74, offset: 3271},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 118, col: 1, offset: 3308},
			expr: &actionExpr{
				pos: position{line: 119, col: 5, offset: 3326},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 119, col: 5, offset: 3326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 119, col: 5, offset: 3326},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 11, offset: 3332},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 21, offset: 3342},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 26, offset: 3347},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 26, offset: 3347},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 123, col: 1, offset: 3421},
			expr: &actionExpr{
				pos: position{line: 123, col: 16, offset: 3436},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 123, col: 16, offset: 3436},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 123, col: 16, offset: 3436},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 18, offset: 3438},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 26, offset: 3446},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 28, offset: 3448},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 30, offset: 3450},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 125, col: 1, offset: 3500},
			expr: &actionExpr{
				pos: position{line: 126, col: 5, offset: 3514},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 126, col: 5, offset: 3514},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 126, col: 5, offset: 3514},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 11, offset: 3520},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 5, offset: 3537},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 127, col: 10, offset: 3542},
								expr: &actionExpr{
									pos: position{line: 127, col: 11, offset: 3543},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 127, col: 11, offset: 3543},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 127, col: 11, offset: 3543},
												expr: &seqExpr{
													pos: position{line: 127, col: 12, offset: 3544},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 127, col: 12, offset: 3544},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 127, col: 14, offset: 3546},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 127, col: 25, offset: 3557},
												name: "_",
											},
											&notExpr{
												pos: position{line: 127, col: 27, offset: 3559},
												expr: &choiceExpr{
													pos: position{line: 127, col: 29, offset: 3561},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 127, col: 29, offset: 3561},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 127, col: 39, offset: 3571},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 127, col: 59, offset: 3591},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 127, col: 64, offset: 3596},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 131, col: 1, offset: 3712},
			expr: &choiceExpr{
				pos: position{line: 132, col: 5, offset: 3735},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 132, col: 5, offset: 3735},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 132, col: 5, offset: 3735},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 132, col: 16, offset: 3746},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 132, col: 19, offset: 3749},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 132, col: 24, offset: 3754},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 133, col: 5, offset: 3761},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 133, col: 5, offset: 3761},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 133, col: 10, offset: 3766},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 135, col: 1, offset: 3770},
			expr: &choiceExpr{
				pos: position{line: 136, col: 5, offset: 3787},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 3787},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 3787},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 136, col: 6, offset: 3788},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 136, col: 6, offset: 3788},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 136, col: 6, offset: 3788},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 15, offset: 3797},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 136, col: 19, offset: 3801},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 136, col: 19, offset: 3801},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 23, offset: 3805},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 27, offset: 3809},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 29, offset: 3811},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 3923},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 139, col: 5, offset: 3923},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 139, col: 5, offset: 3923},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 9, offset: 3927},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 139, col: 12, offset: 3930},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 17, offset: 3935},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 31, offset: 3949},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 139, col: 34, offset: 3952},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 5, offset: 3981},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 142, col: 1, offset: 3993},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 4008},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 143, col: 5, offset: 4008},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 144, col: 5, offset: 4017},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 4028},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 4028},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 5, offset: 4028},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 7, offset: 4030},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 145, col: 20, offset: 4043},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 145, col: 20, offset: 4043},
											expr: &ruleRefExpr{
												pos:  position{line: 145, col: 21, offset: 4044},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 145, col: 33, offset: 4056},
											expr: &seqExpr{
												pos: position{line: 145, col: 35, offset: 4058},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 145, col: 35, offset: 4058},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 145, col: 37, offset: 4060},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4172},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4172},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 148, col: 5, offset: 4172},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 148, col: 9, offset: 4176},
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 10, offset: 4177},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 151, col: 5, offset: 4293},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 153, col: 1, offset: 4310},
			expr: &choiceExpr{
				pos: position{line: 154, col: 5, offset: 4330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 4330},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 4330},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 154, col: 5, offset: 4330},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 9, offset: 4334},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 22, offset: 4347},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 154, col: 25, offset: 4350},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 28, offset: 4353},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 39, offset: 4364},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 154, col: 42, offset: 4367},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 46, offset: 4371},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 157, col: 6, offset: 4494},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 157, col: 6, offset: 4494},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 157, col: 6, offset: 4494},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 12, offset: 4500},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 157, col: 21, offset: 4509},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 157, col: 26, offset: 4514},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 27, offset: 4515},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 161, col: 1, offset: 4587},
			expr: &choiceExpr{
				pos: position{line: 162, col: 5, offset: 4603},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 4603},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4615},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4615},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 163, col: 5, offset: 4615},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 6, offset: 4616},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 20, offset: 4630},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 22, offset: 4632},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 167, col: 1, offset: 4740},
			expr: &actionExpr{
				pos: position{line: 168, col: 5, offset: 4749},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 168, col: 5, offset: 4749},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 168, col: 13, offset: 4757},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 172, col: 1, offset: 4853},
			expr: &actionExpr{
				pos: position{line: 173, col: 5, offset: 4864},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 173, col: 5, offset: 4864},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 173, col: 13, offset: 4872},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 179, col: 1, offset: 4998},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 5014},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 5014},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 5014},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 180, col: 5, offset: 5014},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 5, offset: 5014},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 16, offset: 5025},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 21, offset: 5030},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 33, offset: 5042},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 39, offset: 5048},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 5174},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 183, col: 5, offset: 5174},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 183, col: 5, offset: 5174},
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 5, offset: 5174},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 16, offset: 5185},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 21, offset: 5190},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 36, offset: 5205},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 183, col: 41, offset: 5210},
										expr: &seqExpr{
											pos: position{line: 183, col: 42, offset: 5211},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 183, col: 42, offset: 5211},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 183, col: 44, offset: 5213},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 58, offset: 5227},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 64, offset: 5233},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 191, col: 1, offset: 5447},
			expr: &seqExpr{
				pos: position{line: 191, col: 13, offset: 5459},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 191, col: 13, offset: 5459},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 25, offset: 5471},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 193, col: 1, offset: 5474},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5490},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 5490},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 194, col: 5, offset: 5490},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 13, offset: 5498},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 15, offset: 5500},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 23, offset: 5508},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 196, col: 1, offset: 5549},
			expr: &choiceExpr{
				pos: position{line: 197, col: 5, offset: 5562},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5562},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 5562},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 197, col: 5, offset: 5562},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 197, col: 7, offset: 5564},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 14, offset: 5571},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 197, col: 16, offset: 5573},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 25, offset: 5582},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 197, col: 27, offset: 5584},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 33, offset: 5590},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 5621},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 198, col: 5, offset: 5621},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 203, col: 1, offset: 5881},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 5900},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 5900},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 5915},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 205, col: 5, offset: 5915},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 10, offset: 5920},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 207, col: 1, offset: 6012},
			expr: &actionExpr{
				pos: position{line: 208, col: 5, offset: 6032},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 208, col: 5, offset: 6032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 208, col: 5, offset: 6032},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 11, offset: 6038},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 208, col: 26, offset: 6053},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 208, col: 31, offset: 6058},
								expr: &actionExpr{
									pos: position{line: 208, col: 32, offset: 6059},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 208, col: 32, offset: 6059},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 208, col: 32, offset: 6059},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 208, col: 35, offset: 6062},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 208, col: 39, offset: 6066},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 208, col: 42, offset: 6069},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 208, col: 47, offset: 6074},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 212, col: 1, offset: 6196},
			expr: &choiceExpr{
				pos: position{line: 213, col: 5, offset: 6214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 6214},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 6214},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 213, col: 5, offset: 6214},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 10, offset: 6219},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 15, offset: 6224},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 213, col: 18, offset: 6227},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 23, offset: 6232},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 213, col: 26, offset: 6235},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 30, offset: 6239},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 6343},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 216, col: 5, offset: 6343},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 9, offset: 6347},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 220, col: 1, offset: 6447},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 6455},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 6455},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 221, col: 5, offset: 6455},
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 6, offset: 6456},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 16, offset: 6466},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 19, offset: 6469},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 27, offset: 6477},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 221, col: 30, offset: 6480},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 34, offset: 6484},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 37, offset: 6487},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 221, col: 42, offset: 6492},
								expr: &choiceExpr{
									pos: position{line: 221, col: 43, offset: 6493},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 43, offset: 6493},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 221, col: 54, offset: 6504},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 62, offset: 6512},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 221, col: 65, offset: 6515},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 221, col: 69, offset: 6519},
							expr: &seqExpr{
								pos: position{line: 221, col: 71, offset: 6521},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 221, col: 71, offset: 6521},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 221, col: 74, offset: 6524},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 79, offset: 6529},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 221, col: 85, offset: 6535},
								expr: &ruleRefExpr{
									pos:  position{line: 221, col: 85, offset: 6535},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 229, col: 1, offset: 6725},
			expr: &choiceExpr{
				pos: position{line: 230, col: 5, offset: 6737},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6737},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6756},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6769},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 234, col: 1, offset: 6778},
			expr: &actionExpr{
				pos: position{line: 234, col: 15, offset: 6792},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 234, col: 15, offset: 6792},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 234, col: 15, offset: 6792},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 234, col: 17, offset: 6794},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 25, offset: 6802},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 27, offset: 6804},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 32, offset: 6809},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 236, col: 1, offset: 6845},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 6864},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 6864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 6864},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 11, offset: 6870},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 25, offset: 6884},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 30, offset: 6889},
								expr: &seqExpr{
									pos: position{line: 237, col: 31, offset: 6890},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 237, col: 31, offset: 6890},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 237, col: 34, offset: 6893},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 38, offset: 6897},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 41, offset: 6900},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 247, col: 1, offset: 7124},
			expr: &choiceExpr{
				pos: position{line: 248, col: 5, offset: 7137},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7137},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7150},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7161},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7171},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7181},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7192},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7203},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7214},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7226},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7237},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7247},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7260},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 7271},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 7283},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7294},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7307},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7317},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7328},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7339},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7353},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7365},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7376},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 271, col: 1, offset: 7385},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 7398},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 7398},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 272, col: 5, offset: 7398},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 14, offset: 7407},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 16, offset: 7409},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 272, col: 22, offset: 7415},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 272, col: 22, offset: 7415},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 272, col: 24, offset: 7417},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 308, col: 1, offset: 8768},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 8779},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 8779},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 8779},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 309, col: 12, offset: 8786},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 13, offset: 8787},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 18, offset: 8792},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 23, offset: 8797},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 32, offset: 8806},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 37, offset: 8811},
								expr: &actionExpr{
									pos: position{line: 309, col: 38, offset: 8812},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 309, col: 38, offset: 8812},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 309, col: 38, offset: 8812},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 309, col: 40, offset: 8814},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 309, col: 42, offset: 8816},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 323, col: 1, offset: 9227},
			expr: &actionExpr{
				pos: position{line: 323, col: 12, offset: 9238},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 323, col: 12, offset: 9238},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 323, col: 17, offset: 9243},
						expr: &actionExpr{
							pos: position{line: 323, col: 18, offset: 9244},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 323, col: 18, offset: 9244},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 323, col: 18, offset: 9244},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 323, col: 20, offset: 9246},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 323, col: 22, offset: 9248},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 325, col: 1, offset: 9304},
			expr: &choiceExpr{
				pos: position{line: 326, col: 5, offset: 9316},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 326, col: 5, offset: 9316},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 326, col: 5, offset: 9316},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 9391},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 327, col: 5, offset: 9391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 327, col: 5, offset: 9391},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 327, col: 14, offset: 9400},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 327, col: 16, offset: 9402},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 327, col: 23, offset: 9409},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 327, col: 24, offset: 9410},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 327, col: 24, offset: 9410},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 327, col: 34, offset: 9420},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 329, col: 1, offset: 9534},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 9544},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 9544},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 5, offset: 9544},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 330, col: 11, offset: 9550},
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 12, offset: 9551},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 17, offset: 9556},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 330, col: 23, offset: 9562},
								expr: &actionExpr{
									pos: position{line: 330, col: 24, offset: 9563},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 330, col: 24, offset: 9563},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 330, col: 24, offset: 9563},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 330, col: 26, offset: 9565},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 330, col: 28, offset: 9567},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 52, offset: 9591},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 330, col: 58, offset: 9597},
								expr: &seqExpr{
									pos: position{line: 330, col: 59, offset: 9598},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 330, col: 59, offset: 9598},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 330, col: 61, offset: 9600},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 72, offset: 9611},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 330, col: 79, offset: 9618},
								expr: &actionExpr{
									pos: position{line: 330, col: 80, offset: 9619},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 330, col: 80, offset: 9619},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 330, col: 80, offset: 9619},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 330, col: 82, offset: 9621},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 330, col: 84, offset: 9623},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 344, col: 1, offset: 9958},
			expr: &actionExpr{
				pos: position{line: 345, col: 5, offset: 9968},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 345, col: 5, offset: 9968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 5, offset: 9968},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 11, offset: 9974},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 345, col: 13, offset: 9976},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 18, offset: 9981},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 349, col: 1, offset: 10076},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 10087},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 10087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 5, offset: 10087},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 12, offset: 10094},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 14, offset: 10096},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 19, offset: 10101},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 354, col: 1, offset: 10192},
			expr: &choiceExpr{
				pos: position{line: 355, col: 5, offset: 10203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 355, col: 5, offset: 10203},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 355, col: 5, offset: 10203},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 355, col: 5, offset: 10203},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 355, col: 12, offset: 10210},
									name: "_",
								},
								&notExpr{
									pos: position{line: 355, col: 14, offset: 10212},
									expr: &ruleRefExpr{
										pos:  position{line: 355, col: 15, offset: 10213},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 355, col: 23, offset: 10221},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 355, col: 29, offset: 10227},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 10307},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 356, col: 5, offset: 10307},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 358, col: 1, offset: 10454},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 10465},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10465},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10465},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 10465},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 12, offset: 10472},
									name: "_",
								},
								&notExpr{
									pos: position{line: 359, col: 14, offset: 10474},
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 15, offset: 10475},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 359, col: 23, offset: 10483},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 29, offset: 10489},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10569},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 360, col: 5, offset: 10569},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 362, col: 1, offset: 10716},
			expr: &actionExpr{
				pos: position{line: 363, col: 5, offset: 10728},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 363, col: 5, offset: 10728},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 363, col: 5, offset: 10728},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 13, offset: 10736},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 15, offset: 10738},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 20, offset: 10743},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 367, col: 1, offset: 10829},
			expr: &choiceExpr{
				pos: position{line: 368, col: 5, offset: 10840},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10840},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10840},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10840},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 12, offset: 10847},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 368, col: 14, offset: 10849},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10938},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10938},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 375, col: 1, offset: 11027},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 11037},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 376, col: 5, offset: 11037},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 376, col: 5, offset: 11037},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 11, offset: 11043},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 13, offset: 11045},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 18, offset: 11050},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 380, col: 1, offset: 11141},
			expr: &actionExpr{
				pos: position{line: 381, col: 5, offset: 11154},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 381, col: 5, offset: 11154},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 381, col: 5, offset: 11154},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 14, offset: 11163},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 16, offset: 11165},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 22, offset: 11171},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 33, offset: 11182},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 381, col: 38, offset: 11187},
								expr: &actionExpr{
									pos: position{line: 381, col: 39, offset: 11188},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 381, col: 39, offset: 11188},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 381, col: 39, offset: 11188},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 381, col: 42, offset: 11191},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 381, col: 46, offset: 11195},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 381, col: 49, offset: 11198},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 381, col: 52, offset: 11201},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 389, col: 1, offset: 11608},
			expr: &actionExpr{
				pos: position{line: 390, col: 5, offset: 11619},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 390, col: 5, offset: 11619},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 390, col: 5, offset: 11619},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 390, col: 12, offset: 11626},
							expr: &seqExpr{
								pos: position{line: 390, col: 14, offset: 11628},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 390, col: 14, offset: 11628},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 390, col: 17, offset: 11631},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 390, col: 22, offset: 11636},
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 23, offset: 11637},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 394, col: 1, offset: 11708},
			expr: &actionExpr{
				pos: position{line: 395, col: 5, offset: 11720},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 395, col: 5, offset: 11720},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 5, offset: 11720},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 395, col: 13, offset: 11728},
							expr: &seqExpr{
								pos: position{line: 395, col: 15, offset: 11730},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 395, col: 15, offset: 11730},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 395, col: 18, offset: 11733},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 395, col: 23, offset: 11738},
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 24, offset: 11739},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 399, col: 1, offset: 11811},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 11822},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 11822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 400, col: 5, offset: 11822},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 11, offset: 11828},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 21, offset: 11838},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 400, col: 28, offset: 11845},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 39, offset: 11856},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 54, offset: 11871},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 57, offset: 11874},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 59, offset: 11876},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 63, offset: 11880},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 71, offset: 11888},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 78, offset: 11895},
								expr: &seqExpr{
									pos: position{line: 400, col: 79, offset: 11896},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 400, col: 79, offset: 11896},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 400, col: 82, offset: 11899},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 400, col: 86, offset: 11903},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 400, col: 89, offset: 11906},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 99, offset: 11916},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 107, offset: 11924},
								expr: &seqExpr{
									pos: position{line: 400, col: 108, offset: 11925},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 400, col: 108, offset: 11925},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 400, col: 110, offset: 11927},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 411, col: 1, offset: 12283},
			expr: &choiceExpr{
				pos: position{line: 412, col: 5, offset: 12297},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 412, col: 5, offset: 12297},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 412, col: 5, offset: 12297},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 412, col: 5, offset: 12297},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 12, offset: 12304},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 413, col: 5, offset: 12334},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 413, col: 5, offset: 12334},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 413, col: 5, offset: 12334},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 413, col: 13, offset: 12342},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 414, col: 5, offset: 12372},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 414, col: 5, offset: 12372},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 414, col: 5, offset: 12372},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 13, offset: 12380},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12409},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 415, col: 5, offset: 12409},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 415, col: 5, offset: 12409},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 13, offset: 12417},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12447},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 416, col: 5, offset: 12447},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 418, col: 1, offset: 12483},
			expr: &choiceExpr{
				pos: position{line: 419, col: 5, offset: 12502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12502},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 419, col: 5, offset: 12502},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 419, col: 5, offset: 12502},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 419, col: 8, offset: 12505},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 12, offset: 12509},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 419, col: 15, offset: 12512},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 419, col: 17, offset: 12514},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 28, offset: 12525},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 419, col: 31, offset: 12528},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 35, offset: 12532},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 12557},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 420, col: 5, offset: 12557},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 422, col: 1, offset: 12580},
			expr: &choiceExpr{
				pos: position{line: 423, col: 5, offset: 12592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 423, col: 5, offset: 12592},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 12601},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 424, col: 5, offset: 12601},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 424, col: 5, offset: 12601},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 424, col: 9, offset: 12605},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 424, col: 14, offset: 12610},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 424, col: 19, offset: 12615},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 426, col: 1, offset: 12641},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 12654},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 12654},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 12654},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 427, col: 14, offset: 12663},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 15, offset: 12664},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 20, offset: 12669},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 22, offset: 12671},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 469, col: 1, offset: 14170},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 14187},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 470, col: 5, offset: 14187},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 470, col: 7, offset: 14189},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 474, col: 1, offset: 14289},
			expr: &choiceExpr{
				pos: position{line: 475, col: 5, offset: 14304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 475, col: 5, offset: 14304},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 475, col: 5, offset: 14304},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 475, col: 5, offset: 14304},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 475, col: 7, offset: 14306},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 475, col: 12, offset: 14311},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 476, col: 5, offset: 14340},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 476, col: 5, offset: 14340},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 478, col: 1, offset: 14411},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 14422},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 479, col: 5, offset: 14422},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 479, col: 12, offset: 14429},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 483, col: 1, offset: 14585},
			expr: &choiceExpr{
				pos: position{line: 484, col: 5, offset: 14597},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 484, col: 5, offset: 14597},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 485, col: 5, offset: 14606},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 486, col: 5, offset: 14614},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 488, col: 1, offset: 14620},
			expr: &actionExpr{
				pos: position{line: 489, col: 5, offset: 14629},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 489, col: 5, offset: 14629},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 489, col: 5, offset: 14629},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 12, offset: 14636},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 14, offset: 14638},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 19, offset: 14643},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 24, offset: 14648},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 489, col: 31, offset: 14655},
								expr: &ruleRefExpr{
									pos:  position{line: 489, col: 31, offset: 14655},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 42, offset: 14666},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 489, col: 51, offset: 14675},
								expr: &ruleRefExpr{
									pos:  position{line: 489, col: 51, offset: 14675},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 493, col: 1, offset: 14809},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 14818},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 14818},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 5, offset: 14818},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 12, offset: 14825},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 14, offset: 14827},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 19, offset: 14832},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 496, col: 1, offset: 14863},
			expr: &actionExpr{
				pos: position{line: 497, col: 5, offset: 14872},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 497, col: 5, offset: 14872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 497, col: 5, offset: 14872},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 12, offset: 14879},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 497, col: 14, offset: 14881},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 19, offset: 14886},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 499, col: 1, offset: 14917},
			expr: &actionExpr{
				pos: position{line: 500, col: 5, offset: 14930},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 500, col: 5, offset: 14930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 500, col: 5, offset: 14930},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 10, offset: 14935},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 500, col: 19, offset: 14944},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 500, col: 22, offset: 14947},
								expr: &ruleRefExpr{
									pos:  position{line: 500, col: 22, offset: 14947},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 504, col: 1, offset: 15045},
			expr: &actionExpr{
				pos: position{line: 505, col: 5, offset: 15053},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 505, col: 5, offset: 15053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 505, col: 5, offset: 15053},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 505, col: 11, offset: 15059},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 13, offset: 15061},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 17, offset: 15065},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 21, offset: 15069},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 28, offset: 15076},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 28, offset: 15076},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 39, offset: 15087},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 48, offset: 15096},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 48, offset: 15096},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 509, col: 1, offset: 15227},
			expr: &actionExpr{
				pos: position{line: 509, col: 7, offset: 15233},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 509, col: 7, offset: 15233},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 509, col: 8, offset: 15234},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 509, col: 8, offset: 15234},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 509, col: 18, offset: 15244},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 509, col: 28, offset: 15254},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 511, col: 1, offset: 15291},
			expr: &choiceExpr{
				pos: position{line: 512, col: 5, offset: 15300},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 512, col: 5, offset: 15300},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 512, col: 5, offset: 15300},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 7, offset: 15302},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 15337},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 513, col: 5, offset: 15337},
							expr: &charClassMatcher{
								pos:        position{line: 513, col: 5, offset: 15337},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 516, col: 1, offset: 15439},
			expr: &actionExpr{
				pos: position{line: 517, col: 5, offset: 15450},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 517, col: 5, offset: 15450},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 517, col: 5, offset: 15450},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 517, col: 7, offset: 15452},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 517, col: 12, offset: 15457},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 14, offset: 15459},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 17, offset: 15462},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 520, col: 1, offset: 15528},
			expr: &actionExpr{
				pos: position{line: 520, col: 9, offset: 15536},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 520, col: 9, offset: 15536},
					expr: &charClassMatcher{
						pos:        position{line: 520, col: 10, offset: 15537},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 522, col: 1, offset: 15583},
			expr: &choiceExpr{
				pos: position{line: 523, col: 5, offset: 15596},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 523, col: 5, offset: 15596},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 523, col: 5, offset: 15596},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 523, col: 5, offset: 15596},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 523, col: 10, offset: 15601},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 523, col: 19, offset: 15610},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 523, col: 26, offset: 15617},
										expr: &ruleRefExpr{
											pos:  position{line: 523, col: 26, offset: 15617},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 523, col: 38, offset: 15629},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 523, col: 43, offset: 15634},
										expr: &ruleRefExpr{
											pos:  position{line: 523, col: 43, offset: 15634},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 523, col: 53, offset: 15644},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 523, col: 57, offset: 15648},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 526, col: 5, offset: 15765},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 526, col: 5, offset: 15765},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 10, offset: 15770},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 530, col: 1, offset: 15871},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15886},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 5, offset: 15886},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 531, col: 9, offset: 15890},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 16, offset: 15897},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 533, col: 1, offset: 15936},
			expr: &actionExpr{
				pos: position{line: 534, col: 5, offset: 15949},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 534, col: 5, offset: 15949},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 534, col: 5, offset: 15949},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 534, col: 9, offset: 15953},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 14, offset: 15958},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 536, col: 1, offset: 15995},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 16008},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 537, col: 5, offset: 16008},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 16017},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 16017},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 538, col: 5, offset: 16017},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 538, col: 9, offset: 16021},
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 10, offset: 16022},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 539, col: 5, offset: 16107},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 16118},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 540, col: 5, offset: 16118},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 10, offset: 16123},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 542, col: 1, offset: 16210},
			expr: &choiceExpr{
				pos: position{line: 543, col: 5, offset: 16229},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 543, col: 5, offset: 16229},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 544, col: 5, offset: 16248},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 5, offset: 16258},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 547, col: 1, offset: 16272},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 16291},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 16291},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 548, col: 6, offset: 16292},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 548, col: 6, offset: 16292},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 548, col: 24, offset: 16310},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 548, col: 29, offset: 16315},
							expr: &choiceExpr{
								pos: position{line: 548, col: 30, offset: 16316},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 548, col: 30, offset: 16316},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 548, col: 47, offset: 16333},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 550, col: 1, offset: 16372},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16387},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16387},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 551, col: 5, offset: 16387},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 551, col: 7, offset: 16389},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 551, col: 15, offset: 16397},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 17, offset: 16399},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 22, offset: 16404},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 33, offset: 16415},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 39, offset: 16421},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 555, col: 1, offset: 16532},
			expr: &choiceExpr{
				pos: position{line: 556, col: 5, offset: 16543},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16543},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 556, col: 5, offset: 16543},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 556, col: 5, offset: 16543},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 556, col: 7, offset: 16545},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 16576},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 557, col: 5, offset: 16576},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 559, col: 1, offset: 16602},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 16616},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 16616},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 560, col: 5, offset: 16616},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 560, col: 7, offset: 16618},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 560, col: 16, offset: 16627},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 560, col: 18, offset: 16629},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 22, offset: 16633},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 562, col: 1, offset: 16669},
			expr: &choiceExpr{
				pos: position{line: 563, col: 5, offset: 16685},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 16685},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 563, col: 5, offset: 16685},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 564, col: 5, offset: 16719},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 564, col: 5, offset: 16719},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 565, col: 5, offset: 16755},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 565, col: 5, offset: 16755},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 567, col: 1, offset: 16781},
			expr: &actionExpr{
				pos: position{line: 568, col: 5, offset: 16792},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 568, col: 5, offset: 16792},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 568, col: 5, offset: 16792},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 568, col: 12, offset: 16799},
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 13, offset: 16800},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 574, col: 1, offset: 16992},
			expr: &actionExpr{
				pos: position{line: 575, col: 5, offset: 17006},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 575, col: 5, offset: 17006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 575, col: 5, offset: 17006},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 575, col: 15, offset: 17016},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 17, offset: 17018},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 22, offset: 17023},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 28, offset: 17029},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 32, offset: 17033},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 40, offset: 17041},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 575, col: 43, offset: 17044},
								expr: &ruleRefExpr{
									pos:  position{line: 575, col: 43, offset: 17044},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 579, col: 1, offset: 17156},
			expr: &actionExpr{
				pos: position{line: 580, col: 5, offset: 17168},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 580, col: 5, offset: 17168},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 580, col: 5, offset: 17168},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 580, col: 13, offset: 17176},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 580, col: 15, offset: 17178},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 20, offset: 17183},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 584, col: 1, offset: 17264},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 17275},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 17275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 17275},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 12, offset: 17282},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 14, offset: 17284},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 20, offset: 17290},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 26, offset: 17296},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 585, col: 33, offset: 17303},
								expr: &ruleRefExpr{
									pos:  position{line: 585, col: 33, offset: 17303},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 41, offset: 17311},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 585, col: 46, offset: 17316},
								expr: &ruleRefExpr{
									pos:  position{line: 585, col: 46, offset: 17316},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 591, col: 1, offset: 17610},
			expr: &choiceExpr{
				pos: position{line: 592, col: 5, offset: 17622},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 17622},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 592, col: 5, offset: 17622},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 592, col: 5, offset: 17622},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 592, col: 8, offset: 17625},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 592, col: 13, offset: 17630},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 592, col: 16, offset: 17633},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 592, col: 20, offset: 17637},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 592, col: 23, offset: 17640},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 592, col: 29, offset: 17646},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 592, col: 35, offset: 17652},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 592, col: 38, offset: 17655},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17685},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 593, col: 5, offset: 17685},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 593, col: 5, offset: 17685},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 593, col: 8, offset: 17688},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 593, col: 13, offset: 17693},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 593, col: 16, offset: 17696},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 593, col: 20, offset: 17700},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 593, col: 23, offset: 17703},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 593, col: 27, offset: 17707},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 593, col: 38, offset: 17718},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 593, col: 41, offset: 17721},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 595, col: 1, offset: 17746},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 17757},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 17757},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 596, col: 5, offset: 17757},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 596, col: 7, offset: 17759},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 14, offset: 17766},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 16, offset: 17768},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 22, offset: 17774},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 39, offset: 17791},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 596, col: 44, offset: 17796},
								expr: &actionExpr{
									pos: position{line: 596, col: 45, offset: 17797},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 596, col: 45, offset: 17797},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 596, col: 45, offset: 17797},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 596, col: 48, offset: 17800},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 596, col: 52, offset: 17804},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 596, col: 55, offset: 17807},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 596, col: 57, offset: 17809},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 600, col: 1, offset: 17930},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 17951},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 17951},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 5, offset: 17951},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 10, offset: 17956},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 25, offset: 17971},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 601, col: 29, offset: 17975},
								expr: &seqExpr{
									pos: position{line: 601, col: 30, offset: 17976},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 601, col: 30, offset: 17976},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 601, col: 33, offset: 17979},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 601, col: 37, offset: 17983},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 601, col: 40, offset: 17986},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 609, col: 1, offset: 18207},
			expr: &actionExpr{
				pos: position{line: 610, col: 5, offset: 18219},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 610, col: 5, offset: 18219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 610, col: 5, offset: 18219},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 610, col: 13, offset: 18227},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 610, col: 15, offset: 18229},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 21, offset: 18235},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 614, col: 1, offset: 18319},
			expr: &actionExpr{
				pos: position{line: 615, col: 5, offset: 18331},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 615, col: 5, offset: 18331},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 615, col: 5, offset: 18331},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 7, offset: 18333},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 10, offset: 18336},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 12, offset: 18338},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 16, offset: 18342},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 617, col: 1, offset: 18367},
			expr: &actionExpr{
				pos: position{line: 618, col: 5, offset: 18377},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 618, col: 5, offset: 18377},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 618, col: 5, offset: 18377},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 7, offset: 18379},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 10, offset: 18382},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 12, offset: 18384},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 16, offset: 18388},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 622, col: 1, offset: 18439},
			expr: &ruleRefExpr{
				pos:  position{line: 622, col: 8, offset: 18446},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 624, col: 1, offset: 18457},
			expr: &actionExpr{
				pos: position{line: 625, col: 5, offset: 18467},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 625, col: 5, offset: 18467},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 18467},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 18473},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 625, col: 16, offset: 18478},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 625, col: 21, offset: 18483},
								expr: &actionExpr{
									pos: position{line: 625, col: 22, offset: 18484},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 625, col: 22, offset: 18484},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 625, col: 22, offset: 18484},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 625, col: 25, offset: 18487},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 625, col: 29, offset: 18491},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 625, col: 32, offset: 18494},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 625, col: 37, offset: 18499},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 629, col: 1, offset: 18611},
			expr: &ruleRefExpr{
				pos:  position{line: 629, col: 13, offset: 18623},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 631, col: 1, offset: 18629},
			expr: &actionExpr{
				pos: position{line: 632, col: 5, offset: 18644},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 632, col: 5, offset: 18644},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 632, col: 5, offset: 18644},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 11, offset: 18650},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 632, col: 21, offset: 18660},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 632, col: 26, offset: 18665},
								expr: &seqExpr{
									pos: position{line: 632, col: 27, offset: 18666},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 632, col: 27, offset: 18666},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 632, col: 30, offset: 18669},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 632, col: 34, offset: 18673},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 632, col: 37, offset: 18676},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 642, col: 1, offset: 18875},
			expr: &actionExpr{
				pos: position{line: 643, col: 5, offset: 18891},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 643, col: 5, offset: 18891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 18891},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 11, offset: 18897},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 22, offset: 18908},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 643, col: 27, offset: 18913},
								expr: &actionExpr{
									pos: position{line: 643, col: 28, offset: 18914},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 643, col: 28, offset: 18914},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 643, col: 28, offset: 18914},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 643, col: 31, offset: 18917},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 643, col: 35, offset: 18921},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 643, col: 38, offset: 18924},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 643, col: 40, offset: 18926},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 647, col: 1, offset: 19037},
			expr: &actionExpr{
				pos: position{line: 648, col: 5, offset: 19052},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 648, col: 5, offset: 19052},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 19052},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 9, offset: 19056},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 14, offset: 19061},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 648, col: 17, offset: 19064},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 22, offset: 19069},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 25, offset: 19072},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 29, offset: 19076},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 650, col: 1, offset: 19167},
			expr: &ruleRefExpr{
				pos:  position{line: 650, col: 8, offset: 19174},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 652, col: 1, offset: 19191},
			expr: &actionExpr{
				pos: position{line: 653, col: 5, offset: 19211},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 653, col: 5, offset: 19211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 19211},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 10, offset: 19216},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 24, offset: 19230},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 653, col: 28, offset: 19234},
								expr: &seqExpr{
									pos: position{line: 653, col: 29, offset: 19235},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 653, col: 29, offset: 19235},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 653, col: 32, offset: 19238},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 653, col: 36, offset: 19242},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 653, col: 39, offset: 19245},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 653, col: 44, offset: 19250},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 653, col: 47, offset: 19253},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 653, col: 51, offset: 19257},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 653, col: 54, offset: 19260},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 662, col: 1, offset: 19521},
			expr: &actionExpr{
				pos: position{line: 663, col: 5, offset: 19539},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 663, col: 5, offset: 19539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19539},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 11, offset: 19545},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 19564},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 664, col: 10, offset: 19569},
								expr: &actionExpr{
									pos: position{line: 664, col: 11, offset: 19570},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 664, col: 11, offset: 19570},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 664, col: 11, offset: 19570},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 14, offset: 19573},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 17, offset: 19576},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 664, col: 25, offset: 19584},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 28, offset: 19587},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 33, offset: 19592},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 668, col: 1, offset: 19710},
			expr: &actionExpr{
				pos: position{line: 669, col: 5, offset: 19729},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 669, col: 5, offset: 19729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 669, col: 5, offset: 19729},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 19735},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 670, col: 5, offset: 19754},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 670, col: 10, offset: 19759},
								expr: &actionExpr{
									pos: position{line: 670, col: 11, offset: 19760},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 670, col: 11, offset: 19760},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 670, col: 11, offset: 19760},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 670, col: 14, offset: 19763},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 670, col: 17, offset: 19766},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 670, col: 26, offset: 19775},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 670, col: 29, offset: 19778},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 670, col: 34, offset: 19783},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 674, col: 1, offset: 19901},
			expr: &actionExpr{
				pos: position{line: 675, col: 5, offset: 19920},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 675, col: 5, offset: 19920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 19920},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 9, offset: 19924},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 675, col: 22, offset: 19937},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 675, col: 31, offset: 19946},
								expr: &choiceExpr{
									pos: position{line: 675, col: 32, offset: 19947},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 675, col: 32, offset: 19947},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 675, col: 32, offset: 19947},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 675, col: 35, offset: 19950},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 675, col: 46, offset: 19961},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 675, col: 49, offset: 19964},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 675, col: 64, offset: 19979},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 675, col: 64, offset: 19979},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 675, col: 68, offset: 19983},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 675, col: 68, offset: 19983},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 675, col: 104, offset: 20019},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 675, col: 107, offset: 20022},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 684, col: 1, offset: 20283},
			expr: &actionExpr{
				pos: position{line: 685, col: 5, offset: 20300},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 685, col: 5, offset: 20300},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 685, col: 5, offset: 20300},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 11, offset: 20306},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 686, col: 5, offset: 20329},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 686, col: 10, offset: 20334},
								expr: &actionExpr{
									pos: position{line: 686, col: 11, offset: 20335},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 686, col: 11, offset: 20335},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 686, col: 11, offset: 20335},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 686, col: 14, offset: 20338},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 686, col: 17, offset: 20341},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 34, offset: 20358},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 686, col: 37, offset: 20361},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 686, col: 42, offset: 20366},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 690, col: 1, offset: 20488},
			expr: &actionExpr{
				pos: position{line: 690, col: 20, offset: 20507},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 690, col: 21, offset: 20508},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 690, col: 21, offset: 20508},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 690, col: 27, offset: 20514},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 692, col: 1, offset: 20551},
			expr: &actionExpr{
				pos: position{line: 693, col: 5, offset: 20574},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 693, col: 5, offset: 20574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 693, col: 5, offset: 20574},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 11, offset: 20580},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 694, col: 5, offset: 20592},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 694, col: 10, offset: 20597},
								expr: &actionExpr{
									pos: position{line: 694, col: 11, offset: 20598},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 694, col: 11, offset: 20598},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 694, col: 11, offset: 20598},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 694, col: 14, offset: 20601},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 694, col: 17, offset: 20604},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 694, col: 40, offset: 20627},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 694, col: 43, offset: 20630},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 694, col: 48, offset: 20635},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 698, col: 1, offset: 20746},
			expr: &actionExpr{
				pos: position{line: 698, col: 26, offset: 20771},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 698, col: 27, offset: 20772},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 698, col: 27, offset: 20772},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 698, col: 33, offset: 20778},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 698, col: 39, offset: 20784},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 700, col: 1, offset: 20821},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20833},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 20833},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 20833},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 701, col: 5, offset: 20833},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 9, offset: 20837},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 12, offset: 20840},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 14, offset: 20842},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 704, col: 5, offset: 20951},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 706, col: 1, offset: 20965},
			expr: &choiceExpr{
				pos: position{line: 707, col: 5, offset: 20982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20982},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 707, col: 5, offset: 20982},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 707, col: 5, offset: 20982},
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 6, offset: 20983},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 707, col: 14, offset: 20991},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 18, offset: 20995},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 707, col: 21, offset: 20998},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 23, offset: 21000},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 710, col: 5, offset: 21110},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 712, col: 1, offset: 21120},
			expr: &choiceExpr{
				pos: position{line: 713, col: 5, offset: 21133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 21133},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 21133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 713, col: 5, offset: 21133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 11, offset: 21139},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 713, col: 16, offset: 21144},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 713, col: 21, offset: 21149},
										expr: &ruleRefExpr{
											pos:  position{line: 713, col: 22, offset: 21150},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 21221},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 21221},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 716, col: 5, offset: 21221},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 11, offset: 21227},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 716, col: 20, offset: 21236},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 716, col: 25, offset: 21241},
										expr: &ruleRefExpr{
											pos:  position{line: 716, col: 26, offset: 21242},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 21313},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 21327},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 722, col: 1, offset: 21336},
			expr: &seqExpr{
				pos: position{line: 722, col: 13, offset: 21348},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 722, col: 13, offset: 21348},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 22, offset: 21357},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 722, col: 25, offset: 21360},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 724, col: 1, offset: 21365},
			expr: &choiceExpr{
				pos: position{line: 725, col: 5, offset: 21378},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 725, col: 5, offset: 21378},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 726, col: 5, offset: 21388},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 728, col: 1, offset: 21398},
			expr: &actionExpr{
				pos: position{line: 729, col: 5, offset: 21407},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 729, col: 5, offset: 21407},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 729, col: 5, offset: 21407},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 9, offset: 21411},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 18, offset: 21420},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 729, col: 21, offset: 21423},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 25, offset: 21427},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 28, offset: 21430},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 729, col: 34, offset: 21436},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 729, col: 34, offset: 21436},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 45, offset: 21447},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 51, offset: 21453},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 729, col: 54, offset: 21456},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 733, col: 1, offset: 21553},
			expr: &choiceExpr{
				pos: position{line: 734, col: 5, offset: 21566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 21566},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21653},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 21653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 736, col: 5, offset: 21653},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 736, col: 14, offset: 21662},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 736, col: 17, offset: 21665},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 736, col: 21, offset: 21669},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 736, col: 24, offset: 21672},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 33, offset: 21681},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 736, col: 47, offset: 21695},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 736, col: 50, offset: 21698},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 736, col: 54, offset: 21702},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 736, col: 57, offset: 21705},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 62, offset: 21710},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 736, col: 67, offset: 21715},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 736, col: 70, offset: 21718},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 736, col: 74, offset: 21722},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 736, col: 80, offset: 21728},
										expr: &ruleRefExpr{
											pos:  position{line: 736, col: 80, offset: 21728},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21976},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21976},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 740, col: 5, offset: 21976},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 22, offset: 21993},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 25, offset: 21996},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 29, offset: 22000},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 740, col: 32, offset: 22003},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 37, offset: 22008},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 42, offset: 22013},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 45, offset: 22016},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 49, offset: 22020},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 740, col: 52, offset: 22023},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 61, offset: 22032},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 75, offset: 22046},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 78, offset: 22049},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 82, offset: 22053},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 740, col: 85, offset: 22056},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 90, offset: 22061},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 95, offset: 22066},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 98, offset: 22069},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 740, col: 102, offset: 22073},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 740, col: 108, offset: 22079},
										expr: &ruleRefExpr{
											pos:  position{line: 740, col: 108, offset: 22079},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 22341},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 744, col: 5, offset: 22341},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 744, col: 5, offset: 22341},
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 6, offset: 22342},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 744, col: 16, offset: 22352},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 19, offset: 22355},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 34, offset: 22370},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 744, col: 37, offset: 22373},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 41, offset: 22377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 744, col: 44, offset: 22380},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 49, offset: 22385},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 62, offset: 22398},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 744, col: 65, offset: 22401},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 744, col: 69, offset: 22405},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 744, col: 75, offset: 22411},
										expr: &ruleRefExpr{
											pos:  position{line: 744, col: 75, offset: 22411},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 748, col: 1, offset: 22532},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 22549},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 22549},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 749, col: 5, offset: 22549},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 7, offset: 22551},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 22597},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 752, col: 1, offset: 22612},
			expr: &actionExpr{
				pos: position{line: 753, col: 5, offset: 22621},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 753, col: 5, offset: 22621},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 753, col: 5, offset: 22621},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 12, offset: 22628},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 753, col: 15, offset: 22631},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 19, offset: 22635},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 22, offset: 22638},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 30, offset: 22646},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 38, offset: 22654},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 42, offset: 22658},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 753, col: 46, offset: 22662},
								expr: &seqExpr{
									pos: position{line: 753, col: 47, offset: 22663},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 753, col: 47, offset: 22663},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 753, col: 51, offset: 22667},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 753, col: 56, offset: 22672},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 753, col: 56, offset: 22672},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 753, col: 67, offset: 22683},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 753, col: 73, offset: 22689},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 753, col: 78, offset: 22694},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 761, col: 1, offset: 22935},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 762, col: 5, offset: 22947},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 763, col: 5, offset: 22958},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 764, col: 5, offset: 22967},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 764, col: 5, offset: 22967},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 7, offset: 22969},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 768, col: 1, offset: 23061},
			expr: &choiceExpr{
				pos: position{line: 769, col: 5, offset: 23079},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 769, col: 5, offset: 23079},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 23089},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 770, col: 5, offset: 23089},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 772, col: 1, offset: 23125},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 23135},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 23135},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 23135},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 11, offset: 23141},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 773, col: 16, offset: 23146},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 773, col: 21, offset: 23151},
								expr: &actionExpr{
									pos: position{line: 773, col: 22, offset: 23152},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 773, col: 22, offset: 23152},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 773, col: 22, offset: 23152},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 773, col: 25, offset: 23155},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 773, col: 29, offset: 23159},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 773, col: 32, offset: 23162},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 773, col: 34, offset: 23164},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 777, col: 1, offset: 23273},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 23287},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 23287},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 778, col: 5, offset: 23287},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 6, offset: 23288},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 10, offset: 23292},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 16, offset: 23298},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 27, offset: 23309},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 778, col: 32, offset: 23314},
								expr: &ruleRefExpr{
									pos:  position{line: 778, col: 33, offset: 23315},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 782, col: 1, offset: 23383},
			expr: &choiceExpr{
				pos: position{line: 783, col: 5, offset: 23393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 23393},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 783, col: 5, offset: 23393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 783, col: 5, offset: 23393},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 783, col: 9, offset: 23397},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 14, offset: 23402},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 27, offset: 23415},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 30, offset: 23418},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 34, offset: 23422},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 783, col: 37, offset: 23425},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 783, col: 40, offset: 23428},
										expr: &ruleRefExpr{
											pos:  position{line: 783, col: 40, offset: 23428},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 783, col: 54, offset: 23442},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 23613},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 789, col: 5, offset: 23613},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 789, col: 5, offset: 23613},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 789, col: 9, offset: 23617},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 789, col: 12, offset: 23620},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 789, col: 16, offset: 23624},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 789, col: 19, offset: 23627},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 789, col: 22, offset: 23630},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 789, col: 35, offset: 23643},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 23814},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 795, col: 5, offset: 23814},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 795, col: 5, offset: 23814},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 795, col: 9, offset: 23818},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 795, col: 14, offset: 23823},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 795, col: 19, offset: 23828},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 796, col: 5, offset: 23877},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 796, col: 5, offset: 23877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 796, col: 5, offset: 23877},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 796, col: 9, offset: 23881},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 796, col: 12, offset: 23884},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 798, col: 1, offset: 23935},
			expr: &choiceExpr{
				pos: position{line: 799, col: 5, offset: 23947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 5, offset: 23947},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 800, col: 5, offset: 23958},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 801, col: 5, offset: 23968},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 802, col: 5, offset: 23976},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 803, col: 5, offset: 23984},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 23996},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 804, col: 5, offset: 23996},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 804, col: 5, offset: 23996},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 9, offset: 24000},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 804, col: 12, offset: 24003},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 804, col: 17, offset: 24008},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 26, offset: 24017},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 804, col: 29, offset: 24020},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 24050},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 805, col: 5, offset: 24050},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 805, col: 5, offset: 24050},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 9, offset: 24054},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 805, col: 12, offset: 24057},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 17, offset: 24062},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 22, offset: 24067},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 805, col: 25, offset: 24070},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 807, col: 1, offset: 24096},
			expr: &actionExpr{
				pos: position{line: 808, col: 5, offset: 24109},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 808, col: 5, offset: 24109},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 808, col: 5, offset: 24109},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 12, offset: 24116},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 808, col: 14, offset: 24118},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 20, offset: 24124},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 808, col: 26, offset: 24130},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 808, col: 33, offset: 24137},
								expr: &ruleRefExpr{
									pos:  position{line: 808, col: 33, offset: 24137},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 41, offset: 24145},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 808, col: 44, offset: 24148},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 48, offset: 24152},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 808, col: 51, offset: 24155},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 56, offset: 24160},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 812, col: 1, offset: 24289},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 24300},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 813, col: 5, offset: 24300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 813, col: 5, offset: 24300},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 9, offset: 24304},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 813, col: 12, offset: 24307},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 18, offset: 24313},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 30, offset: 24325},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 813, col: 33, offset: 24328},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 817, col: 1, offset: 24418},
			expr: &choiceExpr{
				pos: position{line: 818, col: 5, offset: 24434},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 24434},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 24434},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 818, col: 5, offset: 24434},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 24440},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 818, col: 22, offset: 24451},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 818, col: 27, offset: 24456},
										expr: &ruleRefExpr{
											pos:  position{line: 818, col: 27, offset: 24456},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 24555},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 821, col: 5, offset: 24555},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 823, col: 1, offset: 24591},
			expr: &actionExpr{
				pos: position{line: 823, col: 18, offset: 24608},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 823, col: 18, offset: 24608},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 823, col: 18, offset: 24608},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 823, col: 21, offset: 24611},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 25, offset: 24615},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 28, offset: 24618},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 33, offset: 24623},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 825, col: 1, offset: 24656},
			expr: &choiceExpr{
				pos: position{line: 826, col: 5, offset: 24671},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 826, col: 5, offset: 24671},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 827, col: 5, offset: 24682},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 24692},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 830, col: 1, offset: 24704},
			expr: &actionExpr{
				pos: position{line: 831, col: 5, offset: 24715},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 831, col: 5, offset: 24715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 831, col: 5, offset: 24715},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 831, col: 11, offset: 24721},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 831, col: 14, offset: 24724},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 19, offset: 24729},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 835, col: 1, offset: 24815},
			expr: &actionExpr{
				pos: position{line: 836, col: 5, offset: 24825},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 836, col: 5, offset: 24825},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 836, col: 5, offset: 24825},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 10, offset: 24830},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 20, offset: 24840},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 836, col: 23, offset: 24843},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 27, offset: 24847},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 836, col: 30, offset: 24850},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 36, offset: 24856},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 840, col: 1, offset: 24956},
			expr: &actionExpr{
				pos: position{line: 841, col: 5, offset: 24966},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 841, col: 5, offset: 24966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 841, col: 5, offset: 24966},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 9, offset: 24970},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 841, col: 12, offset: 24973},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 18, offset: 24979},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 30, offset: 24991},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 841, col: 33, offset: 24994},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 845, col: 1, offset: 25084},
			expr: &actionExpr{
				pos: position{line: 846, col: 5, offset: 25092},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 846, col: 5, offset: 25092},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 5, offset: 25092},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 10, offset: 25097},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 846, col: 13, offset: 25100},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 19, offset: 25106},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 31, offset: 25118},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 846, col: 34, offset: 25121},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 850, col: 1, offset: 25210},
			expr: &choiceExpr{
				pos: position{line: 851, col: 5, offset: 25226},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 25226},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 25226},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 851, col: 5, offset: 25226},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 25232},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 851, col: 22, offset: 25243},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 851, col: 27, offset: 25248},
										expr: &actionExpr{
											pos: position{line: 851, col: 28, offset: 25249},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 851, col: 28, offset: 25249},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 851, col: 28, offset: 25249},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 851, col: 31, offset: 25252},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 851, col: 35, offset: 25256},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 851, col: 38, offset: 25259},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 851, col: 40, offset: 25261},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 25379},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 854, col: 5, offset: 25379},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 856, col: 1, offset: 25415},
			expr: &choiceExpr{
				pos: position{line: 857, col: 5, offset: 25430},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 857, col: 5, offset: 25430},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 25441},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 858, col: 5, offset: 25441},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 7, offset: 25443},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 860, col: 1, offset: 25519},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 25527},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 25527},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 861, col: 5, offset: 25527},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 10, offset: 25532},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 13, offset: 25535},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 19, offset: 25541},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 27, offset: 25549},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 30, offset: 25552},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 865, col: 1, offset: 25643},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 25655},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 25655},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 25655},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 25655},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 25661},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 17, offset: 25667},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 866, col: 22, offset: 25672},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 22, offset: 25672},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 25766},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 869, col: 5, offset: 25766},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 872, col: 1, offset: 25803},
			expr: &actionExpr{
				pos: position{line: 872, col: 13, offset: 25815},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 872, col: 13, offset: 25815},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 872, col: 13, offset: 25815},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 872, col: 16, offset: 25818},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 20, offset: 25822},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 23, offset: 25825},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 25, offset: 25827},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 874, col: 1, offset: 25852},
			expr: &actionExpr{
				pos: position{line: 875, col: 5, offset: 25862},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 875, col: 5, offset: 25862},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 875, col: 5, offset: 25862},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 9, offset: 25866},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 875, col: 14, offset: 25871},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 875, col: 17, offset: 25874},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 875, col: 21, offset: 25878},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 875, col: 24, offset: 25881},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 30, offset: 25887},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 881, col: 1, offset: 25994},
			expr: &actionExpr{
				pos: position{line: 882, col: 5, offset: 26004},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 882, col: 5, offset: 26004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 882, col: 5, offset: 26004},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 15, offset: 26014},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 26028},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 10, offset: 26033},
								expr: &ruleRefExpr{
									pos:  position{line: 883, col: 10, offset: 26033},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 26046},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 884, col: 11, offset: 26052},
								expr: &ruleRefExpr{
									pos:  position{line: 884, col: 11, offset: 26052},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 26066},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 885, col: 11, offset: 26072},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 11, offset: 26072},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 886, col: 5, offset: 26086},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 886, col: 13, offset: 26094},
								expr: &ruleRefExpr{
									pos:  position{line: 886, col: 13, offset: 26094},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 887, col: 5, offset: 26110},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 887, col: 12, offset: 26117},
								expr: &ruleRefExpr{
									pos:  position{line: 887, col: 12, offset: 26117},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 5, offset: 26132},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 888, col: 13, offset: 26140},
								expr: &ruleRefExpr{
									pos:  position{line: 888, col: 13, offset: 26140},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 889, col: 5, offset: 26156},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 889, col: 11, offset: 26162},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 913, col: 1, offset: 26529},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 26543},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 26543},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 26543},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 914, col: 5, offset: 26543},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 914, col: 12, offset: 26550},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 914, col: 14, offset: 26552},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 26580},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 26580},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 915, col: 5, offset: 26580},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 915, col: 12, offset: 26587},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 915, col: 14, offset: 26589},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 915, col: 26, offset: 26601},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 917, col: 1, offset: 26645},
			expr: &actionExpr{
				pos: position{line: 918, col: 5, offset: 26663},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 918, col: 5, offset: 26663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 5, offset: 26663},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 9, offset: 26667},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 14, offset: 26672},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 918, col: 18, offset: 26676},
								expr: &seqExpr{
									pos: position{line: 918, col: 19, offset: 26677},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 918, col: 19, offset: 26677},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 21, offset: 26679},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 24, offset: 26682},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 26, offset: 26684},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 926, col: 1, offset: 26875},
			expr: &actionExpr{
				pos: position{line: 927, col: 5, offset: 26894},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 927, col: 5, offset: 26894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 927, col: 5, offset: 26894},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 26900},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 927, col: 25, offset: 26914},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 927, col: 30, offset: 26919},
								expr: &actionExpr{
									pos: position{line: 927, col: 31, offset: 26920},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 927, col: 31, offset: 26920},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 927, col: 31, offset: 26920},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 927, col: 34, offset: 26923},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 927, col: 38, offset: 26927},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 927, col: 41, offset: 26930},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 927, col: 46, offset: 26935},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 931, col: 1, offset: 27056},
			expr: &choiceExpr{
				pos: position{line: 932, col: 5, offset: 27068},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 27068},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 27068},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 932, col: 5, offset: 27068},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 932, col: 7, offset: 27070},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 932, col: 12, offset: 27075},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 932, col: 14, offset: 27077},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 20, offset: 27083},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 932, col: 29, offset: 27092},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 932, col: 35, offset: 27098},
										expr: &ruleRefExpr{
											pos:  position{line: 932, col: 35, offset: 27098},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 27193},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 935, col: 5, offset: 27193},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 935, col: 5, offset: 27193},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 7, offset: 27195},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 12, offset: 27200},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 935, col: 14, offset: 27202},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 937, col: 1, offset: 27227},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 27240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 27240},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 27240},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 938, col: 5, offset: 27240},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 7, offset: 27242},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 10, offset: 27245},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 12, offset: 27247},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 15, offset: 27250},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 27278},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 27278},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 939, col: 5, offset: 27278},
									name: "_",
								},
								&notExpr{
									pos: position{line: 939, col: 7, offset: 27280},
									expr: &seqExpr{
										pos: position{line: 939, col: 9, offset: 27282},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 939, col: 9, offset: 27282},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 939, col: 27, offset: 27300},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 30, offset: 27303},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 33, offset: 27306},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 941, col: 1, offset: 27331},
			expr: &ruleRefExpr{
				pos:  position{line: 942, col: 5, offset: 27344},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 944, col: 1, offset: 27350},
			expr: &actionExpr{
				pos: position{line: 945, col: 5, offset: 27363},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 945, col: 5, offset: 27363},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 945, col: 5, offset: 27363},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 945, col: 11, offset: 27369},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 945, col: 19, offset: 27377},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 945, col: 24, offset: 27382},
								expr: &actionExpr{
									pos: position{line: 945, col: 25, offset: 27383},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 945, col: 25, offset: 27383},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 945, col: 30, offset: 27388},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 949, col: 1, offset: 27503},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 27515},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 27515},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 27515},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 11, offset: 27521},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 24, offset: 27534},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 26, offset: 27536},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 31, offset: 27541},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 33, offset: 27543},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 39, offset: 27549},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 950, col: 48, offset: 27558},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 950, col: 54, offset: 27564},
								expr: &ruleRefExpr{
									pos:  position{line: 950, col: 54, offset: 27564},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 64, offset: 27574},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 66, offset: 27576},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 69, offset: 27579},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 71, offset: 27581},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 79, offset: 27589},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 87, offset: 27597},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 950, col: 90, offset: 27600},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 94, offset: 27604},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 97, offset: 27607},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 106, offset: 27616},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 965, col: 1, offset: 27847},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 27864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 27864},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 27864},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 966, col: 5, offset: 27864},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 966, col: 7, offset: 27866},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 966, col: 14, offset: 27873},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 966, col: 14, offset: 27873},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 21, offset: 27880},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 29, offset: 27888},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 36, offset: 27895},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 27928},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 967, col: 5, offset: 27928},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 969, col: 1, offset: 27956},
			expr: &actionExpr{
				pos: position{line: 970, col: 5, offset: 27969},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 970, col: 5, offset: 27969},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 970, col: 5, offset: 27969},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 970, col: 7, offset: 27971},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 970, col: 13, offset: 27977},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 970, col: 15, offset: 27979},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 20, offset: 27984},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 972, col: 1, offset: 28020},
			expr: &actionExpr{
				pos: position{line: 973, col: 5, offset: 28035},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 973, col: 5, offset: 28035},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 973, col: 5, offset: 28035},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 7, offset: 28037},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 13, offset: 28043},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 15, offset: 28045},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 18, offset: 28048},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 973, col: 20, offset: 28050},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 973, col: 28, offset: 28058},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 975, col: 1, offset: 28094},
			expr: &actionExpr{
				pos: position{line: 976, col: 5, offset: 28108},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 976, col: 5, offset: 28108},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 976, col: 5, offset: 28108},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 7, offset: 28110},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 14, offset: 28117},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 16, offset: 28119},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 21, offset: 28124},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 978, col: 1, offset: 28160},
			expr: &actionExpr{
				pos: position{line: 979, col: 5, offset: 28175},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 979, col: 5, offset: 28175},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 979, col: 5, offset: 28175},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 7, offset: 28177},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 13, offset: 28183},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 15, offset: 28185},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 18, offset: 28188},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 979, col: 20, offset: 28190},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 25, offset: 28195},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 979, col: 31, offset: 28201},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 37, offset: 28207},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 983, col: 1, offset: 28317},
			expr: &choiceExpr{
				pos: position{line: 984, col: 5, offset: 28330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 984, col: 5, offset: 28330},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 984, col: 5, offset: 28330},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 984, col: 5, offset: 28330},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 984, col: 7, offset: 28332},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 984, col: 12, offset: 28337},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 984, col: 12, offset: 28337},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 18, offset: 28343},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 28373},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 985, col: 5, offset: 28373},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 987, col: 1, offset: 28399},
			expr: &choiceExpr{
				pos: position{line: 988, col: 5, offset: 28412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 988, col: 5, offset: 28412},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 988, col: 5, offset: 28412},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 988, col: 5, offset: 28412},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 988, col: 7, offset: 28414},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 988, col: 13, offset: 28420},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 988, col: 15, offset: 28422},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 988, col: 21, offset: 28428},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 28459},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 989, col: 5, offset: 28459},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 991, col: 1, offset: 28481},
			expr: &actionExpr{
				pos: position{line: 991, col: 10, offset: 28490},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 991, col: 10, offset: 28490},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 992, col: 1, offset: 28525},
			expr: &actionExpr{
				pos: position{line: 992, col: 6, offset: 28530},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 992, col: 6, offset: 28530},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 993, col: 1, offset: 28557},
			expr: &actionExpr{
				pos: position{line: 993, col: 8, offset: 28564},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 993, col: 8, offset: 28564},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 994, col: 1, offset: 28595},
			expr: &actionExpr{
				pos: position{line: 994, col: 8, offset: 28602},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 994, col: 8, offset: 28602},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 995, col: 1, offset: 28633},
			expr: &actionExpr{
				pos: position{line: 995, col: 9, offset: 28641},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 995, col: 9, offset: 28641},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 996, col: 1, offset: 28674},
			expr: &actionExpr{
				pos: position{line: 996, col: 9, offset: 28682},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 996, col: 9, offset: 28682},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 997, col: 1, offset: 28715},
			expr: &actionExpr{
				pos: position{line: 997, col: 6, offset: 28720},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 997, col: 6, offset: 28720},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 998, col: 1, offset: 28747},
			expr: &actionExpr{
				pos: position{line: 998, col: 10, offset: 28756},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 998, col: 10, offset: 28756},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 999, col: 1, offset: 28791},
			expr: &actionExpr{
				pos: position{line: 999, col: 9, offset: 28799},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 999, col: 9, offset: 28799},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1000, col: 1, offset: 28832},
			expr: &actionExpr{
				pos: position{line: 1000, col: 6, offset: 28837},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1000, col: 6, offset: 28837},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1001, col: 1, offset: 28864},
			expr: &actionExpr{
				pos: position{line: 1001, col: 9, offset: 28872},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1001, col: 9, offset: 28872},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1002, col: 1, offset: 28905},
			expr: &actionExpr{
				pos: position{line: 1002, col: 7, offset: 28911},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1002, col: 7, offset: 28911},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1003, col: 1, offset: 28940},
			expr: &actionExpr{
				pos: position{line: 1003, col: 8, offset: 28947},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1003, col: 8, offset: 28947},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1004, col: 1, offset: 28978},
			expr: &actionExpr{
				pos: position{line: 1004, col: 8, offset: 28985},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1004, col: 8, offset: 28985},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1005, col: 1, offset: 29016},
			expr: &actionExpr{
				pos: position{line: 1005, col: 8, offset: 29023},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1005, col: 8, offset: 29023},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1006, col: 1, offset: 29054},
			expr: &actionExpr{
				pos: position{line: 1006, col: 9, offset: 29062},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 9, offset: 29062},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1007, col: 1, offset: 29095},
			expr: &actionExpr{
				pos: position{line: 1007, col: 9, offset: 29103},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1007, col: 9, offset: 29103},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1009, col: 1, offset: 29137},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 29159},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1010, col: 5, offset: 29159},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 14, offset: 29168},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 19, offset: 29173},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 27, offset: 29181},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 34, offset: 29188},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 42, offset: 29196},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 50, offset: 29204},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 59, offset: 29213},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 67, offset: 29221},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 75, offset: 29229},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1014, col: 1, offset: 29255},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 5, offset: 29267},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1015, col: 5, offset: 29267},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 5, offset: 29283},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 5, offset: 29303},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 5, offset: 29321},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 5, offset: 29340},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 5, offset: 29357},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 5, offset: 29370},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 5, offset: 29379},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 5, offset: 29396},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 5, offset: 29415},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 29434},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1027, col: 1, offset: 29447},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 5, offset: 29465},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 29465},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 29465},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1028, col: 5, offset: 29465},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 7, offset: 29467},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1028, col: 14, offset: 29474},
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 15, offset: 29475},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 29590},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1031, col: 5, offset: 29590},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 7, offset: 29592},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1035, col: 1, offset: 29696},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 5, offset: 29715},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 29715},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1036, col: 5, offset: 29715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1036, col: 5, offset: 29715},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 7, offset: 29717},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1036, col: 11, offset: 29721},
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 12, offset: 29722},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29836},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1039, col: 5, offset: 29836},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 7, offset: 29838},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1043, col: 1, offset: 29937},
			expr: &actionExpr{
				pos: position{line: 1044, col: 5, offset: 29954},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1044, col: 5, offset: 29954},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1044, col: 7, offset: 29956},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1048, col: 1, offset: 30069},
			expr: &actionExpr{
				pos: position{line: 1049, col: 5, offset: 30088},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1049, col: 5, offset: 30088},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1049, col: 7, offset: 30090},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1053, col: 1, offset: 30199},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 30218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 30218},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1054, col: 5, offset: 30218},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 30331},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1055, col: 5, offset: 30331},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1057, col: 1, offset: 30442},
			expr: &actionExpr{
				pos: position{line: 1058, col: 5, offset: 30458},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1058, col: 5, offset: 30458},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1060, col: 1, offset: 30564},
			expr: &actionExpr{
				pos: position{line: 1061, col: 5, offset: 30581},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1061, col: 5, offset: 30581},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1061, col: 5, offset: 30581},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1061, col: 10, offset: 30586},
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 10, offset: 30586},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1065, col: 1, offset: 30701},
			expr: &actionExpr{
				pos: position{line: 1066, col: 5, offset: 30717},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 5, offset: 30717},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1066, col: 5, offset: 30717},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1066, col: 9, offset: 30721},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 13, offset: 30725},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1066, col: 18, offset: 30730},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1070, col: 1, offset: 30819},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 30832},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1071, col: 5, offset: 30832},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1072, col: 5, offset: 30848},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 30848},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1072, col: 9, offset: 30852},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1076, col: 1, offset: 30951},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 5, offset: 30960},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1077, col: 5, offset: 30960},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 5, offset: 30976},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 5, offset: 30994},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1081, col: 1, offset: 31007},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 5, offset: 31025},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 31025},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1082, col: 5, offset: 31025},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1082, col: 5, offset: 31025},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 10, offset: 31030},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1082, col: 24, offset: 31044},
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 25, offset: 31045},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 31085},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 31085},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1083, col: 5, offset: 31085},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 10, offset: 31090},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 25, offset: 31105},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1083, col: 29, offset: 31109},
										expr: &seqExpr{
											pos: position{line: 1083, col: 30, offset: 31110},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1083, col: 30, offset: 31110},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1083, col: 33, offset: 31113},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1083, col: 37, offset: 31117},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1083, col: 40, offset: 31120},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 31352},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1089, col: 5, offset: 31352},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 10, offset: 31357},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1092, col: 5, offset: 31457},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1092, col: 5, offset: 31457},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1092, col: 5, offset: 31457},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1092, col: 9, offset: 31461},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1092, col: 12, offset: 31464},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1092, col: 14, offset: 31466},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1092, col: 25, offset: 31477},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1094, col: 1, offset: 31500},
			expr: &actionExpr{
				pos: position{line: 1095, col: 5, offset: 31514},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1095, col: 5, offset: 31514},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 31520},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1099, col: 1, offset: 31616},
			expr: &actionExpr{
				pos: position{line: 1100, col: 5, offset: 31629},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 5, offset: 31629},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1100, col: 5, offset: 31629},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1100, col: 11, offset: 31635},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1100, col: 16, offset: 31640},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1100, col: 21, offset: 31645},
								expr: &ruleRefExpr{
									pos:  position{line: 1100, col: 21, offset: 31645},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1104, col: 1, offset: 31739},
			expr: &actionExpr{
				pos: position{line: 1104, col: 16, offset: 31754},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1104, col: 16, offset: 31754},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1104, col: 16, offset: 31754},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1104, col: 19, offset: 31757},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1104, col: 23, offset: 31761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1104, col: 26, offset: 31764},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1104, col: 30, offset: 31768},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1106, col: 1, offset: 31794},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 31810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 31810},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1107, col: 5, offset: 31810},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1107, col: 5, offset: 31810},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 9, offset: 31814},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 12, offset: 31817},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 19, offset: 31824},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 33, offset: 31838},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1107, col: 36, offset: 31841},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 31936},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1110, col: 5, offset: 31936},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1110, col: 5, offset: 31936},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 9, offset: 31940},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 12, offset: 31943},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 16, offset: 31947},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 21, offset: 31952},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1110, col: 24, offset: 31955},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 32044},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 32044},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 32044},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 10, offset: 32049},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 14, offset: 32053},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 18, offset: 32057},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 23, offset: 32062},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1113, col: 26, offset: 32065},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 32153},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1116, col: 5, offset: 32153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1116, col: 5, offset: 32153},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 10, offset: 32158},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 13, offset: 32161},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 21, offset: 32169},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 26, offset: 32174},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1116, col: 29, offset: 32177},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 33, offset: 32181},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 36, offset: 32184},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 44, offset: 32192},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 49, offset: 32197},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1116, col: 52, offset: 32200},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1120, col: 1, offset: 32314},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 32334},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1121, col: 5, offset: 32334},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1121, col: 7, offset: 32336},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1128, col: 1, offset: 32552},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 5, offset: 32577},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1129, col: 5, offset: 32577},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1129, col: 5, offset: 32577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1129, col: 5, offset: 32577},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 9, offset: 32581},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1129, col: 11, offset: 32583},
										expr: &ruleRefExpr{
											pos:  position{line: 1129, col: 11, offset: 32583},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1129, col: 37, offset: 32609},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 32635},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 32635},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1130, col: 5, offset: 32635},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 9, offset: 32639},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1130, col: 11, offset: 32641},
										expr: &ruleRefExpr{
											pos:  position{line: 1130, col: 11, offset: 32641},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1130, col: 37, offset: 32667},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1132, col: 1, offset: 32690},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 5, offset: 32719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1133, col: 5, offset: 32719},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 32736},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1134, col: 5, offset: 32736},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1134, col: 7, offset: 32738},
								expr: &ruleRefExpr{
									pos:  position{line: 1134, col: 7, offset: 32738},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1138, col: 1, offset: 32875},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 5, offset: 32904},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 32904},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 32904},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 5, offset: 32904},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 10, offset: 32909},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1139, col: 12, offset: 32911},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 5, offset: 32938},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1140, col: 5, offset: 32938},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1140, col: 5, offset: 32938},
									expr: &litMatcher{
										pos:        position{line: 1140, col: 8, offset: 32941},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 15, offset: 32948},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 17, offset: 32950},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1142, col: 1, offset: 32986},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 5, offset: 33015},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1143, col: 5, offset: 33015},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 33032},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1144, col: 5, offset: 33032},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1144, col: 7, offset: 33034},
								expr: &ruleRefExpr{
									pos:  position{line: 1144, col: 7, offset: 33034},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1148, col: 1, offset: 33171},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 5, offset: 33200},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 33200},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1149, col: 5, offset: 33200},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1149, col: 5, offset: 33200},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 10, offset: 33205},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1149, col: 12, offset: 33207},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1150, col: 5, offset: 33234},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1150, col: 5, offset: 33234},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1150, col: 5, offset: 33234},
									expr: &litMatcher{
										pos:        position{line: 1150, col: 8, offset: 33237},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1150, col: 15, offset: 33244},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1150, col: 17, offset: 33246},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1152, col: 1, offset: 33282},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 33299},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 33299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1153, col: 5, offset: 33299},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 10, offset: 33304},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 13, offset: 33307},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 15, offset: 33309},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 20, offset: 33314},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1153, col: 23, offset: 33317},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1168, col: 1, offset: 33613},
			expr: &actionExpr{
				pos: position{line: 1169, col: 5, offset: 33631},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1169, col: 9, offset: 33635},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1169, col: 9, offset: 33635},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 19, offset: 33645},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 30, offset: 33656},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 41, offset: 33667},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 9, offset: 33684},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 18, offset: 33693},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 28, offset: 33703},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 38, offset: 33713},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 9, offset: 33729},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 21, offset: 33741},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 33, offset: 33753},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 9, offset: 33771},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 18, offset: 33780},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 9, offset: 33797},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 22, offset: 33810},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 9, offset: 33825},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 9, offset: 33841},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 16, offset: 33848},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 9, offset: 33862},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 18, offset: 33871},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1180, col: 1, offset: 33987},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 34005},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1181, col: 5, offset: 34005},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1181, col: 5, offset: 34005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1181, col: 5, offset: 34005},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 11, offset: 34011},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 21, offset: 34021},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1181, col: 26, offset: 34026},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 26, offset: 34026},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 34128},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1184, col: 5, offset: 34128},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1186, col: 1, offset: 34152},
			expr: &actionExpr{
				pos: position{line: 1186, col: 21, offset: 34172},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 21, offset: 34172},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1186, col: 21, offset: 34172},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1186, col: 24, offset: 34175},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1186, col: 28, offset: 34179},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 31, offset: 34182},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 35, offset: 34186},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1188, col: 1, offset: 34217},
			expr: &actionExpr{
				pos: position{line: 1189, col: 5, offset: 34231},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 5, offset: 34231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1189, col: 5, offset: 34231},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 10, offset: 34236},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1189, col: 20, offset: 34246},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1189, col: 23, offset: 34249},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1189, col: 27, offset: 34253},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 30, offset: 34256},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 34, offset: 34260},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1193, col: 1, offset: 34342},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 5, offset: 34356},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 5, offset: 34356},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 5, offset: 34375},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1197, col: 1, offset: 34389},
			expr: &actionExpr{
				pos: position{line: 1197, col: 12, offset: 34400},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 12, offset: 34400},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1197, col: 13, offset: 34401},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1197, col: 13, offset: 34401},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1197, col: 21, offset: 34409},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1197, col: 28, offset: 34416},
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 29, offset: 34417},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1198, col: 1, offset: 34454},
			expr: &actionExpr{
				pos: position{line: 1198, col: 11, offset: 34464},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 11, offset: 34464},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1198, col: 12, offset: 34465},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1198, col: 12, offset: 34465},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1198, col: 19, offset: 34472},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1198, col: 25, offset: 34478},
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 26, offset: 34479},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1199, col: 1, offset: 34515},
			expr: &actionExpr{
				pos: position{line: 1199, col: 11, offset: 34525},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 11, offset: 34525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1199, col: 11, offset: 34525},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1199, col: 16, offset: 34530},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 17, offset: 34531},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1200, col: 1, offset: 34567},
			expr: &actionExpr{
				pos: position{line: 1200, col: 12, offset: 34578},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 12, offset: 34578},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1200, col: 13, offset: 34579},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 13, offset: 34579},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1200, col: 21, offset: 34587},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1200, col: 28, offset: 34594},
							expr: &ruleRefExpr{
								pos:  position{line: 1200, col: 29, offset: 34595},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1201, col: 1, offset: 34632},
			expr: &actionExpr{
				pos: position{line: 1201, col: 11, offset: 34642},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 11, offset: 34642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1201, col: 11, offset: 34642},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1201, col: 16, offset: 34647},
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 17, offset: 34648},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1203, col: 1, offset: 34685},
			expr: &charClassMatcher{
				pos:        position{line: 1203, col: 19, offset: 34703},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1205, col: 1, offset: 34715},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 18, offset: 34732},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 18, offset: 34732},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1205, col: 36, offset: 34750},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1207, col: 1, offset: 34757},
			expr: &actionExpr{
				pos: position{line: 1208, col: 5, offset: 34772},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1208, col: 5, offset: 34772},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1208, col: 8, offset: 34775},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1210, col: 1, offset: 34856},
			expr: &choiceExpr{
				pos: position{line: 1211, col: 5, offset: 34875},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1211, col: 5, offset: 34875},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1211, col: 5, offset: 34875},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1211, col: 5, offset: 34875},
									expr: &seqExpr{
										pos: position{line: 1211, col: 7, offset: 34877},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1211, col: 7, offset: 34877},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1211, col: 15, offset: 34885},
												expr: &ruleRefExpr{
													pos:  position{line: 1211, col: 16, offset: 34886},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1211, col: 32, offset: 34902},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1211, col: 48, offset: 34918},
									expr: &ruleRefExpr{
										pos:  position{line: 1211, col: 48, offset: 34918},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1212, col: 5, offset: 34970},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1212, col: 5, offset: 34970},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1213, col: 5, offset: 35009},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1213, col: 5, offset: 35009},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1213, col: 5, offset: 35009},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1213, col: 10, offset: 35014},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1213, col: 13, offset: 35017},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 35108},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1215, col: 5, offset: 35108},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 35150},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 35150},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1216, col: 5, offset: 35150},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 8, offset: 35153},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1216, col: 26, offset: 35171},
									expr: &seqExpr{
										pos: position{line: 1216, col: 28, offset: 35173},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1216, col: 28, offset: 35173},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1216, col: 31, offset: 35176},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1218, col: 1, offset: 35201},
			expr: &actionExpr{
				pos: position{line: 1219, col: 5, offset: 35221},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 5, offset: 35221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1219, col: 5, offset: 35221},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 11, offset: 35227},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 26, offset: 35242},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1219, col: 31, offset: 35247},
								expr: &actionExpr{
									pos: position{line: 1219, col: 32, offset: 35248},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1219, col: 32, offset: 35248},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1219, col: 32, offset: 35248},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1219, col: 35, offset: 35251},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1219, col: 39, offset: 35255},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1219, col: 42, offset: 35258},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1219, col: 45, offset: 35261},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1223, col: 1, offset: 35376},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 5, offset: 35388},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1224, col: 5, offset: 35388},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 5, offset: 35407},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 5, offset: 35423},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 5, offset: 35431},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1229, col: 1, offset: 35441},
			expr: &actionExpr{
				pos: position{line: 1230, col: 5, offset: 35450},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1230, col: 5, offset: 35450},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1230, col: 5, offset: 35450},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1230, col: 14, offset: 35459},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1230, col: 18, offset: 35463},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1234, col: 1, offset: 35583},
			expr: &seqExpr{
				pos: position{line: 1234, col: 12, offset: 35594},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1234, col: 12, offset: 35594},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1234, col: 15, offset: 35597},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 19, offset: 35601},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1234, col: 22, offset: 35604},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 26, offset: 35608},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1236, col: 1, offset: 35612},
			expr: &seqExpr{
				pos: position{line: 1236, col: 6, offset: 35617},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1236, col: 6, offset: 35617},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1236, col: 11, offset: 35622},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1236, col: 16, offset: 35627},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1236, col: 21, offset: 35632},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1237, col: 1, offset: 35638},
			expr: &seqExpr{
				pos: position{line: 1237, col: 6, offset: 35643},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1237, col: 6, offset: 35643},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1237, col: 11, offset: 35648},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1239, col: 1, offset: 35655},
			expr: &seqExpr{
				pos: position{line: 1239, col: 12, offset: 35666},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 12, offset: 35666},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 24, offset: 35678},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1241, col: 1, offset: 35690},
			expr: &seqExpr{
				pos: position{line: 1241, col: 15, offset: 35704},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1241, col: 15, offset: 35704},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1241, col: 18, offset: 35707},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 22, offset: 35711},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1241, col: 25, offset: 35714},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 29, offset: 35718},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1241, col: 32, offset: 35721},
						expr: &seqExpr{
							pos: position{line: 1241, col: 33, offset: 35722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1241, col: 33, offset: 35722},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1241, col: 37, offset: 35726},
									expr: &charClassMatcher{
										pos:        position{line: 1241, col: 37, offset: 35726},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1243, col: 1, offset: 35736},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 35751},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1244, col: 5, offset: 35751},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1245, col: 5, offset: 35759},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1245, col: 6, offset: 35760},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1245, col: 6, offset: 35760},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1245, col: 12, offset: 35766},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1245, col: 17, offset: 35771},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1245, col: 20, offset: 35774},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1245, col: 24, offset: 35778},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1245, col: 27, offset: 35781},
								expr: &seqExpr{
									pos: position{line: 1245, col: 28, offset: 35782},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1245, col: 28, offset: 35782},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1245, col: 32, offset: 35786},
											expr: &charClassMatcher{
												pos:        position{line: 1245, col: 32, offset: 35786},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1247, col: 1, offset: 35796},
			expr: &actionExpr{
				pos: position{line: 1248, col: 5, offset: 35809},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 5, offset: 35809},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1248, col: 5, offset: 35809},
							expr: &litMatcher{
								pos:        position{line: 1248, col: 5, offset: 35809},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1248, col: 10, offset: 35814},
							expr: &seqExpr{
								pos: position{line: 1248, col: 11, offset: 35815},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 35815},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 19, offset: 35823},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1252, col: 1, offset: 35949},
			expr: &seqExpr{
				pos: position{line: 1252, col: 11, offset: 35959},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 35959},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1252, col: 16, offset: 35964},
						expr: &seqExpr{
							pos: position{line: 1252, col: 17, offset: 35965},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 17, offset: 35965},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1252, col: 21, offset: 35969},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1254, col: 1, offset: 35977},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 35990},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1255, col: 5, offset: 35990},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1256, col: 5, offset: 35999},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1257, col: 5, offset: 36008},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1258, col: 5, offset: 36017},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1259, col: 5, offset: 36025},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 36033},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1261, col: 5, offset: 36041},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1262, col: 5, offset: 36049},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1263, col: 5, offset: 36057},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1265, col: 1, offset: 36062},
			expr: &actionExpr{
				pos: position{line: 1266, col: 5, offset: 36069},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 5, offset: 36069},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1266, col: 5, offset: 36069},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1266, col: 10, offset: 36074},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 14, offset: 36078},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1266, col: 19, offset: 36083},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 23, offset: 36087},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1266, col: 28, offset: 36092},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 32, offset: 36096},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1268, col: 1, offset: 36133},
			expr: &actionExpr{
				pos: position{line: 1269, col: 5, offset: 36141},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1269, col: 5, offset: 36141},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1269, col: 5, offset: 36141},
							expr: &seqExpr{
								pos: position{line: 1269, col: 8, offset: 36144},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1269, col: 8, offset: 36144},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1269, col: 12, offset: 36148},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1269, col: 16, offset: 36152},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1269, col: 20, offset: 36156},
										expr: &choiceExpr{
											pos: position{line: 1269, col: 22, offset: 36158},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1269, col: 22, offset: 36158},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1269, col: 33, offset: 36169},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 39, offset: 36175},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 41, offset: 36177},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1273, col: 1, offset: 36341},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 5, offset: 36359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1274, col: 5, offset: 36359},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1274, col: 5, offset: 36359},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1274, col: 5, offset: 36359},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1274, col: 7, offset: 36361},
										expr: &ruleRefExpr{
											pos:  position{line: 1274, col: 7, offset: 36361},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 17, offset: 36371},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 19, offset: 36373},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1277, col: 5, offset: 36437},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1277, col: 5, offset: 36437},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1277, col: 5, offset: 36437},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1277, col: 7, offset: 36439},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1277, col: 11, offset: 36443},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1277, col: 13, offset: 36445},
										expr: &ruleRefExpr{
											pos:  position{line: 1277, col: 13, offset: 36445},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1277, col: 23, offset: 36455},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1277, col: 28, offset: 36460},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1277, col: 30, offset: 36462},
										expr: &ruleRefExpr{
											pos:  position{line: 1277, col: 30, offset: 36462},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1277, col: 40, offset: 36472},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1277, col: 42, offset: 36474},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1280, col: 5, offset: 36573},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1280, col: 5, offset: 36573},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1280, col: 5, offset: 36573},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 10, offset: 36578},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1280, col: 12, offset: 36580},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 12, offset: 36580},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 22, offset: 36590},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1280, col: 24, offset: 36592},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1283, col: 5, offset: 36663},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1283, col: 5, offset: 36663},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1283, col: 5, offset: 36663},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 7, offset: 36665},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1283, col: 11, offset: 36669},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1283, col: 13, offset: 36671},
										expr: &ruleRefExpr{
											pos:  position{line: 1283, col: 13, offset: 36671},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1283, col: 23, offset: 36681},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 36749},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1286, col: 5, offset: 36749},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1290, col: 1, offset: 36786},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 36798},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1291, col: 5, offset: 36798},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 5, offset: 36805},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1294, col: 1, offset: 36810},
			expr: &actionExpr{
				pos: position{line: 1294, col: 12, offset: 36821},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 12, offset: 36821},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1294, col: 12, offset: 36821},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 16, offset: 36825},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 18, offset: 36827},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1296, col: 1, offset: 36865},
			expr: &actionExpr{
				pos: position{line: 1296, col: 12, offset: 36876},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 12, offset: 36876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1296, col: 12, offset: 36876},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1296, col: 14, offset: 36878},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1296, col: 18, offset: 36882},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1298, col: 1, offset: 36920},
			expr: &actionExpr{
				pos: position{line: 1299, col: 5, offset: 36931},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 5, offset: 36931},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1299, col: 5, offset: 36931},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 7, offset: 36933},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1299, col: 10, offset: 36936},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 14, offset: 36940},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 16, offset: 36942},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1303, col: 1, offset: 37015},
			expr: &actionExpr{
				pos: position{line: 1304, col: 5, offset: 37026},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 5, offset: 37026},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1304, col: 5, offset: 37026},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 7, offset: 37028},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1304, col: 11, offset: 37032},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 15, offset: 37036},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 17, offset: 37038},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1308, col: 1, offset: 37101},
			expr: &actionExpr{
				pos: position{line: 1309, col: 4, offset: 37109},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1309, col: 4, offset: 37109},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1309, col: 6, offset: 37111},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1311, col: 1, offset: 37151},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 37165},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 5, offset: 37165},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 5, offset: 37180},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1315, col: 1, offset: 37196},
			expr: &actionExpr{
				pos: position{line: 1315, col: 14, offset: 37209},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1315, col: 14, offset: 37209},
					expr: &charClassMatcher{
						pos:        position{line: 1315, col: 14, offset: 37209},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1317, col: 1, offset: 37248},
			expr: &actionExpr{
				pos: position{line: 1318, col: 5, offset: 37267},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 5, offset: 37267},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1318, col: 5, offset: 37267},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1318, col: 9, offset: 37271},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1320, col: 1, offset: 37314},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 37330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1321, col: 5, offset: 37330},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1321, col: 5, offset: 37330},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1321, col: 5, offset: 37330},
									expr: &litMatcher{
										pos:        position{line: 1321, col: 5, offset: 37330},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1321, col: 10, offset: 37335},
									expr: &charClassMatcher{
										pos:        position{line: 1321, col: 10, offset: 37335},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 17, offset: 37342},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1321, col: 21, offset: 37346},
									expr: &charClassMatcher{
										pos:        position{line: 1321, col: 21, offset: 37346},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1321, col: 28, offset: 37353},
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 28, offset: 37353},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 5, offset: 37412},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1324, col: 5, offset: 37412},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1324, col: 5, offset: 37412},
									expr: &litMatcher{
										pos:        position{line: 1324, col: 5, offset: 37412},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 10, offset: 37417},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1324, col: 14, offset: 37421},
									expr: &charClassMatcher{
										pos:        position{line: 1324, col: 14, offset: 37421},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1324, col: 21, offset: 37428},
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 21, offset: 37428},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1327, col: 5, offset: 37487},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1327, col: 7, offset: 37489},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1327, col: 7, offset: 37489},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1327, col: 13, offset: 37495},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1330, col: 1, offset: 37539},
			expr: &seqExpr{
				pos: position{line: 1330, col: 16, offset: 37554},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1330, col: 16, offset: 37554},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1330, col: 21, offset: 37559},
						expr: &charClassMatcher{
							pos:        position{line: 1330, col: 21, offset: 37559},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 27, offset: 37565},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1332, col: 1, offset: 37577},
			expr: &litMatcher{
				pos:        position{line: 1332, col: 7, offset: 37583},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1334, col: 1, offset: 37590},
			expr: &seqExpr{
				pos: position{line: 1334, col: 12, offset: 37601},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1334, col: 12, offset: 37601},
						expr: &choiceExpr{
							pos: position{line: 1334, col: 13, offset: 37602},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1334, col: 13, offset: 37602},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1334, col: 19, offset: 37608},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1334, col: 25, offset: 37614},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1336, col: 1, offset: 37621},
			expr: &actionExpr{
				pos: position{line: 1336, col: 7, offset: 37627},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1336, col: 7, offset: 37627},
					expr: &ruleRefExpr{
						pos:  position{line: 1336, col: 7, offset: 37627},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1338, col: 1, offset: 37669},
			expr: &charClassMatcher{
				pos:        position{line: 1338, col: 12, offset: 37680},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1340, col: 1, offset: 37693},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 5, offset: 37710},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1341, col: 5, offset: 37710},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1341, col: 5, offset: 37710},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1341, col: 5, offset: 37710},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1341, col: 9, offset: 37714},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1341, col: 11, offset: 37716},
										expr: &ruleRefExpr{
											pos:  position{line: 1341, col: 11, offset: 37716},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1341, col: 29, offset: 37734},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1342, col: 5, offset: 37771},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1342, col: 5, offset: 37771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1342, col: 5, offset: 37771},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1342, col: 9, offset: 37775},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1342, col: 11, offset: 37777},
										expr: &ruleRefExpr{
											pos:  position{line: 1342, col: 11, offset: 37777},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1342, col: 29, offset: 37795},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1344, col: 1, offset: 37829},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 5, offset: 37850},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1345, col: 5, offset: 37850},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1345, col: 5, offset: 37850},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1345, col: 5, offset: 37850},
									expr: &choiceExpr{
										pos: position{line: 1345, col: 7, offset: 37852},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1345, col: 7, offset: 37852},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1345, col: 13, offset: 37858},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1345, col: 26, offset: 37871,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1346, col: 5, offset: 37908},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1346, col: 5, offset: 37908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 5, offset: 37908},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1346, col: 10, offset: 37913},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 12, offset: 37915},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1348, col: 1, offset: 37949},
			expr: &actionExpr{
				pos: position{line: 1349, col: 5, offset: 37961},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 5, offset: 37961},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 5, offset: 37961},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 10, offset: 37966},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 23, offset: 37979},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1349, col: 28, offset: 37984},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 28, offset: 37984},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1351, col: 1, offset: 38046},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 38063},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1352, col: 5, offset: 38063},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 5, offset: 38080},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1355, col: 1, offset: 38092},
			expr: &actionExpr{
				pos: position{line: 1355, col: 16, offset: 38107},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1355, col: 16, offset: 38107},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1357, col: 1, offset: 38156},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 38172},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1358, col: 5, offset: 38172},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1359, col: 5, offset: 38189},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1361, col: 1, offset: 38196},
			expr: &actionExpr{
				pos: position{line: 1361, col: 14, offset: 38209},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 14, offset: 38209},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1361, col: 14, offset: 38209},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 19, offset: 38214},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1361, col: 22, offset: 38217},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1361, col: 22, offset: 38217},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 38, offset: 38233},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1363, col: 1, offset: 38269},
			expr: &actionExpr{
				pos: position{line: 1364, col: 5, offset: 38285},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1364, col: 5, offset: 38285},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1364, col: 5, offset: 38285},
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 6, offset: 38286},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1364, col: 22, offset: 38302},
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 23, offset: 38303},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1364, col: 35, offset: 38315},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 40, offset: 38320},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1364, col: 50, offset: 38330},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1364, col: 55, offset: 38335},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 55, offset: 38335},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1368, col: 1, offset: 38404},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 19, offset: 38422},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1368, col: 19, offset: 38422},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1368, col: 34, offset: 38437},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1368, col: 34, offset: 38437},
								expr: &litMatcher{
									pos:        position{line: 1368, col: 34, offset: 38437},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1368, col: 39, offset: 38442},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1369, col: 1, offset: 38454},
			expr: &seqExpr{
				pos: position{line: 1369, col: 15, offset: 38468},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1369, col: 15, offset: 38468},
						expr: &ruleRefExpr{
							pos:  position{line: 1369, col: 15, offset: 38468},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1369, col: 28, offset: 38481},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1371, col: 1, offset: 38486},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 5, offset: 38500},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1372, col: 5, offset: 38500},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 5, offset: 38517},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1374, col: 5, offset: 38529},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1374, col: 5, offset: 38529},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1376, col: 1, offset: 38553},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 38566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1377, col: 5, offset: 38566},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1378, col: 5, offset: 38580},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1380, col: 1, offset: 38587},
			expr: &actionExpr{
				pos: position{line: 1380, col: 11, offset: 38597},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1380, col: 11, offset: 38597},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1380, col: 11, offset: 38597},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1380, col: 16, offset: 38602},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1380, col: 19, offset: 38605},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1380, col: 19, offset: 38605},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 32, offset: 38618},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1382, col: 1, offset: 38654},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 38669},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1383, col: 5, offset: 38669},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1383, col: 5, offset: 38669},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1384, col: 5, offset: 38697},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1384, col: 5, offset: 38697},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1385, col: 5, offset: 38727},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1388, col: 1, offset: 38734},
			expr: &choiceExpr{
				pos: position{line: 1389, col: 5, offset: 38755},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 38755},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1389, col: 5, offset: 38755},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1389, col: 5, offset: 38755},
									expr: &choiceExpr{
										pos: position{line: 1389, col: 7, offset: 38757},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1389, col: 7, offset: 38757},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1389, col: 13, offset: 38763},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1389, col: 26, offset: 38776,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1390, col: 5, offset: 38813},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1390, col: 5, offset: 38813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1390, col: 5, offset: 38813},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 10, offset: 38818},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 12, offset: 38820},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1392, col: 1, offset: 38854},
			expr: &choiceExpr{
				pos: position{line: 1393, col: 5, offset: 38873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1393, col: 5, offset: 38873},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 5, offset: 38894},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1396, col: 1, offset: 38909},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 5, offset: 38930},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1397, col: 5, offset: 38930},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1398, col: 5, offset: 38938},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1398, col: 5, offset: 38938},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 38978},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38987},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38987},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1401, col: 5, offset: 39016},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1401, col: 5, offset: 39016},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 39045},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1402, col: 5, offset: 39045},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1403, col: 5, offset: 39074},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1403, col: 5, offset: 39074},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1404, col: 5, offset: 39103},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1404, col: 5, offset: 39103},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1405, col: 5, offset: 39132},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1405, col: 5, offset: 39132},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1407, col: 1, offset: 39158},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 5, offset: 39176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1408, col: 5, offset: 39176},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1408, col: 5, offset: 39176},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 39204},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 39204},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 39232},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1412, col: 1, offset: 39238},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 5, offset: 39256},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1413, col: 5, offset: 39256},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1413, col: 5, offset: 39256},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1413, col: 5, offset: 39256},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 9, offset: 39260},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1413, col: 16, offset: 39267},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1413, col: 16, offset: 39267},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 25, offset: 39276},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 34, offset: 39285},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 43, offset: 39294},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 39357},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 39357},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1416, col: 5, offset: 39357},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1416, col: 9, offset: 39361},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 13, offset: 39365},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1416, col: 20, offset: 39372},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1416, col: 20, offset: 39372},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 29, offset: 39381},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 29, offset: 39381},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 39, offset: 39391},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 39, offset: 39391},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 49, offset: 39401},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 49, offset: 39401},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 59, offset: 39411},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 59, offset: 39411},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 69, offset: 39421},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 69, offset: 39421},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 80, offset: 39432},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1420, col: 1, offset: 39486},
			expr: &actionExpr{
				pos: position{line: 1421, col: 5, offset: 39504},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 5, offset: 39504},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1421, col: 5, offset: 39504},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1421, col: 9, offset: 39508},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 14, offset: 39513},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1421, col: 25, offset: 39524},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1421, col: 29, offset: 39528},
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 30, offset: 39529},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1423, col: 1, offset: 39564},
			expr: &actionExpr{
				pos: position{line: 1424, col: 5, offset: 39579},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1424, col: 5, offset: 39579},
					expr: &choiceExpr{
						pos: position{line: 1424, col: 6, offset: 39580},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1424, col: 6, offset: 39580},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1424, col: 15, offset: 39589},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1424, col: 15, offset: 39589},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1424, col: 20, offset: 39594,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1426, col: 1, offset: 39630},
			expr: &charClassMatcher{
				pos:        position{line: 1427, col: 5, offset: 39646},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1429, col: 1, offset: 39661},
			expr: &oneOrMoreExpr{
				pos: position{line: 1429, col: 6, offset: 39666},
				expr: &ruleRefExpr{
					pos:  position{line: 1429, col: 6, offset: 39666},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1431, col: 1, offset: 39677},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1431, col: 6, offset: 39682},
				expr: &ruleRefExpr{
					pos:  position{line: 1431, col: 6, offset: 39682},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1433, col: 1, offset: 39693},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 5, offset: 39706},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1434, col: 5, offset: 39706},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 5, offset: 39721},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 5, offset: 39740},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1438, col: 1, offset: 39749},
			expr: &anyMatcher{
				line: 1439, col: 5, offset: 39769,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1441, col: 1, offset: 39772},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 5, offset: 39800},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1442, col: 5, offset: 39800},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1443, col: 5, offset: 39809},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1444, col: 5, offset: 39818},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1445, col: 5, offset: 39827},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1446, col: 5, offset: 39835},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1447, col: 5, offset: 39848},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1449, col: 1, offset: 39858},
			expr: &charClassMatcher{
				pos:        position{line: 1450, col: 5, offset: 39877},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1456, col: 1, offset: 40207},
			expr: &ruleRefExpr{
				pos:  position{line: 1459, col: 5, offset: 40278},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1461, col: 1, offset: 40297},
			expr: &seqExpr{
				pos: position{line: 1462, col: 5, offset: 40318},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1462, col: 5, offset: 40318},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1462, col: 10, offset: 40323},
						expr: &seqExpr{
							pos: position{line: 1462, col: 11, offset: 40324},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1462, col: 11, offset: 40324},
									expr: &litMatcher{
										pos:        position{line: 1462, col: 12, offset: 40325},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1462, col: 17, offset: 40330},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1462, col: 35, offset: 40348},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1464, col: 1, offset: 40354},
			expr: &seqExpr{
				pos: position{line: 1465, col: 5, offset: 40376},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 5, offset: 40376},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1465, col: 10, offset: 40381},
						expr: &seqExpr{
							pos: position{line: 1465, col: 11, offset: 40382},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1465, col: 11, offset: 40382},
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 12, offset: 40383},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1465, col: 27, offset: 40398},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1467, col: 1, offset: 40417},
			expr: &seqExpr{
				pos: position{line: 1467, col: 7, offset: 40423},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1467, col: 7, offset: 40423},
						expr: &ruleRefExpr{
							pos:  position{line: 1467, col: 7, offset: 40423},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 19, offset: 40435},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1469, col: 1, offset: 40451},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 7, offset: 40457},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1469, col: 7, offset: 40457},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 11, offset: 40461},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1471, col: 1, offset: 40466},
			expr: &notExpr{
				pos: position{line: 1471, col: 7, offset: 40472},
				expr: &anyMatcher{
					line: 1471, col: 8, offset: 40473,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1473, col: 1, offset: 40476},
			expr: &notExpr{
				pos: position{line: 1473, col: 8, offset: 40483},
				expr: &ruleRefExpr{
					pos:  position{line: 1473, col: 9, offset: 40484},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "body": seq, "decls": decls}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["seq"])
}

func (c *current) onSequential1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, leg interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": leg}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["leg"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "decls": []interface{}{}, "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
