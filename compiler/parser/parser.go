// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 355},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 435},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 435},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 435},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 435},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 441},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 441},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 447},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 450},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 456},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 471},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 471},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 744},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 756},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 763},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 763},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 768},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 795},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1445},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1450},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1453},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1455},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1484},
			expr: &actionExpr{
				pos: position{line: 45, col: 5, offset: 1497},
				run: (*parser).callonParallel1,
				expr: &seqExpr{
					pos: position{line: 45, col: 5, offset: 1497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 5, offset: 1497},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 8, offset: 1500},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 13, offset: 1505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 16, offset: 1508},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 18, offset: 1510},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 29, offset: 1521},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 32, offset: 1524},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 47, col: 1, offset: 1547},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1561},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1561},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 48, col: 5, offset: 1561},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 8, offset: 1564},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 15, offset: 1571},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 27, offset: 1583},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 31, offset: 1587},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 31, offset: 1587},
									name: "FromTrunkSeq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 45, offset: 1601},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 48, col: 48, offset: 1604},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 52, col: 1, offset: 1705},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1722},
				run: (*parser).callonFromTrunkSeq1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1722},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1722},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1725},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1730},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1733},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 20, offset: 1737},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 55, col: 1, offset: 1769},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1784},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 56, col: 5, offset: 1784},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 5, offset: 1797},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 5, offset: 1810},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 5, offset: 1823},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 61, col: 1, offset: 1833},
			expr: &choiceExpr{
				pos: position{line: 62, col: 5, offset: 1847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1847},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1847},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1847},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 13, offset: 1855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 16, offset: 1858},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 20, offset: 1862},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 30, offset: 1872},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 30, offset: 1872},
											name: "Parallel",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 40, offset: 1882},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 43, offset: 1885},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1982},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 5, offset: 1982},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 14, offset: 1991},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 65, col: 16, offset: 1993},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 65, col: 21, offset: 1998},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 26, offset: 2003},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 65, col: 28, offset: 2005},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 65, col: 32, offset: 2009},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 38, offset: 2015},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 38, offset: 2015},
											name: "SwitchLiteralClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 59, offset: 2036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 62, offset: 2039},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2144},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 2144},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 14, offset: 2153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 17, offset: 2156},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 68, col: 21, offset: 2160},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 68, col: 27, offset: 2166},
										expr: &ruleRefExpr{
											pos:  position{line: 68, col: 27, offset: 2166},
											name: "SwitchSearchBooleanClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 54, offset: 2193},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 57, offset: 2196},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 2300},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 2300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 71, col: 5, offset: 2300},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 12, offset: 2307},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 15, offset: 2310},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 71, col: 19, offset: 2314},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 71, col: 26, offset: 2321},
										expr: &ruleRefExpr{
											pos:  position{line: 71, col: 26, offset: 2321},
											name: "FromTrunk",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 37, offset: 2332},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 40, offset: 2335},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 5, offset: 2426},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2439},
						run: (*parser).callonOperation46,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2439},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 7, offset: 2441},
										name: "OpExprs",
									},
								},
								&andExpr{
									pos: position{line: 75, col: 15, offset: 2449},
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 16, offset: 2450},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2480},
						run: (*parser).callonOperation52,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2480},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 2480},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 7, offset: 2482},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 76, col: 19, offset: 2494},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 20, offset: 2495},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2526},
						run: (*parser).callonOperation58,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2526},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 77, col: 5, offset: 2526},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 10, offset: 2531},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 77, col: 24, offset: 2545},
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 25, offset: 2546},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLiteralClause",
			pos:  position{line: 81, col: 1, offset: 2637},
			expr: &actionExpr{
				pos: position{line: 82, col: 5, offset: 2661},
				run: (*parser).callonSwitchLiteralClause1,
				expr: &seqExpr{
					pos: position{line: 82, col: 5, offset: 2661},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 82, col: 5, offset: 2661},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 82, col: 8, offset: 2664},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 82, col: 14, offset: 2670},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 82, col: 14, offset: 2670},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 29, offset: 2685},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 39, offset: 2695},
										name: "Identifier",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 82, col: 51, offset: 2707},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 82, col: 54, offset: 2710},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 82, col: 59, offset: 2715},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 82, col: 62, offset: 2718},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 82, col: 67, offset: 2723},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 82, col: 78, offset: 2734},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 82, col: 81, offset: 2737},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SwitchSearchBooleanClause",
			pos:  position{line: 86, col: 1, offset: 2819},
			expr: &actionExpr{
				pos: position{line: 87, col: 5, offset: 2849},
				run: (*parser).callonSwitchSearchBooleanClause1,
				expr: &seqExpr{
					pos: position{line: 87, col: 5, offset: 2849},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 87, col: 5, offset: 2849},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 8, offset: 2852},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 87, col: 14, offset: 2858},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 87, col: 14, offset: 2858},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 29, offset: 2873},
										name: "SearchBoolean",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 44, offset: 2888},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 87, col: 47, offset: 2891},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 52, offset: 2896},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 55, offset: 2899},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 60, offset: 2904},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 71, offset: 2915},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 87, col: 74, offset: 2918},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 91, col: 1, offset: 3000},
			expr: &actionExpr{
				pos: position{line: 91, col: 16, offset: 3015},
				run: (*parser).callonDefaultToken1,
				expr: &litMatcher{
					pos:        position{line: 91, col: 16, offset: 3015},
					val:        "default",
					ignoreCase: true,
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 93, col: 1, offset: 3047},
			expr: &seqExpr{
				pos: position{line: 93, col: 11, offset: 3057},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 93, col: 11, offset: 3057},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 93, col: 15, offset: 3061},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 15, offset: 3061},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 93, col: 22, offset: 3068},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 93, col: 29, offset: 3075},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 36, offset: 3082},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 94, col: 1, offset: 3087},
			expr: &seqExpr{
				pos: position{line: 94, col: 8, offset: 3094},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 94, col: 8, offset: 3094},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 94, col: 12, offset: 3098},
						expr: &choiceExpr{
							pos: position{line: 94, col: 14, offset: 3100},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 94, col: 14, offset: 3100},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 94, col: 20, offset: 3106},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 96, col: 1, offset: 3112},
			expr: &seqExpr{
				pos: position{line: 96, col: 13, offset: 3124},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 96, col: 13, offset: 3124},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 96, col: 17, offset: 3128},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 96, col: 18, offset: 3129},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 96, col: 18, offset: 3129},
										expr: &litMatcher{
											pos:        position{line: 96, col: 19, offset: 3130},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 96, col: 24, offset: 3135},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 38, offset: 3149},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 57, offset: 3168},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 96, col: 82, offset: 3193},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 88, offset: 3199},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 94, offset: 3205},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 100, offset: 3211},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 98, col: 1, offset: 3223},
			expr: &actionExpr{
				pos: position{line: 98, col: 14, offset: 3236},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 98, col: 15, offset: 3237},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 98, col: 15, offset: 3237},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 22, offset: 3244},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 29, offset: 3251},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 36, offset: 3258},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 43, offset: 3265},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 49, offset: 3271},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 56, offset: 3278},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 100, col: 1, offset: 3315},
			expr: &choiceExpr{
				pos: position{line: 100, col: 12, offset: 3326},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 100, col: 13, offset: 3327},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 100, col: 13, offset: 3327},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 100, col: 16, offset: 3330},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 100, col: 16, offset: 3330},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 100, col: 26, offset: 3340},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 35, offset: 3349},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 100, col: 43, offset: 3357},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 100, col: 43, offset: 3357},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 100, col: 46, offset: 3360},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 102, col: 1, offset: 3366},
			expr: &actionExpr{
				pos: position{line: 103, col: 5, offset: 3384},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 103, col: 5, offset: 3384},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3384},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 11, offset: 3390},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 21, offset: 3400},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 26, offset: 3405},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 26, offset: 3405},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 107, col: 1, offset: 3479},
			expr: &actionExpr{
				pos: position{line: 107, col: 16, offset: 3494},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 107, col: 16, offset: 3494},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 107, col: 16, offset: 3494},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 18, offset: 3496},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 26, offset: 3504},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 28, offset: 3506},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 30, offset: 3508},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 109, col: 1, offset: 3558},
			expr: &actionExpr{
				pos: position{line: 110, col: 5, offset: 3572},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 110, col: 5, offset: 3572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 110, col: 5, offset: 3572},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 11, offset: 3578},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 5, offset: 3595},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 10, offset: 3600},
								expr: &actionExpr{
									pos: position{line: 111, col: 11, offset: 3601},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 111, col: 11, offset: 3601},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 111, col: 11, offset: 3601},
												expr: &seqExpr{
													pos: position{line: 111, col: 12, offset: 3602},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 111, col: 12, offset: 3602},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 111, col: 14, offset: 3604},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 111, col: 25, offset: 3615},
												name: "_",
											},
											&notExpr{
												pos: position{line: 111, col: 27, offset: 3617},
												expr: &ruleRefExpr{
													pos:  position{line: 111, col: 28, offset: 3618},
													name: "OrToken",
												},
											},
											&labeledExpr{
												pos:   position{line: 111, col: 36, offset: 3626},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 111, col: 41, offset: 3631},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 115, col: 1, offset: 3747},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3764},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3764},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3764},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 116, col: 6, offset: 3765},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 116, col: 6, offset: 3765},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 116, col: 6, offset: 3765},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 15, offset: 3774},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 116, col: 19, offset: 3778},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 116, col: 19, offset: 3778},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 23, offset: 3782},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 27, offset: 3786},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 29, offset: 3788},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3900},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 5, offset: 3900},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 9, offset: 3904},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 12, offset: 3907},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 17, offset: 3912},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 31, offset: 3926},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 119, col: 34, offset: 3929},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3958},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "TBD",
			pos:  position{line: 123, col: 1, offset: 3971},
			expr: &choiceExpr{
				pos: position{line: 124, col: 5, offset: 3979},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3979},
						run: (*parser).callonTBD2,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3979},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 124, col: 5, offset: 3979},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 9, offset: 3983},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 124, col: 12, offset: 3986},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 22, offset: 3996},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 36, offset: 4010},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 124, col: 39, offset: 4013},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 41, offset: 4015},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4697},
						run: (*parser).callonTBD11,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4697},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 151, col: 5, offset: 4697},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 11, offset: 4703},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 151, col: 24, offset: 4716},
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 25, offset: 4717},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4753},
						run: (*parser).callonTBD17,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4753},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 152, col: 5, offset: 4753},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 7, offset: 4755},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 19, offset: 4767},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 21, offset: 4769},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 29, offset: 4777},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 152, col: 31, offset: 4779},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 180, col: 1, offset: 5458},
			expr: &choiceExpr{
				pos: position{line: 181, col: 5, offset: 5473},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5473},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5473},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 12, offset: 5480},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5521},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 5521},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 182, col: 5, offset: 5521},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 7, offset: 5523},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 182, col: 19, offset: 5535},
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 20, offset: 5536},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5653},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 185, col: 5, offset: 5653},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 185, col: 9, offset: 5657},
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 10, offset: 5658},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 5774},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 190, col: 1, offset: 5795},
			expr: &choiceExpr{
				pos: position{line: 191, col: 5, offset: 5811},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 5811},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 5823},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 192, col: 5, offset: 5823},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 192, col: 5, offset: 5823},
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 6, offset: 5824},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 192, col: 13, offset: 5831},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 15, offset: 5833},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 196, col: 1, offset: 5941},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5959},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 5, offset: 5959},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 197, col: 13, offset: 5967},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 201, col: 1, offset: 6069},
			expr: &actionExpr{
				pos: position{line: 202, col: 5, offset: 6086},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 202, col: 5, offset: 6086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 5, offset: 6086},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 7, offset: 6088},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 12, offset: 6093},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 202, col: 14, offset: 6095},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 25, offset: 6106},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 28, offset: 6109},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 36, offset: 6117},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 206, col: 1, offset: 6229},
			expr: &choiceExpr{
				pos: position{line: 206, col: 11, offset: 6239},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 11, offset: 6239},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 20, offset: 6248},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 210, col: 1, offset: 6280},
			expr: &choiceExpr{
				pos: position{line: 211, col: 5, offset: 6296},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 211, col: 5, offset: 6296},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 211, col: 5, offset: 6296},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 211, col: 5, offset: 6296},
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 5, offset: 6296},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 211, col: 16, offset: 6307},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 211, col: 22, offset: 6313},
										expr: &ruleRefExpr{
											pos:  position{line: 211, col: 22, offset: 6313},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 211, col: 32, offset: 6323},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 37, offset: 6328},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 211, col: 49, offset: 6340},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 55, offset: 6346},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 6491},
						run: (*parser).callonAggregation13,
						expr: &seqExpr{
							pos: position{line: 214, col: 5, offset: 6491},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 214, col: 5, offset: 6491},
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 5, offset: 6491},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 16, offset: 6502},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 214, col: 22, offset: 6508},
										expr: &ruleRefExpr{
											pos:  position{line: 214, col: 22, offset: 6508},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 32, offset: 6518},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 37, offset: 6523},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 52, offset: 6538},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 214, col: 57, offset: 6543},
										expr: &seqExpr{
											pos: position{line: 214, col: 58, offset: 6544},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 214, col: 58, offset: 6544},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 214, col: 60, offset: 6546},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 74, offset: 6560},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 80, offset: 6566},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 222, col: 1, offset: 6799},
			expr: &seqExpr{
				pos: position{line: 222, col: 13, offset: 6811},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 222, col: 13, offset: 6811},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 222, col: 25, offset: 6823},
						name: "_",
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 224, col: 1, offset: 6826},
			expr: &actionExpr{
				pos: position{line: 225, col: 5, offset: 6839},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 225, col: 5, offset: 6839},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 5, offset: 6839},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 225, col: 14, offset: 6848},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 16, offset: 6850},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 20, offset: 6854},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 225, col: 29, offset: 6863},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 227, col: 1, offset: 6886},
			expr: &actionExpr{
				pos: position{line: 228, col: 5, offset: 6902},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 228, col: 5, offset: 6902},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 228, col: 5, offset: 6902},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 228, col: 13, offset: 6910},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 15, offset: 6912},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 23, offset: 6920},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 230, col: 1, offset: 6961},
			expr: &choiceExpr{
				pos: position{line: 231, col: 5, offset: 6974},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 6974},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 231, col: 5, offset: 6974},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 231, col: 5, offset: 6974},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 231, col: 7, offset: 6976},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 231, col: 14, offset: 6983},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 231, col: 16, offset: 6985},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 231, col: 25, offset: 6994},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 231, col: 27, offset: 6996},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 231, col: 33, offset: 7002},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 7033},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 232, col: 5, offset: 7033},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 237, col: 1, offset: 7293},
			expr: &choiceExpr{
				pos: position{line: 238, col: 5, offset: 7312},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 7312},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 239, col: 5, offset: 7327},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 239, col: 5, offset: 7327},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 10, offset: 7332},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 241, col: 1, offset: 7424},
			expr: &actionExpr{
				pos: position{line: 242, col: 5, offset: 7444},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 242, col: 5, offset: 7444},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 242, col: 5, offset: 7444},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 11, offset: 7450},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 26, offset: 7465},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 242, col: 31, offset: 7470},
								expr: &actionExpr{
									pos: position{line: 242, col: 32, offset: 7471},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 242, col: 32, offset: 7471},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 242, col: 32, offset: 7471},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 242, col: 35, offset: 7474},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 242, col: 39, offset: 7478},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 242, col: 42, offset: 7481},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 242, col: 47, offset: 7486},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 246, col: 1, offset: 7608},
			expr: &choiceExpr{
				pos: position{line: 247, col: 5, offset: 7626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 247, col: 5, offset: 7626},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 247, col: 5, offset: 7626},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 247, col: 5, offset: 7626},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 247, col: 10, offset: 7631},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 247, col: 15, offset: 7636},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 247, col: 18, offset: 7639},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 247, col: 23, offset: 7644},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 247, col: 26, offset: 7647},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 247, col: 30, offset: 7651},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 7755},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 250, col: 5, offset: 7755},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 9, offset: 7759},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 254, col: 1, offset: 7859},
			expr: &actionExpr{
				pos: position{line: 255, col: 5, offset: 7867},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 255, col: 5, offset: 7867},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 255, col: 5, offset: 7867},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 6, offset: 7868},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 16, offset: 7878},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 19, offset: 7881},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 27, offset: 7889},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 255, col: 30, offset: 7892},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 34, offset: 7896},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 255, col: 37, offset: 7899},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 255, col: 42, offset: 7904},
								expr: &ruleRefExpr{
									pos:  position{line: 255, col: 42, offset: 7904},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 49, offset: 7911},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 255, col: 52, offset: 7914},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 255, col: 56, offset: 7918},
							expr: &seqExpr{
								pos: position{line: 255, col: 58, offset: 7920},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 255, col: 58, offset: 7920},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 255, col: 61, offset: 7923},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 66, offset: 7928},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 255, col: 72, offset: 7934},
								expr: &ruleRefExpr{
									pos:  position{line: 255, col: 72, offset: 7934},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 263, col: 1, offset: 8124},
			expr: &choiceExpr{
				pos: position{line: 264, col: 5, offset: 8136},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 8136},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 8155},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 8168},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 268, col: 1, offset: 8177},
			expr: &actionExpr{
				pos: position{line: 268, col: 15, offset: 8191},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 268, col: 15, offset: 8191},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 268, col: 15, offset: 8191},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 268, col: 17, offset: 8193},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 25, offset: 8201},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 27, offset: 8203},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 32, offset: 8208},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 270, col: 1, offset: 8244},
			expr: &actionExpr{
				pos: position{line: 271, col: 5, offset: 8263},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 271, col: 5, offset: 8263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 271, col: 5, offset: 8263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 11, offset: 8269},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 25, offset: 8283},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 30, offset: 8288},
								expr: &seqExpr{
									pos: position{line: 271, col: 31, offset: 8289},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 271, col: 31, offset: 8289},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 271, col: 34, offset: 8292},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 38, offset: 8296},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 41, offset: 8299},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 281, col: 1, offset: 8535},
			expr: &choiceExpr{
				pos: position{line: 282, col: 5, offset: 8548},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 8548},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 8561},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 8573},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 8585},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 8598},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 8611},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 8624},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 8637},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 8652},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 291, col: 5, offset: 8665},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8677},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 8692},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8705},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 295, col: 5, offset: 8719},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 296, col: 5, offset: 8732},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 5, offset: 8747},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 298, col: 5, offset: 8759},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 299, col: 5, offset: 8772},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 300, col: 5, offset: 8785},
						name: "ExplodeProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 302, col: 1, offset: 8798},
			expr: &actionExpr{
				pos: position{line: 303, col: 5, offset: 8811},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 303, col: 5, offset: 8811},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 5, offset: 8811},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 303, col: 13, offset: 8819},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 18, offset: 8824},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 27, offset: 8833},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 32, offset: 8838},
								expr: &actionExpr{
									pos: position{line: 303, col: 33, offset: 8839},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 303, col: 33, offset: 8839},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 303, col: 33, offset: 8839},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 303, col: 35, offset: 8841},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 303, col: 37, offset: 8843},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 317, col: 1, offset: 9262},
			expr: &actionExpr{
				pos: position{line: 317, col: 12, offset: 9273},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 317, col: 12, offset: 9273},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 317, col: 17, offset: 9278},
						expr: &actionExpr{
							pos: position{line: 317, col: 18, offset: 9279},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 317, col: 18, offset: 9279},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 317, col: 18, offset: 9279},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 317, col: 20, offset: 9281},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 317, col: 22, offset: 9283},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 319, col: 1, offset: 9339},
			expr: &choiceExpr{
				pos: position{line: 320, col: 5, offset: 9351},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 9351},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 320, col: 5, offset: 9351},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 321, col: 5, offset: 9426},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 321, col: 5, offset: 9426},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 321, col: 5, offset: 9426},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 321, col: 14, offset: 9435},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 321, col: 16, offset: 9437},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 321, col: 23, offset: 9444},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 321, col: 24, offset: 9445},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 321, col: 24, offset: 9445},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 321, col: 34, offset: 9455},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 323, col: 1, offset: 9569},
			expr: &actionExpr{
				pos: position{line: 324, col: 5, offset: 9581},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 324, col: 5, offset: 9581},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 5, offset: 9581},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 324, col: 12, offset: 9588},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 18, offset: 9594},
								expr: &actionExpr{
									pos: position{line: 324, col: 19, offset: 9595},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 324, col: 19, offset: 9595},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 324, col: 19, offset: 9595},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 21, offset: 9597},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 324, col: 23, offset: 9599},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 47, offset: 9623},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 53, offset: 9629},
								expr: &seqExpr{
									pos: position{line: 324, col: 54, offset: 9630},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 324, col: 54, offset: 9630},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 324, col: 56, offset: 9632},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 67, offset: 9643},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 74, offset: 9650},
								expr: &actionExpr{
									pos: position{line: 324, col: 75, offset: 9651},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 324, col: 75, offset: 9651},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 324, col: 75, offset: 9651},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 77, offset: 9653},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 324, col: 79, offset: 9655},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 338, col: 1, offset: 10000},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 10012},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 339, col: 5, offset: 10012},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 339, col: 5, offset: 10012},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 339, col: 12, offset: 10019},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 339, col: 14, offset: 10021},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 19, offset: 10026},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 343, col: 1, offset: 10121},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 10134},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 10134},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 10134},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 13, offset: 10142},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 15, offset: 10144},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 20, offset: 10149},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 348, col: 1, offset: 10245},
			expr: &actionExpr{
				pos: position{line: 349, col: 5, offset: 10258},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 349, col: 5, offset: 10258},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 5, offset: 10258},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 349, col: 13, offset: 10266},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 349, col: 15, offset: 10268},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 20, offset: 10273},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 353, col: 1, offset: 10364},
			expr: &choiceExpr{
				pos: position{line: 354, col: 5, offset: 10377},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 354, col: 5, offset: 10377},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 354, col: 5, offset: 10377},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 354, col: 5, offset: 10377},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 354, col: 13, offset: 10385},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 354, col: 15, offset: 10387},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 354, col: 21, offset: 10393},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 355, col: 5, offset: 10473},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 355, col: 5, offset: 10473},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 357, col: 1, offset: 10549},
			expr: &choiceExpr{
				pos: position{line: 358, col: 5, offset: 10562},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10562},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 358, col: 5, offset: 10562},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 13, offset: 10570},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 358, col: 15, offset: 10572},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 21, offset: 10578},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10658},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 359, col: 5, offset: 10658},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 361, col: 1, offset: 10734},
			expr: &actionExpr{
				pos: position{line: 362, col: 5, offset: 10749},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 362, col: 5, offset: 10749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 362, col: 5, offset: 10749},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 15, offset: 10759},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 362, col: 17, offset: 10761},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 20, offset: 10764},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 366, col: 1, offset: 10801},
			expr: &actionExpr{
				pos: position{line: 367, col: 5, offset: 10812},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 367, col: 5, offset: 10812},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 367, col: 10, offset: 10817},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 371, col: 1, offset: 10913},
			expr: &choiceExpr{
				pos: position{line: 372, col: 5, offset: 10926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 10926},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 372, col: 5, offset: 10926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 372, col: 5, offset: 10926},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 372, col: 13, offset: 10934},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 372, col: 15, offset: 10936},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 11025},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 375, col: 5, offset: 11025},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 379, col: 1, offset: 11115},
			expr: &actionExpr{
				pos: position{line: 380, col: 5, offset: 11127},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 380, col: 5, offset: 11127},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 380, col: 5, offset: 11127},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 12, offset: 11134},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 14, offset: 11136},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 19, offset: 11141},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 384, col: 1, offset: 11236},
			expr: &actionExpr{
				pos: position{line: 385, col: 5, offset: 11251},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 385, col: 5, offset: 11251},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 5, offset: 11251},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 15, offset: 11261},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 17, offset: 11263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 23, offset: 11269},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 385, col: 34, offset: 11280},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 385, col: 39, offset: 11285},
								expr: &actionExpr{
									pos: position{line: 385, col: 40, offset: 11286},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 385, col: 40, offset: 11286},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 385, col: 40, offset: 11286},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 385, col: 43, offset: 11289},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 385, col: 47, offset: 11293},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 385, col: 50, offset: 11296},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 385, col: 53, offset: 11299},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 393, col: 1, offset: 11708},
			expr: &actionExpr{
				pos: position{line: 394, col: 5, offset: 11721},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 394, col: 5, offset: 11721},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 5, offset: 11721},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 394, col: 13, offset: 11729},
							expr: &seqExpr{
								pos: position{line: 394, col: 15, offset: 11731},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 394, col: 15, offset: 11731},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 394, col: 18, offset: 11734},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 398, col: 1, offset: 11805},
			expr: &actionExpr{
				pos: position{line: 399, col: 5, offset: 11819},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 399, col: 5, offset: 11819},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 403, col: 1, offset: 11895},
			expr: &choiceExpr{
				pos: position{line: 404, col: 5, offset: 11908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 11908},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 404, col: 5, offset: 11908},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 404, col: 5, offset: 11908},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 404, col: 11, offset: 11914},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 404, col: 21, offset: 11924},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 29, offset: 11932},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 31, offset: 11934},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 34, offset: 11937},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 404, col: 36, offset: 11939},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 404, col: 44, offset: 11947},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 52, offset: 11955},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 404, col: 55, offset: 11958},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 59, offset: 11962},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 404, col: 62, offset: 11965},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 404, col: 71, offset: 11974},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 404, col: 79, offset: 11982},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 404, col: 87, offset: 11990},
										expr: &seqExpr{
											pos: position{line: 404, col: 88, offset: 11991},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 404, col: 88, offset: 11991},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 404, col: 90, offset: 11993},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 411, col: 5, offset: 12259},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 411, col: 5, offset: 12259},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 411, col: 5, offset: 12259},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 411, col: 11, offset: 12265},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 411, col: 22, offset: 12276},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 411, col: 30, offset: 12284},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 411, col: 32, offset: 12286},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 411, col: 35, offset: 12289},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 411, col: 37, offset: 12291},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 411, col: 41, offset: 12295},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 411, col: 49, offset: 12303},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 411, col: 57, offset: 12311},
										expr: &seqExpr{
											pos: position{line: 411, col: 58, offset: 12312},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 411, col: 58, offset: 12312},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 411, col: 60, offset: 12314},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 419, col: 1, offset: 12568},
			expr: &choiceExpr{
				pos: position{line: 420, col: 5, offset: 12582},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 12582},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 420, col: 5, offset: 12582},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 420, col: 5, offset: 12582},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 14, offset: 12591},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 12621},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 421, col: 5, offset: 12621},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 421, col: 5, offset: 12621},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 421, col: 14, offset: 12630},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 12659},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 422, col: 5, offset: 12659},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 422, col: 5, offset: 12659},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 422, col: 14, offset: 12668},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 423, col: 5, offset: 12698},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 423, col: 5, offset: 12698},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 425, col: 1, offset: 12734},
			expr: &choiceExpr{
				pos: position{line: 426, col: 5, offset: 12746},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 426, col: 5, offset: 12746},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12755},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 427, col: 5, offset: 12755},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 427, col: 5, offset: 12755},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 427, col: 9, offset: 12759},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 427, col: 14, offset: 12764},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 427, col: 19, offset: 12769},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 429, col: 1, offset: 12795},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12810},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 430, col: 5, offset: 12810},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 5, offset: 12810},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 430, col: 15, offset: 12820},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 17, offset: 12822},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpExprs",
			pos:  position{line: 473, col: 1, offset: 14412},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 14424},
				run: (*parser).callonOpExprs1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 14424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 474, col: 5, offset: 14424},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 14430},
								name: "OpExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 474, col: 18, offset: 14437},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 474, col: 23, offset: 14442},
								expr: &actionExpr{
									pos: position{line: 474, col: 24, offset: 14443},
									run: (*parser).callonOpExprs7,
									expr: &seqExpr{
										pos: position{line: 474, col: 24, offset: 14443},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 474, col: 24, offset: 14443},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 474, col: 27, offset: 14446},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 474, col: 31, offset: 14450},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 474, col: 34, offset: 14453},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 474, col: 39, offset: 14458},
													name: "OpExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OpExpr",
			pos:  position{line: 478, col: 1, offset: 14620},
			expr: &choiceExpr{
				pos: position{line: 479, col: 4, offset: 14630},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 479, col: 4, offset: 14630},
						name: "Assignment",
					},
					&ruleRefExpr{
						pos:  position{line: 480, col: 4, offset: 14644},
						name: "Function",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 482, col: 1, offset: 14654},
			expr: &choiceExpr{
				pos: position{line: 483, col: 5, offset: 14669},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 483, col: 5, offset: 14669},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 483, col: 5, offset: 14669},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 483, col: 5, offset: 14669},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 483, col: 7, offset: 14671},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 12, offset: 14676},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 484, col: 5, offset: 14705},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 484, col: 5, offset: 14705},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 486, col: 1, offset: 14763},
			expr: &actionExpr{
				pos: position{line: 487, col: 5, offset: 14776},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 487, col: 5, offset: 14776},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 487, col: 12, offset: 14783},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 491, col: 1, offset: 14939},
			expr: &choiceExpr{
				pos: position{line: 492, col: 5, offset: 14951},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14951},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14964},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 5, offset: 14977},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 496, col: 1, offset: 14987},
			expr: &actionExpr{
				pos: position{line: 497, col: 5, offset: 15000},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 497, col: 5, offset: 15000},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 497, col: 5, offset: 15000},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 13, offset: 15008},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 497, col: 15, offset: 15010},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 20, offset: 15015},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 25, offset: 15020},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 497, col: 32, offset: 15027},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 32, offset: 15027},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 43, offset: 15038},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 497, col: 50, offset: 15045},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 50, offset: 15045},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 501, col: 1, offset: 15174},
			expr: &actionExpr{
				pos: position{line: 502, col: 5, offset: 15187},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 502, col: 5, offset: 15187},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 502, col: 5, offset: 15187},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 13, offset: 15195},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 502, col: 15, offset: 15197},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 20, offset: 15202},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 504, col: 1, offset: 15233},
			expr: &actionExpr{
				pos: position{line: 505, col: 5, offset: 15246},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 505, col: 5, offset: 15246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 505, col: 5, offset: 15246},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 10, offset: 15251},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 19, offset: 15260},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 22, offset: 15263},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 22, offset: 15263},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 30, offset: 15271},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 35, offset: 15276},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 35, offset: 15276},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 46, offset: 15287},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 52, offset: 15293},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 52, offset: 15293},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 509, col: 1, offset: 15429},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 15442},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 510, col: 5, offset: 15442},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 510, col: 5, offset: 15442},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 510, col: 12, offset: 15449},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 14, offset: 15451},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 18, offset: 15455},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 22, offset: 15459},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 510, col: 29, offset: 15466},
								expr: &ruleRefExpr{
									pos:  position{line: 510, col: 29, offset: 15466},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 40, offset: 15477},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 510, col: 47, offset: 15484},
								expr: &ruleRefExpr{
									pos:  position{line: 510, col: 47, offset: 15484},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 514, col: 1, offset: 15610},
			expr: &actionExpr{
				pos: position{line: 514, col: 7, offset: 15616},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 514, col: 7, offset: 15616},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 514, col: 8, offset: 15617},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 514, col: 8, offset: 15617},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 514, col: 18, offset: 15627},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 514, col: 28, offset: 15637},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 516, col: 1, offset: 15674},
			expr: &choiceExpr{
				pos: position{line: 517, col: 5, offset: 15683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 517, col: 5, offset: 15683},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 517, col: 5, offset: 15683},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 7, offset: 15685},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 518, col: 5, offset: 15720},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 518, col: 5, offset: 15720},
							expr: &charClassMatcher{
								pos:        position{line: 518, col: 5, offset: 15720},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 521, col: 1, offset: 15825},
			expr: &actionExpr{
				pos: position{line: 522, col: 5, offset: 15836},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 522, col: 5, offset: 15836},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 522, col: 5, offset: 15836},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 522, col: 7, offset: 15838},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 522, col: 13, offset: 15844},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 15, offset: 15846},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 18, offset: 15849},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 525, col: 1, offset: 15915},
			expr: &actionExpr{
				pos: position{line: 525, col: 9, offset: 15923},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 525, col: 9, offset: 15923},
					expr: &charClassMatcher{
						pos:        position{line: 525, col: 10, offset: 15924},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 527, col: 1, offset: 15970},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 15984},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 528, col: 5, offset: 15984},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 528, col: 5, offset: 15984},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 528, col: 7, offset: 15986},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 16, offset: 15995},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 18, offset: 15997},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 24, offset: 16003},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 32, offset: 16011},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 528, col: 34, offset: 16013},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 40, offset: 16019},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 42, offset: 16021},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 48, offset: 16027},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 532, col: 1, offset: 16132},
			expr: &choiceExpr{
				pos: position{line: 533, col: 5, offset: 16145},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 16145},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 533, col: 5, offset: 16145},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 533, col: 5, offset: 16145},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 533, col: 10, offset: 16150},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 533, col: 19, offset: 16159},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 533, col: 26, offset: 16166},
										expr: &ruleRefExpr{
											pos:  position{line: 533, col: 26, offset: 16166},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 533, col: 38, offset: 16178},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 533, col: 43, offset: 16183},
										expr: &ruleRefExpr{
											pos:  position{line: 533, col: 43, offset: 16183},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 16292},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 536, col: 5, offset: 16292},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 10, offset: 16297},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 540, col: 1, offset: 16398},
			expr: &actionExpr{
				pos: position{line: 541, col: 5, offset: 16413},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 541, col: 5, offset: 16413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 5, offset: 16413},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 541, col: 9, offset: 16417},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 16, offset: 16424},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 543, col: 1, offset: 16457},
			expr: &actionExpr{
				pos: position{line: 544, col: 5, offset: 16470},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 544, col: 5, offset: 16470},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 5, offset: 16470},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 544, col: 9, offset: 16474},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 14, offset: 16479},
								name: "IdentifierRaw",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 546, col: 1, offset: 16515},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 16528},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 16528},
						name: "IdentifierRaw",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 16546},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 549, col: 5, offset: 16556},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 551, col: 1, offset: 16570},
			expr: &actionExpr{
				pos: position{line: 552, col: 5, offset: 16584},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 552, col: 5, offset: 16584},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 552, col: 5, offset: 16584},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 552, col: 7, offset: 16586},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 552, col: 16, offset: 16595},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 552, col: 18, offset: 16597},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 23, offset: 16602},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 552, col: 34, offset: 16613},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 40, offset: 16619},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 556, col: 1, offset: 16729},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16743},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16743},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 557, col: 5, offset: 16743},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 557, col: 7, offset: 16745},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 557, col: 17, offset: 16755},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 19, offset: 16757},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 23, offset: 16761},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 559, col: 1, offset: 16797},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 16813},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 560, col: 5, offset: 16813},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 560, col: 5, offset: 16813},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 561, col: 5, offset: 16848},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 561, col: 5, offset: 16848},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 16885},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 562, col: 5, offset: 16885},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 564, col: 1, offset: 16911},
			expr: &choiceExpr{
				pos: position{line: 565, col: 5, offset: 16924},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 565, col: 5, offset: 16924},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 565, col: 5, offset: 16924},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 565, col: 5, offset: 16924},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 565, col: 7, offset: 16926},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 565, col: 16, offset: 16935},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 565, col: 18, offset: 16937},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 16971},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 566, col: 5, offset: 16971},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 566, col: 5, offset: 16971},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 566, col: 7, offset: 16973},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 16, offset: 16982},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 566, col: 18, offset: 16984},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 568, col: 1, offset: 17017},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 17030},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 569, col: 5, offset: 17030},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 575, col: 1, offset: 17225},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 17241},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 17241},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 576, col: 5, offset: 17241},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 16, offset: 17252},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 18, offset: 17254},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 23, offset: 17259},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 576, col: 29, offset: 17265},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 33, offset: 17269},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 576, col: 41, offset: 17277},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 576, col: 44, offset: 17280},
								expr: &ruleRefExpr{
									pos:  position{line: 576, col: 44, offset: 17280},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 580, col: 1, offset: 17392},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 17404},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 17404},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 581, col: 5, offset: 17404},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 7, offset: 17406},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 10, offset: 17409},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 12, offset: 17411},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 16, offset: 17415},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 583, col: 1, offset: 17440},
			expr: &actionExpr{
				pos: position{line: 584, col: 5, offset: 17450},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 584, col: 5, offset: 17450},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 584, col: 5, offset: 17450},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 7, offset: 17452},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 10, offset: 17455},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 12, offset: 17457},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 16, offset: 17461},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 588, col: 1, offset: 17512},
			expr: &ruleRefExpr{
				pos:  position{line: 588, col: 8, offset: 17519},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 590, col: 1, offset: 17530},
			expr: &actionExpr{
				pos: position{line: 591, col: 5, offset: 17540},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 591, col: 5, offset: 17540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 591, col: 5, offset: 17540},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 11, offset: 17546},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 16, offset: 17551},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 591, col: 21, offset: 17556},
								expr: &actionExpr{
									pos: position{line: 591, col: 22, offset: 17557},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 591, col: 22, offset: 17557},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 591, col: 22, offset: 17557},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 591, col: 25, offset: 17560},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 591, col: 29, offset: 17564},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 591, col: 32, offset: 17567},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 591, col: 37, offset: 17572},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 595, col: 1, offset: 17684},
			expr: &ruleRefExpr{
				pos:  position{line: 595, col: 13, offset: 17696},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 597, col: 1, offset: 17702},
			expr: &actionExpr{
				pos: position{line: 598, col: 5, offset: 17717},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 598, col: 5, offset: 17717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 5, offset: 17717},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 11, offset: 17723},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 21, offset: 17733},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 26, offset: 17738},
								expr: &seqExpr{
									pos: position{line: 598, col: 27, offset: 17739},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 598, col: 27, offset: 17739},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 598, col: 30, offset: 17742},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 598, col: 34, offset: 17746},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 598, col: 37, offset: 17749},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 608, col: 1, offset: 17948},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 17963},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 609, col: 5, offset: 17963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 17963},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 9, offset: 17967},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 14, offset: 17972},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 609, col: 17, offset: 17975},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 22, offset: 17980},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 609, col: 25, offset: 17983},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 29, offset: 17987},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 611, col: 1, offset: 18078},
			expr: &ruleRefExpr{
				pos:  position{line: 611, col: 8, offset: 18085},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 613, col: 1, offset: 18102},
			expr: &choiceExpr{
				pos: position{line: 614, col: 5, offset: 18122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 614, col: 5, offset: 18122},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 614, col: 5, offset: 18122},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 614, col: 5, offset: 18122},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 614, col: 15, offset: 18132},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 614, col: 29, offset: 18146},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 614, col: 32, offset: 18149},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 614, col: 36, offset: 18153},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 614, col: 39, offset: 18156},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 614, col: 50, offset: 18167},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 614, col: 55, offset: 18172},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 614, col: 58, offset: 18175},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 614, col: 62, offset: 18179},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 614, col: 65, offset: 18182},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 614, col: 76, offset: 18193},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 5, offset: 18333},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 619, col: 1, offset: 18348},
			expr: &actionExpr{
				pos: position{line: 620, col: 5, offset: 18366},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 620, col: 5, offset: 18366},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 620, col: 5, offset: 18366},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 11, offset: 18372},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 621, col: 5, offset: 18391},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 621, col: 10, offset: 18396},
								expr: &actionExpr{
									pos: position{line: 621, col: 11, offset: 18397},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 621, col: 11, offset: 18397},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 621, col: 11, offset: 18397},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 621, col: 14, offset: 18400},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 621, col: 17, offset: 18403},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 621, col: 25, offset: 18411},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 621, col: 28, offset: 18414},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 621, col: 33, offset: 18419},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 625, col: 1, offset: 18537},
			expr: &actionExpr{
				pos: position{line: 626, col: 5, offset: 18556},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 626, col: 5, offset: 18556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 18556},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 18562},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 627, col: 5, offset: 18586},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 627, col: 10, offset: 18591},
								expr: &actionExpr{
									pos: position{line: 627, col: 11, offset: 18592},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 627, col: 11, offset: 18592},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 627, col: 11, offset: 18592},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 627, col: 14, offset: 18595},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 627, col: 17, offset: 18598},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 627, col: 26, offset: 18607},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 627, col: 29, offset: 18610},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 627, col: 34, offset: 18615},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 631, col: 1, offset: 18738},
			expr: &choiceExpr{
				pos: position{line: 632, col: 5, offset: 18762},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 632, col: 5, offset: 18762},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 633, col: 5, offset: 18779},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 633, col: 5, offset: 18779},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 633, col: 5, offset: 18779},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 633, col: 11, offset: 18785},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 634, col: 5, offset: 18802},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 634, col: 10, offset: 18807},
										expr: &actionExpr{
											pos: position{line: 634, col: 11, offset: 18808},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 634, col: 11, offset: 18808},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 634, col: 11, offset: 18808},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 634, col: 14, offset: 18811},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 634, col: 19, offset: 18816},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 634, col: 38, offset: 18835},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 634, col: 41, offset: 18838},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 634, col: 46, offset: 18843},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 638, col: 1, offset: 18961},
			expr: &choiceExpr{
				pos: position{line: 639, col: 5, offset: 18982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 18982},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 639, col: 5, offset: 18982},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 19011},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 640, col: 5, offset: 19011},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 642, col: 1, offset: 19048},
			expr: &choiceExpr{
				pos: position{line: 643, col: 5, offset: 19071},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 643, col: 5, offset: 19071},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 19092},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 644, col: 5, offset: 19092},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 644, col: 5, offset: 19092},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 644, col: 10, offset: 19097},
									expr: &ruleRefExpr{
										pos:  position{line: 644, col: 11, offset: 19098},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 646, col: 1, offset: 19145},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 19162},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 647, col: 5, offset: 19162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 19162},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 11, offset: 19168},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 19185},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 648, col: 10, offset: 19190},
								expr: &actionExpr{
									pos: position{line: 648, col: 11, offset: 19191},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 648, col: 11, offset: 19191},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 648, col: 11, offset: 19191},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 648, col: 14, offset: 19194},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 648, col: 17, offset: 19197},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 648, col: 34, offset: 19214},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 648, col: 37, offset: 19217},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 648, col: 42, offset: 19222},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 652, col: 1, offset: 19338},
			expr: &actionExpr{
				pos: position{line: 652, col: 20, offset: 19357},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 652, col: 21, offset: 19358},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 652, col: 21, offset: 19358},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 652, col: 28, offset: 19365},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 652, col: 34, offset: 19371},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 652, col: 41, offset: 19378},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 654, col: 1, offset: 19415},
			expr: &actionExpr{
				pos: position{line: 655, col: 5, offset: 19432},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 655, col: 5, offset: 19432},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 19432},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 11, offset: 19438},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19461},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 656, col: 10, offset: 19466},
								expr: &actionExpr{
									pos: position{line: 656, col: 11, offset: 19467},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 656, col: 11, offset: 19467},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 656, col: 11, offset: 19467},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 14, offset: 19470},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 17, offset: 19473},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 656, col: 34, offset: 19490},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 37, offset: 19493},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 42, offset: 19498},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 660, col: 1, offset: 19620},
			expr: &actionExpr{
				pos: position{line: 660, col: 20, offset: 19639},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 660, col: 21, offset: 19640},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 660, col: 21, offset: 19640},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 660, col: 27, offset: 19646},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 662, col: 1, offset: 19683},
			expr: &actionExpr{
				pos: position{line: 663, col: 5, offset: 19706},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 663, col: 5, offset: 19706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19706},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 11, offset: 19712},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 19724},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 664, col: 10, offset: 19729},
								expr: &actionExpr{
									pos: position{line: 664, col: 11, offset: 19730},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 664, col: 11, offset: 19730},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 664, col: 11, offset: 19730},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 14, offset: 19733},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 17, offset: 19736},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 664, col: 40, offset: 19759},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 43, offset: 19762},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 48, offset: 19767},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 668, col: 1, offset: 19878},
			expr: &actionExpr{
				pos: position{line: 668, col: 26, offset: 19903},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 668, col: 27, offset: 19904},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 668, col: 27, offset: 19904},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 668, col: 33, offset: 19910},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 670, col: 1, offset: 19947},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 19959},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 19959},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 19959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 671, col: 5, offset: 19959},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 671, col: 9, offset: 19963},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 671, col: 12, offset: 19966},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 671, col: 14, offset: 19968},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 674, col: 5, offset: 20077},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 676, col: 1, offset: 20087},
			expr: &choiceExpr{
				pos: position{line: 677, col: 5, offset: 20100},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 677, col: 5, offset: 20100},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 678, col: 5, offset: 20115},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 679, col: 5, offset: 20129},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 679, col: 5, offset: 20129},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 679, col: 5, offset: 20129},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 679, col: 9, offset: 20133},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 679, col: 21, offset: 20145},
									expr: &seqExpr{
										pos: position{line: 679, col: 23, offset: 20147},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 679, col: 23, offset: 20147},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 679, col: 26, offset: 20150},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 680, col: 5, offset: 20179},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 680, col: 5, offset: 20179},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 680, col: 5, offset: 20179},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 20185},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 680, col: 16, offset: 20190},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 680, col: 21, offset: 20195},
										expr: &ruleRefExpr{
											pos:  position{line: 680, col: 22, offset: 20196},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 20267},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 683, col: 5, offset: 20267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 683, col: 5, offset: 20267},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 20273},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 683, col: 20, offset: 20282},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 683, col: 25, offset: 20287},
										expr: &ruleRefExpr{
											pos:  position{line: 683, col: 26, offset: 20288},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 686, col: 5, offset: 20359},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 5, offset: 20373},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 689, col: 1, offset: 20382},
			expr: &seqExpr{
				pos: position{line: 689, col: 13, offset: 20394},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 689, col: 13, offset: 20394},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 689, col: 22, offset: 20403},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 689, col: 25, offset: 20406},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 691, col: 1, offset: 20411},
			expr: &choiceExpr{
				pos: position{line: 692, col: 5, offset: 20424},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 692, col: 5, offset: 20424},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 693, col: 5, offset: 20434},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 694, col: 5, offset: 20446},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 695, col: 5, offset: 20459},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 697, col: 1, offset: 20467},
			expr: &actionExpr{
				pos: position{line: 698, col: 5, offset: 20481},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 698, col: 5, offset: 20481},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 698, col: 5, offset: 20481},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 13, offset: 20489},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 698, col: 16, offset: 20492},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 698, col: 20, offset: 20496},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 25, offset: 20501},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 698, col: 39, offset: 20515},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 700, col: 1, offset: 20541},
			expr: &actionExpr{
				pos: position{line: 701, col: 5, offset: 20556},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 701, col: 5, offset: 20556},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 701, col: 5, offset: 20556},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 14, offset: 20565},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 701, col: 17, offset: 20568},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 21, offset: 20572},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 24, offset: 20575},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 29, offset: 20580},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 35, offset: 20586},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 701, col: 38, offset: 20589},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 701, col: 42, offset: 20593},
							label: "methods",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 50, offset: 20601},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 50, offset: 20601},
									name: "Methods",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 709, col: 1, offset: 21000},
			expr: &actionExpr{
				pos: position{line: 710, col: 5, offset: 21012},
				run: (*parser).callonMethods1,
				expr: &labeledExpr{
					pos:   position{line: 710, col: 5, offset: 21012},
					label: "methods",
					expr: &oneOrMoreExpr{
						pos: position{line: 710, col: 13, offset: 21020},
						expr: &ruleRefExpr{
							pos:  position{line: 710, col: 13, offset: 21020},
							name: "Method",
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 712, col: 1, offset: 21053},
			expr: &actionExpr{
				pos: position{line: 713, col: 5, offset: 21064},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 713, col: 5, offset: 21064},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 713, col: 5, offset: 21064},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 713, col: 8, offset: 21067},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 713, col: 12, offset: 21071},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 713, col: 15, offset: 21074},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 17, offset: 21076},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 715, col: 1, offset: 21104},
			expr: &actionExpr{
				pos: position{line: 716, col: 5, offset: 21113},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 716, col: 5, offset: 21113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 716, col: 5, offset: 21113},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 9, offset: 21117},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 716, col: 18, offset: 21126},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 716, col: 21, offset: 21129},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 716, col: 25, offset: 21133},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 716, col: 28, offset: 21136},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 33, offset: 21141},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 716, col: 38, offset: 21146},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 716, col: 41, offset: 21149},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 720, col: 1, offset: 21246},
			expr: &actionExpr{
				pos: position{line: 721, col: 5, offset: 21259},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 721, col: 5, offset: 21259},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 721, col: 5, offset: 21259},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 6, offset: 21260},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 721, col: 16, offset: 21270},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 19, offset: 21273},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 34, offset: 21288},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 721, col: 37, offset: 21291},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 41, offset: 21295},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 721, col: 44, offset: 21298},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 49, offset: 21303},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 721, col: 63, offset: 21317},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 721, col: 66, offset: 21320},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 725, col: 1, offset: 21416},
			expr: &choiceExpr{
				pos: position{line: 726, col: 5, offset: 21434},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 21434},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21444},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 727, col: 5, offset: 21444},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 729, col: 1, offset: 21480},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 21490},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 730, col: 5, offset: 21490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 730, col: 5, offset: 21490},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 11, offset: 21496},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 16, offset: 21501},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 730, col: 21, offset: 21506},
								expr: &actionExpr{
									pos: position{line: 730, col: 22, offset: 21507},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 730, col: 22, offset: 21507},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 730, col: 22, offset: 21507},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 730, col: 25, offset: 21510},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 730, col: 29, offset: 21514},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 730, col: 32, offset: 21517},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 730, col: 34, offset: 21519},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 734, col: 1, offset: 21628},
			expr: &actionExpr{
				pos: position{line: 734, col: 13, offset: 21640},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 734, col: 13, offset: 21640},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 734, col: 13, offset: 21640},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 14, offset: 21641},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 18, offset: 21645},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 20, offset: 21647},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 736, col: 1, offset: 21683},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 21704},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 737, col: 5, offset: 21704},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 737, col: 5, offset: 21704},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 737, col: 5, offset: 21704},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 737, col: 11, offset: 21710},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 737, col: 17, offset: 21716},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 737, col: 22, offset: 21721},
										expr: &ruleRefExpr{
											pos:  position{line: 737, col: 23, offset: 21722},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21793},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21793},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 740, col: 5, offset: 21793},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 11, offset: 21799},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 740, col: 22, offset: 21810},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 740, col: 27, offset: 21815},
										expr: &ruleRefExpr{
											pos:  position{line: 740, col: 28, offset: 21816},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21887},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 21887},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 743, col: 5, offset: 21887},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 11, offset: 21893},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 743, col: 22, offset: 21904},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 743, col: 27, offset: 21909},
										expr: &ruleRefExpr{
											pos:  position{line: 743, col: 28, offset: 21910},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21981},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 746, col: 5, offset: 21981},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 750, col: 1, offset: 22050},
			expr: &actionExpr{
				pos: position{line: 750, col: 14, offset: 22063},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 750, col: 14, offset: 22063},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 752, col: 1, offset: 22125},
			expr: &choiceExpr{
				pos: position{line: 753, col: 5, offset: 22135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 22135},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 753, col: 5, offset: 22135},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 753, col: 5, offset: 22135},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 753, col: 9, offset: 22139},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 753, col: 15, offset: 22145},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22361},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 22361},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 762, col: 5, offset: 22361},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 762, col: 9, offset: 22365},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 762, col: 13, offset: 22369},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 18, offset: 22374},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 762, col: 23, offset: 22379},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 772, col: 1, offset: 22584},
			expr: &choiceExpr{
				pos: position{line: 773, col: 5, offset: 22594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 773, col: 5, offset: 22594},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 773, col: 5, offset: 22594},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 773, col: 5, offset: 22594},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 773, col: 9, offset: 22598},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 773, col: 14, offset: 22603},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 773, col: 27, offset: 22616},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 773, col: 30, offset: 22619},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 773, col: 34, offset: 22623},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 773, col: 37, offset: 22626},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 773, col: 40, offset: 22629},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 773, col: 53, offset: 22642},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 22813},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 779, col: 5, offset: 22813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 779, col: 5, offset: 22813},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 9, offset: 22817},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 779, col: 12, offset: 22820},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 16, offset: 22824},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 779, col: 19, offset: 22827},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 779, col: 22, offset: 22830},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 779, col: 35, offset: 22843},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 23014},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 23014},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 785, col: 5, offset: 23014},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 785, col: 9, offset: 23018},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 14, offset: 23023},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 27, offset: 23036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 785, col: 30, offset: 23039},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 34, offset: 23043},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 785, col: 37, offset: 23046},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 791, col: 5, offset: 23219},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 791, col: 5, offset: 23219},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 791, col: 5, offset: 23219},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 791, col: 9, offset: 23223},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 791, col: 14, offset: 23228},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 791, col: 19, offset: 23233},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 792, col: 5, offset: 23282},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 792, col: 5, offset: 23282},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 792, col: 5, offset: 23282},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 792, col: 9, offset: 23286},
									expr: &litMatcher{
										pos:        position{line: 792, col: 11, offset: 23288},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 792, col: 16, offset: 23293},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 792, col: 19, offset: 23296},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 794, col: 1, offset: 23347},
			expr: &choiceExpr{
				pos: position{line: 795, col: 5, offset: 23359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 795, col: 5, offset: 23359},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 796, col: 5, offset: 23371},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 797, col: 5, offset: 23382},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 798, col: 5, offset: 23392},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 5, offset: 23400},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 23408},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 800, col: 5, offset: 23408},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 800, col: 5, offset: 23408},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 9, offset: 23412},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 800, col: 12, offset: 23415},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 800, col: 17, offset: 23420},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 22, offset: 23425},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 800, col: 25, offset: 23428},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 802, col: 1, offset: 23454},
			expr: &actionExpr{
				pos: position{line: 803, col: 5, offset: 23465},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 803, col: 5, offset: 23465},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 803, col: 5, offset: 23465},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 803, col: 9, offset: 23469},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 803, col: 12, offset: 23472},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 803, col: 19, offset: 23479},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 803, col: 26, offset: 23486},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 803, col: 29, offset: 23489},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 807, col: 1, offset: 23582},
			expr: &actionExpr{
				pos: position{line: 808, col: 5, offset: 23593},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 808, col: 5, offset: 23593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 808, col: 5, offset: 23593},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 11, offset: 23599},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 808, col: 17, offset: 23605},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 808, col: 22, offset: 23610},
								expr: &ruleRefExpr{
									pos:  position{line: 808, col: 22, offset: 23610},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 812, col: 1, offset: 23701},
			expr: &actionExpr{
				pos: position{line: 812, col: 13, offset: 23713},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 812, col: 13, offset: 23713},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 812, col: 13, offset: 23713},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 812, col: 16, offset: 23716},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 20, offset: 23720},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 812, col: 23, offset: 23723},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 25, offset: 23725},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 814, col: 1, offset: 23750},
			expr: &actionExpr{
				pos: position{line: 815, col: 5, offset: 23760},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 815, col: 5, offset: 23760},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 23760},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 10, offset: 23765},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 815, col: 20, offset: 23775},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 815, col: 23, offset: 23778},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 815, col: 27, offset: 23782},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 815, col: 30, offset: 23785},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 36, offset: 23791},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 819, col: 1, offset: 23876},
			expr: &actionExpr{
				pos: position{line: 820, col: 5, offset: 23886},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 820, col: 5, offset: 23886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 820, col: 5, offset: 23886},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 820, col: 9, offset: 23890},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 820, col: 12, offset: 23893},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 820, col: 18, offset: 23899},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 820, col: 32, offset: 23913},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 820, col: 35, offset: 23916},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 824, col: 1, offset: 24006},
			expr: &actionExpr{
				pos: position{line: 825, col: 5, offset: 24014},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 825, col: 5, offset: 24014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 825, col: 5, offset: 24014},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 825, col: 10, offset: 24019},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 825, col: 13, offset: 24022},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 19, offset: 24028},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 825, col: 33, offset: 24042},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 825, col: 36, offset: 24045},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 829, col: 1, offset: 24134},
			expr: &actionExpr{
				pos: position{line: 830, col: 5, offset: 24142},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 830, col: 5, offset: 24142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 830, col: 5, offset: 24142},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 830, col: 10, offset: 24147},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 830, col: 13, offset: 24150},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 830, col: 19, offset: 24156},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 830, col: 27, offset: 24164},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 830, col: 30, offset: 24167},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 834, col: 1, offset: 24258},
			expr: &choiceExpr{
				pos: position{line: 835, col: 5, offset: 24270},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 24270},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 835, col: 5, offset: 24270},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 835, col: 5, offset: 24270},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 24276},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 835, col: 17, offset: 24282},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 835, col: 22, offset: 24287},
										expr: &ruleRefExpr{
											pos:  position{line: 835, col: 22, offset: 24287},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 24381},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 838, col: 5, offset: 24381},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 841, col: 1, offset: 24418},
			expr: &actionExpr{
				pos: position{line: 841, col: 13, offset: 24430},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 841, col: 13, offset: 24430},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 841, col: 13, offset: 24430},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 841, col: 16, offset: 24433},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 20, offset: 24437},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 841, col: 23, offset: 24440},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 25, offset: 24442},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 843, col: 1, offset: 24467},
			expr: &actionExpr{
				pos: position{line: 844, col: 5, offset: 24477},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 844, col: 5, offset: 24477},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 844, col: 5, offset: 24477},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 9, offset: 24481},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 844, col: 14, offset: 24486},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 844, col: 17, offset: 24489},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 844, col: 21, offset: 24493},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 844, col: 24, offset: 24496},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 30, offset: 24502},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 850, col: 1, offset: 24609},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 24621},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 851, col: 5, offset: 24621},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 24621},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 15, offset: 24631},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 5, offset: 24645},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 852, col: 10, offset: 24650},
								expr: &ruleRefExpr{
									pos:  position{line: 852, col: 10, offset: 24650},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24663},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 853, col: 11, offset: 24669},
								expr: &ruleRefExpr{
									pos:  position{line: 853, col: 11, offset: 24669},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 854, col: 5, offset: 24683},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 854, col: 11, offset: 24689},
								expr: &ruleRefExpr{
									pos:  position{line: 854, col: 11, offset: 24689},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 855, col: 5, offset: 24703},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 855, col: 13, offset: 24711},
								expr: &ruleRefExpr{
									pos:  position{line: 855, col: 13, offset: 24711},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 856, col: 5, offset: 24727},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 856, col: 12, offset: 24734},
								expr: &ruleRefExpr{
									pos:  position{line: 856, col: 12, offset: 24734},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 857, col: 5, offset: 24749},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 857, col: 13, offset: 24757},
								expr: &ruleRefExpr{
									pos:  position{line: 857, col: 13, offset: 24757},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 858, col: 5, offset: 24773},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 11, offset: 24779},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 882, col: 1, offset: 25146},
			expr: &choiceExpr{
				pos: position{line: 883, col: 5, offset: 25160},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 883, col: 5, offset: 25160},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 883, col: 5, offset: 25160},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 883, col: 5, offset: 25160},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 883, col: 12, offset: 25167},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 883, col: 14, offset: 25169},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 25197},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 884, col: 5, offset: 25197},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 884, col: 5, offset: 25197},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 884, col: 12, offset: 25204},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 884, col: 14, offset: 25206},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 884, col: 26, offset: 25218},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 886, col: 1, offset: 25262},
			expr: &choiceExpr{
				pos: position{line: 887, col: 5, offset: 25280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 887, col: 5, offset: 25280},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 887, col: 5, offset: 25280},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 887, col: 5, offset: 25280},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 9, offset: 25284},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 14, offset: 25289},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 16, offset: 25291},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 887, col: 19, offset: 25294},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 21, offset: 25296},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 25, offset: 25300},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 25394},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 888, col: 5, offset: 25394},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 10, offset: 25399},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 890, col: 1, offset: 25491},
			expr: &actionExpr{
				pos: position{line: 891, col: 5, offset: 25510},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 891, col: 5, offset: 25510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 891, col: 5, offset: 25510},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 11, offset: 25516},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 25, offset: 25530},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 891, col: 30, offset: 25535},
								expr: &actionExpr{
									pos: position{line: 891, col: 31, offset: 25536},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 891, col: 31, offset: 25536},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 891, col: 31, offset: 25536},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 891, col: 34, offset: 25539},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 891, col: 38, offset: 25543},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 891, col: 41, offset: 25546},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 891, col: 46, offset: 25551},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 895, col: 1, offset: 25672},
			expr: &choiceExpr{
				pos: position{line: 896, col: 5, offset: 25684},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25684},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25684},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 896, col: 5, offset: 25684},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 7, offset: 25686},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 12, offset: 25691},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 896, col: 14, offset: 25693},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 20, offset: 25699},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 896, col: 29, offset: 25708},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 896, col: 35, offset: 25714},
										expr: &ruleRefExpr{
											pos:  position{line: 896, col: 35, offset: 25714},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 25809},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 899, col: 5, offset: 25809},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 899, col: 5, offset: 25809},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 899, col: 7, offset: 25811},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 899, col: 12, offset: 25816},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 899, col: 14, offset: 25818},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 901, col: 1, offset: 25843},
			expr: &choiceExpr{
				pos: position{line: 902, col: 5, offset: 25856},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 902, col: 5, offset: 25856},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 902, col: 5, offset: 25856},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 902, col: 5, offset: 25856},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 902, col: 7, offset: 25858},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 902, col: 10, offset: 25861},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 902, col: 12, offset: 25863},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 15, offset: 25866},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 903, col: 5, offset: 25894},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 903, col: 5, offset: 25894},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 903, col: 5, offset: 25894},
									name: "_",
								},
								&notExpr{
									pos: position{line: 903, col: 7, offset: 25896},
									expr: &seqExpr{
										pos: position{line: 903, col: 9, offset: 25898},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 903, col: 9, offset: 25898},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 903, col: 27, offset: 25916},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 903, col: 30, offset: 25919},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 903, col: 33, offset: 25922},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 905, col: 1, offset: 25947},
			expr: &ruleRefExpr{
				pos:  position{line: 906, col: 5, offset: 25960},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 908, col: 1, offset: 25966},
			expr: &actionExpr{
				pos: position{line: 909, col: 5, offset: 25979},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 909, col: 5, offset: 25979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 909, col: 5, offset: 25979},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 909, col: 11, offset: 25985},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 909, col: 19, offset: 25993},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 909, col: 24, offset: 25998},
								expr: &actionExpr{
									pos: position{line: 909, col: 25, offset: 25999},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 909, col: 25, offset: 25999},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 909, col: 30, offset: 26004},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 913, col: 1, offset: 26119},
			expr: &actionExpr{
				pos: position{line: 914, col: 5, offset: 26131},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 914, col: 5, offset: 26131},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 914, col: 5, offset: 26131},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 11, offset: 26137},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 24, offset: 26150},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 26, offset: 26152},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 31, offset: 26157},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 914, col: 33, offset: 26159},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 39, offset: 26165},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 48, offset: 26174},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 914, col: 54, offset: 26180},
								expr: &ruleRefExpr{
									pos:  position{line: 914, col: 54, offset: 26180},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 64, offset: 26190},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 66, offset: 26192},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 69, offset: 26195},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 914, col: 71, offset: 26197},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 79, offset: 26205},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 87, offset: 26213},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 914, col: 90, offset: 26216},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 94, offset: 26220},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 914, col: 97, offset: 26223},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 106, offset: 26232},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 933, col: 1, offset: 26467},
			expr: &choiceExpr{
				pos: position{line: 934, col: 5, offset: 26484},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 26484},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 26484},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 934, col: 5, offset: 26484},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 934, col: 7, offset: 26486},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 934, col: 14, offset: 26493},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 934, col: 14, offset: 26493},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 934, col: 21, offset: 26500},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 934, col: 29, offset: 26508},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 26541},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 935, col: 5, offset: 26541},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 937, col: 1, offset: 26577},
			expr: &actionExpr{
				pos: position{line: 938, col: 5, offset: 26590},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 938, col: 5, offset: 26590},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 938, col: 5, offset: 26590},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 938, col: 7, offset: 26592},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 938, col: 13, offset: 26598},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 938, col: 15, offset: 26600},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 20, offset: 26605},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 940, col: 1, offset: 26641},
			expr: &actionExpr{
				pos: position{line: 941, col: 5, offset: 26656},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 941, col: 5, offset: 26656},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 941, col: 5, offset: 26656},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 941, col: 7, offset: 26658},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 941, col: 13, offset: 26664},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 941, col: 15, offset: 26666},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 941, col: 18, offset: 26669},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 941, col: 20, offset: 26671},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 941, col: 28, offset: 26679},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 943, col: 1, offset: 26715},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 26729},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 26729},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 944, col: 5, offset: 26729},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 944, col: 7, offset: 26731},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 944, col: 14, offset: 26738},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 944, col: 16, offset: 26740},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 21, offset: 26745},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 946, col: 1, offset: 26781},
			expr: &actionExpr{
				pos: position{line: 947, col: 5, offset: 26796},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 947, col: 5, offset: 26796},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 947, col: 5, offset: 26796},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 947, col: 7, offset: 26798},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 947, col: 13, offset: 26804},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 947, col: 15, offset: 26806},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 947, col: 18, offset: 26809},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 947, col: 20, offset: 26811},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 25, offset: 26816},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 947, col: 31, offset: 26822},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 37, offset: 26828},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 951, col: 1, offset: 26938},
			expr: &choiceExpr{
				pos: position{line: 952, col: 5, offset: 26951},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 26951},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 952, col: 5, offset: 26951},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 952, col: 5, offset: 26951},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 952, col: 7, offset: 26953},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 952, col: 12, offset: 26958},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 952, col: 12, offset: 26958},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 952, col: 18, offset: 26964},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 26994},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 953, col: 5, offset: 26994},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 955, col: 1, offset: 27020},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 27033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 27033},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 27033},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 956, col: 5, offset: 27033},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 956, col: 7, offset: 27035},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 956, col: 13, offset: 27041},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 956, col: 15, offset: 27043},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 21, offset: 27049},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 27080},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 957, col: 5, offset: 27080},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 959, col: 1, offset: 27102},
			expr: &actionExpr{
				pos: position{line: 959, col: 10, offset: 27111},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 959, col: 10, offset: 27111},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 960, col: 1, offset: 27146},
			expr: &actionExpr{
				pos: position{line: 960, col: 6, offset: 27151},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 960, col: 6, offset: 27151},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 961, col: 1, offset: 27178},
			expr: &actionExpr{
				pos: position{line: 961, col: 8, offset: 27185},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 961, col: 8, offset: 27185},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 962, col: 1, offset: 27216},
			expr: &actionExpr{
				pos: position{line: 962, col: 8, offset: 27223},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 962, col: 8, offset: 27223},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 963, col: 1, offset: 27254},
			expr: &actionExpr{
				pos: position{line: 963, col: 9, offset: 27262},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 963, col: 9, offset: 27262},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 964, col: 1, offset: 27295},
			expr: &actionExpr{
				pos: position{line: 964, col: 9, offset: 27303},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 964, col: 9, offset: 27303},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 965, col: 1, offset: 27336},
			expr: &ruleRefExpr{
				pos:  position{line: 965, col: 6, offset: 27341},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 966, col: 1, offset: 27349},
			expr: &actionExpr{
				pos: position{line: 966, col: 10, offset: 27358},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 966, col: 10, offset: 27358},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 967, col: 1, offset: 27393},
			expr: &actionExpr{
				pos: position{line: 967, col: 9, offset: 27401},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 967, col: 9, offset: 27401},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 968, col: 1, offset: 27434},
			expr: &actionExpr{
				pos: position{line: 968, col: 6, offset: 27439},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 968, col: 6, offset: 27439},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 969, col: 1, offset: 27466},
			expr: &actionExpr{
				pos: position{line: 969, col: 9, offset: 27474},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 969, col: 9, offset: 27474},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 970, col: 1, offset: 27507},
			expr: &actionExpr{
				pos: position{line: 970, col: 7, offset: 27513},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 970, col: 7, offset: 27513},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 971, col: 1, offset: 27542},
			expr: &actionExpr{
				pos: position{line: 971, col: 8, offset: 27549},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 971, col: 8, offset: 27549},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 972, col: 1, offset: 27580},
			expr: &actionExpr{
				pos: position{line: 972, col: 8, offset: 27587},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 972, col: 8, offset: 27587},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 973, col: 1, offset: 27618},
			expr: &actionExpr{
				pos: position{line: 973, col: 9, offset: 27626},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 973, col: 9, offset: 27626},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 974, col: 1, offset: 27659},
			expr: &actionExpr{
				pos: position{line: 974, col: 9, offset: 27667},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 974, col: 9, offset: 27667},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 976, col: 1, offset: 27701},
			expr: &choiceExpr{
				pos: position{line: 977, col: 5, offset: 27723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 27723},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 14, offset: 27732},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 19, offset: 27737},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 27, offset: 27745},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 34, offset: 27752},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 42, offset: 27760},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 50, offset: 27768},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 59, offset: 27777},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 67, offset: 27785},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 75, offset: 27793},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 981, col: 1, offset: 27819},
			expr: &choiceExpr{
				pos: position{line: 982, col: 5, offset: 27831},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 27831},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 5, offset: 27847},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 5, offset: 27865},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 27883},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 27902},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 27915},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 5, offset: 27924},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 5, offset: 27941},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 5, offset: 27960},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 27979},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 993, col: 1, offset: 27992},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 28010},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 994, col: 5, offset: 28010},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 994, col: 7, offset: 28012},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 998, col: 1, offset: 28125},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 28143},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 28143},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 999, col: 5, offset: 28143},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 999, col: 5, offset: 28143},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 7, offset: 28145},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 999, col: 14, offset: 28152},
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 15, offset: 28153},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 28268},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1002, col: 5, offset: 28268},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 7, offset: 28270},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1006, col: 1, offset: 28374},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 28393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 28393},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 28393},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 5, offset: 28393},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 7, offset: 28395},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1007, col: 11, offset: 28399},
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 12, offset: 28400},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 28514},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1010, col: 5, offset: 28514},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1010, col: 7, offset: 28516},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1014, col: 1, offset: 28615},
			expr: &actionExpr{
				pos: position{line: 1015, col: 5, offset: 28632},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1015, col: 5, offset: 28632},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1015, col: 7, offset: 28634},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1019, col: 1, offset: 28747},
			expr: &actionExpr{
				pos: position{line: 1020, col: 5, offset: 28766},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1020, col: 5, offset: 28766},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1020, col: 7, offset: 28768},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1024, col: 1, offset: 28877},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 28896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28896},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1025, col: 5, offset: 28896},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 29009},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1026, col: 5, offset: 29009},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1028, col: 1, offset: 29120},
			expr: &actionExpr{
				pos: position{line: 1029, col: 5, offset: 29136},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1029, col: 5, offset: 29136},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1031, col: 1, offset: 29242},
			expr: &actionExpr{
				pos: position{line: 1032, col: 5, offset: 29258},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1032, col: 5, offset: 29258},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1032, col: 5, offset: 29258},
							expr: &seqExpr{
								pos: position{line: 1032, col: 7, offset: 29260},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1032, col: 7, offset: 29260},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 1032, col: 25, offset: 29278},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 30, offset: 29283},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1032, col: 34, offset: 29287},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1036, col: 1, offset: 29385},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 5, offset: 29398},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1037, col: 5, offset: 29398},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 29415},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 1040, col: 1, offset: 29430},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 29447},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 29447},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 29464},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29488},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 29488},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 5, offset: 29488},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 9, offset: 29492},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 1043, col: 31, offset: 29514},
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 32, offset: 29515},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1045, col: 1, offset: 29551},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 5, offset: 29560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 29560},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 29577},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 5, offset: 29595},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 1050, col: 1, offset: 29608},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 5, offset: 29625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 29625},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 1051, col: 5, offset: 29625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1051, col: 5, offset: 29625},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1051, col: 12, offset: 29632},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1051, col: 15, offset: 29635},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1051, col: 19, offset: 29639},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1051, col: 22, offset: 29642},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1051, col: 26, offset: 29646},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1051, col: 31, offset: 29651},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1051, col: 34, offset: 29654},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29681},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 29681},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1052, col: 5, offset: 29681},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 12, offset: 29688},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1052, col: 15, offset: 29691},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 19, offset: 29695},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1052, col: 22, offset: 29698},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 26, offset: 29702},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 36, offset: 29712},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1052, col: 39, offset: 29715},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1054, col: 1, offset: 29740},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 5, offset: 29758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29758},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 29758},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1055, col: 5, offset: 29758},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 10, offset: 29763},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1055, col: 24, offset: 29777},
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 25, offset: 29778},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 29818},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1056, col: 5, offset: 29818},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1056, col: 5, offset: 29818},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1056, col: 10, offset: 29823},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 25, offset: 29838},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1056, col: 28, offset: 29841},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 32, offset: 29845},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1056, col: 35, offset: 29848},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 39, offset: 29852},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1056, col: 42, offset: 29855},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1056, col: 46, offset: 29859},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 51, offset: 29864},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1056, col: 54, offset: 29867},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1059, col: 5, offset: 29968},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1059, col: 5, offset: 29968},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1059, col: 10, offset: 29973},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 30075},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 30075},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1062, col: 5, offset: 30075},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 9, offset: 30079},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 12, offset: 30082},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 14, offset: 30084},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 25, offset: 30095},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1064, col: 1, offset: 30118},
			expr: &actionExpr{
				pos: position{line: 1065, col: 5, offset: 30132},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1065, col: 5, offset: 30132},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 30138},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1069, col: 1, offset: 30234},
			expr: &actionExpr{
				pos: position{line: 1070, col: 5, offset: 30247},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1070, col: 5, offset: 30247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 30247},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 11, offset: 30253},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 16, offset: 30258},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1070, col: 21, offset: 30263},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 21, offset: 30263},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1074, col: 1, offset: 30357},
			expr: &actionExpr{
				pos: position{line: 1074, col: 16, offset: 30372},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 16, offset: 30372},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1074, col: 16, offset: 30372},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1074, col: 19, offset: 30375},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1074, col: 23, offset: 30379},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 26, offset: 30382},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 30, offset: 30386},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1076, col: 1, offset: 30412},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 5, offset: 30428},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30428},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1077, col: 5, offset: 30428},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 5, offset: 30428},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1077, col: 9, offset: 30432},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 12, offset: 30435},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 19, offset: 30442},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1077, col: 33, offset: 30456},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1077, col: 36, offset: 30459},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30554},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1080, col: 5, offset: 30554},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 9, offset: 30558},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 12, offset: 30561},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 16, offset: 30565},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 21, offset: 30570},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1080, col: 24, offset: 30573},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 30662},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 30662},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1083, col: 5, offset: 30662},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1083, col: 10, offset: 30667},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 14, offset: 30671},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 18, offset: 30675},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1083, col: 23, offset: 30680},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1083, col: 26, offset: 30683},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1086, col: 5, offset: 30771},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1086, col: 5, offset: 30771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1086, col: 5, offset: 30771},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 10, offset: 30776},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 13, offset: 30779},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 21, offset: 30787},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 26, offset: 30792},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1086, col: 29, offset: 30795},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 33, offset: 30799},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 36, offset: 30802},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 44, offset: 30810},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 49, offset: 30815},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1086, col: 52, offset: 30818},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1090, col: 1, offset: 30932},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 5, offset: 30956},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1091, col: 5, offset: 30956},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1091, col: 5, offset: 30956},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 5, offset: 30956},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 9, offset: 30960},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 12, offset: 30963},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 19, offset: 30970},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 33, offset: 30984},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1091, col: 36, offset: 30987},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 31082},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 31082},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 31082},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 9, offset: 31086},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 12, offset: 31089},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 16, offset: 31093},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 29, offset: 31106},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1094, col: 32, offset: 31109},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 31198},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 31198},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1097, col: 5, offset: 31198},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 10, offset: 31203},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1097, col: 13, offset: 31206},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 17, offset: 31210},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 30, offset: 31223},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1097, col: 33, offset: 31226},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1100, col: 5, offset: 31314},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1100, col: 5, offset: 31314},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 5, offset: 31314},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 10, offset: 31319},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 13, offset: 31322},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 21, offset: 31330},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 34, offset: 31343},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1100, col: 37, offset: 31346},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 41, offset: 31350},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 44, offset: 31353},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 52, offset: 31361},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 65, offset: 31374},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1100, col: 68, offset: 31377},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1104, col: 1, offset: 31491},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 31509},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1105, col: 5, offset: 31509},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 5, offset: 31535},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1112, col: 1, offset: 31794},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 31820},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1113, col: 9, offset: 31824},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1113, col: 9, offset: 31824},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 19, offset: 31834},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 30, offset: 31845},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 41, offset: 31856},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 9, offset: 31873},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 18, offset: 31882},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 28, offset: 31892},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 38, offset: 31902},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1115, col: 9, offset: 31918},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1116, col: 9, offset: 31936},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1116, col: 18, offset: 31945},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1127, col: 1, offset: 32586},
			expr: &actionExpr{
				pos: position{line: 1128, col: 5, offset: 32612},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1128, col: 9, offset: 32616},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1128, col: 9, offset: 32616},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1128, col: 22, offset: 32629},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1129, col: 9, offset: 32644},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1130, col: 9, offset: 32660},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1131, col: 9, offset: 32678},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1131, col: 16, offset: 32685},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 9, offset: 32699},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 18, offset: 32708},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 28, offset: 32718},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1136, col: 1, offset: 32834},
			expr: &actionExpr{
				pos: position{line: 1137, col: 5, offset: 32852},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1137, col: 5, offset: 32852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1137, col: 5, offset: 32852},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1137, col: 11, offset: 32858},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1137, col: 21, offset: 32868},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1137, col: 26, offset: 32873},
								expr: &ruleRefExpr{
									pos:  position{line: 1137, col: 26, offset: 32873},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1141, col: 1, offset: 32972},
			expr: &actionExpr{
				pos: position{line: 1141, col: 21, offset: 32992},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1141, col: 21, offset: 32992},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1141, col: 21, offset: 32992},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1141, col: 24, offset: 32995},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1141, col: 28, offset: 32999},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1141, col: 31, offset: 33002},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1141, col: 35, offset: 33006},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1143, col: 1, offset: 33037},
			expr: &actionExpr{
				pos: position{line: 1144, col: 5, offset: 33051},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1144, col: 5, offset: 33051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1144, col: 5, offset: 33051},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1144, col: 10, offset: 33056},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1144, col: 20, offset: 33066},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1144, col: 23, offset: 33069},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1144, col: 27, offset: 33073},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1144, col: 30, offset: 33076},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1144, col: 34, offset: 33080},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1148, col: 1, offset: 33162},
			expr: &actionExpr{
				pos: position{line: 1149, col: 5, offset: 33188},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 5, offset: 33188},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 33188},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 11, offset: 33194},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 21, offset: 33204},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1149, col: 26, offset: 33209},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 26, offset: 33209},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1153, col: 1, offset: 33316},
			expr: &actionExpr{
				pos: position{line: 1153, col: 29, offset: 33344},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 29, offset: 33344},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1153, col: 29, offset: 33344},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1153, col: 32, offset: 33347},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 36, offset: 33351},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 39, offset: 33354},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 43, offset: 33358},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1155, col: 1, offset: 33397},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 33419},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 33419},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1156, col: 5, offset: 33419},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 10, offset: 33424},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 20, offset: 33434},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1156, col: 23, offset: 33437},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 27, offset: 33441},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 30, offset: 33444},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 34, offset: 33448},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1160, col: 1, offset: 33538},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 33552},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1161, col: 5, offset: 33552},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 5, offset: 33571},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1164, col: 1, offset: 33585},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 33603},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1165, col: 5, offset: 33603},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 24, offset: 33622},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1167, col: 1, offset: 33640},
			expr: &actionExpr{
				pos: position{line: 1167, col: 12, offset: 33651},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 12, offset: 33651},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 12, offset: 33651},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1167, col: 19, offset: 33658},
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 20, offset: 33659},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1168, col: 1, offset: 33696},
			expr: &actionExpr{
				pos: position{line: 1168, col: 11, offset: 33706},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1168, col: 11, offset: 33706},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1168, col: 11, offset: 33706},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1168, col: 17, offset: 33712},
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 18, offset: 33713},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1169, col: 1, offset: 33749},
			expr: &actionExpr{
				pos: position{line: 1169, col: 11, offset: 33759},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1169, col: 11, offset: 33759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1169, col: 11, offset: 33759},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1169, col: 17, offset: 33765},
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 18, offset: 33766},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1170, col: 1, offset: 33802},
			expr: &actionExpr{
				pos: position{line: 1170, col: 12, offset: 33813},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 12, offset: 33813},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1170, col: 12, offset: 33813},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1170, col: 19, offset: 33820},
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 20, offset: 33821},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1171, col: 1, offset: 33858},
			expr: &actionExpr{
				pos: position{line: 1171, col: 11, offset: 33868},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 11, offset: 33868},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1171, col: 11, offset: 33868},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1171, col: 17, offset: 33874},
							expr: &ruleRefExpr{
								pos:  position{line: 1171, col: 18, offset: 33875},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1173, col: 1, offset: 33912},
			expr: &charClassMatcher{
				pos:        position{line: 1173, col: 19, offset: 33930},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1175, col: 1, offset: 33942},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 18, offset: 33959},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1175, col: 18, offset: 33959},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1175, col: 36, offset: 33977},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1177, col: 1, offset: 33984},
			expr: &actionExpr{
				pos: position{line: 1178, col: 5, offset: 33999},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1178, col: 5, offset: 33999},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1178, col: 8, offset: 34002},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierRaw",
			pos:  position{line: 1180, col: 1, offset: 34083},
			expr: &actionExpr{
				pos: position{line: 1181, col: 5, offset: 34101},
				run: (*parser).callonIdentifierRaw1,
				expr: &seqExpr{
					pos: position{line: 1181, col: 5, offset: 34101},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1181, col: 5, offset: 34101},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1181, col: 21, offset: 34117},
							expr: &ruleRefExpr{
								pos:  position{line: 1181, col: 21, offset: 34117},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1183, col: 1, offset: 34166},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 5, offset: 34185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 34185},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1184, col: 5, offset: 34185},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1184, col: 5, offset: 34185},
									expr: &seqExpr{
										pos: position{line: 1184, col: 7, offset: 34187},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1184, col: 7, offset: 34187},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1184, col: 15, offset: 34195},
												expr: &ruleRefExpr{
													pos:  position{line: 1184, col: 16, offset: 34196},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1184, col: 32, offset: 34212},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1184, col: 48, offset: 34228},
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 48, offset: 34228},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1185, col: 5, offset: 34280},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1185, col: 5, offset: 34280},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1186, col: 5, offset: 34319},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1186, col: 5, offset: 34319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1186, col: 5, offset: 34319},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 10, offset: 34324},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 13, offset: 34327},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 34418},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1188, col: 5, offset: 34418},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1189, col: 5, offset: 34460},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1189, col: 5, offset: 34460},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1189, col: 5, offset: 34460},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1189, col: 8, offset: 34463},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1189, col: 26, offset: 34481},
									expr: &seqExpr{
										pos: position{line: 1189, col: 28, offset: 34483},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1189, col: 28, offset: 34483},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1189, col: 31, offset: 34486},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1191, col: 1, offset: 34511},
			expr: &choiceExpr{
				pos: position{line: 1192, col: 5, offset: 34523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1192, col: 5, offset: 34523},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 5, offset: 34542},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 5, offset: 34558},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 5, offset: 34575},
						name: "PrimitiveTypeExternal",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1197, col: 1, offset: 34598},
			expr: &actionExpr{
				pos: position{line: 1198, col: 5, offset: 34607},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 5, offset: 34607},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1198, col: 5, offset: 34607},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1198, col: 14, offset: 34616},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1198, col: 18, offset: 34620},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1202, col: 1, offset: 34740},
			expr: &seqExpr{
				pos: position{line: 1202, col: 12, offset: 34751},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1202, col: 12, offset: 34751},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1202, col: 15, offset: 34754},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 19, offset: 34758},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1202, col: 22, offset: 34761},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 26, offset: 34765},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1204, col: 1, offset: 34769},
			expr: &seqExpr{
				pos: position{line: 1204, col: 6, offset: 34774},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1204, col: 6, offset: 34774},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1204, col: 11, offset: 34779},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1204, col: 16, offset: 34784},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1204, col: 21, offset: 34789},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1205, col: 1, offset: 34795},
			expr: &seqExpr{
				pos: position{line: 1205, col: 6, offset: 34800},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1205, col: 6, offset: 34800},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1205, col: 11, offset: 34805},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1207, col: 1, offset: 34812},
			expr: &seqExpr{
				pos: position{line: 1207, col: 12, offset: 34823},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1207, col: 12, offset: 34823},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 24, offset: 34835},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1209, col: 1, offset: 34847},
			expr: &seqExpr{
				pos: position{line: 1209, col: 15, offset: 34861},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1209, col: 15, offset: 34861},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1209, col: 18, offset: 34864},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 22, offset: 34868},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1209, col: 25, offset: 34871},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 29, offset: 34875},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1209, col: 32, offset: 34878},
						expr: &seqExpr{
							pos: position{line: 1209, col: 33, offset: 34879},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1209, col: 33, offset: 34879},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1209, col: 37, offset: 34883},
									expr: &charClassMatcher{
										pos:        position{line: 1209, col: 37, offset: 34883},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1211, col: 1, offset: 34893},
			expr: &choiceExpr{
				pos: position{line: 1212, col: 5, offset: 34908},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1212, col: 5, offset: 34908},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1213, col: 5, offset: 34916},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1213, col: 6, offset: 34917},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1213, col: 6, offset: 34917},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1213, col: 12, offset: 34923},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1213, col: 17, offset: 34928},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1213, col: 20, offset: 34931},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1213, col: 24, offset: 34935},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1213, col: 27, offset: 34938},
								expr: &seqExpr{
									pos: position{line: 1213, col: 28, offset: 34939},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1213, col: 28, offset: 34939},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1213, col: 32, offset: 34943},
											expr: &charClassMatcher{
												pos:        position{line: 1213, col: 32, offset: 34943},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1215, col: 1, offset: 34953},
			expr: &actionExpr{
				pos: position{line: 1216, col: 5, offset: 34966},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 5, offset: 34966},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1216, col: 5, offset: 34966},
							expr: &litMatcher{
								pos:        position{line: 1216, col: 5, offset: 34966},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1216, col: 10, offset: 34971},
							expr: &seqExpr{
								pos: position{line: 1216, col: 11, offset: 34972},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1216, col: 11, offset: 34972},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1216, col: 19, offset: 34980},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1220, col: 1, offset: 35106},
			expr: &seqExpr{
				pos: position{line: 1220, col: 11, offset: 35116},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 35116},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1220, col: 16, offset: 35121},
						expr: &seqExpr{
							pos: position{line: 1220, col: 17, offset: 35122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1220, col: 17, offset: 35122},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1220, col: 21, offset: 35126},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1222, col: 1, offset: 35134},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 5, offset: 35147},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1223, col: 5, offset: 35147},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1224, col: 5, offset: 35157},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1225, col: 5, offset: 35167},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1226, col: 5, offset: 35177},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1227, col: 5, offset: 35186},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1228, col: 5, offset: 35195},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1229, col: 5, offset: 35204},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1230, col: 5, offset: 35213},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1231, col: 5, offset: 35222},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1233, col: 1, offset: 35228},
			expr: &actionExpr{
				pos: position{line: 1234, col: 5, offset: 35235},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 5, offset: 35235},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1234, col: 5, offset: 35235},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1234, col: 10, offset: 35240},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1234, col: 14, offset: 35244},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1234, col: 19, offset: 35249},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1234, col: 23, offset: 35253},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1234, col: 28, offset: 35258},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1234, col: 32, offset: 35262},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1236, col: 1, offset: 35299},
			expr: &actionExpr{
				pos: position{line: 1237, col: 5, offset: 35307},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1237, col: 5, offset: 35307},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1237, col: 5, offset: 35307},
							expr: &seqExpr{
								pos: position{line: 1237, col: 8, offset: 35310},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1237, col: 8, offset: 35310},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1237, col: 12, offset: 35314},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 16, offset: 35318},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1237, col: 20, offset: 35322},
										expr: &choiceExpr{
											pos: position{line: 1237, col: 22, offset: 35324},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1237, col: 22, offset: 35324},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1237, col: 33, offset: 35335},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 39, offset: 35341},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 41, offset: 35343},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1241, col: 1, offset: 35507},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 5, offset: 35525},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 35525},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 35525},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 35525},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1242, col: 7, offset: 35527},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 7, offset: 35527},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 17, offset: 35537},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 19, offset: 35539},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 35603},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 35603},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1245, col: 5, offset: 35603},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 7, offset: 35605},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 11, offset: 35609},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1245, col: 13, offset: 35611},
										expr: &ruleRefExpr{
											pos:  position{line: 1245, col: 13, offset: 35611},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 23, offset: 35621},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 28, offset: 35626},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1245, col: 30, offset: 35628},
										expr: &ruleRefExpr{
											pos:  position{line: 1245, col: 30, offset: 35628},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 40, offset: 35638},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 42, offset: 35640},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 35739},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 35739},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1248, col: 5, offset: 35739},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 10, offset: 35744},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1248, col: 12, offset: 35746},
										expr: &ruleRefExpr{
											pos:  position{line: 1248, col: 12, offset: 35746},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 22, offset: 35756},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 24, offset: 35758},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 35829},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 35829},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1251, col: 5, offset: 35829},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 7, offset: 35831},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 11, offset: 35835},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1251, col: 13, offset: 35837},
										expr: &ruleRefExpr{
											pos:  position{line: 1251, col: 13, offset: 35837},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 23, offset: 35847},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1254, col: 5, offset: 35915},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1254, col: 5, offset: 35915},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1258, col: 1, offset: 35952},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 5, offset: 35964},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1259, col: 5, offset: 35964},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 5, offset: 35971},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1262, col: 1, offset: 35976},
			expr: &actionExpr{
				pos: position{line: 1262, col: 12, offset: 35987},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 12, offset: 35987},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1262, col: 12, offset: 35987},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 16, offset: 35991},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1262, col: 18, offset: 35993},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1264, col: 1, offset: 36031},
			expr: &actionExpr{
				pos: position{line: 1264, col: 12, offset: 36042},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1264, col: 12, offset: 36042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1264, col: 12, offset: 36042},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1264, col: 14, offset: 36044},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1264, col: 18, offset: 36048},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1266, col: 1, offset: 36086},
			expr: &actionExpr{
				pos: position{line: 1267, col: 5, offset: 36097},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 5, offset: 36097},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1267, col: 5, offset: 36097},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 7, offset: 36099},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1267, col: 10, offset: 36102},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 14, offset: 36106},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 16, offset: 36108},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1271, col: 1, offset: 36181},
			expr: &actionExpr{
				pos: position{line: 1272, col: 5, offset: 36192},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 5, offset: 36192},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1272, col: 5, offset: 36192},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 7, offset: 36194},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1272, col: 11, offset: 36198},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 15, offset: 36202},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 17, offset: 36204},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1276, col: 1, offset: 36267},
			expr: &actionExpr{
				pos: position{line: 1277, col: 4, offset: 36275},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1277, col: 4, offset: 36275},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1277, col: 6, offset: 36277},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1279, col: 1, offset: 36317},
			expr: &choiceExpr{
				pos: position{line: 1280, col: 5, offset: 36331},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1280, col: 5, offset: 36331},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 5, offset: 36346},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1283, col: 1, offset: 36362},
			expr: &actionExpr{
				pos: position{line: 1283, col: 14, offset: 36375},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1283, col: 14, offset: 36375},
					expr: &charClassMatcher{
						pos:        position{line: 1283, col: 14, offset: 36375},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1285, col: 1, offset: 36414},
			expr: &actionExpr{
				pos: position{line: 1286, col: 5, offset: 36433},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 5, offset: 36433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1286, col: 5, offset: 36433},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1286, col: 9, offset: 36437},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1288, col: 1, offset: 36480},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 5, offset: 36496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1289, col: 5, offset: 36496},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1289, col: 5, offset: 36496},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1289, col: 5, offset: 36496},
									expr: &litMatcher{
										pos:        position{line: 1289, col: 5, offset: 36496},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1289, col: 10, offset: 36501},
									expr: &charClassMatcher{
										pos:        position{line: 1289, col: 10, offset: 36501},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1289, col: 17, offset: 36508},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1289, col: 21, offset: 36512},
									expr: &charClassMatcher{
										pos:        position{line: 1289, col: 21, offset: 36512},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1289, col: 28, offset: 36519},
									expr: &ruleRefExpr{
										pos:  position{line: 1289, col: 28, offset: 36519},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1292, col: 5, offset: 36578},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1292, col: 5, offset: 36578},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1292, col: 5, offset: 36578},
									expr: &litMatcher{
										pos:        position{line: 1292, col: 5, offset: 36578},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1292, col: 10, offset: 36583},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1292, col: 14, offset: 36587},
									expr: &charClassMatcher{
										pos:        position{line: 1292, col: 14, offset: 36587},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1292, col: 21, offset: 36594},
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 21, offset: 36594},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1296, col: 1, offset: 36650},
			expr: &seqExpr{
				pos: position{line: 1296, col: 16, offset: 36665},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1296, col: 16, offset: 36665},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1296, col: 21, offset: 36670},
						expr: &charClassMatcher{
							pos:        position{line: 1296, col: 21, offset: 36670},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 27, offset: 36676},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1298, col: 1, offset: 36688},
			expr: &actionExpr{
				pos: position{line: 1298, col: 7, offset: 36694},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1298, col: 7, offset: 36694},
					expr: &ruleRefExpr{
						pos:  position{line: 1298, col: 7, offset: 36694},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1300, col: 1, offset: 36736},
			expr: &charClassMatcher{
				pos:        position{line: 1300, col: 12, offset: 36747},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1303, col: 1, offset: 36761},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 36778},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 36778},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1304, col: 5, offset: 36778},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1304, col: 5, offset: 36778},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1304, col: 9, offset: 36782},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1304, col: 11, offset: 36784},
										expr: &ruleRefExpr{
											pos:  position{line: 1304, col: 11, offset: 36784},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 29, offset: 36802},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36839},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36839},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1305, col: 5, offset: 36839},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 9, offset: 36843},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1305, col: 11, offset: 36845},
										expr: &ruleRefExpr{
											pos:  position{line: 1305, col: 11, offset: 36845},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 29, offset: 36863},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1307, col: 1, offset: 36897},
			expr: &choiceExpr{
				pos: position{line: 1308, col: 5, offset: 36918},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 36918},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1308, col: 5, offset: 36918},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1308, col: 5, offset: 36918},
									expr: &choiceExpr{
										pos: position{line: 1308, col: 7, offset: 36920},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1308, col: 7, offset: 36920},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1308, col: 13, offset: 36926},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1308, col: 26, offset: 36939,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 36976},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1309, col: 5, offset: 36976},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1309, col: 5, offset: 36976},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 10, offset: 36981},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 12, offset: 36983},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1311, col: 1, offset: 37017},
			expr: &actionExpr{
				pos: position{line: 1312, col: 5, offset: 37029},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 5, offset: 37029},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1312, col: 5, offset: 37029},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 10, offset: 37034},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 23, offset: 37047},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1312, col: 28, offset: 37052},
								expr: &ruleRefExpr{
									pos:  position{line: 1312, col: 28, offset: 37052},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1314, col: 1, offset: 37114},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 5, offset: 37131},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1315, col: 5, offset: 37131},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 5, offset: 37148},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1318, col: 1, offset: 37160},
			expr: &actionExpr{
				pos: position{line: 1318, col: 16, offset: 37175},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1318, col: 16, offset: 37175},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1320, col: 1, offset: 37224},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 37240},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1321, col: 5, offset: 37240},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1322, col: 5, offset: 37257},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1324, col: 1, offset: 37264},
			expr: &actionExpr{
				pos: position{line: 1324, col: 14, offset: 37277},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1324, col: 14, offset: 37277},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1324, col: 14, offset: 37277},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 19, offset: 37282},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1324, col: 22, offset: 37285},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1324, col: 22, offset: 37285},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 38, offset: 37301},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1326, col: 1, offset: 37337},
			expr: &actionExpr{
				pos: position{line: 1327, col: 5, offset: 37346},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 5, offset: 37346},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1327, col: 5, offset: 37346},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 6, offset: 37347},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1327, col: 22, offset: 37363},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 23, offset: 37364},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 35, offset: 37376},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 40, offset: 37381},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 50, offset: 37391},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1327, col: 55, offset: 37396},
								expr: &ruleRefExpr{
									pos:  position{line: 1327, col: 55, offset: 37396},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1331, col: 1, offset: 37480},
			expr: &seqExpr{
				pos: position{line: 1331, col: 19, offset: 37498},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1331, col: 19, offset: 37498},
						expr: &litMatcher{
							pos:        position{line: 1331, col: 19, offset: 37498},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 24, offset: 37503},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1332, col: 1, offset: 37516},
			expr: &seqExpr{
				pos: position{line: 1332, col: 15, offset: 37530},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1332, col: 15, offset: 37530},
						expr: &ruleRefExpr{
							pos:  position{line: 1332, col: 15, offset: 37530},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1332, col: 28, offset: 37543},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1334, col: 1, offset: 37548},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 5, offset: 37562},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1335, col: 5, offset: 37562},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 5, offset: 37579},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 37591},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1337, col: 5, offset: 37591},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1339, col: 1, offset: 37615},
			expr: &choiceExpr{
				pos: position{line: 1340, col: 5, offset: 37628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1340, col: 5, offset: 37628},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1341, col: 5, offset: 37642},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1343, col: 1, offset: 37649},
			expr: &actionExpr{
				pos: position{line: 1343, col: 11, offset: 37659},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 11, offset: 37659},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1343, col: 11, offset: 37659},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1343, col: 16, offset: 37664},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1343, col: 19, offset: 37667},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1343, col: 19, offset: 37667},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 32, offset: 37680},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1345, col: 1, offset: 37716},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 5, offset: 37731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1346, col: 5, offset: 37731},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1346, col: 5, offset: 37731},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1347, col: 5, offset: 37759},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1347, col: 5, offset: 37759},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1348, col: 5, offset: 37789},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1351, col: 1, offset: 37796},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 37817},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 37817},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1352, col: 5, offset: 37817},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1352, col: 5, offset: 37817},
									expr: &choiceExpr{
										pos: position{line: 1352, col: 7, offset: 37819},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1352, col: 7, offset: 37819},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1352, col: 13, offset: 37825},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1352, col: 26, offset: 37838,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 37875},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1353, col: 5, offset: 37875},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 5, offset: 37875},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 10, offset: 37880},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 12, offset: 37882},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1355, col: 1, offset: 37916},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 37935},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1356, col: 5, offset: 37935},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1356, col: 5, offset: 37935},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1356, col: 5, offset: 37935},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1356, col: 9, offset: 37939},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1356, col: 18, offset: 37948},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 5, offset: 37999},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 5, offset: 38020},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1360, col: 1, offset: 38035},
			expr: &choiceExpr{
				pos: position{line: 1361, col: 5, offset: 38056},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1361, col: 5, offset: 38056},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1362, col: 5, offset: 38064},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1362, col: 5, offset: 38064},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1363, col: 5, offset: 38104},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1364, col: 5, offset: 38113},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1364, col: 5, offset: 38113},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 5, offset: 38142},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1365, col: 5, offset: 38142},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1366, col: 5, offset: 38171},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1366, col: 5, offset: 38171},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1367, col: 5, offset: 38200},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1367, col: 5, offset: 38200},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 5, offset: 38229},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1368, col: 5, offset: 38229},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1369, col: 5, offset: 38258},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1369, col: 5, offset: 38258},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1371, col: 1, offset: 38284},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 5, offset: 38302},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 38302},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1372, col: 5, offset: 38302},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1373, col: 5, offset: 38330},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1373, col: 5, offset: 38330},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1374, col: 5, offset: 38358},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1376, col: 1, offset: 38364},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 38382},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1377, col: 5, offset: 38382},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1377, col: 5, offset: 38382},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1377, col: 5, offset: 38382},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1377, col: 9, offset: 38386},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1377, col: 16, offset: 38393},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1377, col: 16, offset: 38393},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1377, col: 25, offset: 38402},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1377, col: 34, offset: 38411},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1377, col: 43, offset: 38420},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 38483},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1380, col: 5, offset: 38483},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1380, col: 5, offset: 38483},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1380, col: 9, offset: 38487},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1380, col: 13, offset: 38491},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1380, col: 20, offset: 38498},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1380, col: 20, offset: 38498},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1380, col: 29, offset: 38507},
												expr: &ruleRefExpr{
													pos:  position{line: 1380, col: 29, offset: 38507},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1380, col: 39, offset: 38517},
												expr: &ruleRefExpr{
													pos:  position{line: 1380, col: 39, offset: 38517},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1380, col: 49, offset: 38527},
												expr: &ruleRefExpr{
													pos:  position{line: 1380, col: 49, offset: 38527},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1380, col: 59, offset: 38537},
												expr: &ruleRefExpr{
													pos:  position{line: 1380, col: 59, offset: 38537},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1380, col: 69, offset: 38547},
												expr: &ruleRefExpr{
													pos:  position{line: 1380, col: 69, offset: 38547},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1380, col: 80, offset: 38558},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1384, col: 1, offset: 38612},
			expr: &actionExpr{
				pos: position{line: 1385, col: 5, offset: 38623},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1385, col: 5, offset: 38623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1385, col: 5, offset: 38623},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1385, col: 9, offset: 38627},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1385, col: 14, offset: 38632},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1385, col: 25, offset: 38643},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1385, col: 29, offset: 38647},
							expr: &ruleRefExpr{
								pos:  position{line: 1385, col: 30, offset: 38648},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1387, col: 1, offset: 38683},
			expr: &actionExpr{
				pos: position{line: 1388, col: 5, offset: 38698},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1388, col: 5, offset: 38698},
					expr: &choiceExpr{
						pos: position{line: 1388, col: 6, offset: 38699},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1388, col: 6, offset: 38699},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1388, col: 13, offset: 38706},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1390, col: 1, offset: 38746},
			expr: &charClassMatcher{
				pos:        position{line: 1391, col: 5, offset: 38762},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1393, col: 1, offset: 38777},
			expr: &oneOrMoreExpr{
				pos: position{line: 1393, col: 6, offset: 38782},
				expr: &ruleRefExpr{
					pos:  position{line: 1393, col: 6, offset: 38782},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1395, col: 1, offset: 38793},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1395, col: 6, offset: 38798},
				expr: &ruleRefExpr{
					pos:  position{line: 1395, col: 6, offset: 38798},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1397, col: 1, offset: 38809},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 5, offset: 38822},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1398, col: 5, offset: 38822},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 5, offset: 38837},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 5, offset: 38856},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1402, col: 1, offset: 38865},
			expr: &anyMatcher{
				line: 1403, col: 5, offset: 38885,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1405, col: 1, offset: 38888},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 5, offset: 38916},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1406, col: 5, offset: 38916},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1407, col: 5, offset: 38925},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1408, col: 5, offset: 38934},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1409, col: 5, offset: 38943},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1410, col: 5, offset: 38951},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1411, col: 5, offset: 38964},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1413, col: 1, offset: 38974},
			expr: &charClassMatcher{
				pos:        position{line: 1414, col: 5, offset: 38993},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1420, col: 1, offset: 39323},
			expr: &ruleRefExpr{
				pos:  position{line: 1423, col: 5, offset: 39394},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1425, col: 1, offset: 39413},
			expr: &seqExpr{
				pos: position{line: 1426, col: 5, offset: 39434},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1426, col: 5, offset: 39434},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1426, col: 10, offset: 39439},
						expr: &seqExpr{
							pos: position{line: 1426, col: 11, offset: 39440},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1426, col: 11, offset: 39440},
									expr: &litMatcher{
										pos:        position{line: 1426, col: 12, offset: 39441},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1426, col: 17, offset: 39446},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1426, col: 35, offset: 39464},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1428, col: 1, offset: 39470},
			expr: &seqExpr{
				pos: position{line: 1429, col: 5, offset: 39492},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1429, col: 5, offset: 39492},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1429, col: 10, offset: 39497},
						expr: &seqExpr{
							pos: position{line: 1429, col: 11, offset: 39498},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1429, col: 11, offset: 39498},
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 12, offset: 39499},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1429, col: 27, offset: 39514},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1431, col: 1, offset: 39533},
			expr: &seqExpr{
				pos: position{line: 1431, col: 7, offset: 39539},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1431, col: 7, offset: 39539},
						expr: &ruleRefExpr{
							pos:  position{line: 1431, col: 7, offset: 39539},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1431, col: 19, offset: 39551},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1433, col: 1, offset: 39567},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 7, offset: 39573},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1433, col: 7, offset: 39573},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1433, col: 11, offset: 39577},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1435, col: 1, offset: 39582},
			expr: &notExpr{
				pos: position{line: 1435, col: 7, offset: 39588},
				expr: &anyMatcher{
					line: 1435, col: 8, offset: 39589,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonParallel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel1(stack["s"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq1(stack["seq"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation46(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation46(stack["a"])
}

func (c *current) onOperation52(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation52(stack["a"])
}

func (c *current) onOperation58(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation58(stack["expr"])
}

func (c *current) onSwitchLiteralClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLiteralClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLiteralClause1(stack["expr"], stack["proc"])
}

func (c *current) onSwitchSearchBooleanClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchSearchBooleanClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchSearchBooleanClause1(stack["expr"], stack["proc"])
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onTBD2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonTBD2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD2(stack["compareOp"], stack["v"])
}

func (c *current) onTBD11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonTBD11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD11(stack["match"])
}

func (c *current) onTBD17(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonTBD17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD17(stack["v"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation13(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation13(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpExprs7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonOpExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpExprs7(stack["expr"])
}

func (c *current) onOpExprs1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExprs", "exprs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonOpExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpExprs1(stack["first"], stack["rest"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods1(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods1(stack["methods"])
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierRaw1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierRaw1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierRaw1()
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
