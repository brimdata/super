// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 4, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 4, col: 9, offset: 31},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 4, col: 9, offset: 31},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 4, col: 9, offset: 31},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 4, col: 12, offset: 34},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 4, col: 16, offset: 38},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 4, col: 27, offset: 49},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 4, col: 30, offset: 52},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 5, col: 1, offset: 76},
			expr: &actionExpr{
				pos: position{line: 6, col: 5, offset: 91},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 6, col: 5, offset: 91},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 6, col: 5, offset: 91},
							label: "decls",
							expr: &ruleRefExpr{
								pos:  position{line: 6, col: 11, offset: 97},
								name: "Decls",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 6, col: 17, offset: 103},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 6, col: 20, offset: 106},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 6, col: 26, offset: 112},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 6, col: 36, offset: 122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 6, col: 41, offset: 127},
								expr: &ruleRefExpr{
									pos:  position{line: 6, col: 41, offset: 127},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 9, col: 1, offset: 294},
			expr: &actionExpr{
				pos: position{line: 9, col: 18, offset: 311},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 9, col: 18, offset: 311},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 9, col: 18, offset: 311},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 9, col: 21, offset: 314},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 9, col: 26, offset: 319},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 9, col: 29, offset: 322},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 9, col: 31, offset: 324},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decls",
			pos:  position{line: 10, col: 1, offset: 352},
			expr: &choiceExpr{
				pos: position{line: 11, col: 5, offset: 362},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 11, col: 5, offset: 362},
						expr: &ruleRefExpr{
							pos:  position{line: 11, col: 5, offset: 362},
							name: "Decl",
						},
					},
					&actionExpr{
						pos: position{line: 12, col: 5, offset: 372},
						run: (*parser).callonDecls4,
						expr: &ruleRefExpr{
							pos:  position{line: 12, col: 5, offset: 372},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 13, col: 1, offset: 407},
			expr: &actionExpr{
				pos: position{line: 14, col: 5, offset: 416},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 14, col: 5, offset: 416},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 14, col: 5, offset: 416},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 14, col: 8, offset: 419},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 14, col: 11, offset: 422},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 14, col: 11, offset: 422},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 14, col: 23, offset: 434},
										name: "FuncDecl",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 15, col: 1, offset: 462},
			expr: &choiceExpr{
				pos: position{line: 16, col: 5, offset: 476},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 16, col: 5, offset: 476},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 16, col: 5, offset: 476},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 16, col: 5, offset: 476},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 16, col: 13, offset: 484},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 16, col: 15, offset: 486},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 16, col: 18, offset: 489},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 16, col: 33, offset: 504},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 16, col: 36, offset: 507},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 16, col: 40, offset: 511},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 16, col: 43, offset: 514},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 16, col: 48, offset: 519},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 19, col: 5, offset: 621},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 19, col: 5, offset: 621},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 19, col: 5, offset: 621},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 12, offset: 628},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 19, col: 14, offset: 630},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 19, col: 18, offset: 634},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 19, col: 18, offset: 634},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 19, col: 35, offset: 651},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 49, offset: 665},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 19, col: 52, offset: 668},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 56, offset: 672},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 19, col: 59, offset: 675},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 63, offset: 679},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 22, col: 1, offset: 885},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 898},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 23, col: 5, offset: 898},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 12, offset: 905},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 14, offset: 907},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 17, offset: 910},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 32, offset: 925},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 23, col: 35, offset: 928},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 39, offset: 932},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 42, offset: 935},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 49, offset: 942},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 65, offset: 958},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 23, col: 68, offset: 961},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 72, offset: 965},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 23, col: 75, offset: 968},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 79, offset: 972},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 23, col: 82, offset: 975},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 86, offset: 979},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 89, offset: 982},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 94, offset: 987},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 99, offset: 992},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 23, col: 102, offset: 995},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 26, col: 1, offset: 1108},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 1122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 1122},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 1122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 1122},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 12, offset: 1129},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 15, offset: 1132},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 27, col: 19, offset: 1136},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 27, col: 23, offset: 1140},
										expr: &ruleRefExpr{
											pos:  position{line: 27, col: 23, offset: 1140},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 28, offset: 1145},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 31, offset: 1148},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 1237},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 1237},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 1237},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 14, offset: 1246},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 16, offset: 1248},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 21, offset: 1253},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 26, offset: 1258},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 30, col: 28, offset: 1260},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 30, col: 32, offset: 1264},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 30, col: 38, offset: 1270},
										expr: &ruleRefExpr{
											pos:  position{line: 30, col: 38, offset: 1270},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 1281},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 1284},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 1389},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 33, col: 5, offset: 1389},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 33, col: 5, offset: 1389},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 14, offset: 1398},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 33, col: 17, offset: 1401},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 33, col: 21, offset: 1405},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 33, col: 27, offset: 1411},
										expr: &ruleRefExpr{
											pos:  position{line: 33, col: 27, offset: 1411},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 38, offset: 1422},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 33, col: 41, offset: 1425},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 36, col: 5, offset: 1529},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 36, col: 5, offset: 1529},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 36, col: 5, offset: 1529},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 12, offset: 1536},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 15, offset: 1539},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 36, col: 19, offset: 1543},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 36, col: 26, offset: 1550},
										expr: &ruleRefExpr{
											pos:  position{line: 36, col: 26, offset: 1550},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 35, offset: 1559},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 38, offset: 1562},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 39, col: 5, offset: 1653},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 39, col: 8, offset: 1656},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1669},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1669},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 40, col: 5, offset: 1669},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 40, col: 7, offset: 1671},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 40, col: 20, offset: 1684},
									expr: &ruleRefExpr{
										pos:  position{line: 40, col: 21, offset: 1685},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 1715},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 41, col: 5, offset: 1715},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 41, col: 5, offset: 1715},
									expr: &seqExpr{
										pos: position{line: 41, col: 7, offset: 1717},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 41, col: 7, offset: 1717},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 41, col: 16, offset: 1726},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 41, col: 25, offset: 1735},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 41, col: 27, offset: 1737},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 41, col: 39, offset: 1749},
									expr: &ruleRefExpr{
										pos:  position{line: 41, col: 40, offset: 1750},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 42, col: 5, offset: 1780},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 42, col: 5, offset: 1780},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 42, col: 5, offset: 1780},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 14, offset: 1789},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 42, col: 16, offset: 1791},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 42, col: 21, offset: 1796},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1895},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 45, col: 5, offset: 1895},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 10, offset: 1900},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1999},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1999},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 10, offset: 2004},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 2092},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 51, col: 5, offset: 2092},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 10, offset: 2097},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 54, col: 1, offset: 2183},
			expr: &seqExpr{
				pos: position{line: 54, col: 11, offset: 2193},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 2193},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 54, col: 15, offset: 2197},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 54, col: 15, offset: 2197},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 54, col: 22, offset: 2204},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 54, col: 43, offset: 2225},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 54, col: 50, offset: 2232},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 54, col: 56, offset: 2238},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 55, col: 1, offset: 2243},
			expr: &seqExpr{
				pos: position{line: 55, col: 8, offset: 2250},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 55, col: 8, offset: 2250},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 55, col: 12, offset: 2254},
						expr: &choiceExpr{
							pos: position{line: 55, col: 14, offset: 2256},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 55, col: 14, offset: 2256},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 55, col: 20, offset: 2262},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 56, col: 1, offset: 2267},
			expr: &actionExpr{
				pos: position{line: 57, col: 5, offset: 2275},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 57, col: 5, offset: 2275},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 57, col: 5, offset: 2275},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 8, offset: 2278},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 13, offset: 2283},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 16, offset: 2286},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 18, offset: 2288},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 58, col: 1, offset: 2317},
			expr: &actionExpr{
				pos: position{line: 59, col: 5, offset: 2331},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 59, col: 5, offset: 2331},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 59, col: 5, offset: 2331},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 8, offset: 2334},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 13, offset: 2339},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 18, offset: 2344},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 59, col: 21, offset: 2347},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 26, offset: 2352},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 29, offset: 2355},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 32, offset: 2358},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 62, col: 1, offset: 2442},
			expr: &choiceExpr{
				pos: position{line: 63, col: 5, offset: 2451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 2451},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 2451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 63, col: 5, offset: 2451},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 12, offset: 2458},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 63, col: 14, offset: 2460},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 63, col: 19, offset: 2465},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2495},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 64, col: 5, offset: 2495},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 65, col: 1, offset: 2525},
			expr: &actionExpr{
				pos: position{line: 66, col: 5, offset: 2537},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 66, col: 5, offset: 2537},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 66, col: 5, offset: 2537},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 66, col: 8, offset: 2540},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 15, offset: 2547},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 26, offset: 2558},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 66, col: 30, offset: 2562},
								expr: &seqExpr{
									pos: position{line: 66, col: 31, offset: 2563},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 66, col: 31, offset: 2563},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 66, col: 34, offset: 2566},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 66, col: 39, offset: 2571},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 66, col: 42, offset: 2574},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 73, col: 1, offset: 2771},
			expr: &choiceExpr{
				pos: position{line: 74, col: 5, offset: 2786},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 74, col: 5, offset: 2786},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 5, offset: 2795},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 76, col: 5, offset: 2803},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 5, offset: 2812},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 78, col: 1, offset: 2819},
			expr: &seqExpr{
				pos: position{line: 78, col: 13, offset: 2831},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 78, col: 13, offset: 2831},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 78, col: 17, offset: 2835},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 78, col: 18, offset: 2836},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 78, col: 18, offset: 2836},
										expr: &litMatcher{
											pos:        position{line: 78, col: 19, offset: 2837},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 24, offset: 2842},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 38, offset: 2856},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 57, offset: 2875},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 78, col: 82, offset: 2900},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 78, col: 88, offset: 2906},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 78, col: 94, offset: 2912},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 78, col: 100, offset: 2918},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 79, col: 1, offset: 2923},
			expr: &actionExpr{
				pos: position{line: 79, col: 14, offset: 2936},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 79, col: 15, offset: 2937},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 79, col: 15, offset: 2937},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 79, col: 22, offset: 2944},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 79, col: 30, offset: 2952},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 79, col: 30, offset: 2952},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 79, col: 35, offset: 2957},
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 36, offset: 2958},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 79, col: 54, offset: 2976},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 79, col: 61, offset: 2983},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 79, col: 67, offset: 2989},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 79, col: 74, offset: 2996},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 80, col: 1, offset: 3032},
			expr: &actionExpr{
				pos: position{line: 81, col: 5, offset: 3050},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 81, col: 5, offset: 3050},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 81, col: 5, offset: 3050},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 3056},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 21, offset: 3066},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 81, col: 26, offset: 3071},
								expr: &ruleRefExpr{
									pos:  position{line: 81, col: 26, offset: 3071},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 84, col: 1, offset: 3144},
			expr: &actionExpr{
				pos: position{line: 84, col: 16, offset: 3159},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 84, col: 16, offset: 3159},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 84, col: 16, offset: 3159},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 18, offset: 3161},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 26, offset: 3169},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 28, offset: 3171},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 30, offset: 3173},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 85, col: 1, offset: 3222},
			expr: &actionExpr{
				pos: position{line: 86, col: 5, offset: 3236},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 86, col: 5, offset: 3236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 3236},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 11, offset: 3242},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 3259},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 87, col: 10, offset: 3264},
								expr: &actionExpr{
									pos: position{line: 87, col: 11, offset: 3265},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 87, col: 11, offset: 3265},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 87, col: 11, offset: 3265},
												expr: &seqExpr{
													pos: position{line: 87, col: 12, offset: 3266},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 87, col: 12, offset: 3266},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 87, col: 14, offset: 3268},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 87, col: 25, offset: 3279},
												name: "_",
											},
											&notExpr{
												pos: position{line: 87, col: 27, offset: 3281},
												expr: &choiceExpr{
													pos: position{line: 87, col: 29, offset: 3283},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 87, col: 29, offset: 3283},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 87, col: 39, offset: 3293},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 87, col: 59, offset: 3313},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 87, col: 64, offset: 3318},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 90, col: 1, offset: 3433},
			expr: &choiceExpr{
				pos: position{line: 91, col: 5, offset: 3456},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 91, col: 5, offset: 3456},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 91, col: 5, offset: 3456},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 16, offset: 3467},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 91, col: 19, offset: 3470},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 24, offset: 3475},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 92, col: 5, offset: 3482},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 5, offset: 3482},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 10, offset: 3487},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 93, col: 1, offset: 3490},
			expr: &choiceExpr{
				pos: position{line: 94, col: 5, offset: 3507},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 3507},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 94, col: 5, offset: 3507},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 94, col: 6, offset: 3508},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 94, col: 6, offset: 3508},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 94, col: 6, offset: 3508},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 94, col: 15, offset: 3517},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 94, col: 19, offset: 3521},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 94, col: 19, offset: 3521},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 94, col: 23, offset: 3525},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 94, col: 27, offset: 3529},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 29, offset: 3531},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 3643},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 97, col: 5, offset: 3643},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 97, col: 5, offset: 3643},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 9, offset: 3647},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 97, col: 12, offset: 3650},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 17, offset: 3655},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 31, offset: 3669},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 97, col: 34, offset: 3672},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 3701},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 99, col: 1, offset: 3712},
			expr: &choiceExpr{
				pos: position{line: 100, col: 5, offset: 3727},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 100, col: 5, offset: 3727},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 5, offset: 3736},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 3747},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 102, col: 5, offset: 3747},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 102, col: 5, offset: 3747},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 7, offset: 3749},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 102, col: 20, offset: 3762},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 102, col: 20, offset: 3762},
											expr: &ruleRefExpr{
												pos:  position{line: 102, col: 21, offset: 3763},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 102, col: 33, offset: 3775},
											expr: &seqExpr{
												pos: position{line: 102, col: 35, offset: 3777},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 102, col: 35, offset: 3777},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 102, col: 37, offset: 3779},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 105, col: 5, offset: 3891},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 105, col: 5, offset: 3891},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 105, col: 5, offset: 3891},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 105, col: 9, offset: 3895},
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 10, offset: 3896},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 5, offset: 4012},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 109, col: 1, offset: 4028},
			expr: &choiceExpr{
				pos: position{line: 110, col: 5, offset: 4048},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 4048},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 4048},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 110, col: 5, offset: 4048},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 9, offset: 4052},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 110, col: 22, offset: 4065},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 110, col: 25, offset: 4068},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 28, offset: 4071},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 110, col: 39, offset: 4082},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 110, col: 42, offset: 4085},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 46, offset: 4089},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 113, col: 6, offset: 4212},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 113, col: 6, offset: 4212},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 113, col: 6, offset: 4212},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 12, offset: 4218},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 113, col: 21, offset: 4227},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 113, col: 26, offset: 4232},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 27, offset: 4233},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 116, col: 1, offset: 4304},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 4320},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 5, offset: 4320},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 118, col: 5, offset: 4332},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 118, col: 5, offset: 4332},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 118, col: 5, offset: 4332},
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 6, offset: 4333},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 118, col: 20, offset: 4347},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 22, offset: 4349},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 121, col: 1, offset: 4456},
			expr: &actionExpr{
				pos: position{line: 122, col: 5, offset: 4465},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 122, col: 5, offset: 4465},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 122, col: 13, offset: 4473},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 125, col: 1, offset: 4568},
			expr: &actionExpr{
				pos: position{line: 126, col: 5, offset: 4579},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 126, col: 5, offset: 4579},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 126, col: 13, offset: 4587},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 129, col: 1, offset: 4686},
			expr: &choiceExpr{
				pos: position{line: 130, col: 5, offset: 4702},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 4702},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 130, col: 5, offset: 4702},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 130, col: 5, offset: 4702},
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 5, offset: 4702},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 130, col: 16, offset: 4713},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 21, offset: 4718},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 130, col: 33, offset: 4730},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 39, offset: 4736},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 133, col: 5, offset: 4862},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 133, col: 5, offset: 4862},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 133, col: 5, offset: 4862},
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 5, offset: 4862},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 16, offset: 4873},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 21, offset: 4878},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 36, offset: 4893},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 133, col: 41, offset: 4898},
										expr: &seqExpr{
											pos: position{line: 133, col: 42, offset: 4899},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 133, col: 42, offset: 4899},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 133, col: 44, offset: 4901},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 58, offset: 4915},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 64, offset: 4921},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 140, col: 1, offset: 5134},
			expr: &seqExpr{
				pos: position{line: 140, col: 13, offset: 5146},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 140, col: 13, offset: 5146},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 25, offset: 5158},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 141, col: 1, offset: 5160},
			expr: &actionExpr{
				pos: position{line: 142, col: 5, offset: 5176},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 142, col: 5, offset: 5176},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 142, col: 5, offset: 5176},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 13, offset: 5184},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 142, col: 15, offset: 5186},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 23, offset: 5194},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 143, col: 1, offset: 5234},
			expr: &choiceExpr{
				pos: position{line: 144, col: 5, offset: 5247},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 5247},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 5247},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 144, col: 5, offset: 5247},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 144, col: 7, offset: 5249},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 144, col: 14, offset: 5256},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 144, col: 16, offset: 5258},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 144, col: 25, offset: 5267},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 144, col: 27, offset: 5269},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 33, offset: 5275},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 5306},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 145, col: 5, offset: 5306},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 146, col: 1, offset: 5327},
			expr: &choiceExpr{
				pos: position{line: 147, col: 5, offset: 5346},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 147, col: 5, offset: 5346},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 5361},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 148, col: 5, offset: 5361},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 10, offset: 5366},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 149, col: 1, offset: 5457},
			expr: &actionExpr{
				pos: position{line: 150, col: 5, offset: 5477},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 150, col: 5, offset: 5477},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 5477},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 11, offset: 5483},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 150, col: 26, offset: 5498},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 150, col: 31, offset: 5503},
								expr: &actionExpr{
									pos: position{line: 150, col: 32, offset: 5504},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 150, col: 32, offset: 5504},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 150, col: 32, offset: 5504},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 150, col: 35, offset: 5507},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 150, col: 39, offset: 5511},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 150, col: 42, offset: 5514},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 150, col: 47, offset: 5519},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 153, col: 1, offset: 5639},
			expr: &choiceExpr{
				pos: position{line: 154, col: 5, offset: 5657},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5657},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5657},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 154, col: 5, offset: 5657},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 10, offset: 5662},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 15, offset: 5667},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 154, col: 18, offset: 5670},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 23, offset: 5675},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 154, col: 26, offset: 5678},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 30, offset: 5682},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 157, col: 5, offset: 5786},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 157, col: 5, offset: 5786},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 9, offset: 5790},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 160, col: 1, offset: 5889},
			expr: &actionExpr{
				pos: position{line: 161, col: 5, offset: 5897},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 161, col: 5, offset: 5897},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 161, col: 5, offset: 5897},
							expr: &ruleRefExpr{
								pos:  position{line: 161, col: 6, offset: 5898},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 161, col: 16, offset: 5908},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 161, col: 19, offset: 5911},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 161, col: 27, offset: 5919},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 161, col: 30, offset: 5922},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 161, col: 34, offset: 5926},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 161, col: 37, offset: 5929},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 161, col: 42, offset: 5934},
								expr: &choiceExpr{
									pos: position{line: 161, col: 43, offset: 5935},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 161, col: 43, offset: 5935},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 161, col: 54, offset: 5946},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 161, col: 61, offset: 5953},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 161, col: 64, offset: 5956},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 161, col: 68, offset: 5960},
							expr: &seqExpr{
								pos: position{line: 161, col: 70, offset: 5962},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 161, col: 70, offset: 5962},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 161, col: 73, offset: 5965},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 161, col: 78, offset: 5970},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 161, col: 84, offset: 5976},
								expr: &ruleRefExpr{
									pos:  position{line: 161, col: 84, offset: 5976},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 168, col: 1, offset: 6165},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 6177},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 169, col: 5, offset: 6177},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 5, offset: 6196},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 5, offset: 6209},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 172, col: 1, offset: 6217},
			expr: &actionExpr{
				pos: position{line: 172, col: 15, offset: 6231},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 172, col: 15, offset: 6231},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 172, col: 15, offset: 6231},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 172, col: 17, offset: 6233},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 25, offset: 6241},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 27, offset: 6243},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 32, offset: 6248},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 173, col: 1, offset: 6283},
			expr: &actionExpr{
				pos: position{line: 174, col: 5, offset: 6302},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 174, col: 5, offset: 6302},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 174, col: 5, offset: 6302},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 11, offset: 6308},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 174, col: 25, offset: 6322},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 174, col: 30, offset: 6327},
								expr: &seqExpr{
									pos: position{line: 174, col: 31, offset: 6328},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 174, col: 31, offset: 6328},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 174, col: 34, offset: 6331},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 174, col: 38, offset: 6335},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 174, col: 41, offset: 6338},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 181, col: 1, offset: 6536},
			expr: &choiceExpr{
				pos: position{line: 182, col: 5, offset: 6549},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 182, col: 5, offset: 6549},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 183, col: 5, offset: 6562},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 6573},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 185, col: 5, offset: 6583},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 6593},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 6604},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 6615},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 6626},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 6638},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 6649},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 6659},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 6672},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 5, offset: 6683},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 195, col: 5, offset: 6695},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 6706},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 5, offset: 6719},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 5, offset: 6729},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 6740},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6751},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6765},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 202, col: 5, offset: 6777},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6788},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6800},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 205, col: 1, offset: 6807},
			expr: &actionExpr{
				pos: position{line: 206, col: 5, offset: 6820},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 206, col: 5, offset: 6820},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 206, col: 5, offset: 6820},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 206, col: 14, offset: 6829},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 16, offset: 6831},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 206, col: 22, offset: 6837},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 206, col: 22, offset: 6837},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 24, offset: 6839},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 209, col: 1, offset: 7738},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 7749},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 7749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 210, col: 5, offset: 7749},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 210, col: 12, offset: 7756},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 13, offset: 7757},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 18, offset: 7762},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 23, offset: 7767},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 32, offset: 7776},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 37, offset: 7781},
								expr: &actionExpr{
									pos: position{line: 210, col: 38, offset: 7782},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 210, col: 38, offset: 7782},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 210, col: 38, offset: 7782},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 210, col: 40, offset: 7784},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 210, col: 42, offset: 7786},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 223, col: 1, offset: 8194},
			expr: &actionExpr{
				pos: position{line: 223, col: 12, offset: 8205},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 223, col: 12, offset: 8205},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 223, col: 17, offset: 8210},
						expr: &actionExpr{
							pos: position{line: 223, col: 18, offset: 8211},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 223, col: 18, offset: 8211},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 223, col: 18, offset: 8211},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 223, col: 20, offset: 8213},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 223, col: 22, offset: 8215},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 224, col: 1, offset: 8270},
			expr: &choiceExpr{
				pos: position{line: 225, col: 5, offset: 8282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 8282},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 225, col: 5, offset: 8282},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 8357},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 226, col: 5, offset: 8357},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 226, col: 5, offset: 8357},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 226, col: 14, offset: 8366},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 226, col: 16, offset: 8368},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 226, col: 23, offset: 8375},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 226, col: 24, offset: 8376},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 226, col: 24, offset: 8376},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 226, col: 34, offset: 8386},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 227, col: 1, offset: 8499},
			expr: &actionExpr{
				pos: position{line: 228, col: 5, offset: 8509},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 228, col: 5, offset: 8509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 228, col: 5, offset: 8509},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 228, col: 11, offset: 8515},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 12, offset: 8516},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 17, offset: 8521},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 228, col: 23, offset: 8527},
								expr: &actionExpr{
									pos: position{line: 228, col: 24, offset: 8528},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 228, col: 24, offset: 8528},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 228, col: 24, offset: 8528},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 26, offset: 8530},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 28, offset: 8532},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 52, offset: 8556},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 228, col: 58, offset: 8562},
								expr: &seqExpr{
									pos: position{line: 228, col: 59, offset: 8563},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 228, col: 59, offset: 8563},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 228, col: 61, offset: 8565},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 72, offset: 8576},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 228, col: 79, offset: 8583},
								expr: &actionExpr{
									pos: position{line: 228, col: 80, offset: 8584},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 228, col: 80, offset: 8584},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 228, col: 80, offset: 8584},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 82, offset: 8586},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 84, offset: 8588},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 241, col: 1, offset: 8922},
			expr: &actionExpr{
				pos: position{line: 242, col: 5, offset: 8932},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 242, col: 5, offset: 8932},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 5, offset: 8932},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 11, offset: 8938},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 13, offset: 8940},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 18, offset: 8945},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 245, col: 1, offset: 9039},
			expr: &actionExpr{
				pos: position{line: 246, col: 5, offset: 9050},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 246, col: 5, offset: 9050},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 246, col: 5, offset: 9050},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 12, offset: 9057},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 14, offset: 9059},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 19, offset: 9064},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 249, col: 1, offset: 9154},
			expr: &choiceExpr{
				pos: position{line: 250, col: 5, offset: 9165},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 9165},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 250, col: 5, offset: 9165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 250, col: 5, offset: 9165},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 250, col: 12, offset: 9172},
									name: "_",
								},
								&notExpr{
									pos: position{line: 250, col: 14, offset: 9174},
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 15, offset: 9175},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 250, col: 23, offset: 9183},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 29, offset: 9189},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 9269},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 251, col: 5, offset: 9269},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 252, col: 1, offset: 9415},
			expr: &choiceExpr{
				pos: position{line: 253, col: 5, offset: 9426},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 9426},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 9426},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 253, col: 5, offset: 9426},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 12, offset: 9433},
									name: "_",
								},
								&notExpr{
									pos: position{line: 253, col: 14, offset: 9435},
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 15, offset: 9436},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 23, offset: 9444},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 29, offset: 9450},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 9530},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 254, col: 5, offset: 9530},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 255, col: 1, offset: 9676},
			expr: &actionExpr{
				pos: position{line: 256, col: 5, offset: 9688},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 256, col: 5, offset: 9688},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 256, col: 5, offset: 9688},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 13, offset: 9696},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 256, col: 15, offset: 9698},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 20, offset: 9703},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 259, col: 1, offset: 9788},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 9799},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 9799},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 260, col: 5, offset: 9799},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 260, col: 5, offset: 9799},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 260, col: 12, offset: 9806},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 260, col: 14, offset: 9808},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 9897},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 263, col: 5, offset: 9897},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 266, col: 1, offset: 9985},
			expr: &actionExpr{
				pos: position{line: 267, col: 5, offset: 9995},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 267, col: 5, offset: 9995},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 5, offset: 9995},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 267, col: 11, offset: 10001},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 267, col: 13, offset: 10003},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 18, offset: 10008},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 270, col: 1, offset: 10098},
			expr: &actionExpr{
				pos: position{line: 271, col: 5, offset: 10111},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 271, col: 5, offset: 10111},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 5, offset: 10111},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 271, col: 14, offset: 10120},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 271, col: 16, offset: 10122},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 22, offset: 10128},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 33, offset: 10139},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 38, offset: 10144},
								expr: &actionExpr{
									pos: position{line: 271, col: 39, offset: 10145},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 271, col: 39, offset: 10145},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 271, col: 39, offset: 10145},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 271, col: 42, offset: 10148},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 271, col: 46, offset: 10152},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 271, col: 49, offset: 10155},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 271, col: 52, offset: 10158},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 274, col: 1, offset: 10322},
			expr: &actionExpr{
				pos: position{line: 275, col: 5, offset: 10333},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 275, col: 5, offset: 10333},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 5, offset: 10333},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 275, col: 12, offset: 10340},
							expr: &seqExpr{
								pos: position{line: 275, col: 14, offset: 10342},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 275, col: 14, offset: 10342},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 275, col: 17, offset: 10345},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 275, col: 22, offset: 10350},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 23, offset: 10351},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 278, col: 1, offset: 10421},
			expr: &actionExpr{
				pos: position{line: 279, col: 5, offset: 10433},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 279, col: 5, offset: 10433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 5, offset: 10433},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 279, col: 13, offset: 10441},
							expr: &seqExpr{
								pos: position{line: 279, col: 15, offset: 10443},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 279, col: 15, offset: 10443},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 279, col: 18, offset: 10446},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 279, col: 23, offset: 10451},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 24, offset: 10452},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 282, col: 1, offset: 10523},
			expr: &actionExpr{
				pos: position{line: 283, col: 5, offset: 10534},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 283, col: 5, offset: 10534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 5, offset: 10534},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 11, offset: 10540},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 21, offset: 10550},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 283, col: 28, offset: 10557},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 39, offset: 10568},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 54, offset: 10583},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 57, offset: 10586},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 59, offset: 10588},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 63, offset: 10592},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 71, offset: 10600},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 78, offset: 10607},
								expr: &seqExpr{
									pos: position{line: 283, col: 79, offset: 10608},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 283, col: 79, offset: 10608},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 283, col: 82, offset: 10611},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 86, offset: 10615},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 89, offset: 10618},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 99, offset: 10628},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 107, offset: 10636},
								expr: &seqExpr{
									pos: position{line: 283, col: 108, offset: 10637},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 283, col: 108, offset: 10637},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 110, offset: 10639},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 293, col: 1, offset: 10994},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 11008},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 5, offset: 11008},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 294, col: 5, offset: 11008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 5, offset: 11008},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 12, offset: 11015},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 11044},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 295, col: 5, offset: 11044},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 295, col: 5, offset: 11044},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 295, col: 13, offset: 11052},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 11082},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 296, col: 5, offset: 11082},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 296, col: 5, offset: 11082},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 296, col: 12, offset: 11089},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 297, col: 5, offset: 11118},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 297, col: 5, offset: 11118},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 297, col: 5, offset: 11118},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 297, col: 13, offset: 11126},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 11156},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 298, col: 5, offset: 11156},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 299, col: 1, offset: 11183},
			expr: &choiceExpr{
				pos: position{line: 300, col: 5, offset: 11202},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 300, col: 5, offset: 11202},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 300, col: 5, offset: 11202},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 300, col: 5, offset: 11202},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 300, col: 8, offset: 11205},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 12, offset: 11209},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 300, col: 15, offset: 11212},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 300, col: 17, offset: 11214},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 28, offset: 11225},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 300, col: 31, offset: 11228},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 35, offset: 11232},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 11257},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 301, col: 5, offset: 11257},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 302, col: 1, offset: 11279},
			expr: &choiceExpr{
				pos: position{line: 303, col: 5, offset: 11291},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 303, col: 5, offset: 11291},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 304, col: 5, offset: 11300},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 304, col: 5, offset: 11300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 304, col: 5, offset: 11300},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 304, col: 9, offset: 11304},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 304, col: 14, offset: 11309},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 304, col: 19, offset: 11314},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 305, col: 1, offset: 11339},
			expr: &actionExpr{
				pos: position{line: 306, col: 5, offset: 11352},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 306, col: 5, offset: 11352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 5, offset: 11352},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 306, col: 14, offset: 11361},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 15, offset: 11362},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 20, offset: 11367},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 22, offset: 11369},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 309, col: 1, offset: 12131},
			expr: &actionExpr{
				pos: position{line: 310, col: 5, offset: 12148},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 310, col: 5, offset: 12148},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 310, col: 7, offset: 12150},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 313, col: 1, offset: 12249},
			expr: &choiceExpr{
				pos: position{line: 314, col: 5, offset: 12264},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 314, col: 5, offset: 12264},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 314, col: 5, offset: 12264},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 314, col: 5, offset: 12264},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 314, col: 7, offset: 12266},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 12, offset: 12271},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 12300},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 315, col: 5, offset: 12300},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 316, col: 1, offset: 12370},
			expr: &actionExpr{
				pos: position{line: 317, col: 7, offset: 12383},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 317, col: 7, offset: 12383},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 317, col: 7, offset: 12383},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 14, offset: 12390},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 16, offset: 12392},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 21, offset: 12397},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 36, offset: 12412},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 43, offset: 12419},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 43, offset: 12419},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 54, offset: 12430},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 62, offset: 12438},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 62, offset: 12438},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 317, col: 74, offset: 12450},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 79, offset: 12455},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 79, offset: 12455},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 320, col: 1, offset: 12597},
			expr: &actionExpr{
				pos: position{line: 321, col: 5, offset: 12611},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 321, col: 5, offset: 12611},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 321, col: 5, offset: 12611},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 321, col: 7, offset: 12613},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 321, col: 16, offset: 12622},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 18, offset: 12624},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 22, offset: 12628},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 322, col: 1, offset: 12661},
			expr: &actionExpr{
				pos: position{line: 323, col: 5, offset: 12676},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 323, col: 5, offset: 12676},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 323, col: 5, offset: 12676},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 323, col: 7, offset: 12678},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 17, offset: 12688},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 19, offset: 12690},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 23, offset: 12694},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 324, col: 1, offset: 12727},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 12739},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 12739},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 325, col: 5, offset: 12739},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 325, col: 7, offset: 12741},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 14, offset: 12748},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 16, offset: 12750},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 20, offset: 12754},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 326, col: 1, offset: 12787},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 12798},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 327, col: 5, offset: 12798},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 327, col: 12, offset: 12805},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 330, col: 1, offset: 12960},
			expr: &choiceExpr{
				pos: position{line: 331, col: 5, offset: 12972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 5, offset: 12972},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 12981},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 12989},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 334, col: 1, offset: 12994},
			expr: &actionExpr{
				pos: position{line: 335, col: 5, offset: 13003},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 335, col: 5, offset: 13003},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 335, col: 5, offset: 13003},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 335, col: 12, offset: 13010},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 14, offset: 13012},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 19, offset: 13017},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 335, col: 24, offset: 13022},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 31, offset: 13029},
								expr: &ruleRefExpr{
									pos:  position{line: 335, col: 31, offset: 13029},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 335, col: 42, offset: 13040},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 51, offset: 13049},
								expr: &ruleRefExpr{
									pos:  position{line: 335, col: 51, offset: 13049},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 338, col: 1, offset: 13180},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 13189},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 339, col: 5, offset: 13189},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 339, col: 5, offset: 13189},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 339, col: 12, offset: 13196},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 339, col: 14, offset: 13198},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 19, offset: 13203},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 340, col: 1, offset: 13233},
			expr: &actionExpr{
				pos: position{line: 341, col: 5, offset: 13242},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 341, col: 5, offset: 13242},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 5, offset: 13242},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 341, col: 12, offset: 13249},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 341, col: 14, offset: 13251},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 19, offset: 13256},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 342, col: 1, offset: 13286},
			expr: &actionExpr{
				pos: position{line: 343, col: 5, offset: 13299},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 343, col: 5, offset: 13299},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 343, col: 5, offset: 13299},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 10, offset: 13304},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 19, offset: 13313},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 343, col: 22, offset: 13316},
								expr: &ruleRefExpr{
									pos:  position{line: 343, col: 22, offset: 13316},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 346, col: 1, offset: 13413},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 13421},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 13421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 5, offset: 13421},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 347, col: 11, offset: 13427},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 347, col: 13, offset: 13429},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 17, offset: 13433},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 347, col: 21, offset: 13437},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 347, col: 28, offset: 13444},
								expr: &ruleRefExpr{
									pos:  position{line: 347, col: 28, offset: 13444},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 347, col: 39, offset: 13455},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 347, col: 48, offset: 13464},
								expr: &ruleRefExpr{
									pos:  position{line: 347, col: 48, offset: 13464},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 350, col: 1, offset: 13593},
			expr: &actionExpr{
				pos: position{line: 350, col: 7, offset: 13599},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 350, col: 7, offset: 13599},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 350, col: 8, offset: 13600},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 350, col: 8, offset: 13600},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 350, col: 18, offset: 13610},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 28, offset: 13620},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 351, col: 1, offset: 13656},
			expr: &choiceExpr{
				pos: position{line: 352, col: 5, offset: 13665},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 13665},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 352, col: 5, offset: 13665},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 7, offset: 13667},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 353, col: 5, offset: 13702},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 353, col: 5, offset: 13702},
							expr: &charClassMatcher{
								pos:        position{line: 353, col: 5, offset: 13702},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 354, col: 1, offset: 13770},
			expr: &actionExpr{
				pos: position{line: 355, col: 5, offset: 13781},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 355, col: 5, offset: 13781},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 355, col: 5, offset: 13781},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 355, col: 7, offset: 13783},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 355, col: 12, offset: 13788},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 14, offset: 13790},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 17, offset: 13793},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 356, col: 1, offset: 13818},
			expr: &actionExpr{
				pos: position{line: 356, col: 9, offset: 13826},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 356, col: 9, offset: 13826},
					expr: &charClassMatcher{
						pos:        position{line: 356, col: 10, offset: 13827},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 357, col: 1, offset: 13872},
			expr: &choiceExpr{
				pos: position{line: 358, col: 5, offset: 13885},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 13885},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 13885},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 358, col: 5, offset: 13885},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 10, offset: 13890},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 358, col: 19, offset: 13899},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 358, col: 26, offset: 13906},
										expr: &ruleRefExpr{
											pos:  position{line: 358, col: 26, offset: 13906},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 358, col: 38, offset: 13918},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 358, col: 43, offset: 13923},
										expr: &ruleRefExpr{
											pos:  position{line: 358, col: 43, offset: 13923},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 358, col: 53, offset: 13933},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 57, offset: 13937},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 14054},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 361, col: 5, offset: 14054},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 10, offset: 14059},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 364, col: 1, offset: 14159},
			expr: &actionExpr{
				pos: position{line: 365, col: 5, offset: 14174},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 365, col: 5, offset: 14174},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 5, offset: 14174},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 365, col: 9, offset: 14178},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 16, offset: 14185},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 366, col: 1, offset: 14223},
			expr: &actionExpr{
				pos: position{line: 367, col: 5, offset: 14236},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 367, col: 5, offset: 14236},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 5, offset: 14236},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 9, offset: 14240},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 14, offset: 14245},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 368, col: 1, offset: 14281},
			expr: &choiceExpr{
				pos: position{line: 369, col: 5, offset: 14294},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 369, col: 5, offset: 14294},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 14303},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 14303},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 14303},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 370, col: 9, offset: 14307},
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 10, offset: 14308},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 371, col: 5, offset: 14393},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 14404},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 372, col: 5, offset: 14404},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 10, offset: 14409},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 373, col: 1, offset: 14495},
			expr: &choiceExpr{
				pos: position{line: 374, col: 5, offset: 14514},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 374, col: 5, offset: 14514},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 5, offset: 14533},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 5, offset: 14543},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 377, col: 1, offset: 14556},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 14575},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 14575},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 378, col: 6, offset: 14576},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 378, col: 6, offset: 14576},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 378, col: 24, offset: 14594},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 378, col: 29, offset: 14599},
							expr: &choiceExpr{
								pos: position{line: 378, col: 30, offset: 14600},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 378, col: 30, offset: 14600},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 378, col: 47, offset: 14617},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 379, col: 1, offset: 14654},
			expr: &actionExpr{
				pos: position{line: 380, col: 5, offset: 14669},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 380, col: 5, offset: 14669},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 380, col: 5, offset: 14669},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 380, col: 7, offset: 14671},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 15, offset: 14679},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 17, offset: 14681},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 22, offset: 14686},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 33, offset: 14697},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 39, offset: 14703},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 383, col: 1, offset: 14813},
			expr: &choiceExpr{
				pos: position{line: 384, col: 5, offset: 14824},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 14824},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 384, col: 5, offset: 14824},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 384, col: 5, offset: 14824},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 384, col: 7, offset: 14826},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 385, col: 5, offset: 14857},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 385, col: 5, offset: 14857},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 386, col: 1, offset: 14882},
			expr: &actionExpr{
				pos: position{line: 387, col: 5, offset: 14896},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 387, col: 5, offset: 14896},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 387, col: 5, offset: 14896},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 387, col: 7, offset: 14898},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 16, offset: 14907},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 18, offset: 14909},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 22, offset: 14913},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 388, col: 1, offset: 14948},
			expr: &choiceExpr{
				pos: position{line: 389, col: 5, offset: 14964},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 389, col: 5, offset: 14964},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 389, col: 5, offset: 14964},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 390, col: 5, offset: 14997},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 390, col: 5, offset: 14997},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 391, col: 5, offset: 15032},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 391, col: 5, offset: 15032},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 392, col: 1, offset: 15057},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 15068},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 15068},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 5, offset: 15068},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 393, col: 12, offset: 15075},
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 13, offset: 15076},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 396, col: 1, offset: 15145},
			expr: &actionExpr{
				pos: position{line: 397, col: 5, offset: 15159},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 397, col: 5, offset: 15159},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 397, col: 5, offset: 15159},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 397, col: 15, offset: 15169},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 397, col: 17, offset: 15171},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 22, offset: 15176},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 28, offset: 15182},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 32, offset: 15186},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 40, offset: 15194},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 397, col: 43, offset: 15197},
								expr: &ruleRefExpr{
									pos:  position{line: 397, col: 43, offset: 15197},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 400, col: 1, offset: 15308},
			expr: &actionExpr{
				pos: position{line: 401, col: 5, offset: 15320},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 401, col: 5, offset: 15320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 5, offset: 15320},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 13, offset: 15328},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 15, offset: 15330},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 20, offset: 15335},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 404, col: 1, offset: 15415},
			expr: &actionExpr{
				pos: position{line: 405, col: 5, offset: 15426},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 405, col: 5, offset: 15426},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 5, offset: 15426},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 405, col: 12, offset: 15433},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 14, offset: 15435},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 20, offset: 15441},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 26, offset: 15447},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 405, col: 33, offset: 15454},
								expr: &ruleRefExpr{
									pos:  position{line: 405, col: 33, offset: 15454},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 41, offset: 15462},
							label: "scope",
							expr: &zeroOrOneExpr{
								pos: position{line: 405, col: 47, offset: 15468},
								expr: &ruleRefExpr{
									pos:  position{line: 405, col: 47, offset: 15468},
									name: "Scope",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 412, col: 1, offset: 15717},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 15727},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 413, col: 5, offset: 15727},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 413, col: 5, offset: 15727},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 413, col: 8, offset: 15730},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 13, offset: 15735},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 413, col: 16, offset: 15738},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 20, offset: 15742},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 23, offset: 15745},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 27, offset: 15749},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 38, offset: 15760},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 413, col: 41, offset: 15763},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 414, col: 1, offset: 15787},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 15798},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 15798},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 415, col: 5, offset: 15798},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 415, col: 7, offset: 15800},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 14, offset: 15807},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 16, offset: 15809},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 22, offset: 15815},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 39, offset: 15832},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 415, col: 44, offset: 15837},
								expr: &actionExpr{
									pos: position{line: 415, col: 45, offset: 15838},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 415, col: 45, offset: 15838},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 415, col: 45, offset: 15838},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 415, col: 48, offset: 15841},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 415, col: 52, offset: 15845},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 415, col: 55, offset: 15848},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 415, col: 57, offset: 15850},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 418, col: 1, offset: 15969},
			expr: &actionExpr{
				pos: position{line: 419, col: 5, offset: 15990},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 419, col: 5, offset: 15990},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 419, col: 5, offset: 15990},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 10, offset: 15995},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 25, offset: 16010},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 419, col: 29, offset: 16014},
								expr: &seqExpr{
									pos: position{line: 419, col: 30, offset: 16015},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 419, col: 30, offset: 16015},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 419, col: 33, offset: 16018},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 419, col: 37, offset: 16022},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 419, col: 40, offset: 16025},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 426, col: 1, offset: 16245},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 16257},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 16257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 16257},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 13, offset: 16265},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 15, offset: 16267},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 21, offset: 16273},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 430, col: 1, offset: 16356},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 16368},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 16368},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 431, col: 5, offset: 16368},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 7, offset: 16370},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 10, offset: 16373},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 12, offset: 16375},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 16, offset: 16379},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 432, col: 1, offset: 16403},
			expr: &actionExpr{
				pos: position{line: 433, col: 5, offset: 16413},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 433, col: 5, offset: 16413},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 433, col: 5, offset: 16413},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 433, col: 7, offset: 16415},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 433, col: 10, offset: 16418},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 433, col: 12, offset: 16420},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 16, offset: 16424},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 434, col: 1, offset: 16449},
			expr: &ruleRefExpr{
				pos:  position{line: 434, col: 8, offset: 16456},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 435, col: 1, offset: 16466},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 16476},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 16476},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 436, col: 5, offset: 16476},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 11, offset: 16482},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 16, offset: 16487},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 436, col: 21, offset: 16492},
								expr: &actionExpr{
									pos: position{line: 436, col: 22, offset: 16493},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 436, col: 22, offset: 16493},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 22, offset: 16493},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 436, col: 25, offset: 16496},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 29, offset: 16500},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 436, col: 32, offset: 16503},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 436, col: 37, offset: 16508},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 439, col: 1, offset: 16618},
			expr: &ruleRefExpr{
				pos:  position{line: 439, col: 13, offset: 16630},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 440, col: 1, offset: 16635},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 16650},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 16650},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 5, offset: 16650},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 11, offset: 16656},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 21, offset: 16666},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 441, col: 26, offset: 16671},
								expr: &seqExpr{
									pos: position{line: 441, col: 27, offset: 16672},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 441, col: 27, offset: 16672},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 441, col: 30, offset: 16675},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 441, col: 34, offset: 16679},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 441, col: 37, offset: 16682},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 448, col: 1, offset: 16876},
			expr: &actionExpr{
				pos: position{line: 449, col: 5, offset: 16892},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 449, col: 5, offset: 16892},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 449, col: 5, offset: 16892},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 11, offset: 16898},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 22, offset: 16909},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 449, col: 27, offset: 16914},
								expr: &actionExpr{
									pos: position{line: 449, col: 28, offset: 16915},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 449, col: 28, offset: 16915},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 449, col: 28, offset: 16915},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 449, col: 31, offset: 16918},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 449, col: 35, offset: 16922},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 38, offset: 16925},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 40, offset: 16927},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 452, col: 1, offset: 17036},
			expr: &actionExpr{
				pos: position{line: 453, col: 5, offset: 17051},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 453, col: 5, offset: 17051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 5, offset: 17051},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 9, offset: 17055},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 14, offset: 17060},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 453, col: 17, offset: 17063},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 22, offset: 17068},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 453, col: 25, offset: 17071},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 29, offset: 17075},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 454, col: 1, offset: 17165},
			expr: &ruleRefExpr{
				pos:  position{line: 454, col: 8, offset: 17172},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 455, col: 1, offset: 17188},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 17208},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 17208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 456, col: 5, offset: 17208},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 10, offset: 17213},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 24, offset: 17227},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 28, offset: 17231},
								expr: &seqExpr{
									pos: position{line: 456, col: 29, offset: 17232},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 456, col: 29, offset: 17232},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 456, col: 32, offset: 17235},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 36, offset: 17239},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 39, offset: 17242},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 44, offset: 17247},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 456, col: 47, offset: 17250},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 51, offset: 17254},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 54, offset: 17257},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 464, col: 1, offset: 17517},
			expr: &actionExpr{
				pos: position{line: 465, col: 5, offset: 17535},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 465, col: 5, offset: 17535},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 17535},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 11, offset: 17541},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 466, col: 5, offset: 17560},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 466, col: 10, offset: 17565},
								expr: &actionExpr{
									pos: position{line: 466, col: 11, offset: 17566},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 466, col: 11, offset: 17566},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 466, col: 11, offset: 17566},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 466, col: 14, offset: 17569},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 17, offset: 17572},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 466, col: 25, offset: 17580},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 466, col: 28, offset: 17583},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 33, offset: 17588},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 469, col: 1, offset: 17705},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 17724},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 17724},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 470, col: 5, offset: 17724},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 17730},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 17749},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 471, col: 10, offset: 17754},
								expr: &actionExpr{
									pos: position{line: 471, col: 11, offset: 17755},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 471, col: 11, offset: 17755},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 471, col: 11, offset: 17755},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 471, col: 14, offset: 17758},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 471, col: 17, offset: 17761},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 471, col: 26, offset: 17770},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 471, col: 29, offset: 17773},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 471, col: 34, offset: 17778},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 474, col: 1, offset: 17895},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 17914},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 17914},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 475, col: 5, offset: 17914},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 9, offset: 17918},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 475, col: 22, offset: 17931},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 475, col: 31, offset: 17940},
								expr: &choiceExpr{
									pos: position{line: 475, col: 32, offset: 17941},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 475, col: 32, offset: 17941},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 475, col: 32, offset: 17941},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 35, offset: 17944},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 46, offset: 17955},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 49, offset: 17958},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 475, col: 64, offset: 17973},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 475, col: 64, offset: 17973},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 475, col: 68, offset: 17977},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 475, col: 68, offset: 17977},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 104, offset: 18013},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 107, offset: 18016},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 483, col: 1, offset: 18276},
			expr: &actionExpr{
				pos: position{line: 484, col: 5, offset: 18293},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 484, col: 5, offset: 18293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 484, col: 5, offset: 18293},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 11, offset: 18299},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 485, col: 5, offset: 18322},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 485, col: 10, offset: 18327},
								expr: &actionExpr{
									pos: position{line: 485, col: 11, offset: 18328},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 485, col: 11, offset: 18328},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 485, col: 11, offset: 18328},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 485, col: 14, offset: 18331},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 485, col: 17, offset: 18334},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 485, col: 34, offset: 18351},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 485, col: 37, offset: 18354},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 485, col: 42, offset: 18359},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 488, col: 1, offset: 18480},
			expr: &actionExpr{
				pos: position{line: 488, col: 20, offset: 18499},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 488, col: 21, offset: 18500},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 21, offset: 18500},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 488, col: 27, offset: 18506},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 489, col: 1, offset: 18542},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 18565},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 18565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 490, col: 5, offset: 18565},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 11, offset: 18571},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 5, offset: 18583},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 491, col: 10, offset: 18588},
								expr: &actionExpr{
									pos: position{line: 491, col: 11, offset: 18589},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 491, col: 11, offset: 18589},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 491, col: 11, offset: 18589},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 14, offset: 18592},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 17, offset: 18595},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 491, col: 40, offset: 18618},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 43, offset: 18621},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 48, offset: 18626},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 494, col: 1, offset: 18736},
			expr: &actionExpr{
				pos: position{line: 494, col: 26, offset: 18761},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 494, col: 27, offset: 18762},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 27, offset: 18762},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 33, offset: 18768},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 39, offset: 18774},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 495, col: 1, offset: 18810},
			expr: &choiceExpr{
				pos: position{line: 496, col: 5, offset: 18822},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 496, col: 5, offset: 18822},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 496, col: 5, offset: 18822},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 496, col: 5, offset: 18822},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 496, col: 9, offset: 18826},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 496, col: 12, offset: 18829},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 496, col: 14, offset: 18831},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 499, col: 5, offset: 18940},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 500, col: 1, offset: 18953},
			expr: &choiceExpr{
				pos: position{line: 501, col: 5, offset: 18970},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 18970},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 501, col: 5, offset: 18970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 501, col: 5, offset: 18970},
									expr: &ruleRefExpr{
										pos:  position{line: 501, col: 6, offset: 18971},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 501, col: 14, offset: 18979},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 501, col: 18, offset: 18983},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 501, col: 21, offset: 18986},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 501, col: 23, offset: 18988},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 5, offset: 19098},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 505, col: 1, offset: 19107},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 19120},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 19120},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 19120},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 506, col: 5, offset: 19120},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 11, offset: 19126},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 506, col: 16, offset: 19131},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 506, col: 21, offset: 19136},
										expr: &ruleRefExpr{
											pos:  position{line: 506, col: 22, offset: 19137},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 19208},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 509, col: 5, offset: 19208},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 509, col: 5, offset: 19208},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 11, offset: 19214},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 509, col: 20, offset: 19223},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 509, col: 25, offset: 19228},
										expr: &ruleRefExpr{
											pos:  position{line: 509, col: 26, offset: 19229},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 512, col: 5, offset: 19300},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 513, col: 5, offset: 19314},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 514, col: 1, offset: 19322},
			expr: &seqExpr{
				pos: position{line: 514, col: 13, offset: 19334},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 514, col: 13, offset: 19334},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 22, offset: 19343},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 514, col: 25, offset: 19346},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 515, col: 1, offset: 19350},
			expr: &choiceExpr{
				pos: position{line: 516, col: 5, offset: 19363},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 516, col: 5, offset: 19363},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 517, col: 5, offset: 19373},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 518, col: 1, offset: 19382},
			expr: &actionExpr{
				pos: position{line: 519, col: 5, offset: 19391},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 519, col: 5, offset: 19391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 519, col: 5, offset: 19391},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 9, offset: 19395},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 18, offset: 19404},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 519, col: 21, offset: 19407},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 25, offset: 19411},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 28, offset: 19414},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 519, col: 34, offset: 19420},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 519, col: 34, offset: 19420},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 519, col: 45, offset: 19431},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 51, offset: 19437},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 519, col: 54, offset: 19440},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 522, col: 1, offset: 19536},
			expr: &choiceExpr{
				pos: position{line: 523, col: 5, offset: 19549},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 523, col: 5, offset: 19549},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 524, col: 5, offset: 19558},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 524, col: 5, offset: 19558},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 524, col: 5, offset: 19558},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 14, offset: 19567},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 524, col: 17, offset: 19570},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 21, offset: 19574},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 524, col: 24, offset: 19577},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 33, offset: 19586},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 47, offset: 19600},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 524, col: 50, offset: 19603},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 54, offset: 19607},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 524, col: 57, offset: 19610},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 62, offset: 19615},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 67, offset: 19620},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 524, col: 70, offset: 19623},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 524, col: 74, offset: 19627},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 524, col: 80, offset: 19633},
										expr: &ruleRefExpr{
											pos:  position{line: 524, col: 80, offset: 19633},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 19881},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 528, col: 5, offset: 19881},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 528, col: 5, offset: 19881},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 22, offset: 19898},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 25, offset: 19901},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 29, offset: 19905},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 32, offset: 19908},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 37, offset: 19913},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 42, offset: 19918},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 45, offset: 19921},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 49, offset: 19925},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 52, offset: 19928},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 61, offset: 19937},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 75, offset: 19951},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 78, offset: 19954},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 82, offset: 19958},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 85, offset: 19961},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 90, offset: 19966},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 95, offset: 19971},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 98, offset: 19974},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 528, col: 102, offset: 19978},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 528, col: 108, offset: 19984},
										expr: &ruleRefExpr{
											pos:  position{line: 528, col: 108, offset: 19984},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 20246},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 532, col: 5, offset: 20246},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 532, col: 5, offset: 20246},
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 6, offset: 20247},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 532, col: 16, offset: 20257},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 19, offset: 20260},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 34, offset: 20275},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 37, offset: 20278},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 41, offset: 20282},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 44, offset: 20285},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 49, offset: 20290},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 62, offset: 20303},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 65, offset: 20306},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 532, col: 69, offset: 20310},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 532, col: 75, offset: 20316},
										expr: &ruleRefExpr{
											pos:  position{line: 532, col: 75, offset: 20316},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 535, col: 1, offset: 20436},
			expr: &choiceExpr{
				pos: position{line: 536, col: 5, offset: 20453},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 20453},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 536, col: 5, offset: 20453},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 7, offset: 20455},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 537, col: 5, offset: 20501},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 538, col: 1, offset: 20515},
			expr: &actionExpr{
				pos: position{line: 539, col: 5, offset: 20524},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 539, col: 5, offset: 20524},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 5, offset: 20524},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 12, offset: 20531},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 539, col: 15, offset: 20534},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 19, offset: 20538},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 22, offset: 20541},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 30, offset: 20549},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 38, offset: 20557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 41, offset: 20560},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 539, col: 45, offset: 20564},
								expr: &seqExpr{
									pos: position{line: 539, col: 46, offset: 20565},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 539, col: 46, offset: 20565},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 50, offset: 20569},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 539, col: 55, offset: 20574},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 539, col: 55, offset: 20574},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 539, col: 66, offset: 20585},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 72, offset: 20591},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 77, offset: 20596},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 546, col: 1, offset: 20836},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 20848},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 20848},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 20859},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 20868},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 549, col: 5, offset: 20868},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 7, offset: 20870},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 552, col: 1, offset: 20961},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 20979},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 553, col: 5, offset: 20979},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 20989},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 554, col: 5, offset: 20989},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 555, col: 1, offset: 21024},
			expr: &actionExpr{
				pos: position{line: 556, col: 5, offset: 21034},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 556, col: 5, offset: 21034},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 556, col: 5, offset: 21034},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 11, offset: 21040},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 16, offset: 21045},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 556, col: 21, offset: 21050},
								expr: &actionExpr{
									pos: position{line: 556, col: 22, offset: 21051},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 556, col: 22, offset: 21051},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 556, col: 22, offset: 21051},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 556, col: 25, offset: 21054},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 556, col: 29, offset: 21058},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 556, col: 32, offset: 21061},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 556, col: 34, offset: 21063},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 559, col: 1, offset: 21170},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 21184},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 21184},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 560, col: 5, offset: 21184},
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 6, offset: 21185},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 10, offset: 21189},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 16, offset: 21195},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 27, offset: 21206},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 32, offset: 21211},
								expr: &ruleRefExpr{
									pos:  position{line: 560, col: 33, offset: 21212},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 563, col: 1, offset: 21279},
			expr: &choiceExpr{
				pos: position{line: 564, col: 5, offset: 21289},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 564, col: 5, offset: 21289},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 564, col: 5, offset: 21289},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 564, col: 5, offset: 21289},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 564, col: 9, offset: 21293},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 564, col: 14, offset: 21298},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 564, col: 27, offset: 21311},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 564, col: 30, offset: 21314},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 564, col: 34, offset: 21318},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 564, col: 37, offset: 21321},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 564, col: 40, offset: 21324},
										expr: &ruleRefExpr{
											pos:  position{line: 564, col: 40, offset: 21324},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 564, col: 54, offset: 21338},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 21469},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 567, col: 5, offset: 21469},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 567, col: 5, offset: 21469},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 567, col: 9, offset: 21473},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 567, col: 12, offset: 21476},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 567, col: 16, offset: 21480},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 567, col: 19, offset: 21483},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 567, col: 22, offset: 21486},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 567, col: 35, offset: 21499},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 21630},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 21630},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 570, col: 5, offset: 21630},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 570, col: 9, offset: 21634},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 14, offset: 21639},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 570, col: 19, offset: 21644},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 21693},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 571, col: 5, offset: 21693},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 571, col: 5, offset: 21693},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 571, col: 9, offset: 21697},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 12, offset: 21700},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 572, col: 1, offset: 21750},
			expr: &choiceExpr{
				pos: position{line: 573, col: 5, offset: 21762},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 573, col: 5, offset: 21762},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 574, col: 5, offset: 21773},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 575, col: 5, offset: 21783},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 576, col: 5, offset: 21791},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 577, col: 5, offset: 21799},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 578, col: 5, offset: 21811},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 578, col: 5, offset: 21811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 578, col: 5, offset: 21811},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 9, offset: 21815},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 578, col: 12, offset: 21818},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 578, col: 17, offset: 21823},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 26, offset: 21832},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 578, col: 29, offset: 21835},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 579, col: 5, offset: 21864},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 579, col: 5, offset: 21864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 579, col: 5, offset: 21864},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 579, col: 9, offset: 21868},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 579, col: 12, offset: 21871},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 579, col: 17, offset: 21876},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 579, col: 22, offset: 21881},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 579, col: 25, offset: 21884},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 580, col: 1, offset: 21909},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 21922},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 21922},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 581, col: 5, offset: 21922},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 12, offset: 21929},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 14, offset: 21931},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 20, offset: 21937},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 26, offset: 21943},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 33, offset: 21950},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 33, offset: 21950},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 41, offset: 21958},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 581, col: 44, offset: 21961},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 48, offset: 21965},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 51, offset: 21968},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 57, offset: 21974},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 584, col: 1, offset: 22104},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 22115},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 22115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 22115},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 9, offset: 22119},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 12, offset: 22122},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 18, offset: 22128},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 30, offset: 22140},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 585, col: 33, offset: 22143},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 588, col: 1, offset: 22232},
			expr: &choiceExpr{
				pos: position{line: 589, col: 5, offset: 22248},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 22248},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 589, col: 5, offset: 22248},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 589, col: 5, offset: 22248},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 589, col: 11, offset: 22254},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 589, col: 22, offset: 22265},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 589, col: 27, offset: 22270},
										expr: &ruleRefExpr{
											pos:  position{line: 589, col: 27, offset: 22270},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 22368},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 592, col: 5, offset: 22368},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 593, col: 1, offset: 22403},
			expr: &actionExpr{
				pos: position{line: 593, col: 18, offset: 22420},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 593, col: 18, offset: 22420},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 593, col: 18, offset: 22420},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 593, col: 21, offset: 22423},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 25, offset: 22427},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 28, offset: 22430},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 33, offset: 22435},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 594, col: 1, offset: 22467},
			expr: &choiceExpr{
				pos: position{line: 595, col: 5, offset: 22482},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 595, col: 5, offset: 22482},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 596, col: 5, offset: 22493},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 597, col: 5, offset: 22503},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 598, col: 1, offset: 22514},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 22525},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 22525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 599, col: 5, offset: 22525},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 11, offset: 22531},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 14, offset: 22534},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 19, offset: 22539},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 602, col: 1, offset: 22624},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 22634},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 22634},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 5, offset: 22634},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 10, offset: 22639},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 20, offset: 22649},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 603, col: 23, offset: 22652},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 27, offset: 22656},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 30, offset: 22659},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 36, offset: 22665},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 606, col: 1, offset: 22764},
			expr: &actionExpr{
				pos: position{line: 607, col: 5, offset: 22774},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 607, col: 5, offset: 22774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 607, col: 5, offset: 22774},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 9, offset: 22778},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 12, offset: 22781},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 18, offset: 22787},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 30, offset: 22799},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 607, col: 33, offset: 22802},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 610, col: 1, offset: 22890},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 22898},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 22898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 611, col: 5, offset: 22898},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 10, offset: 22903},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 13, offset: 22906},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 19, offset: 22912},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 31, offset: 22924},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 611, col: 34, offset: 22927},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 614, col: 1, offset: 23014},
			expr: &choiceExpr{
				pos: position{line: 615, col: 5, offset: 23030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 615, col: 5, offset: 23030},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 615, col: 5, offset: 23030},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 615, col: 5, offset: 23030},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 11, offset: 23036},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 615, col: 22, offset: 23047},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 615, col: 27, offset: 23052},
										expr: &actionExpr{
											pos: position{line: 615, col: 28, offset: 23053},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 615, col: 28, offset: 23053},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 615, col: 28, offset: 23053},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 615, col: 31, offset: 23056},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 615, col: 35, offset: 23060},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 615, col: 38, offset: 23063},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 615, col: 40, offset: 23065},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 23182},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 618, col: 5, offset: 23182},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 619, col: 1, offset: 23217},
			expr: &choiceExpr{
				pos: position{line: 620, col: 5, offset: 23232},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 620, col: 5, offset: 23232},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 23243},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 621, col: 5, offset: 23243},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 7, offset: 23245},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 622, col: 1, offset: 23320},
			expr: &actionExpr{
				pos: position{line: 623, col: 5, offset: 23328},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 623, col: 5, offset: 23328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 623, col: 5, offset: 23328},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 10, offset: 23333},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 623, col: 13, offset: 23336},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 19, offset: 23342},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 27, offset: 23350},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 623, col: 30, offset: 23353},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 626, col: 1, offset: 23442},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 23454},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 23454},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 627, col: 5, offset: 23454},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 627, col: 5, offset: 23454},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 11, offset: 23460},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 627, col: 17, offset: 23466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 627, col: 22, offset: 23471},
										expr: &ruleRefExpr{
											pos:  position{line: 627, col: 22, offset: 23471},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 23564},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 630, col: 5, offset: 23564},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 631, col: 1, offset: 23599},
			expr: &actionExpr{
				pos: position{line: 631, col: 13, offset: 23611},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 631, col: 13, offset: 23611},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 631, col: 13, offset: 23611},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 631, col: 16, offset: 23614},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 20, offset: 23618},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 631, col: 23, offset: 23621},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 25, offset: 23623},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 632, col: 1, offset: 23647},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 23657},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 23657},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 23657},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 9, offset: 23661},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 14, offset: 23666},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 633, col: 17, offset: 23669},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 21, offset: 23673},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 24, offset: 23676},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 30, offset: 23682},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 636, col: 1, offset: 23764},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 23774},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 637, col: 5, offset: 23774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 23774},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 15, offset: 23784},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 5, offset: 23798},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 638, col: 10, offset: 23803},
								expr: &ruleRefExpr{
									pos:  position{line: 638, col: 10, offset: 23803},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 23816},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 639, col: 11, offset: 23822},
								expr: &ruleRefExpr{
									pos:  position{line: 639, col: 11, offset: 23822},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 23836},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 640, col: 11, offset: 23842},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 11, offset: 23842},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 23856},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 641, col: 13, offset: 23864},
								expr: &ruleRefExpr{
									pos:  position{line: 641, col: 13, offset: 23864},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 642, col: 5, offset: 23880},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 642, col: 12, offset: 23887},
								expr: &ruleRefExpr{
									pos:  position{line: 642, col: 12, offset: 23887},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 23902},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 643, col: 13, offset: 23910},
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 13, offset: 23910},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 23926},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 11, offset: 23932},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 648, col: 1, offset: 24156},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 24170},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 24170},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 24170},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 649, col: 5, offset: 24170},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 649, col: 12, offset: 24177},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 649, col: 14, offset: 24179},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 24207},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 650, col: 5, offset: 24207},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 650, col: 5, offset: 24207},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 650, col: 12, offset: 24214},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 650, col: 14, offset: 24216},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 26, offset: 24228},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 651, col: 1, offset: 24271},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 24289},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 24289},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 24289},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 9, offset: 24293},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 14, offset: 24298},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 652, col: 18, offset: 24302},
								expr: &seqExpr{
									pos: position{line: 652, col: 19, offset: 24303},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 652, col: 19, offset: 24303},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 21, offset: 24305},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 24, offset: 24308},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 26, offset: 24310},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 659, col: 1, offset: 24500},
			expr: &actionExpr{
				pos: position{line: 660, col: 5, offset: 24519},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 660, col: 5, offset: 24519},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 24519},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 11, offset: 24525},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 25, offset: 24539},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 660, col: 30, offset: 24544},
								expr: &actionExpr{
									pos: position{line: 660, col: 31, offset: 24545},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 660, col: 31, offset: 24545},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 660, col: 31, offset: 24545},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 660, col: 34, offset: 24548},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 660, col: 38, offset: 24552},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 660, col: 41, offset: 24555},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 660, col: 46, offset: 24560},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 663, col: 1, offset: 24679},
			expr: &choiceExpr{
				pos: position{line: 664, col: 5, offset: 24691},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 24691},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 664, col: 5, offset: 24691},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 664, col: 5, offset: 24691},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 664, col: 7, offset: 24693},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 664, col: 12, offset: 24698},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 664, col: 14, offset: 24700},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 20, offset: 24706},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 664, col: 29, offset: 24715},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 664, col: 35, offset: 24721},
										expr: &ruleRefExpr{
											pos:  position{line: 664, col: 35, offset: 24721},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 667, col: 5, offset: 24816},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 667, col: 5, offset: 24816},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 667, col: 5, offset: 24816},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 667, col: 7, offset: 24818},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 667, col: 12, offset: 24823},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 667, col: 14, offset: 24825},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 668, col: 1, offset: 24849},
			expr: &choiceExpr{
				pos: position{line: 669, col: 5, offset: 24862},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 24862},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 669, col: 5, offset: 24862},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 669, col: 5, offset: 24862},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 669, col: 7, offset: 24864},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 669, col: 10, offset: 24867},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 669, col: 12, offset: 24869},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 669, col: 15, offset: 24872},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 24900},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 24900},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 670, col: 5, offset: 24900},
									name: "_",
								},
								&notExpr{
									pos: position{line: 670, col: 7, offset: 24902},
									expr: &seqExpr{
										pos: position{line: 670, col: 9, offset: 24904},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 670, col: 9, offset: 24904},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 670, col: 27, offset: 24922},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 670, col: 30, offset: 24925},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 33, offset: 24928},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 671, col: 1, offset: 24952},
			expr: &ruleRefExpr{
				pos:  position{line: 672, col: 5, offset: 24965},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 673, col: 1, offset: 24970},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 24983},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 24983},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 24983},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 24989},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 19, offset: 24997},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 674, col: 24, offset: 25002},
								expr: &actionExpr{
									pos: position{line: 674, col: 25, offset: 25003},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 674, col: 25, offset: 25003},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 674, col: 30, offset: 25008},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 677, col: 1, offset: 25121},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 25133},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 678, col: 5, offset: 25133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 5, offset: 25133},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 25139},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 24, offset: 25152},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 26, offset: 25154},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 31, offset: 25159},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 33, offset: 25161},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 39, offset: 25167},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 678, col: 48, offset: 25176},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 678, col: 54, offset: 25182},
								expr: &ruleRefExpr{
									pos:  position{line: 678, col: 54, offset: 25182},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 64, offset: 25192},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 66, offset: 25194},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 69, offset: 25197},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 71, offset: 25199},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 79, offset: 25207},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 87, offset: 25215},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 678, col: 90, offset: 25218},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 94, offset: 25222},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 97, offset: 25225},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 106, offset: 25234},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 681, col: 1, offset: 25383},
			expr: &choiceExpr{
				pos: position{line: 682, col: 5, offset: 25400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 25400},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 682, col: 5, offset: 25400},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 682, col: 5, offset: 25400},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 682, col: 7, offset: 25402},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 682, col: 14, offset: 25409},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 682, col: 14, offset: 25409},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 682, col: 21, offset: 25416},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 682, col: 29, offset: 25424},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 682, col: 36, offset: 25431},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 25464},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 683, col: 5, offset: 25464},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 684, col: 1, offset: 25491},
			expr: &actionExpr{
				pos: position{line: 685, col: 5, offset: 25504},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 685, col: 5, offset: 25504},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 685, col: 5, offset: 25504},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 7, offset: 25506},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 13, offset: 25512},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 685, col: 15, offset: 25514},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 20, offset: 25519},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 686, col: 1, offset: 25554},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 25569},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 687, col: 5, offset: 25569},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 687, col: 5, offset: 25569},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 7, offset: 25571},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 13, offset: 25577},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 15, offset: 25579},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 18, offset: 25582},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 687, col: 20, offset: 25584},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 28, offset: 25592},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 688, col: 1, offset: 25627},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 25641},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 25641},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 689, col: 5, offset: 25641},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 7, offset: 25643},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 14, offset: 25650},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 16, offset: 25652},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 21, offset: 25657},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 690, col: 1, offset: 25692},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 25707},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 691, col: 5, offset: 25707},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 5, offset: 25707},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 7, offset: 25709},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 13, offset: 25715},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 15, offset: 25717},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 18, offset: 25720},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 20, offset: 25722},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 25, offset: 25727},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 31, offset: 25733},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 37, offset: 25739},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 694, col: 1, offset: 25848},
			expr: &choiceExpr{
				pos: position{line: 695, col: 5, offset: 25861},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 25861},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 695, col: 5, offset: 25861},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 695, col: 5, offset: 25861},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 695, col: 7, offset: 25863},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 695, col: 12, offset: 25868},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 695, col: 12, offset: 25868},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 695, col: 18, offset: 25874},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 25904},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 696, col: 5, offset: 25904},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 697, col: 1, offset: 25929},
			expr: &choiceExpr{
				pos: position{line: 698, col: 5, offset: 25942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 25942},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 698, col: 5, offset: 25942},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 698, col: 5, offset: 25942},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 7, offset: 25944},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 13, offset: 25950},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 698, col: 15, offset: 25952},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 21, offset: 25958},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 25989},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 699, col: 5, offset: 25989},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 700, col: 1, offset: 26010},
			expr: &actionExpr{
				pos: position{line: 700, col: 10, offset: 26019},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 700, col: 10, offset: 26019},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 701, col: 1, offset: 26054},
			expr: &actionExpr{
				pos: position{line: 701, col: 6, offset: 26059},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 701, col: 6, offset: 26059},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 702, col: 1, offset: 26086},
			expr: &actionExpr{
				pos: position{line: 702, col: 8, offset: 26093},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 702, col: 8, offset: 26093},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 703, col: 1, offset: 26124},
			expr: &actionExpr{
				pos: position{line: 703, col: 8, offset: 26131},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 703, col: 8, offset: 26131},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 704, col: 1, offset: 26162},
			expr: &actionExpr{
				pos: position{line: 704, col: 9, offset: 26170},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 704, col: 9, offset: 26170},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 705, col: 1, offset: 26203},
			expr: &actionExpr{
				pos: position{line: 705, col: 9, offset: 26211},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 705, col: 9, offset: 26211},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 706, col: 1, offset: 26244},
			expr: &actionExpr{
				pos: position{line: 706, col: 6, offset: 26249},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 706, col: 6, offset: 26249},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 707, col: 1, offset: 26276},
			expr: &actionExpr{
				pos: position{line: 707, col: 10, offset: 26285},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 707, col: 10, offset: 26285},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 708, col: 1, offset: 26320},
			expr: &actionExpr{
				pos: position{line: 708, col: 9, offset: 26328},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 708, col: 9, offset: 26328},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 709, col: 1, offset: 26361},
			expr: &actionExpr{
				pos: position{line: 709, col: 6, offset: 26366},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 709, col: 6, offset: 26366},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 710, col: 1, offset: 26393},
			expr: &actionExpr{
				pos: position{line: 710, col: 9, offset: 26401},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 710, col: 9, offset: 26401},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 711, col: 1, offset: 26434},
			expr: &actionExpr{
				pos: position{line: 711, col: 7, offset: 26440},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 711, col: 7, offset: 26440},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 712, col: 1, offset: 26469},
			expr: &actionExpr{
				pos: position{line: 712, col: 8, offset: 26476},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 712, col: 8, offset: 26476},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 713, col: 1, offset: 26507},
			expr: &actionExpr{
				pos: position{line: 713, col: 8, offset: 26514},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 713, col: 8, offset: 26514},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 714, col: 1, offset: 26545},
			expr: &actionExpr{
				pos: position{line: 714, col: 8, offset: 26552},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 714, col: 8, offset: 26552},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 715, col: 1, offset: 26583},
			expr: &actionExpr{
				pos: position{line: 715, col: 9, offset: 26591},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 715, col: 9, offset: 26591},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 716, col: 1, offset: 26624},
			expr: &actionExpr{
				pos: position{line: 716, col: 9, offset: 26632},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 716, col: 9, offset: 26632},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 717, col: 1, offset: 26665},
			expr: &choiceExpr{
				pos: position{line: 718, col: 5, offset: 26687},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 718, col: 5, offset: 26687},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 14, offset: 26696},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 19, offset: 26701},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 26, offset: 26708},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 33, offset: 26715},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 41, offset: 26723},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 49, offset: 26731},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 58, offset: 26740},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 66, offset: 26748},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 74, offset: 26756},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 719, col: 1, offset: 26759},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 26771},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 26771},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 5, offset: 26787},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 26807},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 26825},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 26844},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 26861},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 26874},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 26883},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 728, col: 5, offset: 26900},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 729, col: 5, offset: 26919},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 26938},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 731, col: 1, offset: 26950},
			expr: &choiceExpr{
				pos: position{line: 732, col: 5, offset: 26968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 732, col: 5, offset: 26968},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 732, col: 5, offset: 26968},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 732, col: 5, offset: 26968},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 7, offset: 26970},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 732, col: 14, offset: 26977},
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 15, offset: 26978},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 735, col: 5, offset: 27093},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 735, col: 5, offset: 27093},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 7, offset: 27095},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 738, col: 1, offset: 27198},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 27217},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 27217},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 27217},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 27217},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 7, offset: 27219},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 739, col: 11, offset: 27223},
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 12, offset: 27224},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 27338},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 742, col: 5, offset: 27338},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 7, offset: 27340},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 745, col: 1, offset: 27438},
			expr: &actionExpr{
				pos: position{line: 746, col: 5, offset: 27455},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 746, col: 5, offset: 27455},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 746, col: 7, offset: 27457},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 749, col: 1, offset: 27569},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 27588},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 750, col: 5, offset: 27588},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 750, col: 7, offset: 27590},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 753, col: 1, offset: 27698},
			expr: &choiceExpr{
				pos: position{line: 754, col: 5, offset: 27717},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 27717},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 754, col: 5, offset: 27717},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 27820},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 755, col: 5, offset: 27820},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 756, col: 1, offset: 27921},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 27937},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 757, col: 5, offset: 27937},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 758, col: 1, offset: 28032},
			expr: &actionExpr{
				pos: position{line: 759, col: 5, offset: 28049},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 759, col: 5, offset: 28049},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 759, col: 5, offset: 28049},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 759, col: 10, offset: 28054},
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 10, offset: 28054},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 762, col: 1, offset: 28168},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 28184},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 763, col: 5, offset: 28184},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 763, col: 5, offset: 28184},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 763, col: 9, offset: 28188},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 13, offset: 28192},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 763, col: 18, offset: 28197},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 766, col: 1, offset: 28285},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 28298},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 28298},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 768, col: 5, offset: 28314},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 768, col: 5, offset: 28314},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 9, offset: 28318},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 771, col: 1, offset: 28416},
			expr: &choiceExpr{
				pos: position{line: 772, col: 5, offset: 28425},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 772, col: 5, offset: 28425},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 773, col: 5, offset: 28441},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 5, offset: 28459},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 775, col: 1, offset: 28471},
			expr: &choiceExpr{
				pos: position{line: 776, col: 5, offset: 28489},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 776, col: 5, offset: 28489},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 776, col: 5, offset: 28489},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 776, col: 5, offset: 28489},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 776, col: 10, offset: 28494},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 776, col: 24, offset: 28508},
									expr: &ruleRefExpr{
										pos:  position{line: 776, col: 25, offset: 28509},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 777, col: 5, offset: 28549},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 777, col: 5, offset: 28549},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 777, col: 5, offset: 28549},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 777, col: 10, offset: 28554},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 777, col: 25, offset: 28569},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 777, col: 29, offset: 28573},
										expr: &seqExpr{
											pos: position{line: 777, col: 30, offset: 28574},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 777, col: 30, offset: 28574},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 777, col: 33, offset: 28577},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 777, col: 37, offset: 28581},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 777, col: 40, offset: 28584},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 28816},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 783, col: 5, offset: 28816},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 10, offset: 28821},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 28921},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 28921},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 786, col: 5, offset: 28921},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 9, offset: 28925},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 786, col: 12, offset: 28928},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 14, offset: 28930},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 786, col: 24, offset: 28940},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 787, col: 1, offset: 28962},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 28976},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 788, col: 5, offset: 28976},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 788, col: 11, offset: 28982},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 791, col: 1, offset: 29077},
			expr: &actionExpr{
				pos: position{line: 792, col: 5, offset: 29090},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 792, col: 5, offset: 29090},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 792, col: 5, offset: 29090},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 11, offset: 29096},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 16, offset: 29101},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 792, col: 21, offset: 29106},
								expr: &ruleRefExpr{
									pos:  position{line: 792, col: 21, offset: 29106},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 795, col: 1, offset: 29198},
			expr: &actionExpr{
				pos: position{line: 795, col: 16, offset: 29213},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 795, col: 16, offset: 29213},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 795, col: 16, offset: 29213},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 795, col: 19, offset: 29216},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 23, offset: 29220},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 795, col: 26, offset: 29223},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 30, offset: 29227},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 796, col: 1, offset: 29252},
			expr: &choiceExpr{
				pos: position{line: 797, col: 5, offset: 29268},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 797, col: 5, offset: 29268},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 797, col: 5, offset: 29268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 797, col: 5, offset: 29268},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 9, offset: 29272},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 797, col: 12, offset: 29275},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 19, offset: 29282},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 33, offset: 29296},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 797, col: 36, offset: 29299},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 29394},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 800, col: 5, offset: 29394},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 800, col: 5, offset: 29394},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 9, offset: 29398},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 800, col: 12, offset: 29401},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 800, col: 16, offset: 29405},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 21, offset: 29410},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 800, col: 24, offset: 29413},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 803, col: 5, offset: 29502},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 803, col: 5, offset: 29502},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 803, col: 5, offset: 29502},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 10, offset: 29507},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 803, col: 13, offset: 29510},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 17, offset: 29514},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 22, offset: 29519},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 803, col: 25, offset: 29522},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 806, col: 5, offset: 29610},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 806, col: 5, offset: 29610},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 806, col: 5, offset: 29610},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 10, offset: 29615},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 13, offset: 29618},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 21, offset: 29626},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 26, offset: 29631},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 806, col: 29, offset: 29634},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 33, offset: 29638},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 36, offset: 29641},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 44, offset: 29649},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 49, offset: 29654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 806, col: 52, offset: 29657},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 809, col: 1, offset: 29770},
			expr: &actionExpr{
				pos: position{line: 810, col: 5, offset: 29790},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 810, col: 5, offset: 29790},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 810, col: 7, offset: 29792},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 816, col: 1, offset: 30007},
			expr: &choiceExpr{
				pos: position{line: 817, col: 5, offset: 30032},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 30032},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 817, col: 5, offset: 30032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 817, col: 5, offset: 30032},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 817, col: 9, offset: 30036},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 817, col: 11, offset: 30038},
										expr: &ruleRefExpr{
											pos:  position{line: 817, col: 11, offset: 30038},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 37, offset: 30064},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 30090},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 30090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 818, col: 5, offset: 30090},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 818, col: 9, offset: 30094},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 818, col: 11, offset: 30096},
										expr: &ruleRefExpr{
											pos:  position{line: 818, col: 11, offset: 30096},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 818, col: 37, offset: 30122},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 819, col: 1, offset: 30144},
			expr: &choiceExpr{
				pos: position{line: 820, col: 5, offset: 30173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 820, col: 5, offset: 30173},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 30190},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 821, col: 5, offset: 30190},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 821, col: 7, offset: 30192},
								expr: &ruleRefExpr{
									pos:  position{line: 821, col: 7, offset: 30192},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 824, col: 1, offset: 30328},
			expr: &choiceExpr{
				pos: position{line: 825, col: 5, offset: 30357},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 30357},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 825, col: 5, offset: 30357},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 825, col: 5, offset: 30357},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 825, col: 10, offset: 30362},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 825, col: 12, offset: 30364},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 30391},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 826, col: 5, offset: 30391},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 826, col: 5, offset: 30391},
									expr: &litMatcher{
										pos:        position{line: 826, col: 8, offset: 30394},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 826, col: 15, offset: 30401},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 826, col: 17, offset: 30403},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 827, col: 1, offset: 30438},
			expr: &choiceExpr{
				pos: position{line: 828, col: 5, offset: 30467},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 30467},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 30484},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 829, col: 5, offset: 30484},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 829, col: 7, offset: 30486},
								expr: &ruleRefExpr{
									pos:  position{line: 829, col: 7, offset: 30486},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 832, col: 1, offset: 30622},
			expr: &choiceExpr{
				pos: position{line: 833, col: 5, offset: 30651},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 30651},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 833, col: 5, offset: 30651},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 833, col: 5, offset: 30651},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 833, col: 10, offset: 30656},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 833, col: 12, offset: 30658},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 30685},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 834, col: 5, offset: 30685},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 834, col: 5, offset: 30685},
									expr: &litMatcher{
										pos:        position{line: 834, col: 8, offset: 30688},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 834, col: 15, offset: 30695},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 17, offset: 30697},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 835, col: 1, offset: 30732},
			expr: &actionExpr{
				pos: position{line: 836, col: 5, offset: 30749},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 836, col: 5, offset: 30749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 836, col: 5, offset: 30749},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 10, offset: 30754},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 836, col: 13, offset: 30757},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 15, offset: 30759},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 20, offset: 30764},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 836, col: 23, offset: 30767},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 839, col: 1, offset: 30976},
			expr: &actionExpr{
				pos: position{line: 840, col: 5, offset: 30994},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 840, col: 7, offset: 30996},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 840, col: 7, offset: 30996},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 17, offset: 31006},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 28, offset: 31017},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 39, offset: 31028},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 9, offset: 31045},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 18, offset: 31054},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 28, offset: 31064},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 38, offset: 31074},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 9, offset: 31090},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 21, offset: 31102},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 33, offset: 31114},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 9, offset: 31132},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 18, offset: 31141},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 9, offset: 31158},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 22, offset: 31171},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 9, offset: 31186},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 9, offset: 31202},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 16, offset: 31209},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 9, offset: 31223},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 18, offset: 31232},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 850, col: 1, offset: 31347},
			expr: &choiceExpr{
				pos: position{line: 851, col: 5, offset: 31365},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 31365},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 31365},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 851, col: 5, offset: 31365},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 31371},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 851, col: 21, offset: 31381},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 851, col: 26, offset: 31386},
										expr: &ruleRefExpr{
											pos:  position{line: 851, col: 26, offset: 31386},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 31487},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 854, col: 5, offset: 31487},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 855, col: 1, offset: 31510},
			expr: &actionExpr{
				pos: position{line: 855, col: 21, offset: 31530},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 855, col: 21, offset: 31530},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 855, col: 21, offset: 31530},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 855, col: 24, offset: 31533},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 855, col: 28, offset: 31537},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 855, col: 31, offset: 31540},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 855, col: 35, offset: 31544},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 856, col: 1, offset: 31574},
			expr: &actionExpr{
				pos: position{line: 857, col: 5, offset: 31588},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 857, col: 5, offset: 31588},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 857, col: 5, offset: 31588},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 10, offset: 31593},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 20, offset: 31603},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 857, col: 23, offset: 31606},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 27, offset: 31610},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 857, col: 30, offset: 31613},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 34, offset: 31617},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 860, col: 1, offset: 31698},
			expr: &choiceExpr{
				pos: position{line: 861, col: 5, offset: 31712},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 861, col: 5, offset: 31712},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 862, col: 5, offset: 31731},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 863, col: 1, offset: 31744},
			expr: &actionExpr{
				pos: position{line: 863, col: 12, offset: 31755},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 863, col: 12, offset: 31755},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 863, col: 13, offset: 31756},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 863, col: 13, offset: 31756},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 863, col: 21, offset: 31764},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 863, col: 28, offset: 31771},
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 29, offset: 31772},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 864, col: 1, offset: 31809},
			expr: &actionExpr{
				pos: position{line: 864, col: 11, offset: 31819},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 864, col: 11, offset: 31819},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 864, col: 12, offset: 31820},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 864, col: 12, offset: 31820},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 864, col: 19, offset: 31827},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 864, col: 25, offset: 31833},
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 26, offset: 31834},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 865, col: 1, offset: 31870},
			expr: &actionExpr{
				pos: position{line: 865, col: 11, offset: 31880},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 865, col: 11, offset: 31880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 865, col: 11, offset: 31880},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 865, col: 16, offset: 31885},
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 17, offset: 31886},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 866, col: 1, offset: 31922},
			expr: &actionExpr{
				pos: position{line: 866, col: 12, offset: 31933},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 866, col: 12, offset: 31933},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 866, col: 13, offset: 31934},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 866, col: 13, offset: 31934},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 866, col: 21, offset: 31942},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 866, col: 28, offset: 31949},
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 29, offset: 31950},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 867, col: 1, offset: 31987},
			expr: &actionExpr{
				pos: position{line: 867, col: 11, offset: 31997},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 867, col: 11, offset: 31997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 867, col: 11, offset: 31997},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 867, col: 16, offset: 32002},
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 17, offset: 32003},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 868, col: 1, offset: 32039},
			expr: &charClassMatcher{
				pos:        position{line: 868, col: 19, offset: 32057},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 869, col: 1, offset: 32068},
			expr: &choiceExpr{
				pos: position{line: 869, col: 18, offset: 32085},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 869, col: 18, offset: 32085},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 869, col: 36, offset: 32103},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 870, col: 1, offset: 32109},
			expr: &actionExpr{
				pos: position{line: 871, col: 5, offset: 32124},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 871, col: 5, offset: 32124},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 871, col: 8, offset: 32127},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 872, col: 1, offset: 32207},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 32226},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 32226},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 32226},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 873, col: 5, offset: 32226},
									expr: &seqExpr{
										pos: position{line: 873, col: 7, offset: 32228},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 873, col: 7, offset: 32228},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 873, col: 15, offset: 32236},
												expr: &ruleRefExpr{
													pos:  position{line: 873, col: 16, offset: 32237},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 873, col: 32, offset: 32253},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 873, col: 48, offset: 32269},
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 48, offset: 32269},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 32320},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 874, col: 5, offset: 32320},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 875, col: 5, offset: 32359},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 875, col: 5, offset: 32359},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 875, col: 5, offset: 32359},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 875, col: 10, offset: 32364},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 13, offset: 32367},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 32398},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 876, col: 5, offset: 32398},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 32440},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 32440},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 5, offset: 32440},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 8, offset: 32443},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 877, col: 26, offset: 32461},
									expr: &seqExpr{
										pos: position{line: 877, col: 28, offset: 32463},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 877, col: 28, offset: 32463},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 877, col: 31, offset: 32466},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 878, col: 1, offset: 32490},
			expr: &actionExpr{
				pos: position{line: 879, col: 5, offset: 32510},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 879, col: 5, offset: 32510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 32510},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 11, offset: 32516},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 26, offset: 32531},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 879, col: 31, offset: 32536},
								expr: &actionExpr{
									pos: position{line: 879, col: 32, offset: 32537},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 879, col: 32, offset: 32537},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 879, col: 32, offset: 32537},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 879, col: 35, offset: 32540},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 879, col: 39, offset: 32544},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 879, col: 42, offset: 32547},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 879, col: 45, offset: 32550},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 882, col: 1, offset: 32663},
			expr: &choiceExpr{
				pos: position{line: 883, col: 5, offset: 32675},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 883, col: 5, offset: 32675},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 884, col: 5, offset: 32694},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 885, col: 5, offset: 32710},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 886, col: 5, offset: 32718},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 887, col: 1, offset: 32727},
			expr: &actionExpr{
				pos: position{line: 888, col: 5, offset: 32736},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 888, col: 5, offset: 32736},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 888, col: 5, offset: 32736},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 888, col: 14, offset: 32745},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 888, col: 18, offset: 32749},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 891, col: 1, offset: 32868},
			expr: &seqExpr{
				pos: position{line: 891, col: 12, offset: 32879},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 891, col: 12, offset: 32879},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 891, col: 15, offset: 32882},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 891, col: 19, offset: 32886},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 891, col: 22, offset: 32889},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 891, col: 26, offset: 32893},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 892, col: 1, offset: 32896},
			expr: &seqExpr{
				pos: position{line: 892, col: 6, offset: 32901},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 892, col: 6, offset: 32901},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 892, col: 11, offset: 32906},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 892, col: 16, offset: 32911},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 892, col: 21, offset: 32916},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 893, col: 1, offset: 32922},
			expr: &seqExpr{
				pos: position{line: 893, col: 6, offset: 32927},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 893, col: 6, offset: 32927},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 893, col: 11, offset: 32932},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 894, col: 1, offset: 32938},
			expr: &seqExpr{
				pos: position{line: 894, col: 12, offset: 32949},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 894, col: 12, offset: 32949},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 894, col: 24, offset: 32961},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 895, col: 1, offset: 32972},
			expr: &seqExpr{
				pos: position{line: 895, col: 15, offset: 32986},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 895, col: 15, offset: 32986},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 895, col: 18, offset: 32989},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 22, offset: 32993},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 895, col: 25, offset: 32996},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 29, offset: 33000},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 895, col: 32, offset: 33003},
						expr: &seqExpr{
							pos: position{line: 895, col: 33, offset: 33004},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 895, col: 33, offset: 33004},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 895, col: 37, offset: 33008},
									expr: &charClassMatcher{
										pos:        position{line: 895, col: 37, offset: 33008},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 896, col: 1, offset: 33017},
			expr: &choiceExpr{
				pos: position{line: 897, col: 5, offset: 33032},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 897, col: 5, offset: 33032},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 898, col: 5, offset: 33040},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 898, col: 6, offset: 33041},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 898, col: 6, offset: 33041},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 898, col: 12, offset: 33047},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 898, col: 17, offset: 33052},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 898, col: 20, offset: 33055},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 898, col: 24, offset: 33059},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 898, col: 27, offset: 33062},
								expr: &seqExpr{
									pos: position{line: 898, col: 28, offset: 33063},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 898, col: 28, offset: 33063},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 898, col: 32, offset: 33067},
											expr: &charClassMatcher{
												pos:        position{line: 898, col: 32, offset: 33067},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 899, col: 1, offset: 33076},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 33089},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 33089},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 900, col: 5, offset: 33089},
							expr: &litMatcher{
								pos:        position{line: 900, col: 5, offset: 33089},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 900, col: 10, offset: 33094},
							expr: &seqExpr{
								pos: position{line: 900, col: 11, offset: 33095},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 33095},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 19, offset: 33103},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 903, col: 1, offset: 33228},
			expr: &seqExpr{
				pos: position{line: 903, col: 11, offset: 33238},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 903, col: 11, offset: 33238},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 903, col: 16, offset: 33243},
						expr: &seqExpr{
							pos: position{line: 903, col: 17, offset: 33244},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 903, col: 17, offset: 33244},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 903, col: 21, offset: 33248},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 904, col: 1, offset: 33255},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 33268},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 905, col: 5, offset: 33268},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 906, col: 5, offset: 33277},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 907, col: 5, offset: 33286},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 908, col: 5, offset: 33295},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 909, col: 5, offset: 33303},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 910, col: 5, offset: 33311},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 911, col: 5, offset: 33319},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 912, col: 5, offset: 33327},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 913, col: 5, offset: 33335},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 914, col: 1, offset: 33339},
			expr: &actionExpr{
				pos: position{line: 915, col: 5, offset: 33346},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 915, col: 5, offset: 33346},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 915, col: 5, offset: 33346},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 915, col: 10, offset: 33351},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 915, col: 14, offset: 33355},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 915, col: 19, offset: 33360},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 915, col: 23, offset: 33364},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 915, col: 28, offset: 33369},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 915, col: 32, offset: 33373},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 916, col: 1, offset: 33409},
			expr: &actionExpr{
				pos: position{line: 917, col: 5, offset: 33417},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 917, col: 5, offset: 33417},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 917, col: 5, offset: 33417},
							expr: &seqExpr{
								pos: position{line: 917, col: 8, offset: 33420},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 917, col: 8, offset: 33420},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 917, col: 12, offset: 33424},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 16, offset: 33428},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 917, col: 20, offset: 33432},
										expr: &choiceExpr{
											pos: position{line: 917, col: 22, offset: 33434},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 917, col: 22, offset: 33434},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 917, col: 33, offset: 33445},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 39, offset: 33451},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 41, offset: 33453},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 918, col: 1, offset: 33485},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 33503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 33503},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 33503},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 5, offset: 33503},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 919, col: 7, offset: 33505},
										expr: &ruleRefExpr{
											pos:  position{line: 919, col: 7, offset: 33505},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 919, col: 17, offset: 33515},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 19, offset: 33517},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 922, col: 5, offset: 33581},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 922, col: 5, offset: 33581},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 922, col: 5, offset: 33581},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 922, col: 7, offset: 33583},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 922, col: 11, offset: 33587},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 922, col: 13, offset: 33589},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 13, offset: 33589},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 922, col: 23, offset: 33599},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 922, col: 28, offset: 33604},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 922, col: 30, offset: 33606},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 30, offset: 33606},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 922, col: 40, offset: 33616},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 922, col: 42, offset: 33618},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 925, col: 5, offset: 33717},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 925, col: 5, offset: 33717},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 925, col: 5, offset: 33717},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 925, col: 10, offset: 33722},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 925, col: 12, offset: 33724},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 12, offset: 33724},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 925, col: 22, offset: 33734},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 925, col: 24, offset: 33736},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 928, col: 5, offset: 33807},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 928, col: 5, offset: 33807},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 928, col: 5, offset: 33807},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 7, offset: 33809},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 928, col: 11, offset: 33813},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 928, col: 13, offset: 33815},
										expr: &ruleRefExpr{
											pos:  position{line: 928, col: 13, offset: 33815},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 23, offset: 33825},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 33893},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 931, col: 5, offset: 33893},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 934, col: 1, offset: 33929},
			expr: &choiceExpr{
				pos: position{line: 935, col: 5, offset: 33941},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 935, col: 5, offset: 33941},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 5, offset: 33948},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 937, col: 1, offset: 33952},
			expr: &actionExpr{
				pos: position{line: 937, col: 12, offset: 33963},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 937, col: 12, offset: 33963},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 937, col: 12, offset: 33963},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 937, col: 16, offset: 33967},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 18, offset: 33969},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 938, col: 1, offset: 34006},
			expr: &actionExpr{
				pos: position{line: 938, col: 12, offset: 34017},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 938, col: 12, offset: 34017},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 938, col: 12, offset: 34017},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 14, offset: 34019},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 938, col: 18, offset: 34023},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 939, col: 1, offset: 34060},
			expr: &actionExpr{
				pos: position{line: 940, col: 5, offset: 34071},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 940, col: 5, offset: 34071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 940, col: 5, offset: 34071},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 7, offset: 34073},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 940, col: 10, offset: 34076},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 940, col: 14, offset: 34080},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 16, offset: 34082},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 943, col: 1, offset: 34154},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 34165},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 34165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 34165},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 7, offset: 34167},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 944, col: 11, offset: 34171},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 944, col: 15, offset: 34175},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 17, offset: 34177},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 947, col: 1, offset: 34239},
			expr: &actionExpr{
				pos: position{line: 948, col: 4, offset: 34247},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 948, col: 4, offset: 34247},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 948, col: 6, offset: 34249},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 949, col: 1, offset: 34288},
			expr: &choiceExpr{
				pos: position{line: 950, col: 5, offset: 34302},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 34302},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 34317},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 952, col: 1, offset: 34332},
			expr: &actionExpr{
				pos: position{line: 952, col: 14, offset: 34345},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 952, col: 14, offset: 34345},
					expr: &charClassMatcher{
						pos:        position{line: 952, col: 14, offset: 34345},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 953, col: 1, offset: 34383},
			expr: &actionExpr{
				pos: position{line: 954, col: 5, offset: 34402},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 954, col: 5, offset: 34402},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 954, col: 5, offset: 34402},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 9, offset: 34406},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 955, col: 1, offset: 34448},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 34464},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 34464},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 34464},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 956, col: 5, offset: 34464},
									expr: &litMatcher{
										pos:        position{line: 956, col: 5, offset: 34464},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 956, col: 10, offset: 34469},
									expr: &charClassMatcher{
										pos:        position{line: 956, col: 10, offset: 34469},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 17, offset: 34476},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 956, col: 21, offset: 34480},
									expr: &charClassMatcher{
										pos:        position{line: 956, col: 21, offset: 34480},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 956, col: 28, offset: 34487},
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 28, offset: 34487},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 34546},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 34546},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 959, col: 5, offset: 34546},
									expr: &litMatcher{
										pos:        position{line: 959, col: 5, offset: 34546},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 10, offset: 34551},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 959, col: 14, offset: 34555},
									expr: &charClassMatcher{
										pos:        position{line: 959, col: 14, offset: 34555},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 959, col: 21, offset: 34562},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 21, offset: 34562},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 34621},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 962, col: 7, offset: 34623},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 962, col: 7, offset: 34623},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 13, offset: 34629},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 963, col: 1, offset: 34671},
			expr: &seqExpr{
				pos: position{line: 963, col: 16, offset: 34686},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 963, col: 16, offset: 34686},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 963, col: 21, offset: 34691},
						expr: &charClassMatcher{
							pos:        position{line: 963, col: 21, offset: 34691},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 963, col: 27, offset: 34697},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 964, col: 1, offset: 34708},
			expr: &litMatcher{
				pos:        position{line: 964, col: 7, offset: 34714},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 965, col: 1, offset: 34720},
			expr: &seqExpr{
				pos: position{line: 965, col: 12, offset: 34731},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 965, col: 12, offset: 34731},
						expr: &choiceExpr{
							pos: position{line: 965, col: 13, offset: 34732},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 965, col: 13, offset: 34732},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 965, col: 19, offset: 34738},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 965, col: 25, offset: 34744},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 966, col: 1, offset: 34750},
			expr: &actionExpr{
				pos: position{line: 966, col: 7, offset: 34756},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 966, col: 7, offset: 34756},
					expr: &ruleRefExpr{
						pos:  position{line: 966, col: 7, offset: 34756},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 967, col: 1, offset: 34797},
			expr: &charClassMatcher{
				pos:        position{line: 967, col: 12, offset: 34808},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 968, col: 1, offset: 34820},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 34837},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 34837},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 34837},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 969, col: 5, offset: 34837},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 969, col: 9, offset: 34841},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 969, col: 11, offset: 34843},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 11, offset: 34843},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 29, offset: 34861},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 34898},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 34898},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 970, col: 5, offset: 34898},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 970, col: 9, offset: 34902},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 970, col: 11, offset: 34904},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 11, offset: 34904},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 970, col: 29, offset: 34922},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 971, col: 1, offset: 34955},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 34976},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 34976},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 34976},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 972, col: 5, offset: 34976},
									expr: &choiceExpr{
										pos: position{line: 972, col: 7, offset: 34978},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 972, col: 7, offset: 34978},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 13, offset: 34984},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 972, col: 26, offset: 34997,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 35034},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 35034},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 973, col: 5, offset: 35034},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 973, col: 10, offset: 35039},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 12, offset: 35041},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 974, col: 1, offset: 35074},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 35086},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 975, col: 5, offset: 35086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 975, col: 5, offset: 35086},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 10, offset: 35091},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 975, col: 23, offset: 35104},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 975, col: 28, offset: 35109},
								expr: &ruleRefExpr{
									pos:  position{line: 975, col: 28, offset: 35109},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 976, col: 1, offset: 35170},
			expr: &choiceExpr{
				pos: position{line: 977, col: 5, offset: 35187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 35187},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 978, col: 5, offset: 35204},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 979, col: 1, offset: 35215},
			expr: &actionExpr{
				pos: position{line: 979, col: 16, offset: 35230},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 979, col: 16, offset: 35230},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 980, col: 1, offset: 35278},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 35294},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 981, col: 5, offset: 35294},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 982, col: 5, offset: 35311},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 983, col: 1, offset: 35317},
			expr: &actionExpr{
				pos: position{line: 983, col: 14, offset: 35330},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 983, col: 14, offset: 35330},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 983, col: 14, offset: 35330},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 983, col: 19, offset: 35335},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 983, col: 22, offset: 35338},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 983, col: 22, offset: 35338},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 38, offset: 35354},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 984, col: 1, offset: 35388},
			expr: &actionExpr{
				pos: position{line: 985, col: 5, offset: 35404},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 985, col: 5, offset: 35404},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 985, col: 5, offset: 35404},
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 6, offset: 35405},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 985, col: 22, offset: 35421},
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 23, offset: 35422},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 985, col: 35, offset: 35434},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 40, offset: 35439},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 985, col: 50, offset: 35449},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 985, col: 55, offset: 35454},
								expr: &ruleRefExpr{
									pos:  position{line: 985, col: 55, offset: 35454},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 988, col: 1, offset: 35522},
			expr: &choiceExpr{
				pos: position{line: 988, col: 19, offset: 35540},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 988, col: 19, offset: 35540},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 988, col: 34, offset: 35555},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 988, col: 34, offset: 35555},
								expr: &litMatcher{
									pos:        position{line: 988, col: 34, offset: 35555},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 988, col: 39, offset: 35560},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 989, col: 1, offset: 35572},
			expr: &seqExpr{
				pos: position{line: 989, col: 15, offset: 35586},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 989, col: 15, offset: 35586},
						expr: &ruleRefExpr{
							pos:  position{line: 989, col: 15, offset: 35586},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 989, col: 28, offset: 35599},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 990, col: 1, offset: 35603},
			expr: &choiceExpr{
				pos: position{line: 991, col: 5, offset: 35617},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 35617},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 35634},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 35646},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 993, col: 5, offset: 35646},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 994, col: 1, offset: 35669},
			expr: &choiceExpr{
				pos: position{line: 995, col: 5, offset: 35682},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 995, col: 5, offset: 35682},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 996, col: 5, offset: 35696},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 997, col: 1, offset: 35702},
			expr: &actionExpr{
				pos: position{line: 997, col: 11, offset: 35712},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 997, col: 11, offset: 35712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 997, col: 11, offset: 35712},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 997, col: 16, offset: 35717},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 997, col: 19, offset: 35720},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 997, col: 19, offset: 35720},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 997, col: 32, offset: 35733},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 998, col: 1, offset: 35767},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 35782},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 35782},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 999, col: 5, offset: 35782},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 35810},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1000, col: 5, offset: 35810},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1001, col: 5, offset: 35840},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1002, col: 1, offset: 35845},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 35866},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 35866},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 35866},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1003, col: 5, offset: 35866},
									expr: &choiceExpr{
										pos: position{line: 1003, col: 7, offset: 35868},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1003, col: 7, offset: 35868},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1003, col: 13, offset: 35874},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1003, col: 26, offset: 35887,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 35924},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1004, col: 5, offset: 35924},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1004, col: 5, offset: 35924},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 10, offset: 35929},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 12, offset: 35931},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1005, col: 1, offset: 35964},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 5, offset: 35983},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1006, col: 5, offset: 35983},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 36004},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1008, col: 1, offset: 36018},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 5, offset: 36039},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1009, col: 5, offset: 36039},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 36047},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1010, col: 5, offset: 36047},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1011, col: 5, offset: 36087},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 36096},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1012, col: 5, offset: 36096},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1013, col: 5, offset: 36125},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1013, col: 5, offset: 36125},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 36154},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1014, col: 5, offset: 36154},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 36183},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1015, col: 5, offset: 36183},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 36212},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1016, col: 5, offset: 36212},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 36241},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1017, col: 5, offset: 36241},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1018, col: 1, offset: 36266},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 36284},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 36284},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1019, col: 5, offset: 36284},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 36312},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1020, col: 5, offset: 36312},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1021, col: 5, offset: 36340},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1022, col: 1, offset: 36345},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 5, offset: 36363},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 36363},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1023, col: 5, offset: 36363},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 5, offset: 36363},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 9, offset: 36367},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1023, col: 16, offset: 36374},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1023, col: 16, offset: 36374},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 25, offset: 36383},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 34, offset: 36392},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 43, offset: 36401},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 36464},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1026, col: 5, offset: 36464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1026, col: 5, offset: 36464},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1026, col: 9, offset: 36468},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 13, offset: 36472},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1026, col: 20, offset: 36479},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1026, col: 20, offset: 36479},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 29, offset: 36488},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 29, offset: 36488},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 39, offset: 36498},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 39, offset: 36498},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 49, offset: 36508},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 49, offset: 36508},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 59, offset: 36518},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 59, offset: 36518},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 69, offset: 36528},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 69, offset: 36528},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1026, col: 80, offset: 36539},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1029, col: 1, offset: 36592},
			expr: &actionExpr{
				pos: position{line: 1030, col: 5, offset: 36610},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1030, col: 5, offset: 36610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1030, col: 5, offset: 36610},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1030, col: 9, offset: 36614},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1030, col: 14, offset: 36619},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1030, col: 25, offset: 36630},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1030, col: 29, offset: 36634},
							expr: &ruleRefExpr{
								pos:  position{line: 1030, col: 30, offset: 36635},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1031, col: 1, offset: 36669},
			expr: &actionExpr{
				pos: position{line: 1032, col: 5, offset: 36684},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1032, col: 5, offset: 36684},
					expr: &choiceExpr{
						pos: position{line: 1032, col: 6, offset: 36685},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1032, col: 6, offset: 36685},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1032, col: 15, offset: 36694},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1032, col: 15, offset: 36694},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1032, col: 20, offset: 36699,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1033, col: 1, offset: 36734},
			expr: &charClassMatcher{
				pos:        position{line: 1034, col: 5, offset: 36750},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1035, col: 1, offset: 36764},
			expr: &oneOrMoreExpr{
				pos: position{line: 1035, col: 5, offset: 36768},
				expr: &ruleRefExpr{
					pos:  position{line: 1035, col: 5, offset: 36768},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1036, col: 1, offset: 36778},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1036, col: 6, offset: 36783},
				expr: &ruleRefExpr{
					pos:  position{line: 1036, col: 6, offset: 36783},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1037, col: 1, offset: 36793},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 36806},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 36806},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 5, offset: 36821},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 5, offset: 36840},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1041, col: 1, offset: 36848},
			expr: &anyMatcher{
				line: 1042, col: 5, offset: 36868,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1043, col: 1, offset: 36870},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 5, offset: 36898},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1044, col: 5, offset: 36898},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1045, col: 5, offset: 36907},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1046, col: 5, offset: 36916},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1047, col: 5, offset: 36925},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1048, col: 5, offset: 36933},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1049, col: 5, offset: 36946},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1050, col: 1, offset: 36955},
			expr: &charClassMatcher{
				pos:        position{line: 1051, col: 5, offset: 36974},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1052, col: 1, offset: 36993},
			expr: &ruleRefExpr{
				pos:  position{line: 1053, col: 5, offset: 37015},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1054, col: 1, offset: 37033},
			expr: &seqExpr{
				pos: position{line: 1055, col: 5, offset: 37054},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1055, col: 5, offset: 37054},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1055, col: 10, offset: 37059},
						expr: &seqExpr{
							pos: position{line: 1055, col: 11, offset: 37060},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1055, col: 11, offset: 37060},
									expr: &litMatcher{
										pos:        position{line: 1055, col: 12, offset: 37061},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 17, offset: 37066},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1055, col: 35, offset: 37084},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1056, col: 1, offset: 37089},
			expr: &seqExpr{
				pos: position{line: 1057, col: 5, offset: 37111},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1057, col: 5, offset: 37111},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1057, col: 10, offset: 37116},
						expr: &seqExpr{
							pos: position{line: 1057, col: 11, offset: 37117},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1057, col: 11, offset: 37117},
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 12, offset: 37118},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1057, col: 27, offset: 37133},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1058, col: 1, offset: 37151},
			expr: &seqExpr{
				pos: position{line: 1058, col: 7, offset: 37157},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1058, col: 7, offset: 37157},
						expr: &ruleRefExpr{
							pos:  position{line: 1058, col: 7, offset: 37157},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 19, offset: 37169},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1059, col: 1, offset: 37184},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 7, offset: 37190},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 7, offset: 37190},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 11, offset: 37194},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1060, col: 1, offset: 37198},
			expr: &notExpr{
				pos: position{line: 1060, col: 7, offset: 37204},
				expr: &anyMatcher{
					line: 1060, col: 8, offset: 37205,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1061, col: 1, offset: 37207},
			expr: &notExpr{
				pos: position{line: 1061, col: 8, offset: 37214},
				expr: &ruleRefExpr{
					pos:  position{line: 1061, col: 9, offset: 37215},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential1(decls, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...), "decls": decls}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onDecls4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonDecls4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecls4()
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "FuncDecl", "name": id, "params": params, "expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, op interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": op}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["op"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "Conditional", "cond": expr.([]interface{})[0], "then": map[string]interface{}{"kind": "ID", "name": "this"}, "else": map[string]interface{}{"kind": "Call", "name": "error", "args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{"kind": "Primitive", "text": "assertion failed", "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{"kind": "ID", "name": "this"}}}}}, "where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "decls": []interface{}{}, "ops": []interface{}{map[string]interface{}{"kind": "Summarize", "keys": []interface{}{map[string]interface{}{"kind": "Assignment", "lhs": map[string]interface{}{"kind": "ID", "name": "shape"}, "rhs": map[string]interface{}{"kind": "Call", "name": "typeof", "args": []interface{}{e}, "where": nil}}}, "aggs": []interface{}{map[string]interface{}{"kind": "Assignment", "lhs": map[string]interface{}{"kind": "ID", "name": "sample"}, "rhs": map[string]interface{}{"kind": "Agg", "name": "any", "expr": e, "where": nil}}}, "limit": 0}, map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, scope interface{}) (interface{}, error) {
	var over = map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}
	if locals != nil {
		return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil
	}
	return over, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLExpr", "select": selection, "from": from, "joins": joins, "where": where, "group_by": groupby, "having": having, "order_by": orderby, "limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "style": style, "left_key": leftKey, "right_key": rightKey, "alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
