// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 13, offset: 1038},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 16, offset: 1041},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 20, offset: 1045},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 30, offset: 1055},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 30, offset: 1055},
											name: "SplitLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 40, offset: 1065},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 43, offset: 1068},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1165},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1165},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1174},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1176},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1181},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1186},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1188},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1192},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1198},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1198},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1209},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1212},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1317},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1317},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1326},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1329},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1333},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1339},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1339},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1350},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1353},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1457},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1457},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1457},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1464},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1467},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1471},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1478},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1478},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1487},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1490},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1581},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1584},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1597},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1597},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1599},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 16, offset: 1608},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 17, offset: 1609},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1639},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1639},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 54, col: 5, offset: 1639},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 7, offset: 1641},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 20, offset: 1654},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 21, offset: 1655},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1685},
						run: (*parser).callonOperation59,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1685},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 55, col: 5, offset: 1685},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 7, offset: 1687},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 55, col: 19, offset: 1699},
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 20, offset: 1700},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1731},
						run: (*parser).callonOperation65,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 56, col: 5, offset: 1731},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 7, offset: 1733},
										name: "Record",
									},
								},
								&andExpr{
									pos: position{line: 56, col: 14, offset: 1740},
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 15, offset: 1741},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1843},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 59, col: 5, offset: 1843},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 10, offset: 1848},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 59, col: 24, offset: 1862},
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 25, offset: 1863},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 63, col: 1, offset: 1954},
			expr: &seqExpr{
				pos: position{line: 63, col: 11, offset: 1964},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1964},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 63, col: 15, offset: 1968},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 63, col: 15, offset: 1968},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 63, col: 22, offset: 1975},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 63, col: 43, offset: 1996},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 63, col: 50, offset: 2003},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 63, col: 56, offset: 2009},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 64, col: 1, offset: 2014},
			expr: &seqExpr{
				pos: position{line: 64, col: 8, offset: 2021},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 64, col: 8, offset: 2021},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 64, col: 12, offset: 2025},
						expr: &choiceExpr{
							pos: position{line: 64, col: 14, offset: 2027},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 64, col: 14, offset: 2027},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 64, col: 20, offset: 2033},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitLeg",
			pos:  position{line: 66, col: 1, offset: 2039},
			expr: &actionExpr{
				pos: position{line: 67, col: 5, offset: 2052},
				run: (*parser).callonSplitLeg1,
				expr: &seqExpr{
					pos: position{line: 67, col: 5, offset: 2052},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 67, col: 5, offset: 2052},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 67, col: 8, offset: 2055},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 13, offset: 2060},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 16, offset: 2063},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 18, offset: 2065},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 69, col: 1, offset: 2095},
			expr: &actionExpr{
				pos: position{line: 70, col: 5, offset: 2109},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 70, col: 5, offset: 2109},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 70, col: 5, offset: 2109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 70, col: 8, offset: 2112},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 13, offset: 2117},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 18, offset: 2122},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 70, col: 21, offset: 2125},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 26, offset: 2130},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 70, col: 29, offset: 2133},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 34, offset: 2138},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 74, col: 1, offset: 2227},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2236},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2236},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2236},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2236},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 12, offset: 2243},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 14, offset: 2245},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 19, offset: 2250},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2280},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 76, col: 5, offset: 2280},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 78, col: 1, offset: 2311},
			expr: &choiceExpr{
				pos: position{line: 79, col: 5, offset: 2323},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2323},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2323},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 79, col: 5, offset: 2323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 8, offset: 2326},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 15, offset: 2333},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 24, offset: 2342},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 28, offset: 2346},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 32, offset: 2350},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2461},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2461},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 82, col: 5, offset: 2461},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 82, col: 8, offset: 2464},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 15, offset: 2471},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 86, col: 1, offset: 2579},
			expr: &actionExpr{
				pos: position{line: 87, col: 5, offset: 2592},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 87, col: 5, offset: 2592},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 2592},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 9, offset: 2596},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 20, offset: 2607},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 87, col: 23, offset: 2610},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 89, col: 1, offset: 2636},
			expr: &choiceExpr{
				pos: position{line: 90, col: 5, offset: 2651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2651},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 5, offset: 2660},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2668},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 5, offset: 2677},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 95, col: 1, offset: 2687},
			expr: &seqExpr{
				pos: position{line: 95, col: 13, offset: 2699},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 13, offset: 2699},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 95, col: 17, offset: 2703},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 95, col: 18, offset: 2704},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 95, col: 18, offset: 2704},
										expr: &litMatcher{
											pos:        position{line: 95, col: 19, offset: 2705},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 95, col: 24, offset: 2710},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 38, offset: 2724},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 57, offset: 2743},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 95, col: 82, offset: 2768},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 95, col: 88, offset: 2774},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 95, col: 94, offset: 2780},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 95, col: 100, offset: 2786},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 97, col: 1, offset: 2798},
			expr: &actionExpr{
				pos: position{line: 97, col: 14, offset: 2811},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 97, col: 15, offset: 2812},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 97, col: 15, offset: 2812},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 22, offset: 2819},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 29, offset: 2826},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 36, offset: 2833},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 43, offset: 2840},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 49, offset: 2846},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 97, col: 56, offset: 2853},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 99, col: 1, offset: 2890},
			expr: &choiceExpr{
				pos: position{line: 99, col: 12, offset: 2901},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 99, col: 13, offset: 2902},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 99, col: 13, offset: 2902},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 99, col: 16, offset: 2905},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 99, col: 16, offset: 2905},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 99, col: 26, offset: 2915},
										val:        "BY",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 99, col: 33, offset: 2922},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 99, col: 42, offset: 2931},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 99, col: 50, offset: 2939},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 99, col: 50, offset: 2939},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 99, col: 53, offset: 2942},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 101, col: 1, offset: 2948},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 2966},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 2966},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 2966},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 2972},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 21, offset: 2982},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 26, offset: 2987},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 26, offset: 2987},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 106, col: 1, offset: 3061},
			expr: &actionExpr{
				pos: position{line: 106, col: 16, offset: 3076},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 106, col: 16, offset: 3076},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 16, offset: 3076},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 18, offset: 3078},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 26, offset: 3086},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 28, offset: 3088},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 30, offset: 3090},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 108, col: 1, offset: 3140},
			expr: &actionExpr{
				pos: position{line: 109, col: 5, offset: 3154},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 109, col: 5, offset: 3154},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 109, col: 5, offset: 3154},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 11, offset: 3160},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 5, offset: 3177},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 110, col: 10, offset: 3182},
								expr: &actionExpr{
									pos: position{line: 110, col: 11, offset: 3183},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 110, col: 11, offset: 3183},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 110, col: 11, offset: 3183},
												expr: &seqExpr{
													pos: position{line: 110, col: 12, offset: 3184},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 110, col: 12, offset: 3184},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 110, col: 14, offset: 3186},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 25, offset: 3197},
												name: "_",
											},
											&notExpr{
												pos: position{line: 110, col: 27, offset: 3199},
												expr: &choiceExpr{
													pos: position{line: 110, col: 29, offset: 3201},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 110, col: 29, offset: 3201},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 110, col: 39, offset: 3211},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 110, col: 59, offset: 3231},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 64, offset: 3236},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 114, col: 1, offset: 3352},
			expr: &choiceExpr{
				pos: position{line: 115, col: 5, offset: 3375},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 115, col: 5, offset: 3375},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 115, col: 5, offset: 3375},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 115, col: 14, offset: 3384},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 116, col: 5, offset: 3391},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 116, col: 5, offset: 3391},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 116, col: 10, offset: 3396},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 118, col: 1, offset: 3400},
			expr: &choiceExpr{
				pos: position{line: 119, col: 5, offset: 3417},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3417},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3417},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 119, col: 6, offset: 3418},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 119, col: 6, offset: 3418},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 119, col: 6, offset: 3418},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 15, offset: 3427},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 119, col: 19, offset: 3431},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 119, col: 19, offset: 3431},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 23, offset: 3435},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 119, col: 27, offset: 3439},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 29, offset: 3441},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 122, col: 5, offset: 3553},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 122, col: 5, offset: 3553},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 122, col: 5, offset: 3553},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 122, col: 9, offset: 3557},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 122, col: 12, offset: 3560},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 122, col: 17, offset: 3565},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 122, col: 31, offset: 3579},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 122, col: 34, offset: 3582},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3611},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 125, col: 1, offset: 3623},
			expr: &choiceExpr{
				pos: position{line: 126, col: 5, offset: 3638},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 126, col: 5, offset: 3638},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 126, col: 5, offset: 3638},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 12, offset: 3645},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3686},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 127, col: 5, offset: 3686},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 127, col: 5, offset: 3686},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 7, offset: 3688},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 127, col: 19, offset: 3700},
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 20, offset: 3701},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 3818},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 130, col: 5, offset: 3818},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 130, col: 5, offset: 3818},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 130, col: 9, offset: 3822},
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 10, offset: 3823},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3939},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 135, col: 1, offset: 3960},
			expr: &choiceExpr{
				pos: position{line: 136, col: 5, offset: 3976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 136, col: 5, offset: 3976},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 3988},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 3988},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 137, col: 5, offset: 3988},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 6, offset: 3989},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 137, col: 13, offset: 3996},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 15, offset: 3998},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 141, col: 1, offset: 4106},
			expr: &actionExpr{
				pos: position{line: 142, col: 5, offset: 4124},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 142, col: 5, offset: 4124},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 142, col: 13, offset: 4132},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 146, col: 1, offset: 4234},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 4251},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 147, col: 5, offset: 4251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 147, col: 5, offset: 4251},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 7, offset: 4253},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 12, offset: 4258},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 147, col: 14, offset: 4260},
							val:        "matches",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 24, offset: 4270},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 27, offset: 4273},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 35, offset: 4281},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 151, col: 1, offset: 4393},
			expr: &choiceExpr{
				pos: position{line: 151, col: 11, offset: 4403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 151, col: 11, offset: 4403},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 151, col: 20, offset: 4412},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 155, col: 1, offset: 4444},
			expr: &choiceExpr{
				pos: position{line: 156, col: 5, offset: 4460},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4460},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4460},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 4460},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 5, offset: 4460},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 16, offset: 4471},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 21, offset: 4476},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 33, offset: 4488},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 39, offset: 4494},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 4620},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 4620},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 159, col: 5, offset: 4620},
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 5, offset: 4620},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 159, col: 16, offset: 4631},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 21, offset: 4636},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 159, col: 36, offset: 4651},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 159, col: 41, offset: 4656},
										expr: &seqExpr{
											pos: position{line: 159, col: 42, offset: 4657},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 159, col: 42, offset: 4657},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 159, col: 44, offset: 4659},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 159, col: 58, offset: 4673},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 64, offset: 4679},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 167, col: 1, offset: 4893},
			expr: &seqExpr{
				pos: position{line: 167, col: 13, offset: 4905},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 167, col: 13, offset: 4905},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 167, col: 25, offset: 4917},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 169, col: 1, offset: 4920},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 4936},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 170, col: 5, offset: 4936},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 170, col: 5, offset: 4936},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 13, offset: 4944},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 15, offset: 4946},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 23, offset: 4954},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 172, col: 1, offset: 4995},
			expr: &choiceExpr{
				pos: position{line: 173, col: 5, offset: 5008},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5008},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5008},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 173, col: 5, offset: 5008},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 173, col: 7, offset: 5010},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 173, col: 14, offset: 5017},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 173, col: 16, offset: 5019},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 173, col: 25, offset: 5028},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 173, col: 27, offset: 5030},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 33, offset: 5036},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 5067},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 174, col: 5, offset: 5067},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 179, col: 1, offset: 5327},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 5346},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 180, col: 5, offset: 5346},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5361},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5361},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 10, offset: 5366},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 183, col: 1, offset: 5458},
			expr: &actionExpr{
				pos: position{line: 184, col: 5, offset: 5478},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 184, col: 5, offset: 5478},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 184, col: 5, offset: 5478},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 11, offset: 5484},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 26, offset: 5499},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 184, col: 31, offset: 5504},
								expr: &actionExpr{
									pos: position{line: 184, col: 32, offset: 5505},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 184, col: 32, offset: 5505},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 184, col: 32, offset: 5505},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 184, col: 35, offset: 5508},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 184, col: 39, offset: 5512},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 184, col: 42, offset: 5515},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 184, col: 47, offset: 5520},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 188, col: 1, offset: 5642},
			expr: &choiceExpr{
				pos: position{line: 189, col: 5, offset: 5660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5660},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 5660},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 189, col: 5, offset: 5660},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 10, offset: 5665},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 15, offset: 5670},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 189, col: 18, offset: 5673},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 23, offset: 5678},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 26, offset: 5681},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 30, offset: 5685},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 5789},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 192, col: 5, offset: 5789},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 9, offset: 5793},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 196, col: 1, offset: 5893},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5901},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 197, col: 5, offset: 5901},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 197, col: 5, offset: 5901},
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 6, offset: 5902},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 16, offset: 5912},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 19, offset: 5915},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 27, offset: 5923},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 197, col: 30, offset: 5926},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 34, offset: 5930},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 37, offset: 5933},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 197, col: 42, offset: 5938},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 42, offset: 5938},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 49, offset: 5945},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 197, col: 52, offset: 5948},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 197, col: 56, offset: 5952},
							expr: &seqExpr{
								pos: position{line: 197, col: 58, offset: 5954},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 58, offset: 5954},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 197, col: 61, offset: 5957},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 66, offset: 5962},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 197, col: 72, offset: 5968},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 72, offset: 5968},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 205, col: 1, offset: 6158},
			expr: &choiceExpr{
				pos: position{line: 206, col: 5, offset: 6170},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 6170},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6189},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6202},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 210, col: 1, offset: 6211},
			expr: &actionExpr{
				pos: position{line: 210, col: 15, offset: 6225},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 210, col: 15, offset: 6225},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 210, col: 15, offset: 6225},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 210, col: 17, offset: 6227},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 25, offset: 6235},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 27, offset: 6237},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 32, offset: 6242},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 212, col: 1, offset: 6278},
			expr: &actionExpr{
				pos: position{line: 213, col: 5, offset: 6297},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 213, col: 5, offset: 6297},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 213, col: 5, offset: 6297},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 11, offset: 6303},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 25, offset: 6317},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 213, col: 30, offset: 6322},
								expr: &seqExpr{
									pos: position{line: 213, col: 31, offset: 6323},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 31, offset: 6323},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 213, col: 34, offset: 6326},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 213, col: 38, offset: 6330},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 213, col: 41, offset: 6333},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 223, col: 1, offset: 6569},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 6582},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6582},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6595},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6607},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6619},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6632},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6645},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6658},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6673},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6686},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6698},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6713},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6726},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6740},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6753},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6768},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6780},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6793},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6806},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6822},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 6834},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6848},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6861},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 247, col: 1, offset: 6872},
			expr: &actionExpr{
				pos: position{line: 248, col: 5, offset: 6885},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 248, col: 5, offset: 6885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 5, offset: 6885},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 12, offset: 6892},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 17, offset: 6897},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 26, offset: 6906},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 31, offset: 6911},
								expr: &actionExpr{
									pos: position{line: 248, col: 32, offset: 6912},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 248, col: 32, offset: 6912},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 248, col: 32, offset: 6912},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 248, col: 34, offset: 6914},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 248, col: 36, offset: 6916},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 262, col: 1, offset: 7335},
			expr: &actionExpr{
				pos: position{line: 262, col: 12, offset: 7346},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 262, col: 12, offset: 7346},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 262, col: 17, offset: 7351},
						expr: &actionExpr{
							pos: position{line: 262, col: 18, offset: 7352},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 262, col: 18, offset: 7352},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 262, col: 18, offset: 7352},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 262, col: 20, offset: 7354},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 22, offset: 7356},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 264, col: 1, offset: 7412},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 7424},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 7424},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 265, col: 5, offset: 7424},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7499},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 266, col: 5, offset: 7499},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 266, col: 5, offset: 7499},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 14, offset: 7508},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 266, col: 16, offset: 7510},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 266, col: 23, offset: 7517},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 266, col: 24, offset: 7518},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 266, col: 24, offset: 7518},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 266, col: 34, offset: 7528},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 268, col: 1, offset: 7642},
			expr: &actionExpr{
				pos: position{line: 269, col: 5, offset: 7654},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 269, col: 5, offset: 7654},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 7654},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 269, col: 11, offset: 7660},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 17, offset: 7666},
								expr: &actionExpr{
									pos: position{line: 269, col: 18, offset: 7667},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 269, col: 18, offset: 7667},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 18, offset: 7667},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 20, offset: 7669},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 22, offset: 7671},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 46, offset: 7695},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 52, offset: 7701},
								expr: &seqExpr{
									pos: position{line: 269, col: 53, offset: 7702},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 53, offset: 7702},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 269, col: 55, offset: 7704},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 66, offset: 7715},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 73, offset: 7722},
								expr: &actionExpr{
									pos: position{line: 269, col: 74, offset: 7723},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 269, col: 74, offset: 7723},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 74, offset: 7723},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 76, offset: 7725},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 78, offset: 7727},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 283, col: 1, offset: 8072},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8084},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 5, offset: 8084},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 11, offset: 8090},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 13, offset: 8092},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 18, offset: 8097},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 288, col: 1, offset: 8192},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 8205},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 8205},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 5, offset: 8205},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 12, offset: 8212},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 14, offset: 8214},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 19, offset: 8219},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 293, col: 1, offset: 8310},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 8323},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 5, offset: 8323},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 294, col: 5, offset: 8323},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 5, offset: 8323},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 12, offset: 8330},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 294, col: 14, offset: 8332},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 20, offset: 8338},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8418},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 295, col: 5, offset: 8418},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 297, col: 1, offset: 8493},
			expr: &choiceExpr{
				pos: position{line: 298, col: 5, offset: 8506},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 8506},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 8506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 5, offset: 8506},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 12, offset: 8513},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 298, col: 14, offset: 8515},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 20, offset: 8521},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 8601},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 299, col: 5, offset: 8601},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 301, col: 1, offset: 8676},
			expr: &actionExpr{
				pos: position{line: 302, col: 5, offset: 8691},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 302, col: 5, offset: 8691},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 8691},
							val:        "filter",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 14, offset: 8700},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 16, offset: 8702},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 19, offset: 8705},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 306, col: 1, offset: 8742},
			expr: &actionExpr{
				pos: position{line: 307, col: 5, offset: 8753},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 307, col: 5, offset: 8753},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 307, col: 10, offset: 8758},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 311, col: 1, offset: 8854},
			expr: &choiceExpr{
				pos: position{line: 312, col: 5, offset: 8867},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 8867},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 312, col: 5, offset: 8867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 312, col: 5, offset: 8867},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 312, col: 12, offset: 8874},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 312, col: 14, offset: 8876},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 8965},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 315, col: 5, offset: 8965},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 319, col: 1, offset: 9054},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 9066},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 9066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 9066},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 11, offset: 9072},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 13, offset: 9074},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 18, offset: 9079},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 324, col: 1, offset: 9170},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9185},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9185},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 5, offset: 9185},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 14, offset: 9194},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 16, offset: 9196},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 22, offset: 9202},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 33, offset: 9213},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 38, offset: 9218},
								expr: &actionExpr{
									pos: position{line: 325, col: 39, offset: 9219},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 325, col: 39, offset: 9219},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 325, col: 39, offset: 9219},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 325, col: 42, offset: 9222},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 325, col: 46, offset: 9226},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 325, col: 49, offset: 9229},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 325, col: 52, offset: 9232},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 333, col: 1, offset: 9641},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 9654},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 9654},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 5, offset: 9654},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 334, col: 12, offset: 9661},
							expr: &seqExpr{
								pos: position{line: 334, col: 14, offset: 9663},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 334, col: 14, offset: 9663},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 334, col: 17, offset: 9666},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 338, col: 1, offset: 9737},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 9751},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 339, col: 5, offset: 9751},
					val:        "shape",
					ignoreCase: false,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 343, col: 1, offset: 9826},
			expr: &choiceExpr{
				pos: position{line: 344, col: 5, offset: 9839},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 344, col: 5, offset: 9839},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 344, col: 5, offset: 9839},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 344, col: 5, offset: 9839},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 11, offset: 9845},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 344, col: 21, offset: 9855},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 28, offset: 9862},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 30, offset: 9864},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 33, offset: 9867},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 35, offset: 9869},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 43, offset: 9877},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 51, offset: 9885},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 344, col: 54, offset: 9888},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 58, offset: 9892},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 61, offset: 9895},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 70, offset: 9904},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 344, col: 78, offset: 9912},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 344, col: 86, offset: 9920},
										expr: &seqExpr{
											pos: position{line: 344, col: 87, offset: 9921},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 344, col: 87, offset: 9921},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 344, col: 89, offset: 9923},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10189},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10189},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 10189},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 11, offset: 10195},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 351, col: 22, offset: 10206},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 29, offset: 10213},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 31, offset: 10215},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 34, offset: 10218},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 36, offset: 10220},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 40, offset: 10224},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 351, col: 48, offset: 10232},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 351, col: 56, offset: 10240},
										expr: &seqExpr{
											pos: position{line: 351, col: 57, offset: 10241},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 351, col: 57, offset: 10241},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 351, col: 59, offset: 10243},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 359, col: 1, offset: 10497},
			expr: &choiceExpr{
				pos: position{line: 360, col: 5, offset: 10511},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10511},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 360, col: 5, offset: 10511},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 360, col: 5, offset: 10511},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 360, col: 12, offset: 10518},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 10548},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 10548},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 361, col: 5, offset: 10548},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 361, col: 13, offset: 10556},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 10586},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 362, col: 5, offset: 10586},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 362, col: 5, offset: 10586},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 362, col: 13, offset: 10594},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 10623},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 363, col: 5, offset: 10623},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 363, col: 5, offset: 10623},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 13, offset: 10631},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 10661},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 364, col: 5, offset: 10661},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 366, col: 1, offset: 10697},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10709},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 367, col: 5, offset: 10709},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10718},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10718},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 368, col: 9, offset: 10722},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 368, col: 14, offset: 10727},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 368, col: 19, offset: 10732},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 370, col: 1, offset: 10758},
			expr: &actionExpr{
				pos: position{line: 371, col: 5, offset: 10773},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 371, col: 5, offset: 10773},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 5, offset: 10773},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 14, offset: 10782},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 16, offset: 10784},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 415, col: 1, offset: 12400},
			expr: &actionExpr{
				pos: position{line: 416, col: 5, offset: 12417},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 5, offset: 12417},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 416, col: 7, offset: 12419},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 420, col: 1, offset: 12519},
			expr: &choiceExpr{
				pos: position{line: 421, col: 5, offset: 12534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 12534},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 421, col: 5, offset: 12534},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 421, col: 5, offset: 12534},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 421, col: 7, offset: 12536},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 421, col: 12, offset: 12541},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 12570},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 422, col: 5, offset: 12570},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 424, col: 1, offset: 12641},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12654},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 425, col: 5, offset: 12654},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 425, col: 12, offset: 12661},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 429, col: 1, offset: 12817},
			expr: &choiceExpr{
				pos: position{line: 430, col: 5, offset: 12829},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 430, col: 5, offset: 12829},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 431, col: 5, offset: 12838},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 5, offset: 12846},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 434, col: 1, offset: 12852},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 12861},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 435, col: 5, offset: 12861},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 5, offset: 12861},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 12, offset: 12868},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 435, col: 14, offset: 12870},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 19, offset: 12875},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 24, offset: 12880},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 435, col: 31, offset: 12887},
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 31, offset: 12887},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 42, offset: 12898},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 435, col: 49, offset: 12905},
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 49, offset: 12905},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 439, col: 1, offset: 13034},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 13043},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 13043},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13043},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 12, offset: 13050},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 14, offset: 13052},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 19, offset: 13057},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 442, col: 1, offset: 13088},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13097},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13097},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 443, col: 5, offset: 13097},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 12, offset: 13104},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 443, col: 14, offset: 13106},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 19, offset: 13111},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 445, col: 1, offset: 13142},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13155},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13155},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 446, col: 5, offset: 13155},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 10, offset: 13160},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 19, offset: 13169},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 22, offset: 13172},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 22, offset: 13172},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 30, offset: 13180},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 35, offset: 13185},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 35, offset: 13185},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 46, offset: 13196},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 52, offset: 13202},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 52, offset: 13202},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 450, col: 1, offset: 13338},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13346},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13346},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 451, col: 5, offset: 13346},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 11, offset: 13352},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 13, offset: 13354},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 17, offset: 13358},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 21, offset: 13362},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 28, offset: 13369},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 28, offset: 13369},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 39, offset: 13380},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 46, offset: 13387},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 46, offset: 13387},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 455, col: 1, offset: 13513},
			expr: &actionExpr{
				pos: position{line: 455, col: 7, offset: 13519},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 455, col: 7, offset: 13519},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 455, col: 8, offset: 13520},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 455, col: 8, offset: 13520},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 455, col: 18, offset: 13530},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 28, offset: 13540},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 457, col: 1, offset: 13577},
			expr: &choiceExpr{
				pos: position{line: 458, col: 5, offset: 13586},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 458, col: 5, offset: 13586},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 458, col: 5, offset: 13586},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 7, offset: 13588},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 459, col: 5, offset: 13623},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 459, col: 5, offset: 13623},
							expr: &charClassMatcher{
								pos:        position{line: 459, col: 5, offset: 13623},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 462, col: 1, offset: 13728},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 13739},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 463, col: 5, offset: 13739},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 463, col: 5, offset: 13739},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 463, col: 7, offset: 13741},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 463, col: 12, offset: 13746},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 463, col: 14, offset: 13748},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 17, offset: 13751},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 466, col: 1, offset: 13817},
			expr: &actionExpr{
				pos: position{line: 466, col: 9, offset: 13825},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 466, col: 9, offset: 13825},
					expr: &charClassMatcher{
						pos:        position{line: 466, col: 10, offset: 13826},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 468, col: 1, offset: 13872},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 13886},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 13886},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 469, col: 5, offset: 13886},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 469, col: 7, offset: 13888},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 15, offset: 13896},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 17, offset: 13898},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 23, offset: 13904},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 31, offset: 13912},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 469, col: 33, offset: 13914},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 38, offset: 13919},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 40, offset: 13921},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 46, offset: 13927},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 473, col: 1, offset: 14032},
			expr: &choiceExpr{
				pos: position{line: 474, col: 5, offset: 14045},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 474, col: 5, offset: 14045},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 474, col: 5, offset: 14045},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 474, col: 5, offset: 14045},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 474, col: 10, offset: 14050},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 474, col: 19, offset: 14059},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 474, col: 26, offset: 14066},
										expr: &ruleRefExpr{
											pos:  position{line: 474, col: 26, offset: 14066},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 474, col: 38, offset: 14078},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 474, col: 43, offset: 14083},
										expr: &ruleRefExpr{
											pos:  position{line: 474, col: 43, offset: 14083},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 477, col: 5, offset: 14192},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 477, col: 5, offset: 14192},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 10, offset: 14197},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 481, col: 1, offset: 14298},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14313},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14313},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 5, offset: 14313},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 482, col: 9, offset: 14317},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 16, offset: 14324},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 484, col: 1, offset: 14357},
			expr: &actionExpr{
				pos: position{line: 485, col: 5, offset: 14370},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 485, col: 5, offset: 14370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 485, col: 5, offset: 14370},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 485, col: 9, offset: 14374},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 14, offset: 14379},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 487, col: 1, offset: 14416},
			expr: &choiceExpr{
				pos: position{line: 488, col: 5, offset: 14429},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 488, col: 5, offset: 14429},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 489, col: 5, offset: 14448},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 490, col: 5, offset: 14458},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 492, col: 1, offset: 14472},
			expr: &actionExpr{
				pos: position{line: 493, col: 5, offset: 14491},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 493, col: 5, offset: 14491},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 493, col: 6, offset: 14492},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 493, col: 6, offset: 14492},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 493, col: 24, offset: 14510},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 493, col: 29, offset: 14515},
							expr: &choiceExpr{
								pos: position{line: 493, col: 30, offset: 14516},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 493, col: 30, offset: 14516},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 493, col: 47, offset: 14533},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 495, col: 1, offset: 14572},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14586},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14586},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 496, col: 5, offset: 14586},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 496, col: 7, offset: 14588},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 15, offset: 14596},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 17, offset: 14598},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 22, offset: 14603},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 33, offset: 14614},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 39, offset: 14620},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 500, col: 1, offset: 14730},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14744},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14744},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 501, col: 5, offset: 14744},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 501, col: 7, offset: 14746},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 16, offset: 14755},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 18, offset: 14757},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 22, offset: 14761},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 503, col: 1, offset: 14797},
			expr: &choiceExpr{
				pos: position{line: 504, col: 5, offset: 14813},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 504, col: 5, offset: 14813},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 504, col: 5, offset: 14813},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 14847},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 505, col: 5, offset: 14847},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 14883},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 506, col: 5, offset: 14883},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 508, col: 1, offset: 14909},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 14922},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 14922},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 509, col: 5, offset: 14922},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 509, col: 5, offset: 14922},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 509, col: 7, offset: 14924},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 509, col: 15, offset: 14932},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 509, col: 17, offset: 14934},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 14967},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 14967},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 510, col: 5, offset: 14967},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 510, col: 7, offset: 14969},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 510, col: 15, offset: 14977},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 510, col: 17, offset: 14979},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 512, col: 1, offset: 15011},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15024},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 513, col: 5, offset: 15024},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 519, col: 1, offset: 15218},
			expr: &actionExpr{
				pos: position{line: 520, col: 5, offset: 15234},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 520, col: 5, offset: 15234},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 520, col: 5, offset: 15234},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 520, col: 15, offset: 15244},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 520, col: 17, offset: 15246},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 22, offset: 15251},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 28, offset: 15257},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 32, offset: 15261},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 40, offset: 15269},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 520, col: 43, offset: 15272},
								expr: &ruleRefExpr{
									pos:  position{line: 520, col: 43, offset: 15272},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 524, col: 1, offset: 15384},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 15398},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 15398},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 5, offset: 15398},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 13, offset: 15406},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 15, offset: 15408},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 21, offset: 15414},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 529, col: 1, offset: 15497},
			expr: &choiceExpr{
				pos: position{line: 530, col: 5, offset: 15510},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 15510},
						run: (*parser).callonOverProc2,
						expr: &labeledExpr{
							pos:   position{line: 530, col: 5, offset: 15510},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 10, offset: 15515},
								name: "ScopedOver",
							},
						},
					},
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 15620},
						run: (*parser).callonOverProc5,
						expr: &seqExpr{
							pos: position{line: 533, col: 5, offset: 15620},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 533, col: 5, offset: 15620},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 533, col: 12, offset: 15627},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 533, col: 14, offset: 15629},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 533, col: 20, offset: 15635},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 537, col: 1, offset: 15743},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15758},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15758},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 5, offset: 15758},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 12, offset: 15765},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 14, offset: 15767},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 20, offset: 15773},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 26, offset: 15779},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 29, offset: 15782},
								name: "As",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 32, offset: 15785},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 35, offset: 15788},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 41, offset: 15794},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "OverWith",
			pos:  position{line: 542, col: 1, offset: 15904},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 15917},
				run: (*parser).callonOverWith1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 15917},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 5, offset: 15917},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 12, offset: 15924},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 14, offset: 15926},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 20, offset: 15932},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 26, offset: 15938},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 543, col: 28, offset: 15940},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 35, offset: 15947},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 37, offset: 15949},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 44, offset: 15956},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 59, offset: 15971},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 62, offset: 15974},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 68, offset: 15980},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "As",
			pos:  position{line: 547, col: 1, offset: 16152},
			expr: &choiceExpr{
				pos: position{line: 548, col: 5, offset: 16159},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 548, col: 5, offset: 16159},
						run: (*parser).callonAs2,
						expr: &seqExpr{
							pos: position{line: 548, col: 5, offset: 16159},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 548, col: 5, offset: 16159},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 548, col: 7, offset: 16161},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 12, offset: 16166},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 548, col: 14, offset: 16168},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 17, offset: 16171},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 16209},
						run: (*parser).callonAs9,
						expr: &litMatcher{
							pos:        position{line: 549, col: 5, offset: 16209},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 551, col: 1, offset: 16232},
			expr: &choiceExpr{
				pos: position{line: 552, col: 5, offset: 16244},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 552, col: 5, offset: 16244},
						run: (*parser).callonLetProc2,
						expr: &seqExpr{
							pos: position{line: 552, col: 5, offset: 16244},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 552, col: 5, offset: 16244},
									val:        "let",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 552, col: 11, offset: 16250},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 552, col: 13, offset: 16252},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 552, col: 20, offset: 16259},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 552, col: 35, offset: 16274},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 552, col: 38, offset: 16277},
									label: "over",
									expr: &ruleRefExpr{
										pos:  position{line: 552, col: 43, offset: 16282},
										name: "ScopedOver",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 555, col: 5, offset: 16390},
						name: "OverWith",
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 557, col: 1, offset: 16400},
			expr: &actionExpr{
				pos: position{line: 557, col: 9, offset: 16408},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 557, col: 9, offset: 16408},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 557, col: 9, offset: 16408},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 557, col: 14, offset: 16413},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 557, col: 17, offset: 16416},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 557, col: 21, offset: 16420},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 24, offset: 16423},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 28, offset: 16427},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 557, col: 39, offset: 16438},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 557, col: 42, offset: 16441},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 559, col: 1, offset: 16466},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 16485},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 16485},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 16485},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 11, offset: 16491},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 25, offset: 16505},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 30, offset: 16510},
								expr: &actionExpr{
									pos: position{line: 560, col: 31, offset: 16511},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 560, col: 31, offset: 16511},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 560, col: 31, offset: 16511},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 560, col: 34, offset: 16514},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 560, col: 38, offset: 16518},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 41, offset: 16521},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 43, offset: 16523},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 564, col: 1, offset: 16641},
			expr: &choiceExpr{
				pos: position{line: 565, col: 5, offset: 16659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 565, col: 5, offset: 16659},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 565, col: 5, offset: 16659},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 565, col: 5, offset: 16659},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 565, col: 8, offset: 16662},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 565, col: 23, offset: 16677},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 565, col: 26, offset: 16680},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 565, col: 30, offset: 16684},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 565, col: 33, offset: 16687},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 565, col: 38, offset: 16692},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16774},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 568, col: 5, offset: 16774},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 8, offset: 16777},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 572, col: 1, offset: 16907},
			expr: &actionExpr{
				pos: position{line: 573, col: 5, offset: 16921},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 573, col: 5, offset: 16921},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 573, col: 5, offset: 16921},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 13, offset: 16929},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 15, offset: 16931},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 21, offset: 16937},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 577, col: 1, offset: 17021},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17033},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 578, col: 5, offset: 17033},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 7, offset: 17035},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 10, offset: 17038},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 12, offset: 17040},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 16, offset: 17044},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 580, col: 1, offset: 17069},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 17079},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 17079},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 581, col: 5, offset: 17079},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 7, offset: 17081},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 10, offset: 17084},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 12, offset: 17086},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 16, offset: 17090},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 585, col: 1, offset: 17141},
			expr: &ruleRefExpr{
				pos:  position{line: 585, col: 8, offset: 17148},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 587, col: 1, offset: 17159},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17169},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17169},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 17169},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 17175},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 16, offset: 17180},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 588, col: 21, offset: 17185},
								expr: &actionExpr{
									pos: position{line: 588, col: 22, offset: 17186},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 588, col: 22, offset: 17186},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 588, col: 22, offset: 17186},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 588, col: 25, offset: 17189},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 588, col: 29, offset: 17193},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 32, offset: 17196},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 37, offset: 17201},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 592, col: 1, offset: 17313},
			expr: &ruleRefExpr{
				pos:  position{line: 592, col: 13, offset: 17325},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 594, col: 1, offset: 17331},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 17346},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 17346},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 17346},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 11, offset: 17352},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 21, offset: 17362},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 595, col: 26, offset: 17367},
								expr: &seqExpr{
									pos: position{line: 595, col: 27, offset: 17368},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 595, col: 27, offset: 17368},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 595, col: 30, offset: 17371},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 595, col: 34, offset: 17375},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 595, col: 37, offset: 17378},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 605, col: 1, offset: 17577},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17593},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17593},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 11, offset: 17599},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 22, offset: 17610},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 606, col: 27, offset: 17615},
								expr: &actionExpr{
									pos: position{line: 606, col: 28, offset: 17616},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 606, col: 28, offset: 17616},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 606, col: 28, offset: 17616},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 606, col: 31, offset: 17619},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 606, col: 35, offset: 17623},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 606, col: 38, offset: 17626},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 606, col: 40, offset: 17628},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 610, col: 1, offset: 17739},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 17754},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 17754},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 611, col: 5, offset: 17754},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 9, offset: 17758},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 14, offset: 17763},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 611, col: 17, offset: 17766},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 22, offset: 17771},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 25, offset: 17774},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 29, offset: 17778},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 613, col: 1, offset: 17869},
			expr: &ruleRefExpr{
				pos:  position{line: 613, col: 8, offset: 17876},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 615, col: 1, offset: 17893},
			expr: &choiceExpr{
				pos: position{line: 616, col: 5, offset: 17913},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 616, col: 5, offset: 17913},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 616, col: 5, offset: 17913},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 616, col: 5, offset: 17913},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 15, offset: 17923},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 616, col: 29, offset: 17937},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 616, col: 32, offset: 17940},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 616, col: 36, offset: 17944},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 616, col: 39, offset: 17947},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 50, offset: 17958},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 616, col: 55, offset: 17963},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 616, col: 58, offset: 17966},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 616, col: 62, offset: 17970},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 616, col: 65, offset: 17973},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 76, offset: 17984},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 619, col: 5, offset: 18124},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 621, col: 1, offset: 18139},
			expr: &actionExpr{
				pos: position{line: 622, col: 5, offset: 18157},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 622, col: 5, offset: 18157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 622, col: 5, offset: 18157},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 11, offset: 18163},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 623, col: 5, offset: 18182},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 623, col: 10, offset: 18187},
								expr: &actionExpr{
									pos: position{line: 623, col: 11, offset: 18188},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 623, col: 11, offset: 18188},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 623, col: 11, offset: 18188},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 623, col: 14, offset: 18191},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 623, col: 17, offset: 18194},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 623, col: 25, offset: 18202},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 623, col: 28, offset: 18205},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 623, col: 33, offset: 18210},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 627, col: 1, offset: 18328},
			expr: &actionExpr{
				pos: position{line: 628, col: 5, offset: 18347},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 628, col: 5, offset: 18347},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 628, col: 5, offset: 18347},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 18353},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18377},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 10, offset: 18382},
								expr: &actionExpr{
									pos: position{line: 629, col: 11, offset: 18383},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 629, col: 11, offset: 18383},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 629, col: 11, offset: 18383},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 629, col: 14, offset: 18386},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 629, col: 17, offset: 18389},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 629, col: 26, offset: 18398},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 629, col: 29, offset: 18401},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 629, col: 34, offset: 18406},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 633, col: 1, offset: 18529},
			expr: &choiceExpr{
				pos: position{line: 634, col: 5, offset: 18553},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 634, col: 5, offset: 18553},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 635, col: 5, offset: 18570},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 635, col: 5, offset: 18570},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 635, col: 5, offset: 18570},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 635, col: 11, offset: 18576},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 636, col: 5, offset: 18593},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 636, col: 10, offset: 18598},
										expr: &actionExpr{
											pos: position{line: 636, col: 11, offset: 18599},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 636, col: 11, offset: 18599},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 636, col: 11, offset: 18599},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 636, col: 14, offset: 18602},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 636, col: 19, offset: 18607},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 636, col: 38, offset: 18626},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 636, col: 41, offset: 18629},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 636, col: 46, offset: 18634},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 640, col: 1, offset: 18752},
			expr: &choiceExpr{
				pos: position{line: 641, col: 5, offset: 18773},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 18773},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 641, col: 5, offset: 18773},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 642, col: 5, offset: 18802},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 642, col: 5, offset: 18802},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 644, col: 1, offset: 18839},
			expr: &choiceExpr{
				pos: position{line: 645, col: 5, offset: 18862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 645, col: 5, offset: 18862},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 646, col: 5, offset: 18883},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 646, col: 5, offset: 18883},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 646, col: 5, offset: 18883},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 646, col: 10, offset: 18888},
									expr: &ruleRefExpr{
										pos:  position{line: 646, col: 11, offset: 18889},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 648, col: 1, offset: 18936},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 18953},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 18953},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 18953},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 11, offset: 18959},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 18976},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 10, offset: 18981},
								expr: &actionExpr{
									pos: position{line: 650, col: 11, offset: 18982},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 650, col: 11, offset: 18982},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 650, col: 11, offset: 18982},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 650, col: 14, offset: 18985},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 650, col: 17, offset: 18988},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 650, col: 34, offset: 19005},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 650, col: 37, offset: 19008},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 650, col: 42, offset: 19013},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 654, col: 1, offset: 19129},
			expr: &actionExpr{
				pos: position{line: 654, col: 20, offset: 19148},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 654, col: 21, offset: 19149},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 654, col: 21, offset: 19149},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 654, col: 28, offset: 19156},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 654, col: 34, offset: 19162},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 654, col: 41, offset: 19169},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 656, col: 1, offset: 19206},
			expr: &actionExpr{
				pos: position{line: 657, col: 5, offset: 19223},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 657, col: 5, offset: 19223},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 19223},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 11, offset: 19229},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 19252},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 10, offset: 19257},
								expr: &actionExpr{
									pos: position{line: 658, col: 11, offset: 19258},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 658, col: 11, offset: 19258},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 658, col: 11, offset: 19258},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 14, offset: 19261},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 658, col: 17, offset: 19264},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 658, col: 34, offset: 19281},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 37, offset: 19284},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 658, col: 42, offset: 19289},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 662, col: 1, offset: 19411},
			expr: &actionExpr{
				pos: position{line: 662, col: 20, offset: 19430},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 662, col: 21, offset: 19431},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 662, col: 21, offset: 19431},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 662, col: 27, offset: 19437},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 664, col: 1, offset: 19474},
			expr: &actionExpr{
				pos: position{line: 665, col: 5, offset: 19497},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 665, col: 5, offset: 19497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 665, col: 5, offset: 19497},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 11, offset: 19503},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 5, offset: 19515},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 666, col: 10, offset: 19520},
								expr: &actionExpr{
									pos: position{line: 666, col: 11, offset: 19521},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 666, col: 11, offset: 19521},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 666, col: 11, offset: 19521},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 666, col: 14, offset: 19524},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 666, col: 17, offset: 19527},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 666, col: 40, offset: 19550},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 666, col: 43, offset: 19553},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 666, col: 48, offset: 19558},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 670, col: 1, offset: 19669},
			expr: &actionExpr{
				pos: position{line: 670, col: 26, offset: 19694},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 670, col: 27, offset: 19695},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 670, col: 27, offset: 19695},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 670, col: 33, offset: 19701},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 670, col: 39, offset: 19707},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 672, col: 1, offset: 19744},
			expr: &choiceExpr{
				pos: position{line: 673, col: 5, offset: 19756},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 19756},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 19756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 673, col: 5, offset: 19756},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 9, offset: 19760},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 673, col: 12, offset: 19763},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 14, offset: 19765},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 676, col: 5, offset: 19874},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 678, col: 1, offset: 19884},
			expr: &choiceExpr{
				pos: position{line: 679, col: 5, offset: 19897},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 679, col: 5, offset: 19897},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 680, col: 5, offset: 19911},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 680, col: 5, offset: 19911},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 680, col: 5, offset: 19911},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 19917},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 680, col: 16, offset: 19922},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 680, col: 21, offset: 19927},
										expr: &ruleRefExpr{
											pos:  position{line: 680, col: 22, offset: 19928},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 19999},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 683, col: 5, offset: 19999},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 683, col: 5, offset: 19999},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 20005},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 683, col: 20, offset: 20014},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 683, col: 25, offset: 20019},
										expr: &ruleRefExpr{
											pos:  position{line: 683, col: 26, offset: 20020},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 686, col: 5, offset: 20091},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 5, offset: 20105},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 689, col: 1, offset: 20114},
			expr: &seqExpr{
				pos: position{line: 689, col: 13, offset: 20126},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 689, col: 13, offset: 20126},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 689, col: 22, offset: 20135},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 689, col: 25, offset: 20138},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 691, col: 1, offset: 20143},
			expr: &choiceExpr{
				pos: position{line: 692, col: 5, offset: 20156},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 692, col: 5, offset: 20156},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 693, col: 5, offset: 20166},
						val:        "search",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 694, col: 5, offset: 20179},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 695, col: 5, offset: 20192},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 697, col: 1, offset: 20200},
			expr: &actionExpr{
				pos: position{line: 698, col: 5, offset: 20214},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 698, col: 5, offset: 20214},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 698, col: 5, offset: 20214},
							val:        "search",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 14, offset: 20223},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 698, col: 17, offset: 20226},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 698, col: 21, offset: 20230},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 26, offset: 20235},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 698, col: 40, offset: 20249},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 700, col: 1, offset: 20275},
			expr: &actionExpr{
				pos: position{line: 701, col: 5, offset: 20284},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 701, col: 5, offset: 20284},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 20284},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 9, offset: 20288},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 18, offset: 20297},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 701, col: 21, offset: 20300},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 25, offset: 20304},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 28, offset: 20307},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 33, offset: 20312},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 38, offset: 20317},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 701, col: 41, offset: 20320},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 705, col: 1, offset: 20417},
			expr: &actionExpr{
				pos: position{line: 706, col: 5, offset: 20430},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 706, col: 5, offset: 20430},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 706, col: 5, offset: 20430},
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 6, offset: 20431},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 16, offset: 20441},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 19, offset: 20444},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 34, offset: 20459},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 37, offset: 20462},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 41, offset: 20466},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 44, offset: 20469},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 49, offset: 20474},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 63, offset: 20488},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 66, offset: 20491},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 706, col: 70, offset: 20495},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 706, col: 76, offset: 20501},
								expr: &ruleRefExpr{
									pos:  position{line: 706, col: 76, offset: 20501},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 710, col: 1, offset: 20622},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20640},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 711, col: 5, offset: 20640},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20650},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 712, col: 5, offset: 20650},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 714, col: 1, offset: 20686},
			expr: &actionExpr{
				pos: position{line: 715, col: 5, offset: 20696},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 715, col: 5, offset: 20696},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 715, col: 5, offset: 20696},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 11, offset: 20702},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 715, col: 16, offset: 20707},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 715, col: 21, offset: 20712},
								expr: &actionExpr{
									pos: position{line: 715, col: 22, offset: 20713},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 715, col: 22, offset: 20713},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 715, col: 22, offset: 20713},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 715, col: 25, offset: 20716},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 715, col: 29, offset: 20720},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 715, col: 32, offset: 20723},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 715, col: 34, offset: 20725},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 719, col: 1, offset: 20834},
			expr: &actionExpr{
				pos: position{line: 720, col: 5, offset: 20848},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 720, col: 5, offset: 20848},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 720, col: 5, offset: 20848},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 6, offset: 20849},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 10, offset: 20853},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 16, offset: 20859},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 27, offset: 20870},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 720, col: 32, offset: 20875},
								expr: &ruleRefExpr{
									pos:  position{line: 720, col: 33, offset: 20876},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 724, col: 1, offset: 20944},
			expr: &choiceExpr{
				pos: position{line: 725, col: 5, offset: 20954},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 725, col: 5, offset: 20954},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 725, col: 5, offset: 20954},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 725, col: 5, offset: 20954},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 725, col: 9, offset: 20958},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 14, offset: 20963},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 725, col: 27, offset: 20976},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 725, col: 30, offset: 20979},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 725, col: 34, offset: 20983},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 725, col: 37, offset: 20986},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 40, offset: 20989},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 725, col: 53, offset: 21002},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 21173},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 731, col: 5, offset: 21173},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 731, col: 5, offset: 21173},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 731, col: 9, offset: 21177},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 731, col: 12, offset: 21180},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 731, col: 16, offset: 21184},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 731, col: 19, offset: 21187},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 731, col: 22, offset: 21190},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 731, col: 35, offset: 21203},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 737, col: 5, offset: 21374},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 737, col: 5, offset: 21374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 737, col: 5, offset: 21374},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 737, col: 9, offset: 21378},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 737, col: 14, offset: 21383},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 737, col: 27, offset: 21396},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 737, col: 30, offset: 21399},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 737, col: 34, offset: 21403},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 737, col: 37, offset: 21406},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21579},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 21579},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 743, col: 5, offset: 21579},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 743, col: 9, offset: 21583},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 14, offset: 21588},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 743, col: 19, offset: 21593},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21642},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 744, col: 5, offset: 21642},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 744, col: 5, offset: 21642},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 744, col: 9, offset: 21646},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 12, offset: 21649},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 746, col: 1, offset: 21700},
			expr: &choiceExpr{
				pos: position{line: 747, col: 5, offset: 21712},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 747, col: 5, offset: 21712},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 748, col: 5, offset: 21723},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 749, col: 5, offset: 21733},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 21741},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 751, col: 5, offset: 21749},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 21761},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 752, col: 5, offset: 21761},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 752, col: 5, offset: 21761},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 752, col: 9, offset: 21765},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 752, col: 12, offset: 21768},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 752, col: 17, offset: 21773},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 752, col: 22, offset: 21778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 752, col: 25, offset: 21781},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 754, col: 1, offset: 21807},
			expr: &actionExpr{
				pos: position{line: 755, col: 5, offset: 21818},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 755, col: 5, offset: 21818},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 755, col: 5, offset: 21818},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 9, offset: 21822},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 12, offset: 21825},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 18, offset: 21831},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 30, offset: 21843},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 33, offset: 21846},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 759, col: 1, offset: 21936},
			expr: &choiceExpr{
				pos: position{line: 760, col: 5, offset: 21952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 760, col: 5, offset: 21952},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 760, col: 5, offset: 21952},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 760, col: 5, offset: 21952},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 760, col: 11, offset: 21958},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 760, col: 22, offset: 21969},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 760, col: 27, offset: 21974},
										expr: &ruleRefExpr{
											pos:  position{line: 760, col: 27, offset: 21974},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 22073},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 763, col: 5, offset: 22073},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 765, col: 1, offset: 22109},
			expr: &actionExpr{
				pos: position{line: 765, col: 18, offset: 22126},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 765, col: 18, offset: 22126},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 765, col: 18, offset: 22126},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 765, col: 21, offset: 22129},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 765, col: 25, offset: 22133},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 765, col: 28, offset: 22136},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 33, offset: 22141},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 767, col: 1, offset: 22174},
			expr: &choiceExpr{
				pos: position{line: 768, col: 5, offset: 22189},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 768, col: 5, offset: 22189},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 769, col: 5, offset: 22200},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 770, col: 5, offset: 22210},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 772, col: 1, offset: 22222},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 22233},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 22233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 773, col: 5, offset: 22233},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 11, offset: 22239},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 14, offset: 22242},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 19, offset: 22247},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 777, col: 1, offset: 22333},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 22343},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 22343},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 778, col: 5, offset: 22343},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 10, offset: 22348},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 20, offset: 22358},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 778, col: 23, offset: 22361},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 27, offset: 22365},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 778, col: 30, offset: 22368},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 36, offset: 22374},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 782, col: 1, offset: 22474},
			expr: &actionExpr{
				pos: position{line: 783, col: 5, offset: 22484},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 783, col: 5, offset: 22484},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 783, col: 5, offset: 22484},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 9, offset: 22488},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 783, col: 12, offset: 22491},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 18, offset: 22497},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 32, offset: 22511},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 783, col: 35, offset: 22514},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 787, col: 1, offset: 22604},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 22612},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 788, col: 5, offset: 22612},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 788, col: 5, offset: 22612},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 10, offset: 22617},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 788, col: 13, offset: 22620},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 19, offset: 22626},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 33, offset: 22640},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 788, col: 36, offset: 22643},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 792, col: 1, offset: 22732},
			expr: &actionExpr{
				pos: position{line: 793, col: 5, offset: 22740},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 793, col: 5, offset: 22740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 793, col: 5, offset: 22740},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 793, col: 10, offset: 22745},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 793, col: 13, offset: 22748},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 19, offset: 22754},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 793, col: 27, offset: 22762},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 793, col: 30, offset: 22765},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 797, col: 1, offset: 22856},
			expr: &choiceExpr{
				pos: position{line: 798, col: 5, offset: 22868},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 22868},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 22868},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 798, col: 5, offset: 22868},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 798, col: 11, offset: 22874},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 798, col: 17, offset: 22880},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 798, col: 22, offset: 22885},
										expr: &ruleRefExpr{
											pos:  position{line: 798, col: 22, offset: 22885},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 801, col: 5, offset: 22979},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 801, col: 5, offset: 22979},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 804, col: 1, offset: 23016},
			expr: &actionExpr{
				pos: position{line: 804, col: 13, offset: 23028},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 804, col: 13, offset: 23028},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 804, col: 13, offset: 23028},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 804, col: 16, offset: 23031},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 20, offset: 23035},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 23, offset: 23038},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 25, offset: 23040},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 806, col: 1, offset: 23065},
			expr: &actionExpr{
				pos: position{line: 807, col: 5, offset: 23075},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 807, col: 5, offset: 23075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 807, col: 5, offset: 23075},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 9, offset: 23079},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 807, col: 14, offset: 23084},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 807, col: 17, offset: 23087},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 807, col: 21, offset: 23091},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 807, col: 24, offset: 23094},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 30, offset: 23100},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 813, col: 1, offset: 23207},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 23219},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 814, col: 5, offset: 23219},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 814, col: 5, offset: 23219},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 15, offset: 23229},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 23243},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 815, col: 10, offset: 23248},
								expr: &ruleRefExpr{
									pos:  position{line: 815, col: 10, offset: 23248},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 5, offset: 23261},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 816, col: 11, offset: 23267},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 11, offset: 23267},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 5, offset: 23281},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 817, col: 11, offset: 23287},
								expr: &ruleRefExpr{
									pos:  position{line: 817, col: 11, offset: 23287},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 5, offset: 23301},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 818, col: 13, offset: 23309},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 13, offset: 23309},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 819, col: 5, offset: 23325},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 819, col: 12, offset: 23332},
								expr: &ruleRefExpr{
									pos:  position{line: 819, col: 12, offset: 23332},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 820, col: 5, offset: 23347},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 820, col: 13, offset: 23355},
								expr: &ruleRefExpr{
									pos:  position{line: 820, col: 13, offset: 23355},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 821, col: 5, offset: 23371},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 23377},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 845, col: 1, offset: 23744},
			expr: &choiceExpr{
				pos: position{line: 846, col: 5, offset: 23758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 846, col: 5, offset: 23758},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 846, col: 5, offset: 23758},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 846, col: 5, offset: 23758},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 846, col: 12, offset: 23765},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 846, col: 14, offset: 23767},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 23795},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 847, col: 5, offset: 23795},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 847, col: 5, offset: 23795},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 847, col: 12, offset: 23802},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 847, col: 14, offset: 23804},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 26, offset: 23816},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 849, col: 1, offset: 23860},
			expr: &choiceExpr{
				pos: position{line: 850, col: 5, offset: 23878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 850, col: 5, offset: 23878},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 850, col: 5, offset: 23878},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 850, col: 5, offset: 23878},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 850, col: 9, offset: 23882},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 850, col: 14, offset: 23887},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 850, col: 16, offset: 23889},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 850, col: 19, offset: 23892},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 850, col: 21, offset: 23894},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 850, col: 25, offset: 23898},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 23992},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 851, col: 5, offset: 23992},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 10, offset: 23997},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 853, col: 1, offset: 24089},
			expr: &actionExpr{
				pos: position{line: 854, col: 5, offset: 24108},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 854, col: 5, offset: 24108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 854, col: 5, offset: 24108},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 11, offset: 24114},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 854, col: 25, offset: 24128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 854, col: 30, offset: 24133},
								expr: &actionExpr{
									pos: position{line: 854, col: 31, offset: 24134},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 854, col: 31, offset: 24134},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 854, col: 31, offset: 24134},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 854, col: 34, offset: 24137},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 854, col: 38, offset: 24141},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 854, col: 41, offset: 24144},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 854, col: 46, offset: 24149},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 858, col: 1, offset: 24270},
			expr: &choiceExpr{
				pos: position{line: 859, col: 5, offset: 24282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 24282},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 859, col: 5, offset: 24282},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 859, col: 5, offset: 24282},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 7, offset: 24284},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 12, offset: 24289},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 859, col: 14, offset: 24291},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 859, col: 20, offset: 24297},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 859, col: 29, offset: 24306},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 859, col: 35, offset: 24312},
										expr: &ruleRefExpr{
											pos:  position{line: 859, col: 35, offset: 24312},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 862, col: 5, offset: 24407},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 862, col: 5, offset: 24407},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 862, col: 5, offset: 24407},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 7, offset: 24409},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 12, offset: 24414},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 862, col: 14, offset: 24416},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 864, col: 1, offset: 24441},
			expr: &choiceExpr{
				pos: position{line: 865, col: 5, offset: 24454},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 24454},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 865, col: 5, offset: 24454},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 865, col: 5, offset: 24454},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 865, col: 7, offset: 24456},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 865, col: 10, offset: 24459},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 865, col: 12, offset: 24461},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 865, col: 15, offset: 24464},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24492},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 24492},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 866, col: 5, offset: 24492},
									name: "_",
								},
								&notExpr{
									pos: position{line: 866, col: 7, offset: 24494},
									expr: &seqExpr{
										pos: position{line: 866, col: 9, offset: 24496},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 866, col: 9, offset: 24496},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 866, col: 27, offset: 24514},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 30, offset: 24517},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 33, offset: 24520},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 868, col: 1, offset: 24545},
			expr: &ruleRefExpr{
				pos:  position{line: 869, col: 5, offset: 24558},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 871, col: 1, offset: 24564},
			expr: &actionExpr{
				pos: position{line: 872, col: 5, offset: 24577},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 872, col: 5, offset: 24577},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 872, col: 5, offset: 24577},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 11, offset: 24583},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 872, col: 19, offset: 24591},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 872, col: 24, offset: 24596},
								expr: &actionExpr{
									pos: position{line: 872, col: 25, offset: 24597},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 872, col: 25, offset: 24597},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 872, col: 30, offset: 24602},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 876, col: 1, offset: 24717},
			expr: &actionExpr{
				pos: position{line: 877, col: 5, offset: 24729},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 877, col: 5, offset: 24729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 877, col: 5, offset: 24729},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 11, offset: 24735},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 24, offset: 24748},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 26, offset: 24750},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 31, offset: 24755},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 33, offset: 24757},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 39, offset: 24763},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 877, col: 48, offset: 24772},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 877, col: 54, offset: 24778},
								expr: &ruleRefExpr{
									pos:  position{line: 877, col: 54, offset: 24778},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 64, offset: 24788},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 66, offset: 24790},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 69, offset: 24793},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 71, offset: 24795},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 79, offset: 24803},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 87, offset: 24811},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 877, col: 90, offset: 24814},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 94, offset: 24818},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 97, offset: 24821},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 106, offset: 24830},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 896, col: 1, offset: 25065},
			expr: &choiceExpr{
				pos: position{line: 897, col: 5, offset: 25082},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 25082},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 897, col: 5, offset: 25082},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 897, col: 5, offset: 25082},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 897, col: 7, offset: 25084},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 897, col: 14, offset: 25091},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 897, col: 14, offset: 25091},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 897, col: 21, offset: 25098},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 897, col: 29, offset: 25106},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 897, col: 36, offset: 25113},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 25146},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 898, col: 5, offset: 25146},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 900, col: 1, offset: 25174},
			expr: &actionExpr{
				pos: position{line: 901, col: 5, offset: 25187},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 901, col: 5, offset: 25187},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 901, col: 5, offset: 25187},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 7, offset: 25189},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 13, offset: 25195},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 15, offset: 25197},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 20, offset: 25202},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 903, col: 1, offset: 25238},
			expr: &actionExpr{
				pos: position{line: 904, col: 5, offset: 25253},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 904, col: 5, offset: 25253},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 904, col: 5, offset: 25253},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 7, offset: 25255},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 13, offset: 25261},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 15, offset: 25263},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 18, offset: 25266},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 904, col: 20, offset: 25268},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 28, offset: 25276},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 906, col: 1, offset: 25312},
			expr: &actionExpr{
				pos: position{line: 907, col: 5, offset: 25326},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 907, col: 5, offset: 25326},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 907, col: 5, offset: 25326},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 7, offset: 25328},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 14, offset: 25335},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 16, offset: 25337},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 21, offset: 25342},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 909, col: 1, offset: 25378},
			expr: &actionExpr{
				pos: position{line: 910, col: 5, offset: 25393},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 910, col: 5, offset: 25393},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 910, col: 5, offset: 25393},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 7, offset: 25395},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 13, offset: 25401},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 15, offset: 25403},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 18, offset: 25406},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 910, col: 20, offset: 25408},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 25, offset: 25413},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 31, offset: 25419},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 37, offset: 25425},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 914, col: 1, offset: 25535},
			expr: &choiceExpr{
				pos: position{line: 915, col: 5, offset: 25548},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 25548},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 25548},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 915, col: 5, offset: 25548},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 915, col: 7, offset: 25550},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 915, col: 12, offset: 25555},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 915, col: 12, offset: 25555},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 915, col: 18, offset: 25561},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 25591},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 916, col: 5, offset: 25591},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 918, col: 1, offset: 25617},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 25630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 25630},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 25630},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 919, col: 5, offset: 25630},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 7, offset: 25632},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 13, offset: 25638},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 919, col: 15, offset: 25640},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 21, offset: 25646},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 25677},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 920, col: 5, offset: 25677},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 922, col: 1, offset: 25699},
			expr: &actionExpr{
				pos: position{line: 922, col: 10, offset: 25708},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 922, col: 10, offset: 25708},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 923, col: 1, offset: 25743},
			expr: &actionExpr{
				pos: position{line: 923, col: 6, offset: 25748},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 923, col: 6, offset: 25748},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 924, col: 1, offset: 25775},
			expr: &actionExpr{
				pos: position{line: 924, col: 8, offset: 25782},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 924, col: 8, offset: 25782},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 925, col: 1, offset: 25813},
			expr: &actionExpr{
				pos: position{line: 925, col: 8, offset: 25820},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 8, offset: 25820},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 926, col: 1, offset: 25851},
			expr: &actionExpr{
				pos: position{line: 926, col: 9, offset: 25859},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 9, offset: 25859},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 927, col: 1, offset: 25892},
			expr: &actionExpr{
				pos: position{line: 927, col: 9, offset: 25900},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 9, offset: 25900},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 928, col: 1, offset: 25933},
			expr: &actionExpr{
				pos: position{line: 928, col: 6, offset: 25938},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 6, offset: 25938},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 929, col: 1, offset: 25965},
			expr: &actionExpr{
				pos: position{line: 929, col: 10, offset: 25974},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 929, col: 10, offset: 25974},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 930, col: 1, offset: 26009},
			expr: &actionExpr{
				pos: position{line: 930, col: 9, offset: 26017},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 930, col: 9, offset: 26017},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 931, col: 1, offset: 26050},
			expr: &actionExpr{
				pos: position{line: 931, col: 6, offset: 26055},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 931, col: 6, offset: 26055},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 932, col: 1, offset: 26082},
			expr: &actionExpr{
				pos: position{line: 932, col: 9, offset: 26090},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 932, col: 9, offset: 26090},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 933, col: 1, offset: 26123},
			expr: &actionExpr{
				pos: position{line: 933, col: 7, offset: 26129},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 933, col: 7, offset: 26129},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 934, col: 1, offset: 26158},
			expr: &actionExpr{
				pos: position{line: 934, col: 8, offset: 26165},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 934, col: 8, offset: 26165},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 935, col: 1, offset: 26196},
			expr: &actionExpr{
				pos: position{line: 935, col: 8, offset: 26203},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 935, col: 8, offset: 26203},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 936, col: 1, offset: 26234},
			expr: &actionExpr{
				pos: position{line: 936, col: 8, offset: 26241},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 936, col: 8, offset: 26241},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 937, col: 1, offset: 26272},
			expr: &actionExpr{
				pos: position{line: 937, col: 9, offset: 26280},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 937, col: 9, offset: 26280},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 938, col: 1, offset: 26313},
			expr: &actionExpr{
				pos: position{line: 938, col: 9, offset: 26321},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 938, col: 9, offset: 26321},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 940, col: 1, offset: 26355},
			expr: &choiceExpr{
				pos: position{line: 941, col: 5, offset: 26377},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 941, col: 5, offset: 26377},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 14, offset: 26386},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 19, offset: 26391},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 27, offset: 26399},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 34, offset: 26406},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 42, offset: 26414},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 50, offset: 26422},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 59, offset: 26431},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 67, offset: 26439},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 75, offset: 26447},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 945, col: 1, offset: 26473},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 26485},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 946, col: 5, offset: 26485},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 5, offset: 26501},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 5, offset: 26521},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 5, offset: 26539},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 26558},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 26575},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 5, offset: 26588},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 5, offset: 26597},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 26614},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 5, offset: 26633},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 956, col: 5, offset: 26652},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 958, col: 1, offset: 26665},
			expr: &choiceExpr{
				pos: position{line: 959, col: 5, offset: 26683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 26683},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 26683},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 5, offset: 26683},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 7, offset: 26685},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 959, col: 14, offset: 26692},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 15, offset: 26693},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 26808},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 962, col: 5, offset: 26808},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 962, col: 7, offset: 26810},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 966, col: 1, offset: 26914},
			expr: &choiceExpr{
				pos: position{line: 967, col: 5, offset: 26933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 26933},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 967, col: 5, offset: 26933},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 967, col: 5, offset: 26933},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 7, offset: 26935},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 967, col: 11, offset: 26939},
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 12, offset: 26940},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 27054},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 970, col: 5, offset: 27054},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 7, offset: 27056},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 974, col: 1, offset: 27155},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 27172},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 975, col: 5, offset: 27172},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 975, col: 7, offset: 27174},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 979, col: 1, offset: 27287},
			expr: &actionExpr{
				pos: position{line: 980, col: 5, offset: 27306},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 980, col: 5, offset: 27306},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 980, col: 7, offset: 27308},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 984, col: 1, offset: 27417},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 27436},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 27436},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 985, col: 5, offset: 27436},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 27549},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 986, col: 5, offset: 27549},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 988, col: 1, offset: 27660},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 27676},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 989, col: 5, offset: 27676},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 991, col: 1, offset: 27782},
			expr: &actionExpr{
				pos: position{line: 992, col: 5, offset: 27799},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 992, col: 5, offset: 27799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 992, col: 5, offset: 27799},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 992, col: 10, offset: 27804},
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 10, offset: 27804},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 996, col: 1, offset: 27919},
			expr: &actionExpr{
				pos: position{line: 997, col: 5, offset: 27935},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 997, col: 5, offset: 27935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 997, col: 5, offset: 27935},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 997, col: 9, offset: 27939},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 13, offset: 27943},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 997, col: 18, offset: 27948},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1001, col: 1, offset: 28037},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 5, offset: 28050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1002, col: 5, offset: 28050},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 5, offset: 28066},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1005, col: 1, offset: 28081},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 5, offset: 28090},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1006, col: 5, offset: 28090},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 28106},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 5, offset: 28124},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1010, col: 1, offset: 28137},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 5, offset: 28155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 28155},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1011, col: 5, offset: 28155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1011, col: 5, offset: 28155},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1011, col: 10, offset: 28160},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1011, col: 24, offset: 28174},
									expr: &ruleRefExpr{
										pos:  position{line: 1011, col: 25, offset: 28175},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 28215},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 28215},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1012, col: 5, offset: 28215},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 10, offset: 28220},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 25, offset: 28235},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1012, col: 28, offset: 28238},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 32, offset: 28242},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 35, offset: 28245},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 39, offset: 28249},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28351},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1015, col: 5, offset: 28351},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1015, col: 10, offset: 28356},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 28458},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1018, col: 5, offset: 28458},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1018, col: 5, offset: 28458},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1018, col: 9, offset: 28462},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1018, col: 12, offset: 28465},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 14, offset: 28467},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1018, col: 25, offset: 28478},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1020, col: 1, offset: 28501},
			expr: &actionExpr{
				pos: position{line: 1021, col: 5, offset: 28515},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1021, col: 5, offset: 28515},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1021, col: 11, offset: 28521},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1025, col: 1, offset: 28617},
			expr: &actionExpr{
				pos: position{line: 1026, col: 5, offset: 28630},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1026, col: 5, offset: 28630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1026, col: 5, offset: 28630},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1026, col: 11, offset: 28636},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1026, col: 16, offset: 28641},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1026, col: 21, offset: 28646},
								expr: &ruleRefExpr{
									pos:  position{line: 1026, col: 21, offset: 28646},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1030, col: 1, offset: 28740},
			expr: &actionExpr{
				pos: position{line: 1030, col: 16, offset: 28755},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1030, col: 16, offset: 28755},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1030, col: 16, offset: 28755},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1030, col: 19, offset: 28758},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1030, col: 23, offset: 28762},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1030, col: 26, offset: 28765},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1030, col: 30, offset: 28769},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1032, col: 1, offset: 28795},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 5, offset: 28811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1033, col: 5, offset: 28811},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1033, col: 5, offset: 28811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1033, col: 5, offset: 28811},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1033, col: 9, offset: 28815},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1033, col: 12, offset: 28818},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1033, col: 19, offset: 28825},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1033, col: 33, offset: 28839},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1033, col: 36, offset: 28842},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 28937},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1036, col: 5, offset: 28937},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1036, col: 5, offset: 28937},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1036, col: 9, offset: 28941},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1036, col: 12, offset: 28944},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 16, offset: 28948},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1036, col: 21, offset: 28953},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1036, col: 24, offset: 28956},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29045},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1039, col: 5, offset: 29045},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1039, col: 5, offset: 29045},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1039, col: 10, offset: 29050},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1039, col: 14, offset: 29054},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1039, col: 18, offset: 29058},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1039, col: 23, offset: 29063},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1039, col: 26, offset: 29066},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 5, offset: 29154},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1042, col: 5, offset: 29154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1042, col: 5, offset: 29154},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1042, col: 10, offset: 29159},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 13, offset: 29162},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 21, offset: 29170},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1042, col: 26, offset: 29175},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1042, col: 29, offset: 29178},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1042, col: 33, offset: 29182},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 36, offset: 29185},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 44, offset: 29193},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1042, col: 49, offset: 29198},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1042, col: 52, offset: 29201},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1046, col: 1, offset: 29315},
			expr: &actionExpr{
				pos: position{line: 1047, col: 5, offset: 29335},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1047, col: 5, offset: 29335},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1047, col: 7, offset: 29337},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1054, col: 1, offset: 29553},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 5, offset: 29578},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29578},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 29578},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1055, col: 5, offset: 29578},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 9, offset: 29582},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1055, col: 11, offset: 29584},
										expr: &ruleRefExpr{
											pos:  position{line: 1055, col: 11, offset: 29584},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1055, col: 37, offset: 29610},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 29636},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1056, col: 5, offset: 29636},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1056, col: 5, offset: 29636},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1056, col: 9, offset: 29640},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1056, col: 11, offset: 29642},
										expr: &ruleRefExpr{
											pos:  position{line: 1056, col: 11, offset: 29642},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1056, col: 37, offset: 29668},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1058, col: 1, offset: 29691},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 5, offset: 29720},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 5, offset: 29720},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 29737},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1060, col: 5, offset: 29737},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1060, col: 7, offset: 29739},
								expr: &ruleRefExpr{
									pos:  position{line: 1060, col: 7, offset: 29739},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1064, col: 1, offset: 29876},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 5, offset: 29905},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 29905},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1065, col: 5, offset: 29905},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1065, col: 5, offset: 29905},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1065, col: 10, offset: 29910},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1065, col: 12, offset: 29912},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 29939},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1066, col: 5, offset: 29939},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1066, col: 5, offset: 29939},
									expr: &litMatcher{
										pos:        position{line: 1066, col: 8, offset: 29942},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 15, offset: 29949},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1066, col: 17, offset: 29951},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1068, col: 1, offset: 29987},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 5, offset: 30016},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1069, col: 5, offset: 30016},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30033},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 30033},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1070, col: 7, offset: 30035},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 7, offset: 30035},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1074, col: 1, offset: 30172},
			expr: &choiceExpr{
				pos: position{line: 1075, col: 5, offset: 30201},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1075, col: 5, offset: 30201},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1075, col: 5, offset: 30201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1075, col: 5, offset: 30201},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1075, col: 10, offset: 30206},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1075, col: 12, offset: 30208},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 30235},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 30235},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1076, col: 5, offset: 30235},
									expr: &litMatcher{
										pos:        position{line: 1076, col: 8, offset: 30238},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 15, offset: 30245},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 17, offset: 30247},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1078, col: 1, offset: 30283},
			expr: &actionExpr{
				pos: position{line: 1079, col: 5, offset: 30300},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1079, col: 5, offset: 30300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1079, col: 5, offset: 30300},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1079, col: 10, offset: 30305},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1079, col: 13, offset: 30308},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1079, col: 15, offset: 30310},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1079, col: 20, offset: 30315},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1079, col: 23, offset: 30318},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1081, col: 1, offset: 30341},
			expr: &actionExpr{
				pos: position{line: 1082, col: 5, offset: 30359},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1082, col: 9, offset: 30363},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1082, col: 9, offset: 30363},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1082, col: 19, offset: 30373},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1082, col: 30, offset: 30384},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1082, col: 41, offset: 30395},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 9, offset: 30412},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 18, offset: 30421},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 28, offset: 30431},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 38, offset: 30441},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 9, offset: 30457},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 21, offset: 30469},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1085, col: 9, offset: 30487},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1085, col: 18, offset: 30496},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 9, offset: 30513},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 22, offset: 30526},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1087, col: 9, offset: 30541},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1088, col: 9, offset: 30557},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1088, col: 16, offset: 30564},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 9, offset: 30578},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 18, offset: 30587},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1093, col: 1, offset: 30703},
			expr: &actionExpr{
				pos: position{line: 1094, col: 5, offset: 30721},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1094, col: 5, offset: 30721},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1094, col: 5, offset: 30721},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1094, col: 11, offset: 30727},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1094, col: 21, offset: 30737},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1094, col: 26, offset: 30742},
								expr: &ruleRefExpr{
									pos:  position{line: 1094, col: 26, offset: 30742},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1098, col: 1, offset: 30841},
			expr: &actionExpr{
				pos: position{line: 1098, col: 21, offset: 30861},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 21, offset: 30861},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1098, col: 21, offset: 30861},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1098, col: 24, offset: 30864},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1098, col: 28, offset: 30868},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 31, offset: 30871},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 35, offset: 30875},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1100, col: 1, offset: 30906},
			expr: &actionExpr{
				pos: position{line: 1101, col: 5, offset: 30920},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1101, col: 5, offset: 30920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1101, col: 5, offset: 30920},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1101, col: 10, offset: 30925},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1101, col: 20, offset: 30935},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1101, col: 23, offset: 30938},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1101, col: 27, offset: 30942},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1101, col: 30, offset: 30945},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1101, col: 34, offset: 30949},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1105, col: 1, offset: 31031},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 5, offset: 31045},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1106, col: 5, offset: 31045},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 5, offset: 31064},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1109, col: 1, offset: 31078},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 5, offset: 31096},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1110, col: 5, offset: 31096},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 24, offset: 31115},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1112, col: 1, offset: 31133},
			expr: &actionExpr{
				pos: position{line: 1112, col: 12, offset: 31144},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 12, offset: 31144},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1112, col: 13, offset: 31145},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 13, offset: 31145},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1112, col: 21, offset: 31153},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1112, col: 28, offset: 31160},
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 29, offset: 31161},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1113, col: 1, offset: 31198},
			expr: &actionExpr{
				pos: position{line: 1113, col: 11, offset: 31208},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 11, offset: 31208},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1113, col: 12, offset: 31209},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 12, offset: 31209},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1113, col: 19, offset: 31216},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1113, col: 25, offset: 31222},
							expr: &ruleRefExpr{
								pos:  position{line: 1113, col: 26, offset: 31223},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1114, col: 1, offset: 31259},
			expr: &actionExpr{
				pos: position{line: 1114, col: 11, offset: 31269},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1114, col: 11, offset: 31269},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1114, col: 11, offset: 31269},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1114, col: 16, offset: 31274},
							expr: &ruleRefExpr{
								pos:  position{line: 1114, col: 17, offset: 31275},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1115, col: 1, offset: 31311},
			expr: &actionExpr{
				pos: position{line: 1115, col: 12, offset: 31322},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 12, offset: 31322},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1115, col: 13, offset: 31323},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1115, col: 13, offset: 31323},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1115, col: 21, offset: 31331},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1115, col: 28, offset: 31338},
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 29, offset: 31339},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1116, col: 1, offset: 31376},
			expr: &actionExpr{
				pos: position{line: 1116, col: 11, offset: 31386},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 11, offset: 31386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1116, col: 11, offset: 31386},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1116, col: 16, offset: 31391},
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 17, offset: 31392},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1118, col: 1, offset: 31429},
			expr: &charClassMatcher{
				pos:        position{line: 1118, col: 19, offset: 31447},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1120, col: 1, offset: 31459},
			expr: &choiceExpr{
				pos: position{line: 1120, col: 18, offset: 31476},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1120, col: 18, offset: 31476},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1120, col: 36, offset: 31494},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1122, col: 1, offset: 31501},
			expr: &actionExpr{
				pos: position{line: 1123, col: 5, offset: 31516},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1123, col: 5, offset: 31516},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1123, col: 8, offset: 31519},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1125, col: 1, offset: 31600},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 5, offset: 31619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 31619},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1126, col: 5, offset: 31619},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1126, col: 5, offset: 31619},
									expr: &seqExpr{
										pos: position{line: 1126, col: 7, offset: 31621},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1126, col: 7, offset: 31621},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1126, col: 15, offset: 31629},
												expr: &ruleRefExpr{
													pos:  position{line: 1126, col: 16, offset: 31630},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1126, col: 32, offset: 31646},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1126, col: 48, offset: 31662},
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 48, offset: 31662},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1127, col: 5, offset: 31714},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1127, col: 5, offset: 31714},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 31753},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 31753},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 5, offset: 31753},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 10, offset: 31758},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 13, offset: 31761},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 31852},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1130, col: 5, offset: 31852},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 31894},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1131, col: 5, offset: 31894},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1131, col: 5, offset: 31894},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 8, offset: 31897},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1131, col: 26, offset: 31915},
									expr: &seqExpr{
										pos: position{line: 1131, col: 28, offset: 31917},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1131, col: 28, offset: 31917},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1131, col: 31, offset: 31920},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1133, col: 1, offset: 31945},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 31957},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 5, offset: 31957},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 5, offset: 31976},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1137, col: 1, offset: 31989},
			expr: &actionExpr{
				pos: position{line: 1138, col: 5, offset: 31998},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 5, offset: 31998},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1138, col: 5, offset: 31998},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1138, col: 14, offset: 32007},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1138, col: 18, offset: 32011},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1142, col: 1, offset: 32131},
			expr: &seqExpr{
				pos: position{line: 1142, col: 12, offset: 32142},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1142, col: 12, offset: 32142},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1142, col: 15, offset: 32145},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 19, offset: 32149},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1142, col: 22, offset: 32152},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 26, offset: 32156},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1144, col: 1, offset: 32160},
			expr: &seqExpr{
				pos: position{line: 1144, col: 6, offset: 32165},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1144, col: 6, offset: 32165},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1144, col: 11, offset: 32170},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1144, col: 16, offset: 32175},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1144, col: 21, offset: 32180},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1145, col: 1, offset: 32186},
			expr: &seqExpr{
				pos: position{line: 1145, col: 6, offset: 32191},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1145, col: 6, offset: 32191},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1145, col: 11, offset: 32196},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1147, col: 1, offset: 32203},
			expr: &seqExpr{
				pos: position{line: 1147, col: 12, offset: 32214},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1147, col: 12, offset: 32214},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 24, offset: 32226},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1149, col: 1, offset: 32238},
			expr: &seqExpr{
				pos: position{line: 1149, col: 15, offset: 32252},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1149, col: 15, offset: 32252},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1149, col: 18, offset: 32255},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 22, offset: 32259},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1149, col: 25, offset: 32262},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 29, offset: 32266},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1149, col: 32, offset: 32269},
						expr: &seqExpr{
							pos: position{line: 1149, col: 33, offset: 32270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1149, col: 33, offset: 32270},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1149, col: 37, offset: 32274},
									expr: &charClassMatcher{
										pos:        position{line: 1149, col: 37, offset: 32274},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1151, col: 1, offset: 32284},
			expr: &choiceExpr{
				pos: position{line: 1152, col: 5, offset: 32299},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1152, col: 5, offset: 32299},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1153, col: 5, offset: 32307},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1153, col: 6, offset: 32308},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1153, col: 6, offset: 32308},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1153, col: 12, offset: 32314},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1153, col: 17, offset: 32319},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1153, col: 20, offset: 32322},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1153, col: 24, offset: 32326},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1153, col: 27, offset: 32329},
								expr: &seqExpr{
									pos: position{line: 1153, col: 28, offset: 32330},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1153, col: 28, offset: 32330},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1153, col: 32, offset: 32334},
											expr: &charClassMatcher{
												pos:        position{line: 1153, col: 32, offset: 32334},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1155, col: 1, offset: 32344},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 32357},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 32357},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1156, col: 5, offset: 32357},
							expr: &litMatcher{
								pos:        position{line: 1156, col: 5, offset: 32357},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1156, col: 10, offset: 32362},
							expr: &seqExpr{
								pos: position{line: 1156, col: 11, offset: 32363},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1156, col: 11, offset: 32363},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 19, offset: 32371},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1160, col: 1, offset: 32497},
			expr: &seqExpr{
				pos: position{line: 1160, col: 11, offset: 32507},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 32507},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1160, col: 16, offset: 32512},
						expr: &seqExpr{
							pos: position{line: 1160, col: 17, offset: 32513},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1160, col: 17, offset: 32513},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1160, col: 21, offset: 32517},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1162, col: 1, offset: 32525},
			expr: &choiceExpr{
				pos: position{line: 1163, col: 5, offset: 32538},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1163, col: 5, offset: 32538},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1164, col: 5, offset: 32547},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1165, col: 5, offset: 32556},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1166, col: 5, offset: 32565},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1167, col: 5, offset: 32573},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1168, col: 5, offset: 32581},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1169, col: 5, offset: 32589},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1170, col: 5, offset: 32597},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1171, col: 5, offset: 32605},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1173, col: 1, offset: 32610},
			expr: &actionExpr{
				pos: position{line: 1174, col: 5, offset: 32617},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 5, offset: 32617},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1174, col: 5, offset: 32617},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1174, col: 10, offset: 32622},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1174, col: 14, offset: 32626},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1174, col: 19, offset: 32631},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1174, col: 23, offset: 32635},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1174, col: 28, offset: 32640},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1174, col: 32, offset: 32644},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1176, col: 1, offset: 32681},
			expr: &actionExpr{
				pos: position{line: 1177, col: 5, offset: 32689},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1177, col: 5, offset: 32689},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1177, col: 5, offset: 32689},
							expr: &seqExpr{
								pos: position{line: 1177, col: 8, offset: 32692},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1177, col: 8, offset: 32692},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1177, col: 12, offset: 32696},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1177, col: 16, offset: 32700},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1177, col: 20, offset: 32704},
										expr: &choiceExpr{
											pos: position{line: 1177, col: 22, offset: 32706},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1177, col: 22, offset: 32706},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1177, col: 33, offset: 32717},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1177, col: 39, offset: 32723},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1177, col: 41, offset: 32725},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1181, col: 1, offset: 32889},
			expr: &choiceExpr{
				pos: position{line: 1182, col: 5, offset: 32907},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 32907},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1182, col: 5, offset: 32907},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1182, col: 5, offset: 32907},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1182, col: 7, offset: 32909},
										expr: &ruleRefExpr{
											pos:  position{line: 1182, col: 7, offset: 32909},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 17, offset: 32919},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 19, offset: 32921},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1185, col: 5, offset: 32985},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1185, col: 5, offset: 32985},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1185, col: 5, offset: 32985},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1185, col: 7, offset: 32987},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1185, col: 11, offset: 32991},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1185, col: 13, offset: 32993},
										expr: &ruleRefExpr{
											pos:  position{line: 1185, col: 13, offset: 32993},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1185, col: 23, offset: 33003},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1185, col: 28, offset: 33008},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1185, col: 30, offset: 33010},
										expr: &ruleRefExpr{
											pos:  position{line: 1185, col: 30, offset: 33010},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1185, col: 40, offset: 33020},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1185, col: 42, offset: 33022},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 33121},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1188, col: 5, offset: 33121},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1188, col: 5, offset: 33121},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 10, offset: 33126},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1188, col: 12, offset: 33128},
										expr: &ruleRefExpr{
											pos:  position{line: 1188, col: 12, offset: 33128},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 22, offset: 33138},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1188, col: 24, offset: 33140},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 33211},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1191, col: 5, offset: 33211},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1191, col: 5, offset: 33211},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1191, col: 7, offset: 33213},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1191, col: 11, offset: 33217},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1191, col: 13, offset: 33219},
										expr: &ruleRefExpr{
											pos:  position{line: 1191, col: 13, offset: 33219},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1191, col: 23, offset: 33229},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1194, col: 5, offset: 33297},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1194, col: 5, offset: 33297},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1198, col: 1, offset: 33334},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 5, offset: 33346},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 5, offset: 33346},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 5, offset: 33353},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1202, col: 1, offset: 33358},
			expr: &actionExpr{
				pos: position{line: 1202, col: 12, offset: 33369},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 12, offset: 33369},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1202, col: 12, offset: 33369},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 16, offset: 33373},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 18, offset: 33375},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1204, col: 1, offset: 33413},
			expr: &actionExpr{
				pos: position{line: 1204, col: 12, offset: 33424},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 12, offset: 33424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 12, offset: 33424},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 14, offset: 33426},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1204, col: 18, offset: 33430},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1206, col: 1, offset: 33468},
			expr: &actionExpr{
				pos: position{line: 1207, col: 5, offset: 33479},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 5, offset: 33479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1207, col: 5, offset: 33479},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 7, offset: 33481},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1207, col: 10, offset: 33484},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 14, offset: 33488},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 16, offset: 33490},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1211, col: 1, offset: 33563},
			expr: &actionExpr{
				pos: position{line: 1212, col: 5, offset: 33574},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 5, offset: 33574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1212, col: 5, offset: 33574},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 7, offset: 33576},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1212, col: 11, offset: 33580},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 15, offset: 33584},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 17, offset: 33586},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1216, col: 1, offset: 33649},
			expr: &actionExpr{
				pos: position{line: 1217, col: 4, offset: 33657},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1217, col: 4, offset: 33657},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1217, col: 6, offset: 33659},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1219, col: 1, offset: 33699},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 5, offset: 33713},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 5, offset: 33713},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 5, offset: 33728},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1223, col: 1, offset: 33744},
			expr: &actionExpr{
				pos: position{line: 1223, col: 14, offset: 33757},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1223, col: 14, offset: 33757},
					expr: &charClassMatcher{
						pos:        position{line: 1223, col: 14, offset: 33757},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1225, col: 1, offset: 33796},
			expr: &actionExpr{
				pos: position{line: 1226, col: 5, offset: 33815},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 5, offset: 33815},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1226, col: 5, offset: 33815},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1226, col: 9, offset: 33819},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1228, col: 1, offset: 33862},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 33878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 33878},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1229, col: 5, offset: 33878},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1229, col: 5, offset: 33878},
									expr: &litMatcher{
										pos:        position{line: 1229, col: 5, offset: 33878},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1229, col: 10, offset: 33883},
									expr: &charClassMatcher{
										pos:        position{line: 1229, col: 10, offset: 33883},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 17, offset: 33890},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1229, col: 21, offset: 33894},
									expr: &charClassMatcher{
										pos:        position{line: 1229, col: 21, offset: 33894},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1229, col: 28, offset: 33901},
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 28, offset: 33901},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1232, col: 5, offset: 33960},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1232, col: 5, offset: 33960},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1232, col: 5, offset: 33960},
									expr: &litMatcher{
										pos:        position{line: 1232, col: 5, offset: 33960},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 10, offset: 33965},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1232, col: 14, offset: 33969},
									expr: &charClassMatcher{
										pos:        position{line: 1232, col: 14, offset: 33969},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1232, col: 21, offset: 33976},
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 21, offset: 33976},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1236, col: 1, offset: 34032},
			expr: &seqExpr{
				pos: position{line: 1236, col: 16, offset: 34047},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1236, col: 16, offset: 34047},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1236, col: 21, offset: 34052},
						expr: &charClassMatcher{
							pos:        position{line: 1236, col: 21, offset: 34052},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 27, offset: 34058},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1238, col: 1, offset: 34070},
			expr: &actionExpr{
				pos: position{line: 1238, col: 7, offset: 34076},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1238, col: 7, offset: 34076},
					expr: &ruleRefExpr{
						pos:  position{line: 1238, col: 7, offset: 34076},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1240, col: 1, offset: 34118},
			expr: &charClassMatcher{
				pos:        position{line: 1240, col: 12, offset: 34129},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1242, col: 1, offset: 34142},
			expr: &choiceExpr{
				pos: position{line: 1243, col: 5, offset: 34159},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1243, col: 5, offset: 34159},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1243, col: 5, offset: 34159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 5, offset: 34159},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 9, offset: 34163},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1243, col: 11, offset: 34165},
										expr: &ruleRefExpr{
											pos:  position{line: 1243, col: 11, offset: 34165},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 29, offset: 34183},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1244, col: 5, offset: 34220},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1244, col: 5, offset: 34220},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1244, col: 5, offset: 34220},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1244, col: 9, offset: 34224},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1244, col: 11, offset: 34226},
										expr: &ruleRefExpr{
											pos:  position{line: 1244, col: 11, offset: 34226},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1244, col: 29, offset: 34244},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1246, col: 1, offset: 34278},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 5, offset: 34299},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1247, col: 5, offset: 34299},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1247, col: 5, offset: 34299},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1247, col: 5, offset: 34299},
									expr: &choiceExpr{
										pos: position{line: 1247, col: 7, offset: 34301},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1247, col: 7, offset: 34301},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1247, col: 13, offset: 34307},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1247, col: 26, offset: 34320,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 34357},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 34357},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1248, col: 5, offset: 34357},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 10, offset: 34362},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 12, offset: 34364},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1250, col: 1, offset: 34398},
			expr: &actionExpr{
				pos: position{line: 1251, col: 5, offset: 34410},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 5, offset: 34410},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1251, col: 5, offset: 34410},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 10, offset: 34415},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 23, offset: 34428},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1251, col: 28, offset: 34433},
								expr: &ruleRefExpr{
									pos:  position{line: 1251, col: 28, offset: 34433},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1253, col: 1, offset: 34495},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 5, offset: 34512},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 5, offset: 34512},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 5, offset: 34529},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1257, col: 1, offset: 34541},
			expr: &actionExpr{
				pos: position{line: 1257, col: 16, offset: 34556},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1257, col: 16, offset: 34556},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1259, col: 1, offset: 34605},
			expr: &choiceExpr{
				pos: position{line: 1260, col: 5, offset: 34621},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1260, col: 5, offset: 34621},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1261, col: 5, offset: 34638},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1263, col: 1, offset: 34645},
			expr: &actionExpr{
				pos: position{line: 1263, col: 14, offset: 34658},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 14, offset: 34658},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1263, col: 14, offset: 34658},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 19, offset: 34663},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1263, col: 22, offset: 34666},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1263, col: 22, offset: 34666},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1263, col: 38, offset: 34682},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1265, col: 1, offset: 34718},
			expr: &actionExpr{
				pos: position{line: 1266, col: 5, offset: 34727},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 5, offset: 34727},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1266, col: 5, offset: 34727},
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 6, offset: 34728},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1266, col: 22, offset: 34744},
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 23, offset: 34745},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 35, offset: 34757},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 40, offset: 34762},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 50, offset: 34772},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1266, col: 55, offset: 34777},
								expr: &ruleRefExpr{
									pos:  position{line: 1266, col: 55, offset: 34777},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1270, col: 1, offset: 34861},
			expr: &seqExpr{
				pos: position{line: 1270, col: 19, offset: 34879},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1270, col: 19, offset: 34879},
						expr: &litMatcher{
							pos:        position{line: 1270, col: 19, offset: 34879},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 24, offset: 34884},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1271, col: 1, offset: 34897},
			expr: &seqExpr{
				pos: position{line: 1271, col: 15, offset: 34911},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1271, col: 15, offset: 34911},
						expr: &ruleRefExpr{
							pos:  position{line: 1271, col: 15, offset: 34911},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1271, col: 28, offset: 34924},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1273, col: 1, offset: 34929},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 5, offset: 34943},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1274, col: 5, offset: 34943},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 5, offset: 34960},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1276, col: 5, offset: 34972},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1276, col: 5, offset: 34972},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1278, col: 1, offset: 34996},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 35009},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1279, col: 5, offset: 35009},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1280, col: 5, offset: 35023},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1282, col: 1, offset: 35030},
			expr: &actionExpr{
				pos: position{line: 1282, col: 11, offset: 35040},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1282, col: 11, offset: 35040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1282, col: 11, offset: 35040},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1282, col: 16, offset: 35045},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1282, col: 19, offset: 35048},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1282, col: 19, offset: 35048},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 32, offset: 35061},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1284, col: 1, offset: 35097},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 5, offset: 35112},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 35112},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1285, col: 5, offset: 35112},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 35140},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1286, col: 5, offset: 35140},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1287, col: 5, offset: 35170},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1290, col: 1, offset: 35177},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 35198},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 35198},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1291, col: 5, offset: 35198},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1291, col: 5, offset: 35198},
									expr: &choiceExpr{
										pos: position{line: 1291, col: 7, offset: 35200},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1291, col: 7, offset: 35200},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1291, col: 13, offset: 35206},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1291, col: 26, offset: 35219,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1292, col: 5, offset: 35256},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1292, col: 5, offset: 35256},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1292, col: 5, offset: 35256},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1292, col: 10, offset: 35261},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 12, offset: 35263},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1294, col: 1, offset: 35297},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 5, offset: 35316},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1295, col: 5, offset: 35316},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 5, offset: 35337},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1298, col: 1, offset: 35352},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 5, offset: 35373},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1299, col: 5, offset: 35373},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35381},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1300, col: 5, offset: 35381},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1301, col: 5, offset: 35421},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 35430},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1302, col: 5, offset: 35430},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 35459},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1303, col: 5, offset: 35459},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 35488},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1304, col: 5, offset: 35488},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 35517},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1305, col: 5, offset: 35517},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 35546},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1306, col: 5, offset: 35546},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 5, offset: 35575},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1307, col: 5, offset: 35575},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1309, col: 1, offset: 35601},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 35619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 35619},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1310, col: 5, offset: 35619},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 35647},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1311, col: 5, offset: 35647},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1312, col: 5, offset: 35675},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1314, col: 1, offset: 35681},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 5, offset: 35699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 35699},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1315, col: 5, offset: 35699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1315, col: 5, offset: 35699},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1315, col: 9, offset: 35703},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1315, col: 16, offset: 35710},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1315, col: 16, offset: 35710},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1315, col: 25, offset: 35719},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1315, col: 34, offset: 35728},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1315, col: 43, offset: 35737},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1318, col: 5, offset: 35800},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1318, col: 5, offset: 35800},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1318, col: 5, offset: 35800},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1318, col: 9, offset: 35804},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 13, offset: 35808},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1318, col: 20, offset: 35815},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1318, col: 20, offset: 35815},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1318, col: 29, offset: 35824},
												expr: &ruleRefExpr{
													pos:  position{line: 1318, col: 29, offset: 35824},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1318, col: 39, offset: 35834},
												expr: &ruleRefExpr{
													pos:  position{line: 1318, col: 39, offset: 35834},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1318, col: 49, offset: 35844},
												expr: &ruleRefExpr{
													pos:  position{line: 1318, col: 49, offset: 35844},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1318, col: 59, offset: 35854},
												expr: &ruleRefExpr{
													pos:  position{line: 1318, col: 59, offset: 35854},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1318, col: 69, offset: 35864},
												expr: &ruleRefExpr{
													pos:  position{line: 1318, col: 69, offset: 35864},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1318, col: 80, offset: 35875},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1322, col: 1, offset: 35929},
			expr: &actionExpr{
				pos: position{line: 1323, col: 5, offset: 35940},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 5, offset: 35940},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1323, col: 5, offset: 35940},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 9, offset: 35944},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 14, offset: 35949},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1323, col: 25, offset: 35960},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1323, col: 29, offset: 35964},
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 30, offset: 35965},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1325, col: 1, offset: 36000},
			expr: &actionExpr{
				pos: position{line: 1326, col: 5, offset: 36015},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1326, col: 5, offset: 36015},
					expr: &choiceExpr{
						pos: position{line: 1326, col: 6, offset: 36016},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1326, col: 6, offset: 36016},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1326, col: 15, offset: 36025},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1326, col: 15, offset: 36025},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1326, col: 20, offset: 36030,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1328, col: 1, offset: 36066},
			expr: &charClassMatcher{
				pos:        position{line: 1329, col: 5, offset: 36082},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1331, col: 1, offset: 36097},
			expr: &oneOrMoreExpr{
				pos: position{line: 1331, col: 6, offset: 36102},
				expr: &ruleRefExpr{
					pos:  position{line: 1331, col: 6, offset: 36102},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1333, col: 1, offset: 36113},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1333, col: 6, offset: 36118},
				expr: &ruleRefExpr{
					pos:  position{line: 1333, col: 6, offset: 36118},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1335, col: 1, offset: 36129},
			expr: &choiceExpr{
				pos: position{line: 1336, col: 5, offset: 36142},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1336, col: 5, offset: 36142},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 5, offset: 36157},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 5, offset: 36176},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1340, col: 1, offset: 36185},
			expr: &anyMatcher{
				line: 1341, col: 5, offset: 36205,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1343, col: 1, offset: 36208},
			expr: &choiceExpr{
				pos: position{line: 1344, col: 5, offset: 36236},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1344, col: 5, offset: 36236},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1345, col: 5, offset: 36245},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1346, col: 5, offset: 36254},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1347, col: 5, offset: 36263},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1348, col: 5, offset: 36271},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1349, col: 5, offset: 36284},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1351, col: 1, offset: 36294},
			expr: &charClassMatcher{
				pos:        position{line: 1352, col: 5, offset: 36313},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1358, col: 1, offset: 36643},
			expr: &ruleRefExpr{
				pos:  position{line: 1361, col: 5, offset: 36714},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1363, col: 1, offset: 36733},
			expr: &seqExpr{
				pos: position{line: 1364, col: 5, offset: 36754},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1364, col: 5, offset: 36754},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1364, col: 10, offset: 36759},
						expr: &seqExpr{
							pos: position{line: 1364, col: 11, offset: 36760},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1364, col: 11, offset: 36760},
									expr: &litMatcher{
										pos:        position{line: 1364, col: 12, offset: 36761},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 17, offset: 36766},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1364, col: 35, offset: 36784},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1366, col: 1, offset: 36790},
			expr: &seqExpr{
				pos: position{line: 1367, col: 5, offset: 36812},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1367, col: 5, offset: 36812},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1367, col: 10, offset: 36817},
						expr: &seqExpr{
							pos: position{line: 1367, col: 11, offset: 36818},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1367, col: 11, offset: 36818},
									expr: &ruleRefExpr{
										pos:  position{line: 1367, col: 12, offset: 36819},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1367, col: 27, offset: 36834},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1369, col: 1, offset: 36853},
			expr: &seqExpr{
				pos: position{line: 1369, col: 7, offset: 36859},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1369, col: 7, offset: 36859},
						expr: &ruleRefExpr{
							pos:  position{line: 1369, col: 7, offset: 36859},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 19, offset: 36871},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1371, col: 1, offset: 36887},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 7, offset: 36893},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1371, col: 7, offset: 36893},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 36897},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1373, col: 1, offset: 36902},
			expr: &notExpr{
				pos: position{line: 1373, col: 7, offset: 36908},
				expr: &anyMatcher{
					line: 1373, col: 8, offset: 36909,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["f"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation59(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation59(stack["a"])
}

func (c *current) onOperation65(r interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{r}}, nil

}

func (p *parser) callonOperation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation65(stack["r"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onSplitLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSplitLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "field": field}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["field"])
}

func (c *current) onOverProc2(over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": nil, "over": over}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["over"])
}

func (c *current) onOverProc5(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil, "as": ""}, nil

}

func (p *parser) callonOverProc5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc5(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, as, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": as}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["as"], stack["scope"])
}

func (c *current) onOverWith1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": ""}}, nil

}

func (p *parser) callonOverWith1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverWith1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onAs2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonAs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs2(stack["id"])
}

func (c *current) onAs9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAs9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs9()
}

func (c *current) onLetProc2(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc2(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
