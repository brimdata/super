// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 353},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 433},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 433},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 433},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 439},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 439},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 445},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 448},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 454},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 464},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 469},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 469},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 742},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 754},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 761},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 766},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 793},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 805},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 805},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 805},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 813},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 815},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 818},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 833},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 836},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 840},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 843},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 848},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 855},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 855},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 855},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 858},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 864},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 962},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 962},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 962},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 969},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 971},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 974},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 989},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 992},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 996},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 999},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1003},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1010},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1010},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1010},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1013},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1019},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1116},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1131},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1131},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1131},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1137},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1147},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1152},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1152},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1310},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1310},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1313},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1423},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1440},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1440},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1440},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1443},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1448},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1451},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1453},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1482},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1495},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1495},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1495},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1495},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1501},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1512},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1517},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1517},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1618},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1618},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1624},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1683},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1700},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1700},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1700},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1703},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1708},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1711},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1714},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1745},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1762},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1762},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1762},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1765},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1775},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1777},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1779},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1793},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1796},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1801},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1804},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1809},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1898},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1898},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1898},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1901},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1914},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1917},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1922},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1925},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1930},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2090},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2101},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2101},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2107},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2120},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2125},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2125},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2226},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2226},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2232},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2293},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2305},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2313},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2328},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "FromTrunks",
			pos:  position{line: 74, col: 1, offset: 2340},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2355},
						run: (*parser).callonFromTrunks2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2355},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2361},
										name: "FromTrunk",
									},
								},
								&labeledExpr{
									pos:   position{line: 75, col: 21, offset: 2371},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 75, col: 26, offset: 2376},
										expr: &ruleRefExpr{
											pos:  position{line: 75, col: 26, offset: 2376},
											name: "FromTrunkTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2478},
						run: (*parser).callonFromTrunks9,
						expr: &labeledExpr{
							pos:   position{line: 78, col: 5, offset: 2478},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2484},
								name: "FromTrunk",
							},
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 82, col: 1, offset: 2542},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2556},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 83, col: 5, offset: 2556},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 12, offset: 2563},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 83, col: 23, offset: 2574},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 27, offset: 2578},
								name: "FromTrunkSeq",
							},
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 87, col: 1, offset: 2688},
			expr: &choiceExpr{
				pos: position{line: 88, col: 5, offset: 2705},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 2705},
						run: (*parser).callonFromTrunkSeq2,
						expr: &seqExpr{
							pos: position{line: 88, col: 5, offset: 2705},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 88, col: 5, offset: 2705},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 88, col: 8, offset: 2708},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 88, col: 13, offset: 2713},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 88, col: 16, offset: 2716},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 20, offset: 2720},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2755},
						run: (*parser).callonFromTrunkSeq9,
						expr: &litMatcher{
							pos:        position{line: 89, col: 5, offset: 2755},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkTail",
			pos:  position{line: 91, col: 1, offset: 2778},
			expr: &actionExpr{
				pos: position{line: 92, col: 5, offset: 2796},
				run: (*parser).callonFromTrunkTail1,
				expr: &seqExpr{
					pos: position{line: 92, col: 5, offset: 2796},
					exprs: []interface{}{
						&seqExpr{
							pos: position{line: 92, col: 6, offset: 2797},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 92, col: 6, offset: 2797},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 92, col: 9, offset: 2800},
									val:        ";",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 13, offset: 2804},
									name: "__",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 92, col: 18, offset: 2809},
							label: "trunk",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 24, offset: 2815},
								name: "FromTrunk",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 94, col: 1, offset: 2848},
			expr: &choiceExpr{
				pos: position{line: 95, col: 5, offset: 2863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2863},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2876},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 2889},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 2902},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 100, col: 1, offset: 2912},
			expr: &choiceExpr{
				pos: position{line: 101, col: 5, offset: 2926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 101, col: 5, offset: 2926},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 101, col: 5, offset: 2926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 101, col: 5, offset: 2926},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 13, offset: 2934},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 16, offset: 2937},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 20, offset: 2941},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 23, offset: 2944},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 28, offset: 2949},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 101, col: 31, offset: 2952},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 41, offset: 2962},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 50, offset: 2971},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 53, offset: 2974},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 104, col: 5, offset: 3071},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 104, col: 5, offset: 3071},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 104, col: 5, offset: 3071},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 14, offset: 3080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 104, col: 17, offset: 3083},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 21, offset: 3087},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 104, col: 24, offset: 3090},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 34, offset: 3100},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 41, offset: 3107},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 104, col: 44, offset: 3110},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 3205},
						run: (*parser).callonOperation24,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 3205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 107, col: 5, offset: 3205},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 12, offset: 3212},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 107, col: 15, offset: 3215},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 19, offset: 3219},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 107, col: 22, offset: 3222},
									label: "trunks",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 29, offset: 3229},
										name: "FromTrunks",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 40, offset: 3240},
									name: "__",
								},
								&zeroOrOneExpr{
									pos: position{line: 107, col: 43, offset: 3243},
									expr: &litMatcher{
										pos:        position{line: 107, col: 43, offset: 3243},
										val:        ";",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 48, offset: 3248},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 107, col: 51, offset: 3251},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 5, offset: 3342},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3355},
						run: (*parser).callonOperation38,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 111, col: 5, offset: 3355},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 7, offset: 3357},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 111, col: 16, offset: 3366},
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 17, offset: 3367},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 112, col: 5, offset: 3397},
						run: (*parser).callonOperation44,
						expr: &seqExpr{
							pos: position{line: 112, col: 5, offset: 3397},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 112, col: 5, offset: 3397},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 7, offset: 3399},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 112, col: 19, offset: 3411},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 20, offset: 3412},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3443},
						run: (*parser).callonOperation50,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3443},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 113, col: 5, offset: 3443},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 10, offset: 3448},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 113, col: 24, offset: 3462},
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 25, offset: 3463},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 117, col: 1, offset: 3554},
			expr: &seqExpr{
				pos: position{line: 117, col: 11, offset: 3564},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 11, offset: 3564},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 117, col: 15, offset: 3568},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 117, col: 15, offset: 3568},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 117, col: 22, offset: 3575},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 117, col: 29, offset: 3582},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 117, col: 35, offset: 3588},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 118, col: 1, offset: 3593},
			expr: &seqExpr{
				pos: position{line: 118, col: 8, offset: 3600},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 118, col: 8, offset: 3600},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 118, col: 12, offset: 3604},
						expr: &choiceExpr{
							pos: position{line: 118, col: 14, offset: 3606},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 118, col: 14, offset: 3606},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 118, col: 20, offset: 3612},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 120, col: 1, offset: 3618},
			expr: &seqExpr{
				pos: position{line: 120, col: 13, offset: 3630},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 13, offset: 3630},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 120, col: 17, offset: 3634},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 120, col: 18, offset: 3635},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 120, col: 18, offset: 3635},
										expr: &litMatcher{
											pos:        position{line: 120, col: 19, offset: 3636},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 24, offset: 3641},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 120, col: 38, offset: 3655},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 120, col: 57, offset: 3674},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 120, col: 82, offset: 3699},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 120, col: 88, offset: 3705},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 122, col: 1, offset: 3711},
			expr: &choiceExpr{
				pos: position{line: 122, col: 12, offset: 3722},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 122, col: 13, offset: 3723},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 122, col: 13, offset: 3723},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 122, col: 16, offset: 3726},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 16, offset: 3726},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 122, col: 26, offset: 3736},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 122, col: 35, offset: 3745},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 122, col: 43, offset: 3753},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 122, col: 43, offset: 3753},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 122, col: 46, offset: 3756},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 124, col: 1, offset: 3762},
			expr: &actionExpr{
				pos: position{line: 125, col: 5, offset: 3780},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 125, col: 5, offset: 3780},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 125, col: 5, offset: 3780},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 11, offset: 3786},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 21, offset: 3796},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 125, col: 26, offset: 3801},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 26, offset: 3801},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 129, col: 1, offset: 3875},
			expr: &actionExpr{
				pos: position{line: 129, col: 16, offset: 3890},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 16, offset: 3890},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 129, col: 16, offset: 3890},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 18, offset: 3892},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 26, offset: 3900},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3902},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3904},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 131, col: 1, offset: 3954},
			expr: &actionExpr{
				pos: position{line: 132, col: 5, offset: 3968},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 132, col: 5, offset: 3968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 132, col: 5, offset: 3968},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 11, offset: 3974},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 3991},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 10, offset: 3996},
								expr: &actionExpr{
									pos: position{line: 133, col: 11, offset: 3997},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 133, col: 11, offset: 3997},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 133, col: 11, offset: 3997},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 133, col: 14, offset: 4000},
												expr: &seqExpr{
													pos: position{line: 133, col: 15, offset: 4001},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 133, col: 15, offset: 4001},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 133, col: 24, offset: 4010},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 133, col: 28, offset: 4014},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 133, col: 31, offset: 4017},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 133, col: 36, offset: 4022},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 137, col: 1, offset: 4138},
			expr: &choiceExpr{
				pos: position{line: 138, col: 5, offset: 4155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 4155},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 138, col: 5, offset: 4155},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 138, col: 6, offset: 4156},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 138, col: 6, offset: 4156},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 138, col: 6, offset: 4156},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 15, offset: 4165},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 138, col: 19, offset: 4169},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 138, col: 19, offset: 4169},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 23, offset: 4173},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 27, offset: 4177},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 29, offset: 4179},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 141, col: 5, offset: 4291},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 142, col: 5, offset: 4304},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4319},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 143, col: 5, offset: 4319},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 9, offset: 4323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 12, offset: 4326},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 17, offset: 4331},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 31, offset: 4345},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 143, col: 34, offset: 4348},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 145, col: 1, offset: 4374},
			expr: &choiceExpr{
				pos: position{line: 146, col: 5, offset: 4387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4387},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 146, col: 5, offset: 4387},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 9, offset: 4391},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 146, col: 12, offset: 4394},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 22, offset: 4404},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 36, offset: 4418},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 146, col: 39, offset: 4421},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 41, offset: 4423},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5112},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5112},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 173, col: 5, offset: 5112},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 11, offset: 5118},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 173, col: 24, offset: 5131},
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 25, offset: 5132},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 5168},
						run: (*parser).callonShortCut17,
						expr: &seqExpr{
							pos: position{line: 174, col: 5, offset: 5168},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 174, col: 5, offset: 5168},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 7, offset: 5170},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 174, col: 12, offset: 5175},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 174, col: 15, offset: 5178},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 20, offset: 5183},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 174, col: 34, offset: 5197},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 174, col: 37, offset: 5200},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 39, offset: 5202},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 174, col: 51, offset: 5214},
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 52, offset: 5215},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 5329},
						run: (*parser).callonShortCut29,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 5329},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 177, col: 5, offset: 5329},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 7, offset: 5331},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 19, offset: 5343},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 21, offset: 5345},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 29, offset: 5353},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 177, col: 31, offset: 5355},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6037},
						run: (*parser).callonShortCut37,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 6037},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 204, col: 5, offset: 6037},
									expr: &seqExpr{
										pos: position{line: 204, col: 7, offset: 6039},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 204, col: 7, offset: 6039},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 204, col: 19, offset: 6051},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 24, offset: 6056},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 31, offset: 6063},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 6104},
						run: (*parser).callonShortCut45,
						expr: &seqExpr{
							pos: position{line: 205, col: 5, offset: 6104},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 205, col: 5, offset: 6104},
									expr: &seqExpr{
										pos: position{line: 205, col: 7, offset: 6106},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 205, col: 7, offset: 6106},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 205, col: 19, offset: 6118},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 205, col: 24, offset: 6123},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 205, col: 26, offset: 6125},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 205, col: 38, offset: 6137},
									expr: &ruleRefExpr{
										pos:  position{line: 205, col: 39, offset: 6138},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 6255},
						run: (*parser).callonShortCut55,
						expr: &seqExpr{
							pos: position{line: 208, col: 5, offset: 6255},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 208, col: 5, offset: 6255},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 208, col: 9, offset: 6259},
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 10, offset: 6260},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 212, col: 1, offset: 6373},
			expr: &choiceExpr{
				pos: position{line: 213, col: 5, offset: 6389},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6389},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 6401},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 214, col: 5, offset: 6401},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 214, col: 5, offset: 6401},
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 6, offset: 6402},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 13, offset: 6409},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 15, offset: 6411},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 218, col: 1, offset: 6519},
			expr: &actionExpr{
				pos: position{line: 219, col: 5, offset: 6537},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 219, col: 5, offset: 6537},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 219, col: 13, offset: 6545},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 223, col: 1, offset: 6647},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 6664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 6664},
						run: (*parser).callonPatternMatch2,
						expr: &seqExpr{
							pos: position{line: 224, col: 5, offset: 6664},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 224, col: 5, offset: 6664},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 7, offset: 6666},
										name: "Lval",
									},
								},
								&choiceExpr{
									pos: position{line: 224, col: 13, offset: 6672},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 224, col: 14, offset: 6673},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 224, col: 14, offset: 6673},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 224, col: 17, offset: 6676},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 224, col: 21, offset: 6680},
													name: "__",
												},
											},
										},
										&seqExpr{
											pos: position{line: 224, col: 28, offset: 6687},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 224, col: 28, offset: 6687},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 224, col: 30, offset: 6689},
													val:        "in",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 224, col: 35, offset: 6694},
													name: "_",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 40, offset: 6699},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 48, offset: 6707},
										name: "Pattern",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 6822},
						run: (*parser).callonPatternMatch17,
						expr: &seqExpr{
							pos: position{line: 227, col: 5, offset: 6822},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 227, col: 5, offset: 6822},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 7, offset: 6824},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 12, offset: 6829},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 227, col: 15, offset: 6832},
									val:        "!=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 20, offset: 6837},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 227, col: 24, offset: 6841},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 32, offset: 6849},
										name: "Pattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 234, col: 1, offset: 7058},
			expr: &choiceExpr{
				pos: position{line: 234, col: 11, offset: 7068},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 234, col: 11, offset: 7068},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 20, offset: 7077},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 236, col: 1, offset: 7083},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 7099},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 7099},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 7121},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7134},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 7146},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 7159},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 7171},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7183},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7197},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 245, col: 5, offset: 7214},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 249, col: 1, offset: 7271},
			expr: &ruleRefExpr{
				pos:  position{line: 249, col: 14, offset: 7284},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 251, col: 1, offset: 7304},
			expr: &actionExpr{
				pos: position{line: 251, col: 14, offset: 7317},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 251, col: 15, offset: 7318},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 15, offset: 7318},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 21, offset: 7324},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 28, offset: 7331},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 35, offset: 7338},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 42, offset: 7345},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 48, offset: 7351},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 55, offset: 7358},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 253, col: 1, offset: 7395},
			expr: &actionExpr{
				pos: position{line: 254, col: 5, offset: 7418},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 254, col: 5, offset: 7418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 254, col: 5, offset: 7418},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 11, offset: 7424},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 5, offset: 7442},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 255, col: 10, offset: 7447},
								expr: &actionExpr{
									pos: position{line: 255, col: 11, offset: 7448},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 255, col: 11, offset: 7448},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 255, col: 11, offset: 7448},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 255, col: 14, offset: 7451},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 255, col: 17, offset: 7454},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 255, col: 28, offset: 7465},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 255, col: 31, offset: 7468},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 255, col: 36, offset: 7473},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 259, col: 1, offset: 7590},
			expr: &actionExpr{
				pos: position{line: 260, col: 5, offset: 7608},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 260, col: 5, offset: 7608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 260, col: 5, offset: 7608},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 11, offset: 7614},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 7632},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 10, offset: 7637},
								expr: &actionExpr{
									pos: position{line: 261, col: 11, offset: 7638},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 261, col: 11, offset: 7638},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 261, col: 11, offset: 7638},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 261, col: 14, offset: 7641},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 261, col: 17, offset: 7644},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 261, col: 34, offset: 7661},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 261, col: 37, offset: 7664},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 261, col: 42, offset: 7669},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 265, col: 1, offset: 7786},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 7804},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 7804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 7804},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 11, offset: 7810},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 5, offset: 7829},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 10, offset: 7834},
								expr: &actionExpr{
									pos: position{line: 267, col: 11, offset: 7835},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 267, col: 11, offset: 7835},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 267, col: 11, offset: 7835},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 14, offset: 7838},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 267, col: 17, offset: 7841},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 267, col: 40, offset: 7864},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 43, offset: 7867},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 267, col: 48, offset: 7872},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 271, col: 1, offset: 7990},
			expr: &choiceExpr{
				pos: position{line: 272, col: 5, offset: 8009},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 272, col: 5, offset: 8009},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 272, col: 5, offset: 8009},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 272, col: 5, offset: 8009},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 272, col: 7, offset: 8011},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 22, offset: 8026},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 272, col: 25, offset: 8029},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 29, offset: 8033},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 272, col: 32, offset: 8036},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 272, col: 36, offset: 8040},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 8142},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 277, col: 1, offset: 8158},
			expr: &choiceExpr{
				pos: position{line: 278, col: 5, offset: 8177},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 8177},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 8191},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 280, col: 5, offset: 8207},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 280, col: 5, offset: 8207},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 280, col: 5, offset: 8207},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 280, col: 11, offset: 8213},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 280, col: 20, offset: 8222},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 280, col: 25, offset: 8227},
										expr: &ruleRefExpr{
											pos:  position{line: 280, col: 26, offset: 8228},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 8300},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 8312},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 8323},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 8333},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 8341},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 8349},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 292, col: 1, offset: 8386},
			expr: &choiceExpr{
				pos: position{line: 293, col: 5, offset: 8402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 293, col: 5, offset: 8402},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 293, col: 5, offset: 8402},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 293, col: 5, offset: 8402},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 293, col: 15, offset: 8412},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 21, offset: 8418},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 293, col: 30, offset: 8427},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 35, offset: 8432},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 293, col: 47, offset: 8444},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 53, offset: 8450},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 8595},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 296, col: 5, offset: 8595},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 296, col: 5, offset: 8595},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 296, col: 15, offset: 8605},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 21, offset: 8611},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 296, col: 30, offset: 8620},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 35, offset: 8625},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 296, col: 50, offset: 8640},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 296, col: 55, offset: 8645},
										expr: &seqExpr{
											pos: position{line: 296, col: 56, offset: 8646},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 296, col: 56, offset: 8646},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 296, col: 58, offset: 8648},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 296, col: 72, offset: 8662},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 78, offset: 8668},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 304, col: 1, offset: 8901},
			expr: &choiceExpr{
				pos: position{line: 304, col: 13, offset: 8913},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 304, col: 13, offset: 8913},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 304, col: 13, offset: 8913},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 304, col: 25, offset: 8925},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 304, col: 29, offset: 8929},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 306, col: 1, offset: 8933},
			expr: &choiceExpr{
				pos: position{line: 307, col: 5, offset: 8946},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8946},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 307, col: 5, offset: 8946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 307, col: 5, offset: 8946},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 307, col: 14, offset: 8955},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 307, col: 16, offset: 8957},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 307, col: 20, offset: 8961},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 307, col: 29, offset: 8970},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 8996},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 308, col: 5, offset: 8996},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 310, col: 1, offset: 9021},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9037},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9037},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 311, col: 5, offset: 9037},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 13, offset: 9045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 311, col: 15, offset: 9047},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 23, offset: 9055},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 313, col: 1, offset: 9096},
			expr: &choiceExpr{
				pos: position{line: 314, col: 5, offset: 9109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 314, col: 5, offset: 9109},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 314, col: 5, offset: 9109},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 314, col: 5, offset: 9109},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 314, col: 7, offset: 9111},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 314, col: 14, offset: 9118},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 314, col: 16, offset: 9120},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 314, col: 25, offset: 9129},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 314, col: 27, offset: 9131},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 33, offset: 9137},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 9168},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 315, col: 5, offset: 9168},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 320, col: 1, offset: 9428},
			expr: &choiceExpr{
				pos: position{line: 321, col: 5, offset: 9447},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 321, col: 5, offset: 9447},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 9462},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 322, col: 5, offset: 9462},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 10, offset: 9467},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 324, col: 1, offset: 9559},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9579},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9579},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 9579},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 9585},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 26, offset: 9600},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 31, offset: 9605},
								expr: &actionExpr{
									pos: position{line: 325, col: 32, offset: 9606},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 325, col: 32, offset: 9606},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 325, col: 32, offset: 9606},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 325, col: 35, offset: 9609},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 325, col: 39, offset: 9613},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 325, col: 42, offset: 9616},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 325, col: 47, offset: 9621},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 329, col: 1, offset: 9743},
			expr: &choiceExpr{
				pos: position{line: 330, col: 5, offset: 9761},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 330, col: 5, offset: 9761},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 330, col: 5, offset: 9761},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 330, col: 5, offset: 9761},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 330, col: 10, offset: 9766},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 330, col: 15, offset: 9771},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 330, col: 18, offset: 9774},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 330, col: 22, offset: 9778},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 330, col: 25, offset: 9781},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 330, col: 29, offset: 9785},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 333, col: 5, offset: 9889},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 333, col: 5, offset: 9889},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 9, offset: 9893},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 337, col: 1, offset: 9993},
			expr: &actionExpr{
				pos: position{line: 338, col: 5, offset: 10001},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 338, col: 5, offset: 10001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 338, col: 5, offset: 10001},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 6, offset: 10002},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 16, offset: 10012},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 19, offset: 10015},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 27, offset: 10023},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 338, col: 30, offset: 10026},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 34, offset: 10030},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 338, col: 37, offset: 10033},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 42, offset: 10038},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 42, offset: 10038},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 49, offset: 10045},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 338, col: 52, offset: 10048},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 338, col: 56, offset: 10052},
							expr: &seqExpr{
								pos: position{line: 338, col: 58, offset: 10054},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 338, col: 58, offset: 10054},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 338, col: 61, offset: 10057},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 66, offset: 10062},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 72, offset: 10068},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 72, offset: 10068},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 346, col: 1, offset: 10258},
			expr: &choiceExpr{
				pos: position{line: 347, col: 5, offset: 10270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 347, col: 5, offset: 10270},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 5, offset: 10289},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 5, offset: 10302},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 351, col: 1, offset: 10311},
			expr: &actionExpr{
				pos: position{line: 351, col: 15, offset: 10325},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 351, col: 15, offset: 10325},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 351, col: 15, offset: 10325},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 351, col: 17, offset: 10327},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 351, col: 25, offset: 10335},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 27, offset: 10337},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 32, offset: 10342},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 353, col: 1, offset: 10378},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 10397},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 10397},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 354, col: 5, offset: 10397},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 11, offset: 10403},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 25, offset: 10417},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 30, offset: 10422},
								expr: &seqExpr{
									pos: position{line: 354, col: 31, offset: 10423},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 354, col: 31, offset: 10423},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 354, col: 34, offset: 10426},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 354, col: 38, offset: 10430},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 354, col: 41, offset: 10433},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 364, col: 1, offset: 10669},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10682},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 365, col: 5, offset: 10682},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 5, offset: 10695},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 5, offset: 10707},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 5, offset: 10719},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 5, offset: 10732},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 370, col: 5, offset: 10745},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 371, col: 5, offset: 10758},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 5, offset: 10771},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 373, col: 5, offset: 10786},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 5, offset: 10799},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 5, offset: 10811},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 5, offset: 10826},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 5, offset: 10839},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 10853},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 5, offset: 10866},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 5, offset: 10881},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 5, offset: 10893},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 5, offset: 10906},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 5, offset: 10919},
						name: "ExplodeProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 385, col: 1, offset: 10932},
			expr: &actionExpr{
				pos: position{line: 386, col: 5, offset: 10945},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 386, col: 5, offset: 10945},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 386, col: 5, offset: 10945},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 386, col: 13, offset: 10953},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 18, offset: 10958},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 27, offset: 10967},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 386, col: 32, offset: 10972},
								expr: &actionExpr{
									pos: position{line: 386, col: 33, offset: 10973},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 386, col: 33, offset: 10973},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 386, col: 33, offset: 10973},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 386, col: 35, offset: 10975},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 386, col: 37, offset: 10977},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 400, col: 1, offset: 11392},
			expr: &actionExpr{
				pos: position{line: 400, col: 12, offset: 11403},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 400, col: 12, offset: 11403},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 400, col: 17, offset: 11408},
						expr: &actionExpr{
							pos: position{line: 400, col: 18, offset: 11409},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 400, col: 18, offset: 11409},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 400, col: 18, offset: 11409},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 400, col: 20, offset: 11411},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 400, col: 22, offset: 11413},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 402, col: 1, offset: 11469},
			expr: &choiceExpr{
				pos: position{line: 403, col: 5, offset: 11481},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11481},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 403, col: 5, offset: 11481},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 11556},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 404, col: 5, offset: 11556},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 404, col: 5, offset: 11556},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 14, offset: 11565},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 404, col: 16, offset: 11567},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 404, col: 23, offset: 11574},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 404, col: 24, offset: 11575},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 404, col: 24, offset: 11575},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 404, col: 34, offset: 11585},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 406, col: 1, offset: 11699},
			expr: &actionExpr{
				pos: position{line: 407, col: 5, offset: 11711},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 407, col: 5, offset: 11711},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 407, col: 5, offset: 11711},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 407, col: 12, offset: 11718},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 407, col: 18, offset: 11724},
								expr: &actionExpr{
									pos: position{line: 407, col: 19, offset: 11725},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 407, col: 19, offset: 11725},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 407, col: 19, offset: 11725},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 407, col: 21, offset: 11727},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 407, col: 23, offset: 11729},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 407, col: 47, offset: 11753},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 407, col: 53, offset: 11759},
								expr: &seqExpr{
									pos: position{line: 407, col: 54, offset: 11760},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 407, col: 54, offset: 11760},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 407, col: 56, offset: 11762},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 407, col: 67, offset: 11773},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 407, col: 74, offset: 11780},
								expr: &actionExpr{
									pos: position{line: 407, col: 75, offset: 11781},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 407, col: 75, offset: 11781},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 407, col: 75, offset: 11781},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 407, col: 77, offset: 11783},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 407, col: 79, offset: 11785},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 421, col: 1, offset: 12130},
			expr: &actionExpr{
				pos: position{line: 422, col: 5, offset: 12142},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 422, col: 5, offset: 12142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 422, col: 5, offset: 12142},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 422, col: 12, offset: 12149},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 422, col: 14, offset: 12151},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 19, offset: 12156},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 426, col: 1, offset: 12251},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 12264},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 12264},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 12264},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 13, offset: 12272},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 15, offset: 12274},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 20, offset: 12279},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 431, col: 1, offset: 12375},
			expr: &actionExpr{
				pos: position{line: 432, col: 5, offset: 12388},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 432, col: 5, offset: 12388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 432, col: 5, offset: 12388},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 13, offset: 12396},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 15, offset: 12398},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 20, offset: 12403},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 436, col: 1, offset: 12494},
			expr: &choiceExpr{
				pos: position{line: 437, col: 5, offset: 12507},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 437, col: 5, offset: 12507},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 437, col: 5, offset: 12507},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 5, offset: 12507},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 437, col: 13, offset: 12515},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 437, col: 15, offset: 12517},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 437, col: 21, offset: 12523},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 12603},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 438, col: 5, offset: 12603},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 440, col: 1, offset: 12679},
			expr: &choiceExpr{
				pos: position{line: 441, col: 5, offset: 12692},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 441, col: 5, offset: 12692},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 441, col: 5, offset: 12692},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 441, col: 5, offset: 12692},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 441, col: 13, offset: 12700},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 441, col: 15, offset: 12702},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 441, col: 21, offset: 12708},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 5, offset: 12788},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 442, col: 5, offset: 12788},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 444, col: 1, offset: 12864},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 12879},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 12879},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 5, offset: 12879},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 445, col: 15, offset: 12889},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 17, offset: 12891},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 20, offset: 12894},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 449, col: 1, offset: 12931},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 12942},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 450, col: 5, offset: 12942},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 450, col: 10, offset: 12947},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 454, col: 1, offset: 13043},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13056},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 455, col: 5, offset: 13056},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 455, col: 5, offset: 13056},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 13, offset: 13064},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 455, col: 15, offset: 13066},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 458, col: 5, offset: 13155},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 458, col: 5, offset: 13155},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 462, col: 1, offset: 13245},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 13257},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 463, col: 5, offset: 13257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 463, col: 5, offset: 13257},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 463, col: 12, offset: 13264},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 463, col: 14, offset: 13266},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 19, offset: 13271},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 467, col: 1, offset: 13366},
			expr: &actionExpr{
				pos: position{line: 468, col: 5, offset: 13381},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 468, col: 5, offset: 13381},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 468, col: 5, offset: 13381},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 15, offset: 13391},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 17, offset: 13393},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 23, offset: 13399},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 468, col: 34, offset: 13410},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 468, col: 39, offset: 13415},
								expr: &actionExpr{
									pos: position{line: 468, col: 40, offset: 13416},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 468, col: 40, offset: 13416},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 468, col: 40, offset: 13416},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 468, col: 43, offset: 13419},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 468, col: 47, offset: 13423},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 468, col: 50, offset: 13426},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 468, col: 53, offset: 13429},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 476, col: 1, offset: 13838},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 13851},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 13851},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 477, col: 5, offset: 13851},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 477, col: 13, offset: 13859},
							expr: &seqExpr{
								pos: position{line: 477, col: 15, offset: 13861},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 477, col: 15, offset: 13861},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 477, col: 18, offset: 13864},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 481, col: 1, offset: 13935},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 13949},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 482, col: 5, offset: 13949},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 486, col: 1, offset: 14025},
			expr: &choiceExpr{
				pos: position{line: 487, col: 5, offset: 14038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 487, col: 5, offset: 14038},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 487, col: 5, offset: 14038},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 487, col: 5, offset: 14038},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 11, offset: 14044},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 487, col: 21, offset: 14054},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 487, col: 29, offset: 14062},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 487, col: 31, offset: 14064},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 39, offset: 14072},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 487, col: 47, offset: 14080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 487, col: 50, offset: 14083},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 487, col: 54, offset: 14087},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 487, col: 57, offset: 14090},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 66, offset: 14099},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 487, col: 74, offset: 14107},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 487, col: 82, offset: 14115},
										expr: &seqExpr{
											pos: position{line: 487, col: 83, offset: 14116},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 487, col: 83, offset: 14116},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 487, col: 85, offset: 14118},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 494, col: 5, offset: 14384},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 494, col: 5, offset: 14384},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 494, col: 5, offset: 14384},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 11, offset: 14390},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 494, col: 22, offset: 14401},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 494, col: 30, offset: 14409},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 494, col: 32, offset: 14411},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 36, offset: 14415},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 494, col: 44, offset: 14423},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 494, col: 52, offset: 14431},
										expr: &seqExpr{
											pos: position{line: 494, col: 53, offset: 14432},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 494, col: 53, offset: 14432},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 494, col: 55, offset: 14434},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 502, col: 1, offset: 14688},
			expr: &choiceExpr{
				pos: position{line: 503, col: 5, offset: 14702},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 503, col: 5, offset: 14702},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 503, col: 5, offset: 14702},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 503, col: 5, offset: 14702},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 503, col: 14, offset: 14711},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 504, col: 5, offset: 14741},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 504, col: 5, offset: 14741},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 504, col: 5, offset: 14741},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 504, col: 14, offset: 14750},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 14779},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 505, col: 5, offset: 14779},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 505, col: 5, offset: 14779},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 505, col: 14, offset: 14788},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 14818},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 506, col: 5, offset: 14818},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 508, col: 1, offset: 14854},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 14866},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 509, col: 5, offset: 14866},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 14875},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 14875},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 510, col: 5, offset: 14875},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 510, col: 9, offset: 14879},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 14, offset: 14884},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 510, col: 19, offset: 14889},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 512, col: 1, offset: 14915},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 14930},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 513, col: 5, offset: 14930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 513, col: 5, offset: 14930},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 513, col: 15, offset: 14940},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 17, offset: 14942},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 550, col: 1, offset: 16237},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 16252},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16252},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 551, col: 5, offset: 16252},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 551, col: 5, offset: 16252},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 551, col: 7, offset: 16254},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 12, offset: 16259},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 552, col: 5, offset: 16288},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 552, col: 5, offset: 16288},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 554, col: 1, offset: 16346},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 16359},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 555, col: 5, offset: 16359},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 555, col: 12, offset: 16366},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 559, col: 1, offset: 16522},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 16534},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 560, col: 5, offset: 16534},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 5, offset: 16547},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 5, offset: 16560},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 564, col: 1, offset: 16570},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16583},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 565, col: 5, offset: 16583},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 565, col: 13, offset: 16591},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 565, col: 15, offset: 16593},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 20, offset: 16598},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 25, offset: 16603},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 32, offset: 16610},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 42, offset: 16620},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 49, offset: 16627},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 569, col: 1, offset: 16755},
			expr: &actionExpr{
				pos: position{line: 570, col: 5, offset: 16768},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 570, col: 5, offset: 16768},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 570, col: 5, offset: 16768},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 13, offset: 16776},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 15, offset: 16778},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 20, offset: 16783},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 572, col: 1, offset: 16814},
			expr: &actionExpr{
				pos: position{line: 573, col: 5, offset: 16827},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 573, col: 5, offset: 16827},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 573, col: 5, offset: 16827},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 10, offset: 16832},
								name: "PoolName",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 19, offset: 16841},
							label: "at",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 22, offset: 16844},
								name: "PoolAt",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 29, offset: 16851},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 34, offset: 16856},
								name: "PoolRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 44, offset: 16866},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 50, offset: 16872},
								name: "OrderArg",
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 577, col: 1, offset: 17007},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17020},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17020},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 578, col: 5, offset: 17020},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 12, offset: 17027},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 14, offset: 17029},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 18, offset: 17033},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 22, offset: 17037},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 29, offset: 17044},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 39, offset: 17054},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 46, offset: 17061},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 582, col: 1, offset: 17186},
			expr: &actionExpr{
				pos: position{line: 582, col: 7, offset: 17192},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 582, col: 7, offset: 17192},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 582, col: 8, offset: 17193},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 582, col: 8, offset: 17193},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 582, col: 18, offset: 17203},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 28, offset: 17213},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 584, col: 1, offset: 17250},
			expr: &choiceExpr{
				pos: position{line: 585, col: 5, offset: 17259},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17259},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 585, col: 5, offset: 17259},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 7, offset: 17261},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 17296},
						run: (*parser).callonPath5,
						expr: &seqExpr{
							pos: position{line: 586, col: 5, offset: 17296},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 586, col: 5, offset: 17296},
									expr: &charClassMatcher{
										pos:        position{line: 586, col: 5, offset: 17296},
										val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?;:[\\]{}~|+-]",
										chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ';', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
										ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 586, col: 46, offset: 17337},
									expr: &ruleRefExpr{
										pos:  position{line: 586, col: 47, offset: 17338},
										name: "EOT",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 588, col: 1, offset: 17374},
			expr: &choiceExpr{
				pos: position{line: 589, col: 5, offset: 17385},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 17385},
						run: (*parser).callonPoolAt2,
						expr: &seqExpr{
							pos: position{line: 589, col: 5, offset: 17385},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 589, col: 5, offset: 17385},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 589, col: 7, offset: 17387},
									val:        "at",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 589, col: 13, offset: 17393},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 589, col: 15, offset: 17395},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 589, col: 18, offset: 17398},
										name: "KSUID",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 5, offset: 17427},
						run: (*parser).callonPoolAt9,
						expr: &litMatcher{
							pos:        position{line: 590, col: 5, offset: 17427},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 592, col: 1, offset: 17451},
			expr: &actionExpr{
				pos: position{line: 592, col: 9, offset: 17459},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 592, col: 9, offset: 17459},
					expr: &charClassMatcher{
						pos:        position{line: 592, col: 10, offset: 17460},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 594, col: 1, offset: 17506},
			expr: &choiceExpr{
				pos: position{line: 595, col: 5, offset: 17520},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 595, col: 5, offset: 17520},
						run: (*parser).callonPoolRange2,
						expr: &seqExpr{
							pos: position{line: 595, col: 5, offset: 17520},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 595, col: 5, offset: 17520},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 595, col: 7, offset: 17522},
									val:        "over",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 595, col: 15, offset: 17530},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 595, col: 17, offset: 17532},
									label: "lower",
									expr: &ruleRefExpr{
										pos:  position{line: 595, col: 23, offset: 17538},
										name: "Literal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 595, col: 31, offset: 17546},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 595, col: 33, offset: 17548},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 595, col: 39, offset: 17554},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 595, col: 41, offset: 17556},
									label: "upper",
									expr: &ruleRefExpr{
										pos:  position{line: 595, col: 47, offset: 17562},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 17670},
						run: (*parser).callonPoolRange14,
						expr: &litMatcher{
							pos:        position{line: 598, col: 5, offset: 17670},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolTo",
			pos:  position{line: 600, col: 1, offset: 17694},
			expr: &choiceExpr{
				pos: position{line: 601, col: 5, offset: 17705},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 601, col: 5, offset: 17705},
						run: (*parser).callonPoolTo2,
						expr: &seqExpr{
							pos: position{line: 601, col: 5, offset: 17705},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 601, col: 5, offset: 17705},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 601, col: 7, offset: 17707},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 601, col: 13, offset: 17713},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 601, col: 15, offset: 17715},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 601, col: 19, offset: 17719},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 602, col: 5, offset: 17751},
						run: (*parser).callonPoolTo9,
						expr: &litMatcher{
							pos:        position{line: 602, col: 5, offset: 17751},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 604, col: 1, offset: 17775},
			expr: &choiceExpr{
				pos: position{line: 605, col: 5, offset: 17788},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 605, col: 5, offset: 17788},
						run: (*parser).callonPoolName2,
						expr: &labeledExpr{
							pos:   position{line: 605, col: 5, offset: 17788},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 10, offset: 17793},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 17833},
						run: (*parser).callonPoolName5,
						expr: &labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17833},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 8, offset: 17836},
								name: "KSUID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 607, col: 5, offset: 17865},
						run: (*parser).callonPoolName8,
						expr: &labeledExpr{
							pos:   position{line: 607, col: 5, offset: 17865},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 7, offset: 17867},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 609, col: 1, offset: 17899},
			expr: &choiceExpr{
				pos: position{line: 610, col: 5, offset: 17913},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 610, col: 5, offset: 17913},
						run: (*parser).callonLayoutArg2,
						expr: &seqExpr{
							pos: position{line: 610, col: 5, offset: 17913},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 610, col: 5, offset: 17913},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 610, col: 7, offset: 17915},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 610, col: 16, offset: 17924},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 610, col: 18, offset: 17926},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 610, col: 23, offset: 17931},
										name: "FieldExprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 610, col: 34, offset: 17942},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 610, col: 40, offset: 17948},
										name: "OrderSuffix",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 18061},
						run: (*parser).callonLayoutArg11,
						expr: &litMatcher{
							pos:        position{line: 613, col: 5, offset: 18061},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 615, col: 1, offset: 18085},
			expr: &choiceExpr{
				pos: position{line: 616, col: 5, offset: 18099},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 616, col: 5, offset: 18099},
						run: (*parser).callonFormatArg2,
						expr: &seqExpr{
							pos: position{line: 616, col: 5, offset: 18099},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 616, col: 5, offset: 18099},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 616, col: 7, offset: 18101},
									val:        "format",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 616, col: 17, offset: 18111},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 616, col: 19, offset: 18113},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 23, offset: 18117},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 617, col: 5, offset: 18156},
						run: (*parser).callonFormatArg9,
						expr: &litMatcher{
							pos:        position{line: 617, col: 5, offset: 18156},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 619, col: 1, offset: 18179},
			expr: &choiceExpr{
				pos: position{line: 620, col: 5, offset: 18195},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 620, col: 5, offset: 18195},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 620, col: 5, offset: 18195},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 18230},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 621, col: 5, offset: 18230},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18267},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 622, col: 5, offset: 18267},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 624, col: 1, offset: 18293},
			expr: &choiceExpr{
				pos: position{line: 625, col: 5, offset: 18306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18306},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 625, col: 5, offset: 18306},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 625, col: 5, offset: 18306},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 625, col: 7, offset: 18308},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 625, col: 16, offset: 18317},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 625, col: 18, offset: 18319},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 18353},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 626, col: 5, offset: 18353},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 626, col: 5, offset: 18353},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 626, col: 7, offset: 18355},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 626, col: 16, offset: 18364},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 626, col: 18, offset: 18366},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 18402},
						run: (*parser).callonOrderArg14,
						expr: &litMatcher{
							pos:        position{line: 627, col: 5, offset: 18402},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 629, col: 1, offset: 18425},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18438},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 630, col: 5, offset: 18438},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 636, col: 1, offset: 18633},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 18649},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 637, col: 5, offset: 18649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 637, col: 5, offset: 18649},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 16, offset: 18660},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 18, offset: 18662},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 23, offset: 18667},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 637, col: 29, offset: 18673},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 33, offset: 18677},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 637, col: 41, offset: 18685},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 44, offset: 18688},
								name: "AsArg",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 641, col: 1, offset: 18799},
			expr: &actionExpr{
				pos: position{line: 642, col: 5, offset: 18811},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 642, col: 5, offset: 18811},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 642, col: 5, offset: 18811},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 7, offset: 18813},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 10, offset: 18816},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 642, col: 12, offset: 18818},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 16, offset: 18822},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 644, col: 1, offset: 18847},
			expr: &choiceExpr{
				pos: position{line: 645, col: 5, offset: 18857},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 18857},
						run: (*parser).callonAsArg2,
						expr: &seqExpr{
							pos: position{line: 645, col: 5, offset: 18857},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 645, col: 5, offset: 18857},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 645, col: 7, offset: 18859},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 645, col: 10, offset: 18862},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 645, col: 12, offset: 18864},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 645, col: 16, offset: 18868},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 5, offset: 18897},
						run: (*parser).callonAsArg9,
						expr: &litMatcher{
							pos:        position{line: 646, col: 5, offset: 18897},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 650, col: 1, offset: 18945},
			expr: &ruleRefExpr{
				pos:  position{line: 650, col: 8, offset: 18952},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 652, col: 1, offset: 18963},
			expr: &actionExpr{
				pos: position{line: 653, col: 5, offset: 18973},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 653, col: 5, offset: 18973},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 18973},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 11, offset: 18979},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 16, offset: 18984},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 653, col: 21, offset: 18989},
								expr: &actionExpr{
									pos: position{line: 653, col: 22, offset: 18990},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 653, col: 22, offset: 18990},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 653, col: 22, offset: 18990},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 653, col: 25, offset: 18993},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 653, col: 29, offset: 18997},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 653, col: 32, offset: 19000},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 653, col: 37, offset: 19005},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 657, col: 1, offset: 19117},
			expr: &ruleRefExpr{
				pos:  position{line: 657, col: 13, offset: 19129},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 659, col: 1, offset: 19135},
			expr: &actionExpr{
				pos: position{line: 660, col: 5, offset: 19150},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 660, col: 5, offset: 19150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 19150},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 11, offset: 19156},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 21, offset: 19166},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 660, col: 26, offset: 19171},
								expr: &seqExpr{
									pos: position{line: 660, col: 27, offset: 19172},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 660, col: 27, offset: 19172},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 660, col: 30, offset: 19175},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 660, col: 34, offset: 19179},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 660, col: 37, offset: 19182},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 670, col: 1, offset: 19381},
			expr: &actionExpr{
				pos: position{line: 671, col: 5, offset: 19396},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 671, col: 5, offset: 19396},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 671, col: 5, offset: 19396},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 9, offset: 19400},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 671, col: 14, offset: 19405},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 671, col: 17, offset: 19408},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 671, col: 21, offset: 19412},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 671, col: 24, offset: 19415},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 28, offset: 19419},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 673, col: 1, offset: 19510},
			expr: &ruleRefExpr{
				pos:  position{line: 673, col: 8, offset: 19517},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 675, col: 1, offset: 19534},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 19554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 19554},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 19554},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 676, col: 5, offset: 19554},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 15, offset: 19564},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 676, col: 29, offset: 19578},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 676, col: 32, offset: 19581},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 676, col: 36, offset: 19585},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 676, col: 39, offset: 19588},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 50, offset: 19599},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 676, col: 55, offset: 19604},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 676, col: 58, offset: 19607},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 676, col: 62, offset: 19611},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 676, col: 65, offset: 19614},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 76, offset: 19625},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 679, col: 5, offset: 19765},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 681, col: 1, offset: 19780},
			expr: &actionExpr{
				pos: position{line: 682, col: 5, offset: 19798},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 682, col: 5, offset: 19798},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 682, col: 5, offset: 19798},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 11, offset: 19804},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 19823},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 683, col: 10, offset: 19828},
								expr: &actionExpr{
									pos: position{line: 683, col: 11, offset: 19829},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 683, col: 11, offset: 19829},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 683, col: 11, offset: 19829},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 683, col: 14, offset: 19832},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 683, col: 17, offset: 19835},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 683, col: 25, offset: 19843},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 683, col: 28, offset: 19846},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 683, col: 33, offset: 19851},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 687, col: 1, offset: 19969},
			expr: &actionExpr{
				pos: position{line: 688, col: 5, offset: 19988},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 688, col: 5, offset: 19988},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 5, offset: 19988},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 11, offset: 19994},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 20018},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 10, offset: 20023},
								expr: &actionExpr{
									pos: position{line: 689, col: 11, offset: 20024},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 689, col: 11, offset: 20024},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 689, col: 11, offset: 20024},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 689, col: 14, offset: 20027},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 17, offset: 20030},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 689, col: 26, offset: 20039},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 689, col: 29, offset: 20042},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 34, offset: 20047},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 693, col: 1, offset: 20170},
			expr: &actionExpr{
				pos: position{line: 694, col: 5, offset: 20194},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 694, col: 5, offset: 20194},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 694, col: 5, offset: 20194},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 11, offset: 20200},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 5, offset: 20217},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 695, col: 10, offset: 20222},
								expr: &actionExpr{
									pos: position{line: 695, col: 11, offset: 20223},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 695, col: 11, offset: 20223},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 695, col: 11, offset: 20223},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 695, col: 14, offset: 20226},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 695, col: 19, offset: 20231},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 695, col: 38, offset: 20250},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 695, col: 41, offset: 20253},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 695, col: 46, offset: 20258},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 699, col: 1, offset: 20376},
			expr: &actionExpr{
				pos: position{line: 700, col: 5, offset: 20397},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 700, col: 6, offset: 20398},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 700, col: 6, offset: 20398},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 700, col: 12, offset: 20404},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 702, col: 1, offset: 20442},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 20465},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 703, col: 5, offset: 20465},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 20486},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 704, col: 5, offset: 20486},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 706, col: 1, offset: 20523},
			expr: &actionExpr{
				pos: position{line: 707, col: 5, offset: 20540},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 707, col: 5, offset: 20540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 707, col: 5, offset: 20540},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 11, offset: 20546},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 708, col: 5, offset: 20563},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 708, col: 10, offset: 20568},
								expr: &actionExpr{
									pos: position{line: 708, col: 11, offset: 20569},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 708, col: 11, offset: 20569},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 708, col: 11, offset: 20569},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 708, col: 14, offset: 20572},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 708, col: 17, offset: 20575},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 708, col: 34, offset: 20592},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 708, col: 37, offset: 20595},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 708, col: 42, offset: 20600},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 712, col: 1, offset: 20716},
			expr: &actionExpr{
				pos: position{line: 712, col: 20, offset: 20735},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 712, col: 21, offset: 20736},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 712, col: 21, offset: 20736},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 712, col: 28, offset: 20743},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 712, col: 34, offset: 20749},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 712, col: 41, offset: 20756},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 714, col: 1, offset: 20793},
			expr: &actionExpr{
				pos: position{line: 715, col: 5, offset: 20810},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 715, col: 5, offset: 20810},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 715, col: 5, offset: 20810},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 11, offset: 20816},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 5, offset: 20839},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 716, col: 10, offset: 20844},
								expr: &actionExpr{
									pos: position{line: 716, col: 11, offset: 20845},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 716, col: 11, offset: 20845},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 716, col: 11, offset: 20845},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 716, col: 14, offset: 20848},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 716, col: 17, offset: 20851},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 716, col: 34, offset: 20868},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 716, col: 37, offset: 20871},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 716, col: 42, offset: 20876},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 720, col: 1, offset: 20998},
			expr: &actionExpr{
				pos: position{line: 720, col: 20, offset: 21017},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 720, col: 21, offset: 21018},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 720, col: 21, offset: 21018},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 720, col: 27, offset: 21024},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 722, col: 1, offset: 21061},
			expr: &actionExpr{
				pos: position{line: 723, col: 5, offset: 21084},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 723, col: 5, offset: 21084},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 723, col: 5, offset: 21084},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 11, offset: 21090},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 724, col: 5, offset: 21102},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 724, col: 10, offset: 21107},
								expr: &actionExpr{
									pos: position{line: 724, col: 11, offset: 21108},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 724, col: 11, offset: 21108},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 724, col: 11, offset: 21108},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 724, col: 14, offset: 21111},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 724, col: 17, offset: 21114},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 724, col: 40, offset: 21137},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 724, col: 43, offset: 21140},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 724, col: 48, offset: 21145},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 728, col: 1, offset: 21256},
			expr: &actionExpr{
				pos: position{line: 728, col: 26, offset: 21281},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 728, col: 27, offset: 21282},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 728, col: 27, offset: 21282},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 728, col: 33, offset: 21288},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 730, col: 1, offset: 21325},
			expr: &choiceExpr{
				pos: position{line: 731, col: 5, offset: 21337},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 21337},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 731, col: 5, offset: 21337},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 731, col: 5, offset: 21337},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 731, col: 9, offset: 21341},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 731, col: 12, offset: 21344},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 731, col: 14, offset: 21346},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 21455},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 736, col: 1, offset: 21465},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 21478},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 737, col: 5, offset: 21478},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 738, col: 5, offset: 21493},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21507},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 21507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 21507},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 9, offset: 21511},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 739, col: 21, offset: 21523},
									expr: &seqExpr{
										pos: position{line: 739, col: 23, offset: 21525},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 739, col: 23, offset: 21525},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 739, col: 26, offset: 21528},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21557},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21557},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 740, col: 5, offset: 21557},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 11, offset: 21563},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 740, col: 16, offset: 21568},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 740, col: 21, offset: 21573},
										expr: &ruleRefExpr{
											pos:  position{line: 740, col: 22, offset: 21574},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21645},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 21645},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 743, col: 5, offset: 21645},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 11, offset: 21651},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 743, col: 20, offset: 21660},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 743, col: 25, offset: 21665},
										expr: &ruleRefExpr{
											pos:  position{line: 743, col: 26, offset: 21666},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21737},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 747, col: 5, offset: 21751},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 749, col: 1, offset: 21760},
			expr: &seqExpr{
				pos: position{line: 749, col: 13, offset: 21772},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 749, col: 13, offset: 21772},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 749, col: 22, offset: 21781},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 749, col: 25, offset: 21784},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 751, col: 1, offset: 21789},
			expr: &choiceExpr{
				pos: position{line: 752, col: 5, offset: 21802},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 752, col: 5, offset: 21802},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 753, col: 5, offset: 21812},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 754, col: 5, offset: 21824},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 755, col: 5, offset: 21837},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 757, col: 1, offset: 21845},
			expr: &actionExpr{
				pos: position{line: 758, col: 5, offset: 21859},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 758, col: 5, offset: 21859},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 758, col: 5, offset: 21859},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 13, offset: 21867},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 758, col: 16, offset: 21870},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 758, col: 20, offset: 21874},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 25, offset: 21879},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 758, col: 39, offset: 21893},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 760, col: 1, offset: 21919},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 21934},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 761, col: 5, offset: 21934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 761, col: 5, offset: 21934},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 14, offset: 21943},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 761, col: 17, offset: 21946},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 21, offset: 21950},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 761, col: 24, offset: 21953},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 29, offset: 21958},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 35, offset: 21964},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 761, col: 38, offset: 21967},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 761, col: 42, offset: 21971},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 50, offset: 21979},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 769, col: 1, offset: 22377},
			expr: &choiceExpr{
				pos: position{line: 770, col: 5, offset: 22389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22389},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 770, col: 5, offset: 22389},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 770, col: 13, offset: 22397},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 13, offset: 22397},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 22433},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 771, col: 5, offset: 22433},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 773, col: 1, offset: 22457},
			expr: &actionExpr{
				pos: position{line: 774, col: 5, offset: 22468},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 774, col: 5, offset: 22468},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 774, col: 5, offset: 22468},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 774, col: 8, offset: 22471},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 774, col: 12, offset: 22475},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 774, col: 15, offset: 22478},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 17, offset: 22480},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 776, col: 1, offset: 22508},
			expr: &actionExpr{
				pos: position{line: 777, col: 5, offset: 22517},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 777, col: 5, offset: 22517},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 777, col: 5, offset: 22517},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 9, offset: 22521},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 18, offset: 22530},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 777, col: 21, offset: 22533},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 25, offset: 22537},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 777, col: 28, offset: 22540},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 33, offset: 22545},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 38, offset: 22550},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 777, col: 41, offset: 22553},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 781, col: 1, offset: 22650},
			expr: &actionExpr{
				pos: position{line: 782, col: 5, offset: 22663},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 782, col: 5, offset: 22663},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 782, col: 5, offset: 22663},
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 6, offset: 22664},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 16, offset: 22674},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 19, offset: 22677},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 782, col: 34, offset: 22692},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 782, col: 37, offset: 22695},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 782, col: 41, offset: 22699},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 782, col: 44, offset: 22702},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 49, offset: 22707},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 782, col: 63, offset: 22721},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 782, col: 66, offset: 22724},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 786, col: 1, offset: 22820},
			expr: &choiceExpr{
				pos: position{line: 787, col: 5, offset: 22838},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 787, col: 5, offset: 22838},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22848},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 788, col: 5, offset: 22848},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 790, col: 1, offset: 22884},
			expr: &actionExpr{
				pos: position{line: 791, col: 5, offset: 22894},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 791, col: 5, offset: 22894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 791, col: 5, offset: 22894},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 11, offset: 22900},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 16, offset: 22905},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 791, col: 21, offset: 22910},
								expr: &actionExpr{
									pos: position{line: 791, col: 22, offset: 22911},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 791, col: 22, offset: 22911},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 791, col: 22, offset: 22911},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 791, col: 25, offset: 22914},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 791, col: 29, offset: 22918},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 791, col: 32, offset: 22921},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 791, col: 34, offset: 22923},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 795, col: 1, offset: 23032},
			expr: &choiceExpr{
				pos: position{line: 796, col: 5, offset: 23046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 796, col: 5, offset: 23046},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 796, col: 5, offset: 23046},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 796, col: 5, offset: 23046},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 23052},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 796, col: 17, offset: 23058},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 796, col: 22, offset: 23063},
										expr: &ruleRefExpr{
											pos:  position{line: 796, col: 23, offset: 23064},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 799, col: 5, offset: 23135},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 799, col: 5, offset: 23135},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 799, col: 5, offset: 23135},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 23141},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 799, col: 22, offset: 23152},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 799, col: 27, offset: 23157},
										expr: &ruleRefExpr{
											pos:  position{line: 799, col: 28, offset: 23158},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 802, col: 5, offset: 23229},
						run: (*parser).callonDerefExpr16,
						expr: &seqExpr{
							pos: position{line: 802, col: 5, offset: 23229},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 802, col: 5, offset: 23229},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 802, col: 11, offset: 23235},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 802, col: 22, offset: 23246},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 802, col: 27, offset: 23251},
										expr: &ruleRefExpr{
											pos:  position{line: 802, col: 28, offset: 23252},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 23323},
						run: (*parser).callonDerefExpr23,
						expr: &litMatcher{
							pos:        position{line: 805, col: 5, offset: 23323},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 809, col: 1, offset: 23392},
			expr: &actionExpr{
				pos: position{line: 809, col: 14, offset: 23405},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 809, col: 14, offset: 23405},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 811, col: 1, offset: 23467},
			expr: &choiceExpr{
				pos: position{line: 812, col: 5, offset: 23477},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 812, col: 5, offset: 23477},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 812, col: 5, offset: 23477},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 812, col: 5, offset: 23477},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 812, col: 9, offset: 23481},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 15, offset: 23487},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 23703},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 821, col: 5, offset: 23703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 821, col: 5, offset: 23703},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 821, col: 9, offset: 23707},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 821, col: 13, offset: 23711},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 821, col: 18, offset: 23716},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 23, offset: 23721},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 831, col: 1, offset: 23926},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 23936},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 23936},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 23936},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 832, col: 5, offset: 23936},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 832, col: 9, offset: 23940},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 14, offset: 23945},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 832, col: 27, offset: 23958},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 832, col: 30, offset: 23961},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 832, col: 34, offset: 23965},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 832, col: 37, offset: 23968},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 40, offset: 23971},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 832, col: 53, offset: 23984},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 24155},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 838, col: 5, offset: 24155},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 838, col: 5, offset: 24155},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 9, offset: 24159},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 838, col: 12, offset: 24162},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 16, offset: 24166},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 838, col: 19, offset: 24169},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 838, col: 22, offset: 24172},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 838, col: 35, offset: 24185},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 24356},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 24356},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 844, col: 5, offset: 24356},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 844, col: 9, offset: 24360},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 14, offset: 24365},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 844, col: 27, offset: 24378},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 844, col: 30, offset: 24381},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 844, col: 34, offset: 24385},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 844, col: 37, offset: 24388},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 850, col: 5, offset: 24561},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 850, col: 5, offset: 24561},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 850, col: 5, offset: 24561},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 850, col: 9, offset: 24565},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 850, col: 14, offset: 24570},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 850, col: 19, offset: 24575},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 24624},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 24624},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 851, col: 5, offset: 24624},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 851, col: 9, offset: 24628},
									expr: &litMatcher{
										pos:        position{line: 851, col: 11, offset: 24630},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 851, col: 16, offset: 24635},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 19, offset: 24638},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 853, col: 1, offset: 24689},
			expr: &choiceExpr{
				pos: position{line: 854, col: 5, offset: 24701},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 854, col: 5, offset: 24701},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 855, col: 5, offset: 24713},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 856, col: 5, offset: 24724},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 857, col: 5, offset: 24734},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 858, col: 5, offset: 24742},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 24750},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 859, col: 5, offset: 24750},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 859, col: 5, offset: 24750},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 9, offset: 24754},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 859, col: 12, offset: 24757},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 859, col: 17, offset: 24762},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 22, offset: 24767},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 859, col: 25, offset: 24770},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 861, col: 1, offset: 24796},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 24807},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 24807},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 862, col: 5, offset: 24807},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 9, offset: 24811},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 862, col: 12, offset: 24814},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 19, offset: 24821},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 26, offset: 24828},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 862, col: 29, offset: 24831},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 866, col: 1, offset: 24924},
			expr: &actionExpr{
				pos: position{line: 867, col: 5, offset: 24935},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 867, col: 5, offset: 24935},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 24935},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 11, offset: 24941},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 17, offset: 24947},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 867, col: 22, offset: 24952},
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 22, offset: 24952},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 871, col: 1, offset: 25043},
			expr: &actionExpr{
				pos: position{line: 871, col: 13, offset: 25055},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 871, col: 13, offset: 25055},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 871, col: 13, offset: 25055},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 871, col: 16, offset: 25058},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 871, col: 20, offset: 25062},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 871, col: 23, offset: 25065},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 25, offset: 25067},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 873, col: 1, offset: 25092},
			expr: &actionExpr{
				pos: position{line: 874, col: 5, offset: 25102},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 874, col: 5, offset: 25102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 874, col: 5, offset: 25102},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 10, offset: 25107},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 20, offset: 25117},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 874, col: 23, offset: 25120},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 27, offset: 25124},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 30, offset: 25127},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 36, offset: 25133},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 878, col: 1, offset: 25218},
			expr: &actionExpr{
				pos: position{line: 879, col: 5, offset: 25228},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 879, col: 5, offset: 25228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 879, col: 5, offset: 25228},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 9, offset: 25232},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 12, offset: 25235},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 18, offset: 25241},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 879, col: 32, offset: 25255},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 879, col: 35, offset: 25258},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 883, col: 1, offset: 25348},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 25356},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 25356},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 884, col: 5, offset: 25356},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 10, offset: 25361},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 13, offset: 25364},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 19, offset: 25370},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 33, offset: 25384},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 884, col: 36, offset: 25387},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 888, col: 1, offset: 25476},
			expr: &actionExpr{
				pos: position{line: 889, col: 5, offset: 25484},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 889, col: 5, offset: 25484},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 889, col: 5, offset: 25484},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 889, col: 10, offset: 25489},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 889, col: 13, offset: 25492},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 889, col: 19, offset: 25498},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 889, col: 27, offset: 25506},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 889, col: 30, offset: 25509},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 893, col: 1, offset: 25600},
			expr: &choiceExpr{
				pos: position{line: 894, col: 5, offset: 25612},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 894, col: 5, offset: 25612},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 894, col: 5, offset: 25612},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 894, col: 5, offset: 25612},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 11, offset: 25618},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 894, col: 17, offset: 25624},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 894, col: 22, offset: 25629},
										expr: &ruleRefExpr{
											pos:  position{line: 894, col: 22, offset: 25629},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 25723},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 897, col: 5, offset: 25723},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 900, col: 1, offset: 25760},
			expr: &actionExpr{
				pos: position{line: 900, col: 13, offset: 25772},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 900, col: 13, offset: 25772},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 900, col: 13, offset: 25772},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 900, col: 16, offset: 25775},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 20, offset: 25779},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 900, col: 23, offset: 25782},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 25, offset: 25784},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 902, col: 1, offset: 25809},
			expr: &actionExpr{
				pos: position{line: 903, col: 5, offset: 25819},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 903, col: 5, offset: 25819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 25819},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 9, offset: 25823},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 14, offset: 25828},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 903, col: 17, offset: 25831},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 21, offset: 25835},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 903, col: 24, offset: 25838},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 30, offset: 25844},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 909, col: 1, offset: 25951},
			expr: &actionExpr{
				pos: position{line: 910, col: 5, offset: 25963},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 910, col: 5, offset: 25963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 910, col: 5, offset: 25963},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 15, offset: 25973},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 911, col: 5, offset: 25987},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 911, col: 10, offset: 25992},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 912, col: 5, offset: 26004},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 912, col: 11, offset: 26010},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 5, offset: 26023},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 26029},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 5, offset: 26042},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 13, offset: 26050},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 5, offset: 26065},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 12, offset: 26072},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 916, col: 5, offset: 26086},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 13, offset: 26094},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 5, offset: 26109},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 26115},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 941, col: 1, offset: 26482},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 26496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 26496},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 26496},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 942, col: 5, offset: 26496},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 942, col: 12, offset: 26503},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 942, col: 14, offset: 26505},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 26533},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 26533},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 943, col: 5, offset: 26533},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 12, offset: 26540},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 943, col: 14, offset: 26542},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 26, offset: 26554},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 945, col: 1, offset: 26598},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 26616},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 26616},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 946, col: 5, offset: 26616},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 946, col: 5, offset: 26616},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 9, offset: 26620},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 14, offset: 26625},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 16, offset: 26627},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 946, col: 19, offset: 26630},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 946, col: 21, offset: 26632},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 25, offset: 26636},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 26730},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 947, col: 5, offset: 26730},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 10, offset: 26735},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 949, col: 1, offset: 26827},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 26846},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 26846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 26846},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 11, offset: 26852},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 950, col: 25, offset: 26866},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 950, col: 30, offset: 26871},
								expr: &actionExpr{
									pos: position{line: 950, col: 31, offset: 26872},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 950, col: 31, offset: 26872},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 950, col: 31, offset: 26872},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 950, col: 34, offset: 26875},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 950, col: 38, offset: 26879},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 950, col: 41, offset: 26882},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 950, col: 46, offset: 26887},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 954, col: 1, offset: 27008},
			expr: &choiceExpr{
				pos: position{line: 955, col: 5, offset: 27020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 955, col: 5, offset: 27020},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 955, col: 5, offset: 27020},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 955, col: 5, offset: 27020},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 955, col: 7, offset: 27022},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 955, col: 12, offset: 27027},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 955, col: 14, offset: 27029},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 20, offset: 27035},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 955, col: 29, offset: 27044},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 35, offset: 27050},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 27144},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 27144},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 958, col: 5, offset: 27144},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 7, offset: 27146},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 12, offset: 27151},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 958, col: 14, offset: 27153},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 27181},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 959, col: 5, offset: 27181},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 961, col: 1, offset: 27205},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 27218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 27218},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 962, col: 5, offset: 27218},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 962, col: 5, offset: 27218},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 7, offset: 27220},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 10, offset: 27223},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 962, col: 12, offset: 27225},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 15, offset: 27228},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 963, col: 5, offset: 27256},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 963, col: 5, offset: 27256},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 963, col: 5, offset: 27256},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 963, col: 7, offset: 27258},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 10, offset: 27261},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 27289},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 964, col: 5, offset: 27289},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 966, col: 1, offset: 27313},
			expr: &ruleRefExpr{
				pos:  position{line: 967, col: 5, offset: 27326},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 969, col: 1, offset: 27332},
			expr: &choiceExpr{
				pos: position{line: 970, col: 5, offset: 27345},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 27345},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 27345},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 5, offset: 27345},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 11, offset: 27351},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 970, col: 19, offset: 27359},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 970, col: 24, offset: 27364},
										expr: &actionExpr{
											pos: position{line: 970, col: 25, offset: 27365},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 970, col: 25, offset: 27365},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 970, col: 30, offset: 27370},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 27488},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 973, col: 5, offset: 27488},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 975, col: 1, offset: 27512},
			expr: &actionExpr{
				pos: position{line: 976, col: 5, offset: 27524},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 976, col: 5, offset: 27524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 976, col: 5, offset: 27524},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 11, offset: 27530},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 24, offset: 27543},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 26, offset: 27545},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 31, offset: 27550},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 33, offset: 27552},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 39, offset: 27558},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 48, offset: 27567},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 54, offset: 27573},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 63, offset: 27582},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 65, offset: 27584},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 68, offset: 27587},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 70, offset: 27589},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 78, offset: 27597},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 86, offset: 27605},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 976, col: 89, offset: 27608},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 93, offset: 27612},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 96, offset: 27615},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 105, offset: 27624},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 995, col: 1, offset: 27859},
			expr: &choiceExpr{
				pos: position{line: 996, col: 5, offset: 27876},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 996, col: 5, offset: 27876},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 996, col: 5, offset: 27876},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 996, col: 5, offset: 27876},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 996, col: 7, offset: 27878},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 996, col: 14, offset: 27885},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 996, col: 14, offset: 27885},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 996, col: 21, offset: 27892},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 996, col: 29, offset: 27900},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 997, col: 5, offset: 27933},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 997, col: 5, offset: 27933},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 999, col: 1, offset: 27969},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 5, offset: 27982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 27982},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 1000, col: 5, offset: 27982},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1000, col: 5, offset: 27982},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1000, col: 7, offset: 27984},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 1000, col: 13, offset: 27990},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 15, offset: 27992},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1000, col: 20, offset: 27997},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1001, col: 5, offset: 28036},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 1001, col: 5, offset: 28036},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 1003, col: 1, offset: 28060},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 5, offset: 28075},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28075},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 1004, col: 5, offset: 28075},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1004, col: 5, offset: 28075},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 7, offset: 28077},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 13, offset: 28083},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 15, offset: 28085},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 18, offset: 28088},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 20, offset: 28090},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 28, offset: 28098},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 28137},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 1005, col: 5, offset: 28137},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 1007, col: 1, offset: 28161},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 5, offset: 28175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 28175},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 28175},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1008, col: 5, offset: 28175},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1008, col: 7, offset: 28177},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 1008, col: 14, offset: 28184},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1008, col: 16, offset: 28186},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 21, offset: 28191},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1009, col: 5, offset: 28230},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 1009, col: 5, offset: 28230},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 1011, col: 1, offset: 28254},
			expr: &choiceExpr{
				pos: position{line: 1012, col: 5, offset: 28269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 28269},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 28269},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1012, col: 5, offset: 28269},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 7, offset: 28271},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 13, offset: 28277},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 15, offset: 28279},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 18, offset: 28282},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 20, offset: 28284},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 25, offset: 28289},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 31, offset: 28295},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 37, offset: 28301},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28414},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 1015, col: 5, offset: 28414},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 1017, col: 1, offset: 28438},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 5, offset: 28451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 28451},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 1018, col: 5, offset: 28451},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1018, col: 5, offset: 28451},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1018, col: 7, offset: 28453},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 1018, col: 12, offset: 28458},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1018, col: 12, offset: 28458},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 1018, col: 18, offset: 28464},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28494},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 1019, col: 5, offset: 28494},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 1021, col: 1, offset: 28520},
			expr: &choiceExpr{
				pos: position{line: 1022, col: 5, offset: 28533},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 28533},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 28533},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1022, col: 5, offset: 28533},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 7, offset: 28535},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 13, offset: 28541},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 15, offset: 28543},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 21, offset: 28549},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 28580},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 1023, col: 5, offset: 28580},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 1025, col: 1, offset: 28602},
			expr: &actionExpr{
				pos: position{line: 1025, col: 10, offset: 28611},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 1025, col: 10, offset: 28611},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 1026, col: 1, offset: 28646},
			expr: &actionExpr{
				pos: position{line: 1026, col: 6, offset: 28651},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 1026, col: 6, offset: 28651},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 1027, col: 1, offset: 28678},
			expr: &actionExpr{
				pos: position{line: 1027, col: 8, offset: 28685},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 1027, col: 8, offset: 28685},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 1028, col: 1, offset: 28716},
			expr: &actionExpr{
				pos: position{line: 1028, col: 8, offset: 28723},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 1028, col: 8, offset: 28723},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1029, col: 1, offset: 28754},
			expr: &actionExpr{
				pos: position{line: 1029, col: 9, offset: 28762},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1029, col: 9, offset: 28762},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1030, col: 1, offset: 28795},
			expr: &actionExpr{
				pos: position{line: 1030, col: 9, offset: 28803},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1030, col: 9, offset: 28803},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1031, col: 1, offset: 28836},
			expr: &ruleRefExpr{
				pos:  position{line: 1031, col: 6, offset: 28841},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1032, col: 1, offset: 28849},
			expr: &actionExpr{
				pos: position{line: 1032, col: 10, offset: 28858},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1032, col: 10, offset: 28858},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1033, col: 1, offset: 28893},
			expr: &actionExpr{
				pos: position{line: 1033, col: 9, offset: 28901},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1033, col: 9, offset: 28901},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1034, col: 1, offset: 28934},
			expr: &actionExpr{
				pos: position{line: 1034, col: 6, offset: 28939},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1034, col: 6, offset: 28939},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1035, col: 1, offset: 28966},
			expr: &actionExpr{
				pos: position{line: 1035, col: 9, offset: 28974},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1035, col: 9, offset: 28974},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1036, col: 1, offset: 29007},
			expr: &actionExpr{
				pos: position{line: 1036, col: 7, offset: 29013},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1036, col: 7, offset: 29013},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1037, col: 1, offset: 29042},
			expr: &actionExpr{
				pos: position{line: 1037, col: 8, offset: 29049},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1037, col: 8, offset: 29049},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1038, col: 1, offset: 29080},
			expr: &actionExpr{
				pos: position{line: 1038, col: 8, offset: 29087},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1038, col: 8, offset: 29087},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1039, col: 1, offset: 29118},
			expr: &actionExpr{
				pos: position{line: 1039, col: 9, offset: 29126},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1039, col: 9, offset: 29126},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1040, col: 1, offset: 29159},
			expr: &actionExpr{
				pos: position{line: 1040, col: 9, offset: 29167},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1040, col: 9, offset: 29167},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1042, col: 1, offset: 29201},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 29223},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 29223},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 14, offset: 29232},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 19, offset: 29237},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 27, offset: 29245},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 34, offset: 29252},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 42, offset: 29260},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 50, offset: 29268},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 59, offset: 29277},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 67, offset: 29285},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 75, offset: 29293},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1047, col: 1, offset: 29319},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 5, offset: 29331},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1048, col: 5, offset: 29331},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 5, offset: 29347},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 5, offset: 29365},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29383},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 5, offset: 29402},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 5, offset: 29415},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 5, offset: 29424},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 5, offset: 29441},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 5, offset: 29460},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 5, offset: 29479},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1059, col: 1, offset: 29492},
			expr: &actionExpr{
				pos: position{line: 1060, col: 5, offset: 29510},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1060, col: 5, offset: 29510},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1060, col: 7, offset: 29512},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1064, col: 1, offset: 29625},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 5, offset: 29643},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 29643},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1065, col: 5, offset: 29643},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1065, col: 5, offset: 29643},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 7, offset: 29645},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1065, col: 14, offset: 29652},
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 15, offset: 29653},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 29768},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1068, col: 5, offset: 29768},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1068, col: 7, offset: 29770},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1072, col: 1, offset: 29874},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 5, offset: 29893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 29893},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 29893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1073, col: 5, offset: 29893},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 7, offset: 29895},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1073, col: 11, offset: 29899},
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 12, offset: 29900},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 30014},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1076, col: 5, offset: 30014},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 7, offset: 30016},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1080, col: 1, offset: 30115},
			expr: &actionExpr{
				pos: position{line: 1081, col: 5, offset: 30132},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1081, col: 5, offset: 30132},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1081, col: 7, offset: 30134},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1085, col: 1, offset: 30247},
			expr: &actionExpr{
				pos: position{line: 1086, col: 5, offset: 30266},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1086, col: 5, offset: 30266},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1086, col: 7, offset: 30268},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1090, col: 1, offset: 30377},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 5, offset: 30396},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1091, col: 5, offset: 30396},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1091, col: 5, offset: 30396},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1092, col: 5, offset: 30509},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1092, col: 5, offset: 30509},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1094, col: 1, offset: 30620},
			expr: &actionExpr{
				pos: position{line: 1095, col: 5, offset: 30636},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1095, col: 5, offset: 30636},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1097, col: 1, offset: 30742},
			expr: &actionExpr{
				pos: position{line: 1098, col: 5, offset: 30758},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 5, offset: 30758},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1098, col: 5, offset: 30758},
							expr: &seqExpr{
								pos: position{line: 1098, col: 7, offset: 30760},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1098, col: 7, offset: 30760},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 25, offset: 30778},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 30, offset: 30783},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 34, offset: 30787},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1102, col: 1, offset: 30885},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 30898},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1103, col: 5, offset: 30898},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 5, offset: 30915},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 1106, col: 1, offset: 30930},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 30947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 5, offset: 30947},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1108, col: 5, offset: 30964},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 30988},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 30988},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1109, col: 5, offset: 30988},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 9, offset: 30992},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 1109, col: 31, offset: 31014},
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 32, offset: 31015},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1111, col: 1, offset: 31051},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 31060},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1112, col: 5, offset: 31060},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 5, offset: 31077},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 5, offset: 31095},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 1116, col: 1, offset: 31108},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 5, offset: 31125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1117, col: 5, offset: 31125},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 1117, col: 5, offset: 31125},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1117, col: 5, offset: 31125},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1117, col: 12, offset: 31132},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1117, col: 15, offset: 31135},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1117, col: 19, offset: 31139},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1117, col: 22, offset: 31142},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 26, offset: 31146},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1117, col: 31, offset: 31151},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1117, col: 34, offset: 31154},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 31181},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 31181},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 31181},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 12, offset: 31188},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1118, col: 15, offset: 31191},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 19, offset: 31195},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 22, offset: 31198},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 26, offset: 31202},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 36, offset: 31212},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1118, col: 39, offset: 31215},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1120, col: 1, offset: 31240},
			expr: &choiceExpr{
				pos: position{line: 1121, col: 5, offset: 31258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 31258},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 31258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 5, offset: 31258},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 10, offset: 31263},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1121, col: 24, offset: 31277},
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 25, offset: 31278},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1122, col: 5, offset: 31318},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1122, col: 5, offset: 31318},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1122, col: 5, offset: 31318},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1122, col: 10, offset: 31323},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 25, offset: 31338},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1122, col: 28, offset: 31341},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 32, offset: 31345},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1122, col: 35, offset: 31348},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 39, offset: 31352},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 42, offset: 31355},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1122, col: 46, offset: 31359},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 51, offset: 31364},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1122, col: 54, offset: 31367},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 31468},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1125, col: 5, offset: 31468},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 10, offset: 31473},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 31575},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 31575},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 5, offset: 31575},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 9, offset: 31579},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 12, offset: 31582},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 14, offset: 31584},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1128, col: 25, offset: 31595},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1130, col: 1, offset: 31618},
			expr: &actionExpr{
				pos: position{line: 1131, col: 5, offset: 31632},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1131, col: 5, offset: 31632},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 31638},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1135, col: 1, offset: 31734},
			expr: &actionExpr{
				pos: position{line: 1136, col: 5, offset: 31747},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 5, offset: 31747},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1136, col: 5, offset: 31747},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1136, col: 11, offset: 31753},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1136, col: 16, offset: 31758},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1136, col: 21, offset: 31763},
								expr: &ruleRefExpr{
									pos:  position{line: 1136, col: 21, offset: 31763},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1140, col: 1, offset: 31857},
			expr: &actionExpr{
				pos: position{line: 1140, col: 16, offset: 31872},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1140, col: 16, offset: 31872},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1140, col: 16, offset: 31872},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1140, col: 19, offset: 31875},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1140, col: 23, offset: 31879},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1140, col: 26, offset: 31882},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1140, col: 30, offset: 31886},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1142, col: 1, offset: 31912},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 5, offset: 31928},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 31928},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1143, col: 5, offset: 31928},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1143, col: 5, offset: 31928},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1143, col: 9, offset: 31932},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 12, offset: 31935},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1143, col: 19, offset: 31942},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1143, col: 33, offset: 31956},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1143, col: 36, offset: 31959},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 32054},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1146, col: 5, offset: 32054},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1146, col: 5, offset: 32054},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1146, col: 9, offset: 32058},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 12, offset: 32061},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 16, offset: 32065},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1146, col: 21, offset: 32070},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1146, col: 24, offset: 32073},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 32162},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1149, col: 5, offset: 32162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1149, col: 5, offset: 32162},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1149, col: 10, offset: 32167},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 14, offset: 32171},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 18, offset: 32175},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1149, col: 23, offset: 32180},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1149, col: 26, offset: 32183},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1152, col: 5, offset: 32271},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1152, col: 5, offset: 32271},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1152, col: 5, offset: 32271},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1152, col: 10, offset: 32276},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 13, offset: 32279},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 21, offset: 32287},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1152, col: 26, offset: 32292},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1152, col: 29, offset: 32295},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1152, col: 33, offset: 32299},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 36, offset: 32302},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 44, offset: 32310},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1152, col: 49, offset: 32315},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1152, col: 52, offset: 32318},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1156, col: 1, offset: 32432},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 5, offset: 32456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1157, col: 5, offset: 32456},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1157, col: 5, offset: 32456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1157, col: 5, offset: 32456},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1157, col: 9, offset: 32460},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1157, col: 12, offset: 32463},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1157, col: 19, offset: 32470},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1157, col: 33, offset: 32484},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1157, col: 36, offset: 32487},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1160, col: 5, offset: 32582},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1160, col: 5, offset: 32582},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1160, col: 5, offset: 32582},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1160, col: 9, offset: 32586},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1160, col: 12, offset: 32589},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1160, col: 16, offset: 32593},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1160, col: 29, offset: 32606},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1160, col: 32, offset: 32609},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1163, col: 5, offset: 32698},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1163, col: 5, offset: 32698},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1163, col: 5, offset: 32698},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1163, col: 10, offset: 32703},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1163, col: 13, offset: 32706},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1163, col: 17, offset: 32710},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1163, col: 30, offset: 32723},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1163, col: 33, offset: 32726},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 32814},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 32814},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1166, col: 5, offset: 32814},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1166, col: 10, offset: 32819},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 13, offset: 32822},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 21, offset: 32830},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1166, col: 34, offset: 32843},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1166, col: 37, offset: 32846},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1166, col: 41, offset: 32850},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 44, offset: 32853},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 52, offset: 32861},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1166, col: 65, offset: 32874},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1166, col: 68, offset: 32877},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1170, col: 1, offset: 32991},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 33009},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 5, offset: 33009},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 5, offset: 33035},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1178, col: 1, offset: 33294},
			expr: &actionExpr{
				pos: position{line: 1179, col: 5, offset: 33320},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1179, col: 9, offset: 33324},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1179, col: 9, offset: 33324},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1179, col: 19, offset: 33334},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1179, col: 30, offset: 33345},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1179, col: 41, offset: 33356},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1180, col: 9, offset: 33373},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1180, col: 18, offset: 33382},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1180, col: 28, offset: 33392},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1180, col: 38, offset: 33402},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1181, col: 9, offset: 33418},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1182, col: 9, offset: 33436},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1182, col: 18, offset: 33445},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1193, col: 1, offset: 34086},
			expr: &actionExpr{
				pos: position{line: 1194, col: 5, offset: 34112},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1194, col: 9, offset: 34116},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1194, col: 9, offset: 34116},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1194, col: 22, offset: 34129},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1195, col: 9, offset: 34144},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 9, offset: 34160},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 9, offset: 34178},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 16, offset: 34185},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1198, col: 9, offset: 34199},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1198, col: 18, offset: 34208},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1198, col: 28, offset: 34218},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1202, col: 1, offset: 34334},
			expr: &actionExpr{
				pos: position{line: 1203, col: 5, offset: 34352},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 5, offset: 34352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1203, col: 5, offset: 34352},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 11, offset: 34358},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 21, offset: 34368},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1203, col: 26, offset: 34373},
								expr: &ruleRefExpr{
									pos:  position{line: 1203, col: 26, offset: 34373},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1207, col: 1, offset: 34472},
			expr: &actionExpr{
				pos: position{line: 1207, col: 21, offset: 34492},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 21, offset: 34492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1207, col: 21, offset: 34492},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1207, col: 24, offset: 34495},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1207, col: 28, offset: 34499},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 31, offset: 34502},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 35, offset: 34506},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1209, col: 1, offset: 34537},
			expr: &actionExpr{
				pos: position{line: 1210, col: 5, offset: 34551},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 5, offset: 34551},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1210, col: 5, offset: 34551},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 10, offset: 34556},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1210, col: 20, offset: 34566},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1210, col: 23, offset: 34569},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1210, col: 27, offset: 34573},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 30, offset: 34576},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 34, offset: 34580},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1214, col: 1, offset: 34662},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 34688},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 34688},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 34688},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 11, offset: 34694},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 21, offset: 34704},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1215, col: 26, offset: 34709},
								expr: &ruleRefExpr{
									pos:  position{line: 1215, col: 26, offset: 34709},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1219, col: 1, offset: 34816},
			expr: &actionExpr{
				pos: position{line: 1219, col: 29, offset: 34844},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 29, offset: 34844},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1219, col: 29, offset: 34844},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1219, col: 32, offset: 34847},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1219, col: 36, offset: 34851},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 39, offset: 34854},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 43, offset: 34858},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1221, col: 1, offset: 34897},
			expr: &actionExpr{
				pos: position{line: 1222, col: 5, offset: 34919},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 5, offset: 34919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1222, col: 5, offset: 34919},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 10, offset: 34924},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1222, col: 20, offset: 34934},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1222, col: 23, offset: 34937},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1222, col: 27, offset: 34941},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 30, offset: 34944},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 34, offset: 34948},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1226, col: 1, offset: 35038},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 5, offset: 35052},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1227, col: 5, offset: 35052},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 5, offset: 35071},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1230, col: 1, offset: 35085},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 5, offset: 35103},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 5, offset: 35103},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 24, offset: 35122},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1233, col: 1, offset: 35140},
			expr: &actionExpr{
				pos: position{line: 1233, col: 12, offset: 35151},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 12, offset: 35151},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1233, col: 12, offset: 35151},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1233, col: 19, offset: 35158},
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 20, offset: 35159},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1234, col: 1, offset: 35196},
			expr: &actionExpr{
				pos: position{line: 1234, col: 11, offset: 35206},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 11, offset: 35206},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1234, col: 11, offset: 35206},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1234, col: 17, offset: 35212},
							expr: &ruleRefExpr{
								pos:  position{line: 1234, col: 18, offset: 35213},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1235, col: 1, offset: 35249},
			expr: &actionExpr{
				pos: position{line: 1235, col: 11, offset: 35259},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 11, offset: 35259},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 11, offset: 35259},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1235, col: 17, offset: 35265},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 18, offset: 35266},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1236, col: 1, offset: 35302},
			expr: &actionExpr{
				pos: position{line: 1236, col: 12, offset: 35313},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 12, offset: 35313},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1236, col: 12, offset: 35313},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1236, col: 19, offset: 35320},
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 20, offset: 35321},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1237, col: 1, offset: 35358},
			expr: &actionExpr{
				pos: position{line: 1237, col: 11, offset: 35368},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 11, offset: 35368},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1237, col: 11, offset: 35368},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1237, col: 17, offset: 35374},
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 18, offset: 35375},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1239, col: 1, offset: 35412},
			expr: &charClassMatcher{
				pos:        position{line: 1239, col: 19, offset: 35430},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1241, col: 1, offset: 35442},
			expr: &choiceExpr{
				pos: position{line: 1241, col: 18, offset: 35459},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1241, col: 18, offset: 35459},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1241, col: 36, offset: 35477},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1243, col: 1, offset: 35484},
			expr: &actionExpr{
				pos: position{line: 1244, col: 5, offset: 35499},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1244, col: 5, offset: 35499},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1244, col: 8, offset: 35502},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1246, col: 1, offset: 35583},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 5, offset: 35602},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1247, col: 5, offset: 35602},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1247, col: 5, offset: 35602},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1247, col: 5, offset: 35602},
									expr: &seqExpr{
										pos: position{line: 1247, col: 7, offset: 35604},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1247, col: 7, offset: 35604},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1247, col: 15, offset: 35612},
												expr: &ruleRefExpr{
													pos:  position{line: 1247, col: 16, offset: 35613},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1247, col: 32, offset: 35629},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1247, col: 48, offset: 35645},
									expr: &ruleRefExpr{
										pos:  position{line: 1247, col: 48, offset: 35645},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 35697},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1248, col: 5, offset: 35697},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1249, col: 5, offset: 35736},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1249, col: 5, offset: 35736},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1249, col: 5, offset: 35736},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1249, col: 10, offset: 35741},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1249, col: 13, offset: 35744},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 35835},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1251, col: 5, offset: 35835},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1252, col: 5, offset: 35877},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1252, col: 5, offset: 35877},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1252, col: 5, offset: 35877},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1252, col: 8, offset: 35880},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1252, col: 26, offset: 35898},
									expr: &seqExpr{
										pos: position{line: 1252, col: 28, offset: 35900},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1252, col: 28, offset: 35900},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1252, col: 31, offset: 35903},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1254, col: 1, offset: 35928},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 35940},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1255, col: 5, offset: 35940},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 5, offset: 35959},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 5, offset: 35975},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 5, offset: 35992},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1260, col: 1, offset: 36005},
			expr: &actionExpr{
				pos: position{line: 1261, col: 5, offset: 36014},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 5, offset: 36014},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1261, col: 5, offset: 36014},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1261, col: 14, offset: 36023},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1261, col: 18, offset: 36027},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1265, col: 1, offset: 36147},
			expr: &seqExpr{
				pos: position{line: 1265, col: 12, offset: 36158},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 12, offset: 36158},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1265, col: 15, offset: 36161},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 19, offset: 36165},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1265, col: 22, offset: 36168},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 26, offset: 36172},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1267, col: 1, offset: 36176},
			expr: &seqExpr{
				pos: position{line: 1267, col: 6, offset: 36181},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1267, col: 6, offset: 36181},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1267, col: 11, offset: 36186},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1267, col: 16, offset: 36191},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1267, col: 21, offset: 36196},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1268, col: 1, offset: 36202},
			expr: &seqExpr{
				pos: position{line: 1268, col: 6, offset: 36207},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1268, col: 6, offset: 36207},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1268, col: 11, offset: 36212},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1270, col: 1, offset: 36219},
			expr: &seqExpr{
				pos: position{line: 1270, col: 12, offset: 36230},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1270, col: 12, offset: 36230},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 24, offset: 36242},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1272, col: 1, offset: 36254},
			expr: &seqExpr{
				pos: position{line: 1272, col: 15, offset: 36268},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1272, col: 15, offset: 36268},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1272, col: 18, offset: 36271},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 22, offset: 36275},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1272, col: 25, offset: 36278},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 29, offset: 36282},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1272, col: 32, offset: 36285},
						expr: &seqExpr{
							pos: position{line: 1272, col: 33, offset: 36286},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1272, col: 33, offset: 36286},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1272, col: 37, offset: 36290},
									expr: &charClassMatcher{
										pos:        position{line: 1272, col: 37, offset: 36290},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1274, col: 1, offset: 36300},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 5, offset: 36315},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1275, col: 5, offset: 36315},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1276, col: 5, offset: 36323},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1276, col: 6, offset: 36324},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1276, col: 6, offset: 36324},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1276, col: 12, offset: 36330},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1276, col: 17, offset: 36335},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1276, col: 20, offset: 36338},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1276, col: 24, offset: 36342},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1276, col: 27, offset: 36345},
								expr: &seqExpr{
									pos: position{line: 1276, col: 28, offset: 36346},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1276, col: 28, offset: 36346},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1276, col: 32, offset: 36350},
											expr: &charClassMatcher{
												pos:        position{line: 1276, col: 32, offset: 36350},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1278, col: 1, offset: 36360},
			expr: &actionExpr{
				pos: position{line: 1279, col: 5, offset: 36373},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1279, col: 5, offset: 36373},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1279, col: 5, offset: 36373},
							expr: &litMatcher{
								pos:        position{line: 1279, col: 5, offset: 36373},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1279, col: 10, offset: 36378},
							expr: &seqExpr{
								pos: position{line: 1279, col: 11, offset: 36379},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1279, col: 11, offset: 36379},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 19, offset: 36387},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1283, col: 1, offset: 36513},
			expr: &seqExpr{
				pos: position{line: 1283, col: 11, offset: 36523},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 36523},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1283, col: 16, offset: 36528},
						expr: &seqExpr{
							pos: position{line: 1283, col: 17, offset: 36529},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1283, col: 17, offset: 36529},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1283, col: 21, offset: 36533},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1285, col: 1, offset: 36541},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 5, offset: 36554},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1286, col: 5, offset: 36554},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1287, col: 5, offset: 36564},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1288, col: 5, offset: 36574},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1289, col: 5, offset: 36584},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1290, col: 5, offset: 36593},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1291, col: 5, offset: 36602},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1292, col: 5, offset: 36611},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1293, col: 5, offset: 36620},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1294, col: 5, offset: 36629},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1296, col: 1, offset: 36635},
			expr: &actionExpr{
				pos: position{line: 1297, col: 5, offset: 36642},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1297, col: 5, offset: 36642},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1297, col: 5, offset: 36642},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1297, col: 10, offset: 36647},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1297, col: 14, offset: 36651},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1297, col: 19, offset: 36656},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1297, col: 23, offset: 36660},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1297, col: 28, offset: 36665},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1297, col: 32, offset: 36669},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1299, col: 1, offset: 36706},
			expr: &actionExpr{
				pos: position{line: 1300, col: 5, offset: 36714},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1300, col: 5, offset: 36714},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1300, col: 5, offset: 36714},
							expr: &seqExpr{
								pos: position{line: 1300, col: 8, offset: 36717},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1300, col: 8, offset: 36717},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1300, col: 12, offset: 36721},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1300, col: 16, offset: 36725},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1300, col: 20, offset: 36729},
										expr: &choiceExpr{
											pos: position{line: 1300, col: 22, offset: 36731},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1300, col: 22, offset: 36731},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1300, col: 33, offset: 36742},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1300, col: 39, offset: 36748},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 41, offset: 36750},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1304, col: 1, offset: 36914},
			expr: &choiceExpr{
				pos: position{line: 1305, col: 5, offset: 36932},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36932},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36932},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1305, col: 5, offset: 36932},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1305, col: 7, offset: 36934},
										expr: &ruleRefExpr{
											pos:  position{line: 1305, col: 7, offset: 36934},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 17, offset: 36944},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 19, offset: 36946},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 37010},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1308, col: 5, offset: 37010},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1308, col: 5, offset: 37010},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1308, col: 7, offset: 37012},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1308, col: 11, offset: 37016},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1308, col: 13, offset: 37018},
										expr: &ruleRefExpr{
											pos:  position{line: 1308, col: 13, offset: 37018},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1308, col: 23, offset: 37028},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1308, col: 28, offset: 37033},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1308, col: 30, offset: 37035},
										expr: &ruleRefExpr{
											pos:  position{line: 1308, col: 30, offset: 37035},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1308, col: 40, offset: 37045},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1308, col: 42, offset: 37047},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 37146},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1311, col: 5, offset: 37146},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1311, col: 5, offset: 37146},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1311, col: 10, offset: 37151},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1311, col: 12, offset: 37153},
										expr: &ruleRefExpr{
											pos:  position{line: 1311, col: 12, offset: 37153},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1311, col: 22, offset: 37163},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1311, col: 24, offset: 37165},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1314, col: 5, offset: 37236},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1314, col: 5, offset: 37236},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1314, col: 5, offset: 37236},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1314, col: 7, offset: 37238},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1314, col: 11, offset: 37242},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1314, col: 13, offset: 37244},
										expr: &ruleRefExpr{
											pos:  position{line: 1314, col: 13, offset: 37244},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1314, col: 23, offset: 37254},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 37322},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1317, col: 5, offset: 37322},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1321, col: 1, offset: 37359},
			expr: &choiceExpr{
				pos: position{line: 1322, col: 5, offset: 37371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1322, col: 5, offset: 37371},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 5, offset: 37378},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1325, col: 1, offset: 37383},
			expr: &actionExpr{
				pos: position{line: 1325, col: 12, offset: 37394},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 12, offset: 37394},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1325, col: 12, offset: 37394},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 16, offset: 37398},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 18, offset: 37400},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1327, col: 1, offset: 37438},
			expr: &actionExpr{
				pos: position{line: 1327, col: 12, offset: 37449},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 12, offset: 37449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1327, col: 12, offset: 37449},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 14, offset: 37451},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1327, col: 18, offset: 37455},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1329, col: 1, offset: 37493},
			expr: &actionExpr{
				pos: position{line: 1330, col: 5, offset: 37504},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 5, offset: 37504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1330, col: 5, offset: 37504},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 7, offset: 37506},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1330, col: 10, offset: 37509},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 14, offset: 37513},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 16, offset: 37515},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1334, col: 1, offset: 37588},
			expr: &actionExpr{
				pos: position{line: 1335, col: 5, offset: 37599},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 5, offset: 37599},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1335, col: 5, offset: 37599},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 7, offset: 37601},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1335, col: 11, offset: 37605},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 15, offset: 37609},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 17, offset: 37611},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1339, col: 1, offset: 37674},
			expr: &actionExpr{
				pos: position{line: 1340, col: 4, offset: 37682},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1340, col: 4, offset: 37682},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1340, col: 6, offset: 37684},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1342, col: 1, offset: 37724},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 5, offset: 37738},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1343, col: 5, offset: 37738},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 5, offset: 37753},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1346, col: 1, offset: 37769},
			expr: &actionExpr{
				pos: position{line: 1346, col: 14, offset: 37782},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1346, col: 14, offset: 37782},
					expr: &charClassMatcher{
						pos:        position{line: 1346, col: 14, offset: 37782},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1348, col: 1, offset: 37821},
			expr: &actionExpr{
				pos: position{line: 1349, col: 5, offset: 37840},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 5, offset: 37840},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1349, col: 5, offset: 37840},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 9, offset: 37844},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1351, col: 1, offset: 37887},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 37903},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 37903},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1352, col: 5, offset: 37903},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1352, col: 5, offset: 37903},
									expr: &litMatcher{
										pos:        position{line: 1352, col: 5, offset: 37903},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1352, col: 10, offset: 37908},
									expr: &charClassMatcher{
										pos:        position{line: 1352, col: 10, offset: 37908},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 17, offset: 37915},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1352, col: 21, offset: 37919},
									expr: &charClassMatcher{
										pos:        position{line: 1352, col: 21, offset: 37919},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1352, col: 28, offset: 37926},
									expr: &ruleRefExpr{
										pos:  position{line: 1352, col: 28, offset: 37926},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1355, col: 5, offset: 37985},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1355, col: 5, offset: 37985},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1355, col: 5, offset: 37985},
									expr: &litMatcher{
										pos:        position{line: 1355, col: 5, offset: 37985},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1355, col: 10, offset: 37990},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1355, col: 14, offset: 37994},
									expr: &charClassMatcher{
										pos:        position{line: 1355, col: 14, offset: 37994},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1355, col: 21, offset: 38001},
									expr: &ruleRefExpr{
										pos:  position{line: 1355, col: 21, offset: 38001},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1359, col: 1, offset: 38057},
			expr: &seqExpr{
				pos: position{line: 1359, col: 16, offset: 38072},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1359, col: 16, offset: 38072},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1359, col: 21, offset: 38077},
						expr: &charClassMatcher{
							pos:        position{line: 1359, col: 21, offset: 38077},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1359, col: 27, offset: 38083},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1361, col: 1, offset: 38095},
			expr: &actionExpr{
				pos: position{line: 1361, col: 7, offset: 38101},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1361, col: 7, offset: 38101},
					expr: &ruleRefExpr{
						pos:  position{line: 1361, col: 7, offset: 38101},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1363, col: 1, offset: 38143},
			expr: &charClassMatcher{
				pos:        position{line: 1363, col: 12, offset: 38154},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1366, col: 1, offset: 38168},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 5, offset: 38185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1367, col: 5, offset: 38185},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1367, col: 5, offset: 38185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1367, col: 5, offset: 38185},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1367, col: 9, offset: 38189},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1367, col: 11, offset: 38191},
										expr: &ruleRefExpr{
											pos:  position{line: 1367, col: 11, offset: 38191},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1367, col: 29, offset: 38209},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 5, offset: 38246},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1368, col: 5, offset: 38246},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1368, col: 5, offset: 38246},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 9, offset: 38250},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1368, col: 11, offset: 38252},
										expr: &ruleRefExpr{
											pos:  position{line: 1368, col: 11, offset: 38252},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 29, offset: 38270},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1370, col: 1, offset: 38304},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 5, offset: 38325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 38325},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1371, col: 5, offset: 38325},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1371, col: 5, offset: 38325},
									expr: &choiceExpr{
										pos: position{line: 1371, col: 7, offset: 38327},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1371, col: 7, offset: 38327},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1371, col: 13, offset: 38333},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1371, col: 26, offset: 38346,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 38383},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1372, col: 5, offset: 38383},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1372, col: 5, offset: 38383},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1372, col: 10, offset: 38388},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1372, col: 12, offset: 38390},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1374, col: 1, offset: 38424},
			expr: &actionExpr{
				pos: position{line: 1375, col: 5, offset: 38436},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 5, offset: 38436},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1375, col: 5, offset: 38436},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 10, offset: 38441},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 23, offset: 38454},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1375, col: 28, offset: 38459},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 28, offset: 38459},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1377, col: 1, offset: 38521},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 5, offset: 38538},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1378, col: 5, offset: 38538},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 5, offset: 38555},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1381, col: 1, offset: 38567},
			expr: &actionExpr{
				pos: position{line: 1381, col: 16, offset: 38582},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1381, col: 16, offset: 38582},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1383, col: 1, offset: 38631},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 5, offset: 38647},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1384, col: 5, offset: 38647},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1385, col: 5, offset: 38664},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1387, col: 1, offset: 38671},
			expr: &actionExpr{
				pos: position{line: 1387, col: 14, offset: 38684},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1387, col: 14, offset: 38684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1387, col: 14, offset: 38684},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 19, offset: 38689},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1387, col: 22, offset: 38692},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1387, col: 22, offset: 38692},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 38, offset: 38708},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1389, col: 1, offset: 38744},
			expr: &actionExpr{
				pos: position{line: 1390, col: 5, offset: 38753},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 5, offset: 38753},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1390, col: 5, offset: 38753},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 6, offset: 38754},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1390, col: 22, offset: 38770},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 23, offset: 38771},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 35, offset: 38783},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 40, offset: 38788},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 50, offset: 38798},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1390, col: 55, offset: 38803},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 55, offset: 38803},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1394, col: 1, offset: 38887},
			expr: &seqExpr{
				pos: position{line: 1394, col: 19, offset: 38905},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1394, col: 19, offset: 38905},
						expr: &litMatcher{
							pos:        position{line: 1394, col: 19, offset: 38905},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 24, offset: 38910},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1395, col: 1, offset: 38923},
			expr: &seqExpr{
				pos: position{line: 1395, col: 15, offset: 38937},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1395, col: 15, offset: 38937},
						expr: &ruleRefExpr{
							pos:  position{line: 1395, col: 15, offset: 38937},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1395, col: 28, offset: 38950},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1397, col: 1, offset: 38955},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 5, offset: 38969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1398, col: 5, offset: 38969},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 5, offset: 38986},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38998},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38998},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1402, col: 1, offset: 39022},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 5, offset: 39035},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1403, col: 5, offset: 39035},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1404, col: 5, offset: 39049},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1406, col: 1, offset: 39056},
			expr: &actionExpr{
				pos: position{line: 1406, col: 11, offset: 39066},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 11, offset: 39066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1406, col: 11, offset: 39066},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 16, offset: 39071},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1406, col: 19, offset: 39074},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1406, col: 19, offset: 39074},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1406, col: 32, offset: 39087},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1408, col: 1, offset: 39123},
			expr: &choiceExpr{
				pos: position{line: 1409, col: 5, offset: 39138},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 39138},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 39138},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1410, col: 5, offset: 39166},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1410, col: 5, offset: 39166},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1411, col: 5, offset: 39196},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1414, col: 1, offset: 39203},
			expr: &choiceExpr{
				pos: position{line: 1415, col: 5, offset: 39224},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1415, col: 5, offset: 39224},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1415, col: 5, offset: 39224},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1415, col: 5, offset: 39224},
									expr: &choiceExpr{
										pos: position{line: 1415, col: 7, offset: 39226},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1415, col: 7, offset: 39226},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1415, col: 13, offset: 39232},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1415, col: 26, offset: 39245,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 39282},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 39282},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1416, col: 5, offset: 39282},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 10, offset: 39287},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1416, col: 12, offset: 39289},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1418, col: 1, offset: 39323},
			expr: &choiceExpr{
				pos: position{line: 1419, col: 5, offset: 39342},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1419, col: 5, offset: 39342},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1419, col: 5, offset: 39342},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1419, col: 5, offset: 39342},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1419, col: 9, offset: 39346},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1419, col: 18, offset: 39355},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 5, offset: 39406},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1421, col: 5, offset: 39427},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1423, col: 1, offset: 39442},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 5, offset: 39463},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 39463},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 39471},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1425, col: 5, offset: 39471},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1426, col: 5, offset: 39511},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 39520},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1427, col: 5, offset: 39520},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 39549},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1428, col: 5, offset: 39549},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 5, offset: 39578},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1429, col: 5, offset: 39578},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1430, col: 5, offset: 39607},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1430, col: 5, offset: 39607},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1431, col: 5, offset: 39636},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1431, col: 5, offset: 39636},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1432, col: 5, offset: 39665},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1432, col: 5, offset: 39665},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1434, col: 1, offset: 39691},
			expr: &choiceExpr{
				pos: position{line: 1435, col: 5, offset: 39709},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1435, col: 5, offset: 39709},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1435, col: 5, offset: 39709},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1436, col: 5, offset: 39737},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1436, col: 5, offset: 39737},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1437, col: 5, offset: 39765},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1439, col: 1, offset: 39771},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 5, offset: 39789},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1440, col: 5, offset: 39789},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1440, col: 5, offset: 39789},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1440, col: 5, offset: 39789},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1440, col: 9, offset: 39793},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1440, col: 16, offset: 39800},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1440, col: 16, offset: 39800},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1440, col: 25, offset: 39809},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1440, col: 34, offset: 39818},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1440, col: 43, offset: 39827},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1443, col: 5, offset: 39890},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1443, col: 5, offset: 39890},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1443, col: 5, offset: 39890},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1443, col: 9, offset: 39894},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1443, col: 13, offset: 39898},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1443, col: 20, offset: 39905},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1443, col: 20, offset: 39905},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1443, col: 29, offset: 39914},
												expr: &ruleRefExpr{
													pos:  position{line: 1443, col: 29, offset: 39914},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1443, col: 39, offset: 39924},
												expr: &ruleRefExpr{
													pos:  position{line: 1443, col: 39, offset: 39924},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1443, col: 49, offset: 39934},
												expr: &ruleRefExpr{
													pos:  position{line: 1443, col: 49, offset: 39934},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1443, col: 59, offset: 39944},
												expr: &ruleRefExpr{
													pos:  position{line: 1443, col: 59, offset: 39944},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1443, col: 69, offset: 39954},
												expr: &ruleRefExpr{
													pos:  position{line: 1443, col: 69, offset: 39954},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1443, col: 80, offset: 39965},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1447, col: 1, offset: 40019},
			expr: &actionExpr{
				pos: position{line: 1448, col: 5, offset: 40030},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 5, offset: 40030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1448, col: 5, offset: 40030},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 9, offset: 40034},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 14, offset: 40039},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1448, col: 25, offset: 40050},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1448, col: 29, offset: 40054},
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 30, offset: 40055},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1450, col: 1, offset: 40090},
			expr: &actionExpr{
				pos: position{line: 1451, col: 5, offset: 40105},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1451, col: 5, offset: 40105},
					expr: &choiceExpr{
						pos: position{line: 1451, col: 6, offset: 40106},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1451, col: 6, offset: 40106},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1451, col: 13, offset: 40113},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1453, col: 1, offset: 40153},
			expr: &charClassMatcher{
				pos:        position{line: 1454, col: 5, offset: 40169},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1456, col: 1, offset: 40184},
			expr: &oneOrMoreExpr{
				pos: position{line: 1456, col: 6, offset: 40189},
				expr: &ruleRefExpr{
					pos:  position{line: 1456, col: 6, offset: 40189},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1458, col: 1, offset: 40200},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1458, col: 6, offset: 40205},
				expr: &ruleRefExpr{
					pos:  position{line: 1458, col: 6, offset: 40205},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1460, col: 1, offset: 40216},
			expr: &choiceExpr{
				pos: position{line: 1461, col: 5, offset: 40229},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1461, col: 5, offset: 40229},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1462, col: 5, offset: 40244},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 5, offset: 40263},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1465, col: 1, offset: 40272},
			expr: &anyMatcher{
				line: 1466, col: 5, offset: 40292,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1468, col: 1, offset: 40295},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 5, offset: 40323},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1469, col: 5, offset: 40323},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1470, col: 5, offset: 40332},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1471, col: 5, offset: 40341},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1472, col: 5, offset: 40350},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1473, col: 5, offset: 40358},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1474, col: 5, offset: 40371},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1476, col: 1, offset: 40381},
			expr: &charClassMatcher{
				pos:        position{line: 1477, col: 5, offset: 40400},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1483, col: 1, offset: 40730},
			expr: &ruleRefExpr{
				pos:  position{line: 1486, col: 5, offset: 40801},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1488, col: 1, offset: 40820},
			expr: &seqExpr{
				pos: position{line: 1489, col: 5, offset: 40841},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1489, col: 5, offset: 40841},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1489, col: 10, offset: 40846},
						expr: &seqExpr{
							pos: position{line: 1489, col: 11, offset: 40847},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1489, col: 11, offset: 40847},
									expr: &litMatcher{
										pos:        position{line: 1489, col: 12, offset: 40848},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1489, col: 17, offset: 40853},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1489, col: 35, offset: 40871},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1491, col: 1, offset: 40877},
			expr: &seqExpr{
				pos: position{line: 1492, col: 5, offset: 40899},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1492, col: 5, offset: 40899},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1492, col: 10, offset: 40904},
						expr: &seqExpr{
							pos: position{line: 1492, col: 11, offset: 40905},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1492, col: 11, offset: 40905},
									expr: &ruleRefExpr{
										pos:  position{line: 1492, col: 12, offset: 40906},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1492, col: 27, offset: 40921},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1494, col: 1, offset: 40940},
			expr: &seqExpr{
				pos: position{line: 1494, col: 7, offset: 40946},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1494, col: 7, offset: 40946},
						expr: &ruleRefExpr{
							pos:  position{line: 1494, col: 7, offset: 40946},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1494, col: 19, offset: 40958},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1496, col: 1, offset: 40974},
			expr: &choiceExpr{
				pos: position{line: 1496, col: 7, offset: 40980},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1496, col: 7, offset: 40980},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1496, col: 11, offset: 40984},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1498, col: 1, offset: 40989},
			expr: &notExpr{
				pos: position{line: 1498, col: 7, offset: 40995},
				expr: &anyMatcher{
					line: 1498, col: 8, offset: 40996,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onFromTrunks2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFromTrunks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks2(stack["first"], stack["rest"])
}

func (c *current) onFromTrunks9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonFromTrunks9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks9(stack["first"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq2(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq2(stack["seq"])
}

func (c *current) onFromTrunkSeq9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonFromTrunkSeq9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq9()
}

func (c *current) onFromTrunkTail1(trunk interface{}) (interface{}, error) {
	return trunk, nil
}

func (p *parser) callonFromTrunkTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkTail1(stack["trunk"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation24(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation24(stack["trunks"])
}

func (c *current) onOperation38(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation38(stack["f"])
}

func (c *current) onOperation44(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation44(stack["a"])
}

func (c *current) onOperation50(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation50(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["match"])
}

func (c *current) onShortCut17(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut17(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut29(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut29(stack["v"])
}

func (c *current) onShortCut37(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonShortCut37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut37(stack["search"])
}

func (c *current) onShortCut45(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut45(stack["v"])
}

func (c *current) onShortCut55() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonShortCut55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut55()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch2(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch2(stack["f"], stack["pattern"])
}

func (c *current) onPatternMatch17(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!",

		"operand": map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}}, nil

}

func (p *parser) callonPatternMatch17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch17(stack["f"], stack["pattern"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(name, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "name": name, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["name"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt2(stack["id"])
}

func (c *current) onPoolAt9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolAt9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt9()
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange2(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange2(stack["lower"], stack["upper"])
}

func (c *current) onPoolRange14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolRange14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange14()
}

func (c *current) onPoolTo2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonPoolTo2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo2(stack["val"])
}

func (c *current) onPoolTo9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolTo9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo9()
}

func (c *current) onPoolName2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonPoolName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName2(stack["name"])
}

func (c *current) onPoolName5(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolName5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName5(stack["id"])
}

func (c *current) onPoolName8(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonPoolName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName8(stack["s"])
}

func (c *current) onLayoutArg2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg2(stack["keys"], stack["order"])
}

func (c *current) onLayoutArg11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonLayoutArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg11()
}

func (c *current) onFormatArg2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg2(stack["val"])
}

func (c *current) onFormatArg9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonFormatArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg9()
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onOrderArg14() (interface{}, error) {
	return "", nil
}

func (p *parser) callonOrderArg14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg14()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg2(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg2(stack["lhs"])
}

func (c *current) onAsArg9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAsArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg9()
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
