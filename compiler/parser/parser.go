// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 38, col: 1, offset: 1015},
			expr: &choiceExpr{
				pos: position{line: 39, col: 5, offset: 1029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 39, col: 5, offset: 1029},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 39, col: 5, offset: 1029},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 39, col: 5, offset: 1029},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 12, offset: 1036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 15, offset: 1039},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 39, col: 19, offset: 1043},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 39, col: 29, offset: 1053},
										expr: &ruleRefExpr{
											pos:  position{line: 39, col: 29, offset: 1053},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 34, offset: 1058},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 37, offset: 1061},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 42, col: 5, offset: 1158},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 42, col: 5, offset: 1158},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 42, col: 5, offset: 1158},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 14, offset: 1167},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 42, col: 16, offset: 1169},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 42, col: 21, offset: 1174},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 26, offset: 1179},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 42, col: 28, offset: 1181},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 42, col: 32, offset: 1185},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 42, col: 38, offset: 1191},
										expr: &ruleRefExpr{
											pos:  position{line: 42, col: 38, offset: 1191},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 49, offset: 1202},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 42, col: 52, offset: 1205},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1310},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1310},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 45, col: 5, offset: 1310},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 14, offset: 1319},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 45, col: 17, offset: 1322},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 45, col: 21, offset: 1326},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1332},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1332},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 38, offset: 1343},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 45, col: 41, offset: 1346},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1450},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 1450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 48, col: 5, offset: 1450},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 12, offset: 1457},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 48, col: 15, offset: 1460},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 48, col: 19, offset: 1464},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 48, col: 26, offset: 1471},
										expr: &ruleRefExpr{
											pos:  position{line: 48, col: 26, offset: 1471},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 35, offset: 1480},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 48, col: 38, offset: 1483},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 51, col: 5, offset: 1574},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 8, offset: 1577},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 52, col: 5, offset: 1590},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 52, col: 5, offset: 1590},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 52, col: 5, offset: 1590},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 52, col: 7, offset: 1592},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 52, col: 20, offset: 1605},
									expr: &ruleRefExpr{
										pos:  position{line: 52, col: 21, offset: 1606},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1636},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1636},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 53, col: 5, offset: 1636},
									expr: &seqExpr{
										pos: position{line: 53, col: 7, offset: 1638},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 53, col: 7, offset: 1638},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 53, col: 16, offset: 1647},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 53, col: 25, offset: 1656},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 27, offset: 1658},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 39, offset: 1670},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 40, offset: 1671},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1702},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1702},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 54, col: 5, offset: 1702},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 54, col: 14, offset: 1711},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 54, col: 16, offset: 1713},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 21, offset: 1718},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 1817},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 57, col: 5, offset: 1817},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 10, offset: 1822},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1921},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 60, col: 5, offset: 1921},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 10, offset: 1926},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 2014},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 63, col: 5, offset: 2014},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 10, offset: 2019},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 67, col: 1, offset: 2106},
			expr: &seqExpr{
				pos: position{line: 67, col: 11, offset: 2116},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2116},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 67, col: 15, offset: 2120},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 67, col: 15, offset: 2120},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 22, offset: 2127},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 67, col: 43, offset: 2148},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 67, col: 50, offset: 2155},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 56, offset: 2161},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 68, col: 1, offset: 2166},
			expr: &seqExpr{
				pos: position{line: 68, col: 8, offset: 2173},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 68, col: 8, offset: 2173},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 68, col: 12, offset: 2177},
						expr: &choiceExpr{
							pos: position{line: 68, col: 14, offset: 2179},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 14, offset: 2179},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 68, col: 20, offset: 2185},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 70, col: 1, offset: 2191},
			expr: &actionExpr{
				pos: position{line: 71, col: 5, offset: 2199},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 71, col: 5, offset: 2199},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 71, col: 5, offset: 2199},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 71, col: 8, offset: 2202},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 13, offset: 2207},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 16, offset: 2210},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 18, offset: 2212},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 73, col: 1, offset: 2242},
			expr: &actionExpr{
				pos: position{line: 74, col: 5, offset: 2256},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 74, col: 5, offset: 2256},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 74, col: 5, offset: 2256},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 8, offset: 2259},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 13, offset: 2264},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 18, offset: 2269},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 74, col: 21, offset: 2272},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 26, offset: 2277},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 29, offset: 2280},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 34, offset: 2285},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 78, col: 1, offset: 2374},
			expr: &choiceExpr{
				pos: position{line: 79, col: 5, offset: 2383},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2383},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2383},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 79, col: 5, offset: 2383},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 12, offset: 2390},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 14, offset: 2392},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 19, offset: 2397},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2427},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 80, col: 5, offset: 2427},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 82, col: 1, offset: 2458},
			expr: &choiceExpr{
				pos: position{line: 83, col: 5, offset: 2470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2470},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2470},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 83, col: 5, offset: 2470},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 83, col: 8, offset: 2473},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 15, offset: 2480},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 24, offset: 2489},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 83, col: 28, offset: 2493},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 32, offset: 2497},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2608},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2608},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 86, col: 5, offset: 2608},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 86, col: 8, offset: 2611},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 86, col: 15, offset: 2618},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 90, col: 1, offset: 2726},
			expr: &actionExpr{
				pos: position{line: 91, col: 5, offset: 2739},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 91, col: 5, offset: 2739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 91, col: 5, offset: 2739},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 9, offset: 2743},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 20, offset: 2754},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 91, col: 23, offset: 2757},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 93, col: 1, offset: 2783},
			expr: &choiceExpr{
				pos: position{line: 94, col: 5, offset: 2798},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 94, col: 5, offset: 2798},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2807},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2815},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 2824},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 99, col: 1, offset: 2834},
			expr: &seqExpr{
				pos: position{line: 99, col: 13, offset: 2846},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 99, col: 13, offset: 2846},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 99, col: 17, offset: 2850},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 99, col: 18, offset: 2851},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 99, col: 18, offset: 2851},
										expr: &litMatcher{
											pos:        position{line: 99, col: 19, offset: 2852},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 99, col: 24, offset: 2857},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 99, col: 38, offset: 2871},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 99, col: 57, offset: 2890},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 99, col: 82, offset: 2915},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 99, col: 88, offset: 2921},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 99, col: 94, offset: 2927},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 99, col: 100, offset: 2933},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 101, col: 1, offset: 2939},
			expr: &actionExpr{
				pos: position{line: 101, col: 14, offset: 2952},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 101, col: 15, offset: 2953},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 101, col: 15, offset: 2953},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 101, col: 22, offset: 2960},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 101, col: 30, offset: 2968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 101, col: 30, offset: 2968},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 101, col: 35, offset: 2973},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 36, offset: 2974},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 101, col: 54, offset: 2992},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 101, col: 61, offset: 2999},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 101, col: 67, offset: 3005},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 101, col: 74, offset: 3012},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 103, col: 1, offset: 3049},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3067},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3067},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3067},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 11, offset: 3073},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 21, offset: 3083},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 26, offset: 3088},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 26, offset: 3088},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 108, col: 1, offset: 3162},
			expr: &actionExpr{
				pos: position{line: 108, col: 16, offset: 3177},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 108, col: 16, offset: 3177},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 108, col: 16, offset: 3177},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 18, offset: 3179},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 26, offset: 3187},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 28, offset: 3189},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 30, offset: 3191},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 110, col: 1, offset: 3241},
			expr: &actionExpr{
				pos: position{line: 111, col: 5, offset: 3255},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 111, col: 5, offset: 3255},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 111, col: 5, offset: 3255},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 11, offset: 3261},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 3278},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 10, offset: 3283},
								expr: &actionExpr{
									pos: position{line: 112, col: 11, offset: 3284},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 112, col: 11, offset: 3284},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 112, col: 11, offset: 3284},
												expr: &seqExpr{
													pos: position{line: 112, col: 12, offset: 3285},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 112, col: 12, offset: 3285},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 112, col: 14, offset: 3287},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 25, offset: 3298},
												name: "_",
											},
											&notExpr{
												pos: position{line: 112, col: 27, offset: 3300},
												expr: &choiceExpr{
													pos: position{line: 112, col: 29, offset: 3302},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 112, col: 29, offset: 3302},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 112, col: 39, offset: 3312},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 112, col: 59, offset: 3332},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 64, offset: 3337},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 116, col: 1, offset: 3453},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 3476},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 117, col: 5, offset: 3476},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 117, col: 5, offset: 3476},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 117, col: 14, offset: 3485},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 118, col: 5, offset: 3492},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 118, col: 5, offset: 3492},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 118, col: 10, offset: 3497},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 120, col: 1, offset: 3501},
			expr: &choiceExpr{
				pos: position{line: 121, col: 5, offset: 3518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3518},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3518},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 121, col: 6, offset: 3519},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 121, col: 6, offset: 3519},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 121, col: 6, offset: 3519},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 121, col: 15, offset: 3528},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 121, col: 19, offset: 3532},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 121, col: 19, offset: 3532},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 121, col: 23, offset: 3536},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 121, col: 27, offset: 3540},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 29, offset: 3542},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3654},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 124, col: 5, offset: 3654},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 9, offset: 3658},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 124, col: 12, offset: 3661},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 17, offset: 3666},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 31, offset: 3680},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 124, col: 34, offset: 3683},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 5, offset: 3712},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 127, col: 1, offset: 3724},
			expr: &choiceExpr{
				pos: position{line: 128, col: 5, offset: 3739},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 128, col: 5, offset: 3739},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 129, col: 5, offset: 3748},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 3759},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 130, col: 5, offset: 3759},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 130, col: 5, offset: 3759},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 7, offset: 3761},
										name: "SearchValue",
									},
								},
								&andExpr{
									pos: position{line: 130, col: 19, offset: 3773},
									expr: &seqExpr{
										pos: position{line: 130, col: 21, offset: 3775},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 130, col: 21, offset: 3775},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 130, col: 23, offset: 3777},
												name: "Glob",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 133, col: 5, offset: 3888},
						run: (*parser).callonSearchExpr12,
						expr: &seqExpr{
							pos: position{line: 133, col: 5, offset: 3888},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 133, col: 5, offset: 3888},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 7, offset: 3890},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 133, col: 19, offset: 3902},
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 20, offset: 3903},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 4018},
						run: (*parser).callonSearchExpr18,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 4018},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 136, col: 5, offset: 4018},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 136, col: 9, offset: 4022},
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 10, offset: 4023},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 139, col: 5, offset: 4139},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 141, col: 1, offset: 4156},
			expr: &choiceExpr{
				pos: position{line: 142, col: 5, offset: 4176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 142, col: 5, offset: 4176},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 142, col: 5, offset: 4176},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 142, col: 5, offset: 4176},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 142, col: 9, offset: 4180},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 142, col: 22, offset: 4193},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 142, col: 25, offset: 4196},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 142, col: 28, offset: 4199},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 142, col: 39, offset: 4210},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 142, col: 42, offset: 4213},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 142, col: 46, offset: 4217},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 145, col: 6, offset: 4340},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 145, col: 6, offset: 4340},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 6, offset: 4340},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 12, offset: 4346},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 145, col: 21, offset: 4355},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 145, col: 26, offset: 4360},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 27, offset: 4361},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 149, col: 1, offset: 4433},
			expr: &choiceExpr{
				pos: position{line: 150, col: 5, offset: 4449},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 150, col: 5, offset: 4449},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4461},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4461},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 151, col: 5, offset: 4461},
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 6, offset: 4462},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 151, col: 20, offset: 4476},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 22, offset: 4478},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 155, col: 1, offset: 4586},
			expr: &actionExpr{
				pos: position{line: 156, col: 5, offset: 4595},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 156, col: 5, offset: 4595},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 156, col: 13, offset: 4603},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 160, col: 1, offset: 4699},
			expr: &actionExpr{
				pos: position{line: 161, col: 5, offset: 4710},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 161, col: 5, offset: 4710},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 161, col: 13, offset: 4718},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 167, col: 1, offset: 4844},
			expr: &choiceExpr{
				pos: position{line: 168, col: 5, offset: 4860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 168, col: 5, offset: 4860},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 168, col: 5, offset: 4860},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 168, col: 5, offset: 4860},
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 5, offset: 4860},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 168, col: 16, offset: 4871},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 21, offset: 4876},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 168, col: 33, offset: 4888},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 39, offset: 4894},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 171, col: 5, offset: 5020},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 171, col: 5, offset: 5020},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 171, col: 5, offset: 5020},
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 5, offset: 5020},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 171, col: 16, offset: 5031},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 21, offset: 5036},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 171, col: 36, offset: 5051},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 171, col: 41, offset: 5056},
										expr: &seqExpr{
											pos: position{line: 171, col: 42, offset: 5057},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 171, col: 42, offset: 5057},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 171, col: 44, offset: 5059},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 171, col: 58, offset: 5073},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 64, offset: 5079},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 179, col: 1, offset: 5293},
			expr: &seqExpr{
				pos: position{line: 179, col: 13, offset: 5305},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 179, col: 13, offset: 5305},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 25, offset: 5317},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 181, col: 1, offset: 5320},
			expr: &actionExpr{
				pos: position{line: 182, col: 5, offset: 5336},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 182, col: 5, offset: 5336},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 182, col: 5, offset: 5336},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 13, offset: 5344},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 15, offset: 5346},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 23, offset: 5354},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 184, col: 1, offset: 5395},
			expr: &choiceExpr{
				pos: position{line: 185, col: 5, offset: 5408},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5408},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5408},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 185, col: 5, offset: 5408},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 185, col: 7, offset: 5410},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 185, col: 14, offset: 5417},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 185, col: 16, offset: 5419},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 185, col: 25, offset: 5428},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 185, col: 27, offset: 5430},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 33, offset: 5436},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5467},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 186, col: 5, offset: 5467},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 191, col: 1, offset: 5727},
			expr: &choiceExpr{
				pos: position{line: 192, col: 5, offset: 5746},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 5746},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5761},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 193, col: 5, offset: 5761},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 10, offset: 5766},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 195, col: 1, offset: 5858},
			expr: &actionExpr{
				pos: position{line: 196, col: 5, offset: 5878},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 196, col: 5, offset: 5878},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 196, col: 5, offset: 5878},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 11, offset: 5884},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 26, offset: 5899},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 196, col: 31, offset: 5904},
								expr: &actionExpr{
									pos: position{line: 196, col: 32, offset: 5905},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 196, col: 32, offset: 5905},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 196, col: 32, offset: 5905},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 196, col: 35, offset: 5908},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 196, col: 39, offset: 5912},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 196, col: 42, offset: 5915},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 196, col: 47, offset: 5920},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 200, col: 1, offset: 6042},
			expr: &choiceExpr{
				pos: position{line: 201, col: 5, offset: 6060},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6060},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 201, col: 5, offset: 6060},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 201, col: 5, offset: 6060},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 10, offset: 6065},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 15, offset: 6070},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 201, col: 18, offset: 6073},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 23, offset: 6078},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 26, offset: 6081},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 30, offset: 6085},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6189},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6189},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 9, offset: 6193},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 208, col: 1, offset: 6293},
			expr: &actionExpr{
				pos: position{line: 209, col: 5, offset: 6301},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 209, col: 5, offset: 6301},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 209, col: 5, offset: 6301},
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 6, offset: 6302},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 209, col: 16, offset: 6312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 19, offset: 6315},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 27, offset: 6323},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 209, col: 30, offset: 6326},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 34, offset: 6330},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 37, offset: 6333},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 209, col: 42, offset: 6338},
								expr: &ruleRefExpr{
									pos:  position{line: 209, col: 42, offset: 6338},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 49, offset: 6345},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 209, col: 52, offset: 6348},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 209, col: 56, offset: 6352},
							expr: &seqExpr{
								pos: position{line: 209, col: 58, offset: 6354},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 209, col: 58, offset: 6354},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 209, col: 61, offset: 6357},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 209, col: 66, offset: 6362},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 209, col: 72, offset: 6368},
								expr: &ruleRefExpr{
									pos:  position{line: 209, col: 72, offset: 6368},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 217, col: 1, offset: 6558},
			expr: &choiceExpr{
				pos: position{line: 218, col: 5, offset: 6570},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 5, offset: 6570},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 5, offset: 6589},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 5, offset: 6602},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 222, col: 1, offset: 6611},
			expr: &actionExpr{
				pos: position{line: 222, col: 15, offset: 6625},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 222, col: 15, offset: 6625},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 222, col: 15, offset: 6625},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 222, col: 17, offset: 6627},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 25, offset: 6635},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 27, offset: 6637},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 32, offset: 6642},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 224, col: 1, offset: 6678},
			expr: &actionExpr{
				pos: position{line: 225, col: 5, offset: 6697},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 225, col: 5, offset: 6697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 225, col: 5, offset: 6697},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 11, offset: 6703},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 25, offset: 6717},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 225, col: 30, offset: 6722},
								expr: &seqExpr{
									pos: position{line: 225, col: 31, offset: 6723},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 225, col: 31, offset: 6723},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 225, col: 34, offset: 6726},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 225, col: 38, offset: 6730},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 225, col: 41, offset: 6733},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 235, col: 1, offset: 6969},
			expr: &choiceExpr{
				pos: position{line: 236, col: 5, offset: 6982},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6982},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6995},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 7007},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7019},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 7032},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 7045},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 7058},
						name: "WhereProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7072},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7085},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7097},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7112},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7125},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7139},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7152},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7167},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7179},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7192},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7205},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7221},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7233},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7247},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7260},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 259, col: 1, offset: 7271},
			expr: &actionExpr{
				pos: position{line: 260, col: 5, offset: 7284},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 260, col: 5, offset: 7284},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 5, offset: 7284},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 260, col: 12, offset: 7291},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 17, offset: 7296},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 260, col: 26, offset: 7305},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 260, col: 31, offset: 7310},
								expr: &actionExpr{
									pos: position{line: 260, col: 32, offset: 7311},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 260, col: 32, offset: 7311},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 260, col: 32, offset: 7311},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 260, col: 34, offset: 7313},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 36, offset: 7315},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 274, col: 1, offset: 7734},
			expr: &actionExpr{
				pos: position{line: 274, col: 12, offset: 7745},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 274, col: 12, offset: 7745},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 274, col: 17, offset: 7750},
						expr: &actionExpr{
							pos: position{line: 274, col: 18, offset: 7751},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 274, col: 18, offset: 7751},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 274, col: 18, offset: 7751},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 274, col: 20, offset: 7753},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 274, col: 22, offset: 7755},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 276, col: 1, offset: 7811},
			expr: &choiceExpr{
				pos: position{line: 277, col: 5, offset: 7823},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 277, col: 5, offset: 7823},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 277, col: 5, offset: 7823},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 278, col: 5, offset: 7898},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 278, col: 5, offset: 7898},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 278, col: 5, offset: 7898},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 14, offset: 7907},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 278, col: 16, offset: 7909},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 278, col: 23, offset: 7916},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 278, col: 24, offset: 7917},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 278, col: 24, offset: 7917},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 278, col: 34, offset: 7927},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 280, col: 1, offset: 8041},
			expr: &actionExpr{
				pos: position{line: 281, col: 5, offset: 8053},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 281, col: 5, offset: 8053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 5, offset: 8053},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 11, offset: 8059},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 17, offset: 8065},
								expr: &actionExpr{
									pos: position{line: 281, col: 18, offset: 8066},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 281, col: 18, offset: 8066},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 281, col: 18, offset: 8066},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 20, offset: 8068},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 22, offset: 8070},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 46, offset: 8094},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 52, offset: 8100},
								expr: &seqExpr{
									pos: position{line: 281, col: 53, offset: 8101},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 281, col: 53, offset: 8101},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 281, col: 55, offset: 8103},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 66, offset: 8114},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 73, offset: 8121},
								expr: &actionExpr{
									pos: position{line: 281, col: 74, offset: 8122},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 281, col: 74, offset: 8122},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 281, col: 74, offset: 8122},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 76, offset: 8124},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 78, offset: 8126},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 295, col: 1, offset: 8471},
			expr: &actionExpr{
				pos: position{line: 296, col: 5, offset: 8483},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 296, col: 5, offset: 8483},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 5, offset: 8483},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 11, offset: 8489},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 13, offset: 8491},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 18, offset: 8496},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 300, col: 1, offset: 8591},
			expr: &actionExpr{
				pos: position{line: 301, col: 5, offset: 8604},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 301, col: 5, offset: 8604},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 5, offset: 8604},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 12, offset: 8611},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 14, offset: 8613},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 19, offset: 8618},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 305, col: 1, offset: 8709},
			expr: &choiceExpr{
				pos: position{line: 306, col: 5, offset: 8722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 8722},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 306, col: 5, offset: 8722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 306, col: 5, offset: 8722},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 306, col: 12, offset: 8729},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 306, col: 14, offset: 8731},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 306, col: 20, offset: 8737},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8817},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 307, col: 5, offset: 8817},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 309, col: 1, offset: 8892},
			expr: &choiceExpr{
				pos: position{line: 310, col: 5, offset: 8905},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 8905},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 310, col: 5, offset: 8905},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 310, col: 5, offset: 8905},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 310, col: 12, offset: 8912},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 310, col: 14, offset: 8914},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 20, offset: 8920},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 9000},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 311, col: 5, offset: 9000},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereProc",
			pos:  position{line: 313, col: 1, offset: 9075},
			expr: &actionExpr{
				pos: position{line: 314, col: 5, offset: 9089},
				run: (*parser).callonWhereProc1,
				expr: &seqExpr{
					pos: position{line: 314, col: 5, offset: 9089},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 9089},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 13, offset: 9097},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 15, offset: 9099},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 20, offset: 9104},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 318, col: 1, offset: 9190},
			expr: &choiceExpr{
				pos: position{line: 319, col: 5, offset: 9203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 319, col: 5, offset: 9203},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 319, col: 5, offset: 9203},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 319, col: 5, offset: 9203},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 319, col: 12, offset: 9210},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 319, col: 14, offset: 9212},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 9301},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 322, col: 5, offset: 9301},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 326, col: 1, offset: 9390},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 9402},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 327, col: 5, offset: 9402},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 5, offset: 9402},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 11, offset: 9408},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 13, offset: 9410},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 18, offset: 9415},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 331, col: 1, offset: 9506},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 9521},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 9521},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 9521},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 332, col: 14, offset: 9530},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 16, offset: 9532},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 22, offset: 9538},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 33, offset: 9549},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 332, col: 38, offset: 9554},
								expr: &actionExpr{
									pos: position{line: 332, col: 39, offset: 9555},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 332, col: 39, offset: 9555},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 332, col: 39, offset: 9555},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 332, col: 42, offset: 9558},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 332, col: 46, offset: 9562},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 49, offset: 9565},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 52, offset: 9568},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 340, col: 1, offset: 9977},
			expr: &actionExpr{
				pos: position{line: 341, col: 5, offset: 9990},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 341, col: 5, offset: 9990},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 5, offset: 9990},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 341, col: 12, offset: 9997},
							expr: &seqExpr{
								pos: position{line: 341, col: 14, offset: 9999},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 341, col: 14, offset: 9999},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 341, col: 17, offset: 10002},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 345, col: 1, offset: 10073},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 10087},
				run: (*parser).callonShapeProc1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 10087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 5, offset: 10087},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 346, col: 13, offset: 10095},
							expr: &seqExpr{
								pos: position{line: 346, col: 15, offset: 10097},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 346, col: 15, offset: 10097},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 346, col: 18, offset: 10100},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 350, col: 1, offset: 10172},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 10185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10185},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10185},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 10185},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 11, offset: 10191},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 351, col: 21, offset: 10201},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 28, offset: 10208},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 30, offset: 10210},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 33, offset: 10213},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 35, offset: 10215},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 43, offset: 10223},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 51, offset: 10231},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 351, col: 54, offset: 10234},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 58, offset: 10238},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 61, offset: 10241},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 70, offset: 10250},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 351, col: 78, offset: 10258},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 351, col: 86, offset: 10266},
										expr: &seqExpr{
											pos: position{line: 351, col: 87, offset: 10267},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 351, col: 87, offset: 10267},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 351, col: 89, offset: 10269},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10535},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10535},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 358, col: 5, offset: 10535},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 11, offset: 10541},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 358, col: 22, offset: 10552},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 29, offset: 10559},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 31, offset: 10561},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 34, offset: 10564},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 358, col: 36, offset: 10566},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 40, offset: 10570},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 358, col: 48, offset: 10578},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 358, col: 56, offset: 10586},
										expr: &seqExpr{
											pos: position{line: 358, col: 57, offset: 10587},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 358, col: 57, offset: 10587},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 358, col: 59, offset: 10589},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 366, col: 1, offset: 10843},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10857},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10857},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 10857},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 367, col: 5, offset: 10857},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 367, col: 12, offset: 10864},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10894},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10894},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 13, offset: 10902},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10932},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 10932},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 369, col: 5, offset: 10932},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 369, col: 13, offset: 10940},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10969},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10969},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10969},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 13, offset: 10977},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 11007},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 11007},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 373, col: 1, offset: 11043},
			expr: &choiceExpr{
				pos: position{line: 374, col: 5, offset: 11055},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 374, col: 5, offset: 11055},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 11064},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 375, col: 5, offset: 11064},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 375, col: 5, offset: 11064},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 375, col: 9, offset: 11068},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 375, col: 14, offset: 11073},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 375, col: 19, offset: 11078},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 377, col: 1, offset: 11104},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 11119},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 11119},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 11119},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 14, offset: 11128},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 16, offset: 11130},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 420, col: 1, offset: 12624},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 12641},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 421, col: 5, offset: 12641},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 421, col: 7, offset: 12643},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 425, col: 1, offset: 12743},
			expr: &choiceExpr{
				pos: position{line: 426, col: 5, offset: 12758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12758},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 12758},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 426, col: 5, offset: 12758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 426, col: 7, offset: 12760},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 426, col: 12, offset: 12765},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12794},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 427, col: 5, offset: 12794},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 429, col: 1, offset: 12865},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12878},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 430, col: 5, offset: 12878},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 430, col: 12, offset: 12885},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 434, col: 1, offset: 13041},
			expr: &choiceExpr{
				pos: position{line: 435, col: 5, offset: 13053},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 435, col: 5, offset: 13053},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 5, offset: 13062},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 5, offset: 13070},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 439, col: 1, offset: 13076},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 13085},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 13085},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13085},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 12, offset: 13092},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 14, offset: 13094},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 19, offset: 13099},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 24, offset: 13104},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 440, col: 31, offset: 13111},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 31, offset: 13111},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 42, offset: 13122},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 440, col: 49, offset: 13129},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 49, offset: 13129},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 444, col: 1, offset: 13258},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13267},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 13267},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 5, offset: 13267},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 445, col: 12, offset: 13274},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 14, offset: 13276},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 19, offset: 13281},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 447, col: 1, offset: 13312},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 13321},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 13321},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 448, col: 5, offset: 13321},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 12, offset: 13328},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 14, offset: 13330},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 19, offset: 13335},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 450, col: 1, offset: 13366},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13379},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13379},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 13379},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 10, offset: 13384},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 19, offset: 13393},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 22, offset: 13396},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 22, offset: 13396},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 30, offset: 13404},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 35, offset: 13409},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 35, offset: 13409},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 46, offset: 13420},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 52, offset: 13426},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 52, offset: 13426},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 455, col: 1, offset: 13562},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 13570},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 13570},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 456, col: 5, offset: 13570},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 11, offset: 13576},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 13, offset: 13578},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 17, offset: 13582},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 21, offset: 13586},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 28, offset: 13593},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 28, offset: 13593},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 39, offset: 13604},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 46, offset: 13611},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 46, offset: 13611},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 460, col: 1, offset: 13737},
			expr: &actionExpr{
				pos: position{line: 460, col: 7, offset: 13743},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 460, col: 7, offset: 13743},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 460, col: 8, offset: 13744},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 460, col: 8, offset: 13744},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 460, col: 18, offset: 13754},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 28, offset: 13764},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 462, col: 1, offset: 13801},
			expr: &choiceExpr{
				pos: position{line: 463, col: 5, offset: 13810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 13810},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 463, col: 5, offset: 13810},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 7, offset: 13812},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 13847},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 464, col: 5, offset: 13847},
							expr: &charClassMatcher{
								pos:        position{line: 464, col: 5, offset: 13847},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 467, col: 1, offset: 13952},
			expr: &actionExpr{
				pos: position{line: 468, col: 5, offset: 13963},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 468, col: 5, offset: 13963},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 468, col: 5, offset: 13963},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 468, col: 7, offset: 13965},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 12, offset: 13970},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 14, offset: 13972},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 17, offset: 13975},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 471, col: 1, offset: 14041},
			expr: &actionExpr{
				pos: position{line: 471, col: 9, offset: 14049},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 471, col: 9, offset: 14049},
					expr: &charClassMatcher{
						pos:        position{line: 471, col: 10, offset: 14050},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 473, col: 1, offset: 14096},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 14110},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 14110},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 5, offset: 14110},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 7, offset: 14112},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 15, offset: 14120},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 17, offset: 14122},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 23, offset: 14128},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 31, offset: 14136},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 33, offset: 14138},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 38, offset: 14143},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 40, offset: 14145},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 46, offset: 14151},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 478, col: 1, offset: 14256},
			expr: &choiceExpr{
				pos: position{line: 479, col: 5, offset: 14269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 479, col: 5, offset: 14269},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 479, col: 5, offset: 14269},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 479, col: 5, offset: 14269},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 479, col: 10, offset: 14274},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 479, col: 19, offset: 14283},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 479, col: 26, offset: 14290},
										expr: &ruleRefExpr{
											pos:  position{line: 479, col: 26, offset: 14290},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 479, col: 38, offset: 14302},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 479, col: 43, offset: 14307},
										expr: &ruleRefExpr{
											pos:  position{line: 479, col: 43, offset: 14307},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 482, col: 5, offset: 14416},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 482, col: 5, offset: 14416},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 10, offset: 14421},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 486, col: 1, offset: 14522},
			expr: &actionExpr{
				pos: position{line: 487, col: 5, offset: 14537},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 487, col: 5, offset: 14537},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 487, col: 5, offset: 14537},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 487, col: 9, offset: 14541},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 16, offset: 14548},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 489, col: 1, offset: 14581},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 14594},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 14594},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 490, col: 5, offset: 14594},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 490, col: 9, offset: 14598},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 14, offset: 14603},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 492, col: 1, offset: 14640},
			expr: &choiceExpr{
				pos: position{line: 493, col: 5, offset: 14653},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14653},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 5, offset: 14672},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 495, col: 5, offset: 14682},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 497, col: 1, offset: 14696},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 14715},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 14715},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 498, col: 6, offset: 14716},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 498, col: 6, offset: 14716},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 498, col: 24, offset: 14734},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 498, col: 29, offset: 14739},
							expr: &choiceExpr{
								pos: position{line: 498, col: 30, offset: 14740},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 498, col: 30, offset: 14740},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 498, col: 47, offset: 14757},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 500, col: 1, offset: 14796},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14810},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14810},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 501, col: 5, offset: 14810},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 501, col: 7, offset: 14812},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 15, offset: 14820},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 17, offset: 14822},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 22, offset: 14827},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 33, offset: 14838},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 39, offset: 14844},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 505, col: 1, offset: 14954},
			expr: &actionExpr{
				pos: position{line: 506, col: 5, offset: 14968},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 506, col: 5, offset: 14968},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 506, col: 5, offset: 14968},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 506, col: 7, offset: 14970},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 506, col: 16, offset: 14979},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 506, col: 18, offset: 14981},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 22, offset: 14985},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 508, col: 1, offset: 15021},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 15037},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 15037},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 509, col: 5, offset: 15037},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15071},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 510, col: 5, offset: 15071},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 15107},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 511, col: 5, offset: 15107},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 513, col: 1, offset: 15133},
			expr: &choiceExpr{
				pos: position{line: 514, col: 5, offset: 15146},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 15146},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 514, col: 5, offset: 15146},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 514, col: 5, offset: 15146},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 514, col: 7, offset: 15148},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 514, col: 15, offset: 15156},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 514, col: 17, offset: 15158},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15191},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 515, col: 5, offset: 15191},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 515, col: 5, offset: 15191},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 7, offset: 15193},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 15, offset: 15201},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 17, offset: 15203},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 517, col: 1, offset: 15235},
			expr: &actionExpr{
				pos: position{line: 518, col: 5, offset: 15248},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 518, col: 5, offset: 15248},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 524, col: 1, offset: 15442},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 15458},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 15458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 5, offset: 15458},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 15, offset: 15468},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 17, offset: 15470},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 22, offset: 15475},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 28, offset: 15481},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 32, offset: 15485},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 40, offset: 15493},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 43, offset: 15496},
								expr: &ruleRefExpr{
									pos:  position{line: 525, col: 43, offset: 15496},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 529, col: 1, offset: 15608},
			expr: &actionExpr{
				pos: position{line: 530, col: 5, offset: 15622},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 530, col: 5, offset: 15622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 530, col: 5, offset: 15622},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 13, offset: 15630},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 15, offset: 15632},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 20, offset: 15637},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 534, col: 1, offset: 15718},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 15731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15731},
						run: (*parser).callonOverProc2,
						expr: &labeledExpr{
							pos:   position{line: 535, col: 5, offset: 15731},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 10, offset: 15736},
								name: "ScopedOver",
							},
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 15841},
						run: (*parser).callonOverProc5,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 15841},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 538, col: 5, offset: 15841},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 12, offset: 15848},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 538, col: 14, offset: 15850},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 20, offset: 15856},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 542, col: 1, offset: 15964},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 15979},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 15979},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 5, offset: 15979},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 12, offset: 15986},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 14, offset: 15988},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 20, offset: 15994},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 26, offset: 16000},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 29, offset: 16003},
								name: "As",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 32, offset: 16006},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 35, offset: 16009},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 41, offset: 16015},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "OverWith",
			pos:  position{line: 547, col: 1, offset: 16125},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 16138},
				run: (*parser).callonOverWith1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 16138},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 548, col: 5, offset: 16138},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 12, offset: 16145},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 14, offset: 16147},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 20, offset: 16153},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 26, offset: 16159},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 548, col: 28, offset: 16161},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 35, offset: 16168},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 37, offset: 16170},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 44, offset: 16177},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 59, offset: 16192},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 62, offset: 16195},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 68, offset: 16201},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "As",
			pos:  position{line: 552, col: 1, offset: 16373},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 16380},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 16380},
						run: (*parser).callonAs2,
						expr: &seqExpr{
							pos: position{line: 553, col: 5, offset: 16380},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 553, col: 5, offset: 16380},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 553, col: 7, offset: 16382},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 553, col: 12, offset: 16387},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 553, col: 14, offset: 16389},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 553, col: 17, offset: 16392},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 16430},
						run: (*parser).callonAs9,
						expr: &litMatcher{
							pos:        position{line: 554, col: 5, offset: 16430},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 556, col: 1, offset: 16453},
			expr: &choiceExpr{
				pos: position{line: 557, col: 5, offset: 16465},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 16465},
						run: (*parser).callonLetProc2,
						expr: &seqExpr{
							pos: position{line: 557, col: 5, offset: 16465},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 557, col: 5, offset: 16465},
									val:        "let",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 557, col: 11, offset: 16471},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 557, col: 13, offset: 16473},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 557, col: 20, offset: 16480},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 557, col: 35, offset: 16495},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 557, col: 38, offset: 16498},
									label: "over",
									expr: &ruleRefExpr{
										pos:  position{line: 557, col: 43, offset: 16503},
										name: "ScopedOver",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 560, col: 5, offset: 16611},
						name: "OverWith",
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 562, col: 1, offset: 16621},
			expr: &actionExpr{
				pos: position{line: 562, col: 9, offset: 16629},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 562, col: 9, offset: 16629},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 562, col: 9, offset: 16629},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 14, offset: 16634},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 562, col: 17, offset: 16637},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 21, offset: 16641},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 562, col: 24, offset: 16644},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 28, offset: 16648},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 39, offset: 16659},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 562, col: 42, offset: 16662},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 564, col: 1, offset: 16687},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16706},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 16706},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 11, offset: 16712},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 25, offset: 16726},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 565, col: 30, offset: 16731},
								expr: &actionExpr{
									pos: position{line: 565, col: 31, offset: 16732},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 565, col: 31, offset: 16732},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 565, col: 31, offset: 16732},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 565, col: 34, offset: 16735},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 565, col: 38, offset: 16739},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 565, col: 41, offset: 16742},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 565, col: 43, offset: 16744},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 569, col: 1, offset: 16862},
			expr: &choiceExpr{
				pos: position{line: 570, col: 5, offset: 16880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 16880},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 16880},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 570, col: 5, offset: 16880},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 8, offset: 16883},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 23, offset: 16898},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 570, col: 26, offset: 16901},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 30, offset: 16905},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 570, col: 33, offset: 16908},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 38, offset: 16913},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 16995},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 573, col: 5, offset: 16995},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 8, offset: 16998},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 577, col: 1, offset: 17128},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17142},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 578, col: 5, offset: 17142},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 13, offset: 17150},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 15, offset: 17152},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 21, offset: 17158},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 582, col: 1, offset: 17242},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 17254},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 17254},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 583, col: 5, offset: 17254},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 583, col: 7, offset: 17256},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 583, col: 10, offset: 17259},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 12, offset: 17261},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 16, offset: 17265},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 585, col: 1, offset: 17290},
			expr: &actionExpr{
				pos: position{line: 586, col: 5, offset: 17300},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 586, col: 5, offset: 17300},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 586, col: 5, offset: 17300},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 7, offset: 17302},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 10, offset: 17305},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 586, col: 12, offset: 17307},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 16, offset: 17311},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 590, col: 1, offset: 17362},
			expr: &ruleRefExpr{
				pos:  position{line: 590, col: 8, offset: 17369},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 592, col: 1, offset: 17380},
			expr: &actionExpr{
				pos: position{line: 593, col: 5, offset: 17390},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 593, col: 5, offset: 17390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 593, col: 5, offset: 17390},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 11, offset: 17396},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 16, offset: 17401},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 593, col: 21, offset: 17406},
								expr: &actionExpr{
									pos: position{line: 593, col: 22, offset: 17407},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 593, col: 22, offset: 17407},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 593, col: 22, offset: 17407},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 593, col: 25, offset: 17410},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 593, col: 29, offset: 17414},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 593, col: 32, offset: 17417},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 593, col: 37, offset: 17422},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 597, col: 1, offset: 17534},
			expr: &ruleRefExpr{
				pos:  position{line: 597, col: 13, offset: 17546},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 599, col: 1, offset: 17552},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 17567},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 600, col: 5, offset: 17567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 5, offset: 17567},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 11, offset: 17573},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 21, offset: 17583},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 26, offset: 17588},
								expr: &seqExpr{
									pos: position{line: 600, col: 27, offset: 17589},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 600, col: 27, offset: 17589},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 600, col: 30, offset: 17592},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 600, col: 34, offset: 17596},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 600, col: 37, offset: 17599},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 610, col: 1, offset: 17798},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 17814},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 17814},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 611, col: 5, offset: 17814},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 11, offset: 17820},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 22, offset: 17831},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 611, col: 27, offset: 17836},
								expr: &actionExpr{
									pos: position{line: 611, col: 28, offset: 17837},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 611, col: 28, offset: 17837},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 611, col: 28, offset: 17837},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 611, col: 31, offset: 17840},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 611, col: 35, offset: 17844},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 611, col: 38, offset: 17847},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 40, offset: 17849},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 615, col: 1, offset: 17960},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 17975},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 17975},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 17975},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 9, offset: 17979},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 14, offset: 17984},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 616, col: 17, offset: 17987},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 22, offset: 17992},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 25, offset: 17995},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 29, offset: 17999},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 618, col: 1, offset: 18090},
			expr: &ruleRefExpr{
				pos:  position{line: 618, col: 8, offset: 18097},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 620, col: 1, offset: 18114},
			expr: &choiceExpr{
				pos: position{line: 621, col: 5, offset: 18134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 18134},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 621, col: 5, offset: 18134},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 621, col: 5, offset: 18134},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 621, col: 15, offset: 18144},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 621, col: 29, offset: 18158},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 621, col: 32, offset: 18161},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 621, col: 36, offset: 18165},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 621, col: 39, offset: 18168},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 621, col: 50, offset: 18179},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 621, col: 55, offset: 18184},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 621, col: 58, offset: 18187},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 621, col: 62, offset: 18191},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 621, col: 65, offset: 18194},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 621, col: 76, offset: 18205},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 5, offset: 18345},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 626, col: 1, offset: 18360},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 18378},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 627, col: 5, offset: 18378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 627, col: 5, offset: 18378},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 18384},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 628, col: 5, offset: 18403},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 628, col: 10, offset: 18408},
								expr: &actionExpr{
									pos: position{line: 628, col: 11, offset: 18409},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 628, col: 11, offset: 18409},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 628, col: 11, offset: 18409},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 628, col: 14, offset: 18412},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 628, col: 17, offset: 18415},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 628, col: 25, offset: 18423},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 628, col: 28, offset: 18426},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 628, col: 33, offset: 18431},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 632, col: 1, offset: 18549},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18568},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18568},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 18568},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 11, offset: 18574},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 634, col: 5, offset: 18593},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 634, col: 10, offset: 18598},
								expr: &actionExpr{
									pos: position{line: 634, col: 11, offset: 18599},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 634, col: 11, offset: 18599},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 634, col: 11, offset: 18599},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 634, col: 14, offset: 18602},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 634, col: 17, offset: 18605},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 634, col: 26, offset: 18614},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 634, col: 29, offset: 18617},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 634, col: 34, offset: 18622},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 638, col: 1, offset: 18740},
			expr: &choiceExpr{
				pos: position{line: 639, col: 5, offset: 18759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 18759},
						run: (*parser).callonComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 639, col: 5, offset: 18759},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 639, col: 5, offset: 18759},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 639, col: 9, offset: 18763},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 639, col: 22, offset: 18776},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 639, col: 25, offset: 18779},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 639, col: 28, offset: 18782},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 639, col: 39, offset: 18793},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 639, col: 42, offset: 18796},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 639, col: 46, offset: 18800},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 642, col: 5, offset: 18924},
						run: (*parser).callonComparisonExpr12,
						expr: &seqExpr{
							pos: position{line: 642, col: 5, offset: 18924},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 642, col: 5, offset: 18924},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 642, col: 9, offset: 18928},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 642, col: 22, offset: 18941},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 642, col: 25, offset: 18944},
									val:        "~",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 642, col: 29, offset: 18948},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 642, col: 32, offset: 18951},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 642, col: 36, offset: 18955},
										name: "Regexp",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 645, col: 5, offset: 19074},
						name: "AdditiveExpr",
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 647, col: 1, offset: 19088},
			expr: &actionExpr{
				pos: position{line: 648, col: 5, offset: 19105},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 648, col: 5, offset: 19105},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 19105},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 11, offset: 19111},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 19134},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 649, col: 10, offset: 19139},
								expr: &actionExpr{
									pos: position{line: 649, col: 11, offset: 19140},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 649, col: 11, offset: 19140},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 649, col: 11, offset: 19140},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 649, col: 14, offset: 19143},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 649, col: 17, offset: 19146},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 649, col: 34, offset: 19163},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 649, col: 37, offset: 19166},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 649, col: 42, offset: 19171},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 653, col: 1, offset: 19293},
			expr: &actionExpr{
				pos: position{line: 653, col: 20, offset: 19312},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 653, col: 21, offset: 19313},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 653, col: 21, offset: 19313},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 653, col: 27, offset: 19319},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 655, col: 1, offset: 19356},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 19379},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 19379},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19379},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 11, offset: 19385},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 19397},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 657, col: 10, offset: 19402},
								expr: &actionExpr{
									pos: position{line: 657, col: 11, offset: 19403},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 657, col: 11, offset: 19403},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 657, col: 11, offset: 19403},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 657, col: 14, offset: 19406},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 657, col: 17, offset: 19409},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 657, col: 40, offset: 19432},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 657, col: 43, offset: 19435},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 657, col: 48, offset: 19440},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 661, col: 1, offset: 19551},
			expr: &actionExpr{
				pos: position{line: 661, col: 26, offset: 19576},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 661, col: 27, offset: 19577},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 661, col: 27, offset: 19577},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 661, col: 33, offset: 19583},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 661, col: 39, offset: 19589},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 663, col: 1, offset: 19626},
			expr: &choiceExpr{
				pos: position{line: 664, col: 5, offset: 19638},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 19638},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 664, col: 5, offset: 19638},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 664, col: 5, offset: 19638},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 664, col: 9, offset: 19642},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 664, col: 12, offset: 19645},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 14, offset: 19647},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 667, col: 5, offset: 19756},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 669, col: 1, offset: 19770},
			expr: &choiceExpr{
				pos: position{line: 670, col: 5, offset: 19787},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 19787},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 19787},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 670, col: 5, offset: 19787},
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 6, offset: 19788},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 670, col: 14, offset: 19796},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 18, offset: 19800},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 670, col: 21, offset: 19803},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 23, offset: 19805},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 673, col: 5, offset: 19915},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 675, col: 1, offset: 19925},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 19938},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 19938},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 19938},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 676, col: 5, offset: 19938},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 19944},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 676, col: 16, offset: 19949},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 676, col: 21, offset: 19954},
										expr: &ruleRefExpr{
											pos:  position{line: 676, col: 22, offset: 19955},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 679, col: 5, offset: 20026},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 679, col: 5, offset: 20026},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 679, col: 5, offset: 20026},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 20032},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 679, col: 20, offset: 20041},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 679, col: 25, offset: 20046},
										expr: &ruleRefExpr{
											pos:  position{line: 679, col: 26, offset: 20047},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 682, col: 5, offset: 20118},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 683, col: 5, offset: 20132},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 685, col: 1, offset: 20141},
			expr: &seqExpr{
				pos: position{line: 685, col: 13, offset: 20153},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 685, col: 13, offset: 20153},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 685, col: 22, offset: 20162},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 685, col: 25, offset: 20165},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 687, col: 1, offset: 20170},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 20183},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 688, col: 5, offset: 20183},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 689, col: 5, offset: 20193},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 691, col: 1, offset: 20203},
			expr: &actionExpr{
				pos: position{line: 692, col: 5, offset: 20212},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 692, col: 5, offset: 20212},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 692, col: 5, offset: 20212},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 9, offset: 20216},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 18, offset: 20225},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 692, col: 21, offset: 20228},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 25, offset: 20232},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 692, col: 28, offset: 20235},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 33, offset: 20240},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 38, offset: 20245},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 692, col: 41, offset: 20248},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 696, col: 1, offset: 20345},
			expr: &choiceExpr{
				pos: position{line: 697, col: 5, offset: 20358},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 697, col: 5, offset: 20358},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 20367},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 698, col: 5, offset: 20367},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 698, col: 5, offset: 20367},
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 6, offset: 20368},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 698, col: 16, offset: 20378},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 19, offset: 20381},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 34, offset: 20396},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 698, col: 37, offset: 20399},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 41, offset: 20403},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 698, col: 44, offset: 20406},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 49, offset: 20411},
										name: "OptionalExprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 63, offset: 20425},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 698, col: 66, offset: 20428},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 698, col: 70, offset: 20432},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 698, col: 76, offset: 20438},
										expr: &ruleRefExpr{
											pos:  position{line: 698, col: 76, offset: 20438},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 702, col: 1, offset: 20559},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 20568},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 20568},
						run: (*parser).callonGrep2,
						expr: &seqExpr{
							pos: position{line: 703, col: 5, offset: 20568},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 703, col: 5, offset: 20568},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 12, offset: 20575},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 703, col: 15, offset: 20578},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 19, offset: 20582},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 703, col: 22, offset: 20585},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 703, col: 30, offset: 20593},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 38, offset: 20601},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 703, col: 41, offset: 20604},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20759},
						run: (*parser).callonGrep12,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20759},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 706, col: 5, offset: 20759},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 12, offset: 20766},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 15, offset: 20769},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 19, offset: 20773},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 706, col: 22, offset: 20776},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 30, offset: 20784},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 38, offset: 20792},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 42, offset: 20796},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 46, offset: 20800},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 706, col: 49, offset: 20803},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 54, offset: 20808},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 59, offset: 20813},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 62, offset: 20816},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 710, col: 1, offset: 20920},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20932},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 711, col: 5, offset: 20932},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 712, col: 5, offset: 20943},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20952},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 713, col: 5, offset: 20952},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 7, offset: 20954},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 717, col: 1, offset: 21046},
			expr: &choiceExpr{
				pos: position{line: 718, col: 5, offset: 21064},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 718, col: 5, offset: 21064},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 21074},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 719, col: 5, offset: 21074},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 721, col: 1, offset: 21110},
			expr: &actionExpr{
				pos: position{line: 722, col: 5, offset: 21120},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 722, col: 5, offset: 21120},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 722, col: 5, offset: 21120},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 11, offset: 21126},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 16, offset: 21131},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 722, col: 21, offset: 21136},
								expr: &actionExpr{
									pos: position{line: 722, col: 22, offset: 21137},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 722, col: 22, offset: 21137},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 722, col: 22, offset: 21137},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 722, col: 25, offset: 21140},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 722, col: 29, offset: 21144},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 722, col: 32, offset: 21147},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 722, col: 34, offset: 21149},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 726, col: 1, offset: 21258},
			expr: &actionExpr{
				pos: position{line: 727, col: 5, offset: 21272},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 727, col: 5, offset: 21272},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 727, col: 5, offset: 21272},
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 6, offset: 21273},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 10, offset: 21277},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 16, offset: 21283},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 27, offset: 21294},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 727, col: 32, offset: 21299},
								expr: &ruleRefExpr{
									pos:  position{line: 727, col: 33, offset: 21300},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 731, col: 1, offset: 21368},
			expr: &choiceExpr{
				pos: position{line: 732, col: 5, offset: 21378},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 732, col: 5, offset: 21378},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 732, col: 5, offset: 21378},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 732, col: 5, offset: 21378},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 732, col: 9, offset: 21382},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 14, offset: 21387},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 732, col: 27, offset: 21400},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 732, col: 30, offset: 21403},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 732, col: 34, offset: 21407},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 732, col: 37, offset: 21410},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 40, offset: 21413},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 732, col: 53, offset: 21426},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 21597},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 738, col: 5, offset: 21597},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 738, col: 5, offset: 21597},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 9, offset: 21601},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 12, offset: 21604},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 16, offset: 21608},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 738, col: 19, offset: 21611},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 22, offset: 21614},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 738, col: 35, offset: 21627},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21798},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 744, col: 5, offset: 21798},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 744, col: 5, offset: 21798},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 744, col: 9, offset: 21802},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 14, offset: 21807},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 27, offset: 21820},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 744, col: 30, offset: 21823},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 34, offset: 21827},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 744, col: 37, offset: 21830},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 750, col: 5, offset: 22003},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 750, col: 5, offset: 22003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 750, col: 5, offset: 22003},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 750, col: 9, offset: 22007},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 750, col: 14, offset: 22012},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 750, col: 19, offset: 22017},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 22066},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 22066},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 751, col: 5, offset: 22066},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 751, col: 9, offset: 22070},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 12, offset: 22073},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 753, col: 1, offset: 22124},
			expr: &choiceExpr{
				pos: position{line: 754, col: 5, offset: 22136},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 754, col: 5, offset: 22136},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 755, col: 5, offset: 22147},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 756, col: 5, offset: 22157},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 757, col: 5, offset: 22165},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 758, col: 5, offset: 22173},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22185},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 759, col: 5, offset: 22185},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 9, offset: 22189},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 759, col: 12, offset: 22192},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 17, offset: 22197},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 22, offset: 22202},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 759, col: 25, offset: 22205},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 761, col: 1, offset: 22231},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 22242},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 762, col: 5, offset: 22242},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 762, col: 5, offset: 22242},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 9, offset: 22246},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 762, col: 12, offset: 22249},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 18, offset: 22255},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 30, offset: 22267},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 762, col: 33, offset: 22270},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 766, col: 1, offset: 22360},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 22376},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 22376},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 767, col: 5, offset: 22376},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 767, col: 5, offset: 22376},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 11, offset: 22382},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 767, col: 22, offset: 22393},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 767, col: 27, offset: 22398},
										expr: &ruleRefExpr{
											pos:  position{line: 767, col: 27, offset: 22398},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22497},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 770, col: 5, offset: 22497},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 772, col: 1, offset: 22533},
			expr: &actionExpr{
				pos: position{line: 772, col: 18, offset: 22550},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 772, col: 18, offset: 22550},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 772, col: 18, offset: 22550},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 772, col: 21, offset: 22553},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 25, offset: 22557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 772, col: 28, offset: 22560},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 33, offset: 22565},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 774, col: 1, offset: 22598},
			expr: &choiceExpr{
				pos: position{line: 775, col: 5, offset: 22613},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 775, col: 5, offset: 22613},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 776, col: 5, offset: 22624},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 777, col: 5, offset: 22634},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 779, col: 1, offset: 22646},
			expr: &actionExpr{
				pos: position{line: 780, col: 5, offset: 22657},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 780, col: 5, offset: 22657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 780, col: 5, offset: 22657},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 11, offset: 22663},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 14, offset: 22666},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 19, offset: 22671},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 784, col: 1, offset: 22757},
			expr: &actionExpr{
				pos: position{line: 785, col: 5, offset: 22767},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 785, col: 5, offset: 22767},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 785, col: 5, offset: 22767},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 10, offset: 22772},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 20, offset: 22782},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 785, col: 23, offset: 22785},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 27, offset: 22789},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 785, col: 30, offset: 22792},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 36, offset: 22798},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 789, col: 1, offset: 22898},
			expr: &actionExpr{
				pos: position{line: 790, col: 5, offset: 22908},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 790, col: 5, offset: 22908},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 790, col: 5, offset: 22908},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 9, offset: 22912},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 790, col: 12, offset: 22915},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 18, offset: 22921},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 32, offset: 22935},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 790, col: 35, offset: 22938},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 794, col: 1, offset: 23028},
			expr: &actionExpr{
				pos: position{line: 795, col: 5, offset: 23036},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 795, col: 5, offset: 23036},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 795, col: 5, offset: 23036},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 10, offset: 23041},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 795, col: 13, offset: 23044},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 19, offset: 23050},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 33, offset: 23064},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 795, col: 36, offset: 23067},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 799, col: 1, offset: 23156},
			expr: &actionExpr{
				pos: position{line: 800, col: 5, offset: 23164},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 800, col: 5, offset: 23164},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 800, col: 5, offset: 23164},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 800, col: 10, offset: 23169},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 800, col: 13, offset: 23172},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 19, offset: 23178},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 800, col: 27, offset: 23186},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 800, col: 30, offset: 23189},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 804, col: 1, offset: 23280},
			expr: &choiceExpr{
				pos: position{line: 805, col: 5, offset: 23292},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 23292},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 805, col: 5, offset: 23292},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 805, col: 5, offset: 23292},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 11, offset: 23298},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 805, col: 17, offset: 23304},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 805, col: 22, offset: 23309},
										expr: &ruleRefExpr{
											pos:  position{line: 805, col: 22, offset: 23309},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 808, col: 5, offset: 23403},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 808, col: 5, offset: 23403},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 811, col: 1, offset: 23440},
			expr: &actionExpr{
				pos: position{line: 811, col: 13, offset: 23452},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 811, col: 13, offset: 23452},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 811, col: 13, offset: 23452},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 811, col: 16, offset: 23455},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 811, col: 20, offset: 23459},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 811, col: 23, offset: 23462},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 25, offset: 23464},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 813, col: 1, offset: 23489},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 23499},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 814, col: 5, offset: 23499},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 814, col: 5, offset: 23499},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 9, offset: 23503},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 14, offset: 23508},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 814, col: 17, offset: 23511},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 21, offset: 23515},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 814, col: 24, offset: 23518},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 30, offset: 23524},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 820, col: 1, offset: 23631},
			expr: &actionExpr{
				pos: position{line: 821, col: 5, offset: 23643},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 821, col: 5, offset: 23643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 821, col: 5, offset: 23643},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 15, offset: 23653},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 822, col: 5, offset: 23667},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 822, col: 10, offset: 23672},
								expr: &ruleRefExpr{
									pos:  position{line: 822, col: 10, offset: 23672},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 5, offset: 23685},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 823, col: 11, offset: 23691},
								expr: &ruleRefExpr{
									pos:  position{line: 823, col: 11, offset: 23691},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 824, col: 5, offset: 23705},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 824, col: 11, offset: 23711},
								expr: &ruleRefExpr{
									pos:  position{line: 824, col: 11, offset: 23711},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 5, offset: 23725},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 825, col: 13, offset: 23733},
								expr: &ruleRefExpr{
									pos:  position{line: 825, col: 13, offset: 23733},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 826, col: 5, offset: 23749},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 826, col: 12, offset: 23756},
								expr: &ruleRefExpr{
									pos:  position{line: 826, col: 12, offset: 23756},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 827, col: 5, offset: 23771},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 827, col: 13, offset: 23779},
								expr: &ruleRefExpr{
									pos:  position{line: 827, col: 13, offset: 23779},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 828, col: 5, offset: 23795},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 23801},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 852, col: 1, offset: 24168},
			expr: &choiceExpr{
				pos: position{line: 853, col: 5, offset: 24182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 24182},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 853, col: 5, offset: 24182},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 853, col: 5, offset: 24182},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 853, col: 12, offset: 24189},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 853, col: 14, offset: 24191},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 24219},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 854, col: 5, offset: 24219},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 854, col: 5, offset: 24219},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 854, col: 12, offset: 24226},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 854, col: 14, offset: 24228},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 854, col: 26, offset: 24240},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 856, col: 1, offset: 24284},
			expr: &choiceExpr{
				pos: position{line: 857, col: 5, offset: 24302},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 24302},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 857, col: 5, offset: 24302},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 857, col: 5, offset: 24302},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 9, offset: 24306},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 14, offset: 24311},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 16, offset: 24313},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 19, offset: 24316},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 857, col: 21, offset: 24318},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 25, offset: 24322},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 24416},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 858, col: 5, offset: 24416},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 10, offset: 24421},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 860, col: 1, offset: 24513},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 24532},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 24532},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 861, col: 5, offset: 24532},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 11, offset: 24538},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 861, col: 25, offset: 24552},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 861, col: 30, offset: 24557},
								expr: &actionExpr{
									pos: position{line: 861, col: 31, offset: 24558},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 861, col: 31, offset: 24558},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 861, col: 31, offset: 24558},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 861, col: 34, offset: 24561},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 861, col: 38, offset: 24565},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 861, col: 41, offset: 24568},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 861, col: 46, offset: 24573},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 865, col: 1, offset: 24694},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 24706},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24706},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 24706},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 866, col: 5, offset: 24706},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 7, offset: 24708},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 12, offset: 24713},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 866, col: 14, offset: 24715},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 20, offset: 24721},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 29, offset: 24730},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 866, col: 35, offset: 24736},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 35, offset: 24736},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 24831},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 869, col: 5, offset: 24831},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 869, col: 5, offset: 24831},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 7, offset: 24833},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 12, offset: 24838},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 869, col: 14, offset: 24840},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 871, col: 1, offset: 24865},
			expr: &choiceExpr{
				pos: position{line: 872, col: 5, offset: 24878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 24878},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 872, col: 5, offset: 24878},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 872, col: 5, offset: 24878},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 872, col: 7, offset: 24880},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 872, col: 10, offset: 24883},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 872, col: 12, offset: 24885},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 15, offset: 24888},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 24916},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 24916},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 873, col: 5, offset: 24916},
									name: "_",
								},
								&notExpr{
									pos: position{line: 873, col: 7, offset: 24918},
									expr: &seqExpr{
										pos: position{line: 873, col: 9, offset: 24920},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 873, col: 9, offset: 24920},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 873, col: 27, offset: 24938},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 873, col: 30, offset: 24941},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 33, offset: 24944},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 875, col: 1, offset: 24969},
			expr: &ruleRefExpr{
				pos:  position{line: 876, col: 5, offset: 24982},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 878, col: 1, offset: 24988},
			expr: &actionExpr{
				pos: position{line: 879, col: 5, offset: 25001},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 879, col: 5, offset: 25001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 25001},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 11, offset: 25007},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 19, offset: 25015},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 879, col: 24, offset: 25020},
								expr: &actionExpr{
									pos: position{line: 879, col: 25, offset: 25021},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 879, col: 25, offset: 25021},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 879, col: 30, offset: 25026},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 883, col: 1, offset: 25141},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 25153},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 25153},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 25153},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 11, offset: 25159},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 24, offset: 25172},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 26, offset: 25174},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 31, offset: 25179},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 33, offset: 25181},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 39, offset: 25187},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 48, offset: 25196},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 884, col: 54, offset: 25202},
								expr: &ruleRefExpr{
									pos:  position{line: 884, col: 54, offset: 25202},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 64, offset: 25212},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 66, offset: 25214},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 69, offset: 25217},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 71, offset: 25219},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 79, offset: 25227},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 87, offset: 25235},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 884, col: 90, offset: 25238},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 94, offset: 25242},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 97, offset: 25245},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 106, offset: 25254},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 899, col: 1, offset: 25485},
			expr: &choiceExpr{
				pos: position{line: 900, col: 5, offset: 25502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 25502},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 900, col: 5, offset: 25502},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 900, col: 5, offset: 25502},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 900, col: 7, offset: 25504},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 900, col: 14, offset: 25511},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 900, col: 14, offset: 25511},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 900, col: 21, offset: 25518},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 900, col: 29, offset: 25526},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 900, col: 36, offset: 25533},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 25566},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 901, col: 5, offset: 25566},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 903, col: 1, offset: 25594},
			expr: &actionExpr{
				pos: position{line: 904, col: 5, offset: 25607},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 904, col: 5, offset: 25607},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 904, col: 5, offset: 25607},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 7, offset: 25609},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 13, offset: 25615},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 904, col: 15, offset: 25617},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 20, offset: 25622},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 906, col: 1, offset: 25658},
			expr: &actionExpr{
				pos: position{line: 907, col: 5, offset: 25673},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 907, col: 5, offset: 25673},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 907, col: 5, offset: 25673},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 7, offset: 25675},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 13, offset: 25681},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 15, offset: 25683},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 18, offset: 25686},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 20, offset: 25688},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 28, offset: 25696},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 909, col: 1, offset: 25732},
			expr: &actionExpr{
				pos: position{line: 910, col: 5, offset: 25746},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 910, col: 5, offset: 25746},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 910, col: 5, offset: 25746},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 7, offset: 25748},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 910, col: 14, offset: 25755},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 910, col: 16, offset: 25757},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 21, offset: 25762},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 912, col: 1, offset: 25798},
			expr: &actionExpr{
				pos: position{line: 913, col: 5, offset: 25813},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 913, col: 5, offset: 25813},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 913, col: 5, offset: 25813},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 7, offset: 25815},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 13, offset: 25821},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 15, offset: 25823},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 18, offset: 25826},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 913, col: 20, offset: 25828},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 25, offset: 25833},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 31, offset: 25839},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 37, offset: 25845},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 917, col: 1, offset: 25955},
			expr: &choiceExpr{
				pos: position{line: 918, col: 5, offset: 25968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 918, col: 5, offset: 25968},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 918, col: 5, offset: 25968},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 918, col: 5, offset: 25968},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 918, col: 7, offset: 25970},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 918, col: 12, offset: 25975},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 918, col: 12, offset: 25975},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 918, col: 18, offset: 25981},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 26011},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 919, col: 5, offset: 26011},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 921, col: 1, offset: 26037},
			expr: &choiceExpr{
				pos: position{line: 922, col: 5, offset: 26050},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 922, col: 5, offset: 26050},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 922, col: 5, offset: 26050},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 922, col: 5, offset: 26050},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 922, col: 7, offset: 26052},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 922, col: 13, offset: 26058},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 922, col: 15, offset: 26060},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 922, col: 21, offset: 26066},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 26097},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 923, col: 5, offset: 26097},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 925, col: 1, offset: 26119},
			expr: &actionExpr{
				pos: position{line: 925, col: 10, offset: 26128},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 10, offset: 26128},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 926, col: 1, offset: 26163},
			expr: &actionExpr{
				pos: position{line: 926, col: 6, offset: 26168},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 6, offset: 26168},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 927, col: 1, offset: 26195},
			expr: &actionExpr{
				pos: position{line: 927, col: 8, offset: 26202},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 8, offset: 26202},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 928, col: 1, offset: 26233},
			expr: &actionExpr{
				pos: position{line: 928, col: 8, offset: 26240},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 8, offset: 26240},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 929, col: 1, offset: 26271},
			expr: &actionExpr{
				pos: position{line: 929, col: 9, offset: 26279},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 929, col: 9, offset: 26279},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 930, col: 1, offset: 26312},
			expr: &actionExpr{
				pos: position{line: 930, col: 9, offset: 26320},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 930, col: 9, offset: 26320},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 931, col: 1, offset: 26353},
			expr: &actionExpr{
				pos: position{line: 931, col: 6, offset: 26358},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 931, col: 6, offset: 26358},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 932, col: 1, offset: 26385},
			expr: &actionExpr{
				pos: position{line: 932, col: 10, offset: 26394},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 932, col: 10, offset: 26394},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 933, col: 1, offset: 26429},
			expr: &actionExpr{
				pos: position{line: 933, col: 9, offset: 26437},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 933, col: 9, offset: 26437},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 934, col: 1, offset: 26470},
			expr: &actionExpr{
				pos: position{line: 934, col: 6, offset: 26475},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 934, col: 6, offset: 26475},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 935, col: 1, offset: 26502},
			expr: &actionExpr{
				pos: position{line: 935, col: 9, offset: 26510},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 935, col: 9, offset: 26510},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 936, col: 1, offset: 26543},
			expr: &actionExpr{
				pos: position{line: 936, col: 7, offset: 26549},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 936, col: 7, offset: 26549},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 937, col: 1, offset: 26578},
			expr: &actionExpr{
				pos: position{line: 937, col: 8, offset: 26585},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 937, col: 8, offset: 26585},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 938, col: 1, offset: 26616},
			expr: &actionExpr{
				pos: position{line: 938, col: 8, offset: 26623},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 938, col: 8, offset: 26623},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 939, col: 1, offset: 26654},
			expr: &actionExpr{
				pos: position{line: 939, col: 8, offset: 26661},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 939, col: 8, offset: 26661},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 940, col: 1, offset: 26692},
			expr: &actionExpr{
				pos: position{line: 940, col: 9, offset: 26700},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 940, col: 9, offset: 26700},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 941, col: 1, offset: 26733},
			expr: &actionExpr{
				pos: position{line: 941, col: 9, offset: 26741},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 941, col: 9, offset: 26741},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 943, col: 1, offset: 26775},
			expr: &choiceExpr{
				pos: position{line: 944, col: 5, offset: 26797},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 944, col: 5, offset: 26797},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 14, offset: 26806},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 19, offset: 26811},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 27, offset: 26819},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 34, offset: 26826},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 42, offset: 26834},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 50, offset: 26842},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 59, offset: 26851},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 67, offset: 26859},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 75, offset: 26867},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 948, col: 1, offset: 26893},
			expr: &choiceExpr{
				pos: position{line: 949, col: 5, offset: 26905},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 949, col: 5, offset: 26905},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 26921},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 26941},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 5, offset: 26959},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 5, offset: 26978},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 26995},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 5, offset: 27008},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 956, col: 5, offset: 27017},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 5, offset: 27034},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 5, offset: 27053},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 959, col: 5, offset: 27072},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 961, col: 1, offset: 27085},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 27103},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 27103},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 962, col: 5, offset: 27103},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 962, col: 5, offset: 27103},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 7, offset: 27105},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 962, col: 14, offset: 27112},
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 15, offset: 27113},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 27228},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 965, col: 5, offset: 27228},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 7, offset: 27230},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 969, col: 1, offset: 27334},
			expr: &choiceExpr{
				pos: position{line: 970, col: 5, offset: 27353},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 27353},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 27353},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 5, offset: 27353},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 7, offset: 27355},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 970, col: 11, offset: 27359},
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 12, offset: 27360},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 27474},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 973, col: 5, offset: 27474},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 973, col: 7, offset: 27476},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 977, col: 1, offset: 27575},
			expr: &actionExpr{
				pos: position{line: 978, col: 5, offset: 27592},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 978, col: 5, offset: 27592},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 978, col: 7, offset: 27594},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 982, col: 1, offset: 27707},
			expr: &actionExpr{
				pos: position{line: 983, col: 5, offset: 27726},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 983, col: 5, offset: 27726},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 983, col: 7, offset: 27728},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 987, col: 1, offset: 27837},
			expr: &choiceExpr{
				pos: position{line: 988, col: 5, offset: 27856},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 988, col: 5, offset: 27856},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 988, col: 5, offset: 27856},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 27969},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 989, col: 5, offset: 27969},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 991, col: 1, offset: 28080},
			expr: &actionExpr{
				pos: position{line: 992, col: 5, offset: 28096},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 992, col: 5, offset: 28096},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 994, col: 1, offset: 28202},
			expr: &actionExpr{
				pos: position{line: 995, col: 5, offset: 28219},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 995, col: 5, offset: 28219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 995, col: 5, offset: 28219},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 995, col: 10, offset: 28224},
							expr: &ruleRefExpr{
								pos:  position{line: 995, col: 10, offset: 28224},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 999, col: 1, offset: 28339},
			expr: &actionExpr{
				pos: position{line: 1000, col: 5, offset: 28355},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 5, offset: 28355},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1000, col: 5, offset: 28355},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 9, offset: 28359},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 13, offset: 28363},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1000, col: 18, offset: 28368},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1004, col: 1, offset: 28457},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 5, offset: 28470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 5, offset: 28470},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1006, col: 5, offset: 28486},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1006, col: 5, offset: 28486},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1006, col: 9, offset: 28490},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1010, col: 1, offset: 28589},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 5, offset: 28598},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1011, col: 5, offset: 28598},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 5, offset: 28614},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1013, col: 5, offset: 28632},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1015, col: 1, offset: 28645},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 5, offset: 28663},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 28663},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1016, col: 5, offset: 28663},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1016, col: 5, offset: 28663},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 10, offset: 28668},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1016, col: 24, offset: 28682},
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 25, offset: 28683},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 28723},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1017, col: 5, offset: 28723},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1017, col: 5, offset: 28723},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 10, offset: 28728},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1017, col: 25, offset: 28743},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1017, col: 28, offset: 28746},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1017, col: 32, offset: 28750},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1017, col: 35, offset: 28753},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 39, offset: 28757},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 28859},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1020, col: 5, offset: 28859},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 10, offset: 28864},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 28966},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1023, col: 5, offset: 28966},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 5, offset: 28966},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1023, col: 9, offset: 28970},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 12, offset: 28973},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 14, offset: 28975},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 25, offset: 28986},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1025, col: 1, offset: 29009},
			expr: &actionExpr{
				pos: position{line: 1026, col: 5, offset: 29023},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1026, col: 5, offset: 29023},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1026, col: 11, offset: 29029},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1030, col: 1, offset: 29125},
			expr: &actionExpr{
				pos: position{line: 1031, col: 5, offset: 29138},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 5, offset: 29138},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1031, col: 5, offset: 29138},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 11, offset: 29144},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1031, col: 16, offset: 29149},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1031, col: 21, offset: 29154},
								expr: &ruleRefExpr{
									pos:  position{line: 1031, col: 21, offset: 29154},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1035, col: 1, offset: 29248},
			expr: &actionExpr{
				pos: position{line: 1035, col: 16, offset: 29263},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 16, offset: 29263},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1035, col: 16, offset: 29263},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1035, col: 19, offset: 29266},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1035, col: 23, offset: 29270},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 26, offset: 29273},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 30, offset: 29277},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1037, col: 1, offset: 29303},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 29319},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1038, col: 5, offset: 29319},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1038, col: 5, offset: 29319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1038, col: 5, offset: 29319},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1038, col: 9, offset: 29323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1038, col: 12, offset: 29326},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1038, col: 19, offset: 29333},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1038, col: 33, offset: 29347},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1038, col: 36, offset: 29350},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1041, col: 5, offset: 29445},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1041, col: 5, offset: 29445},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1041, col: 5, offset: 29445},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1041, col: 9, offset: 29449},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1041, col: 12, offset: 29452},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1041, col: 16, offset: 29456},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1041, col: 21, offset: 29461},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1041, col: 24, offset: 29464},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1044, col: 5, offset: 29553},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1044, col: 5, offset: 29553},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1044, col: 5, offset: 29553},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1044, col: 10, offset: 29558},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1044, col: 14, offset: 29562},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1044, col: 18, offset: 29566},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1044, col: 23, offset: 29571},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1044, col: 26, offset: 29574},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1047, col: 5, offset: 29662},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1047, col: 5, offset: 29662},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1047, col: 5, offset: 29662},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1047, col: 10, offset: 29667},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1047, col: 13, offset: 29670},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1047, col: 21, offset: 29678},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1047, col: 26, offset: 29683},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1047, col: 29, offset: 29686},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1047, col: 33, offset: 29690},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1047, col: 36, offset: 29693},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1047, col: 44, offset: 29701},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1047, col: 49, offset: 29706},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1047, col: 52, offset: 29709},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1051, col: 1, offset: 29823},
			expr: &actionExpr{
				pos: position{line: 1052, col: 5, offset: 29843},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1052, col: 5, offset: 29843},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1052, col: 7, offset: 29845},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1059, col: 1, offset: 30061},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 30086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 30086},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 30086},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 30086},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 9, offset: 30090},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1060, col: 11, offset: 30092},
										expr: &ruleRefExpr{
											pos:  position{line: 1060, col: 11, offset: 30092},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1060, col: 37, offset: 30118},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 30144},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 30144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1061, col: 5, offset: 30144},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 9, offset: 30148},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1061, col: 11, offset: 30150},
										expr: &ruleRefExpr{
											pos:  position{line: 1061, col: 11, offset: 30150},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1061, col: 37, offset: 30176},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1063, col: 1, offset: 30199},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 5, offset: 30228},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 5, offset: 30228},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 30245},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1065, col: 5, offset: 30245},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1065, col: 7, offset: 30247},
								expr: &ruleRefExpr{
									pos:  position{line: 1065, col: 7, offset: 30247},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1069, col: 1, offset: 30384},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 30413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30413},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 30413},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1070, col: 5, offset: 30413},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 10, offset: 30418},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1070, col: 12, offset: 30420},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 30447},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 30447},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1071, col: 5, offset: 30447},
									expr: &litMatcher{
										pos:        position{line: 1071, col: 8, offset: 30450},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 15, offset: 30457},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 17, offset: 30459},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1073, col: 1, offset: 30495},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 30524},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1074, col: 5, offset: 30524},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1075, col: 5, offset: 30541},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1075, col: 5, offset: 30541},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1075, col: 7, offset: 30543},
								expr: &ruleRefExpr{
									pos:  position{line: 1075, col: 7, offset: 30543},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1079, col: 1, offset: 30680},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 30709},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30709},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30709},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1080, col: 5, offset: 30709},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 10, offset: 30714},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1080, col: 12, offset: 30716},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 30743},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1081, col: 5, offset: 30743},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1081, col: 5, offset: 30743},
									expr: &litMatcher{
										pos:        position{line: 1081, col: 8, offset: 30746},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 15, offset: 30753},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 17, offset: 30755},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1083, col: 1, offset: 30791},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 30808},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 5, offset: 30808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1084, col: 5, offset: 30808},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1084, col: 10, offset: 30813},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1084, col: 13, offset: 30816},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1084, col: 15, offset: 30818},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1084, col: 20, offset: 30823},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1084, col: 23, offset: 30826},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1099, col: 1, offset: 31123},
			expr: &actionExpr{
				pos: position{line: 1100, col: 5, offset: 31141},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1100, col: 9, offset: 31145},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1100, col: 9, offset: 31145},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1100, col: 19, offset: 31155},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1100, col: 30, offset: 31166},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1100, col: 41, offset: 31177},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1101, col: 9, offset: 31194},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1101, col: 18, offset: 31203},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1101, col: 28, offset: 31213},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1101, col: 38, offset: 31223},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1102, col: 9, offset: 31239},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1102, col: 21, offset: 31251},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1103, col: 9, offset: 31269},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1103, col: 18, offset: 31278},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1104, col: 9, offset: 31295},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1104, col: 22, offset: 31308},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1105, col: 9, offset: 31323},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1106, col: 9, offset: 31339},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1106, col: 16, offset: 31346},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1107, col: 9, offset: 31360},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1107, col: 18, offset: 31369},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1111, col: 1, offset: 31485},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 31503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 31503},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 31503},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1112, col: 5, offset: 31503},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 11, offset: 31509},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 21, offset: 31519},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1112, col: 26, offset: 31524},
										expr: &ruleRefExpr{
											pos:  position{line: 1112, col: 26, offset: 31524},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 31626},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1115, col: 5, offset: 31626},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1117, col: 1, offset: 31650},
			expr: &actionExpr{
				pos: position{line: 1117, col: 21, offset: 31670},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 21, offset: 31670},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1117, col: 21, offset: 31670},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1117, col: 24, offset: 31673},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1117, col: 28, offset: 31677},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 31, offset: 31680},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 35, offset: 31684},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1119, col: 1, offset: 31715},
			expr: &actionExpr{
				pos: position{line: 1120, col: 5, offset: 31729},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 5, offset: 31729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1120, col: 5, offset: 31729},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 10, offset: 31734},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 20, offset: 31744},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1120, col: 23, offset: 31747},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 27, offset: 31751},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 30, offset: 31754},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 34, offset: 31758},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1124, col: 1, offset: 31840},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 5, offset: 31854},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1125, col: 5, offset: 31854},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 5, offset: 31873},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1128, col: 1, offset: 31887},
			expr: &actionExpr{
				pos: position{line: 1128, col: 12, offset: 31898},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 12, offset: 31898},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1128, col: 13, offset: 31899},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 13, offset: 31899},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1128, col: 21, offset: 31907},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1128, col: 28, offset: 31914},
							expr: &ruleRefExpr{
								pos:  position{line: 1128, col: 29, offset: 31915},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1129, col: 1, offset: 31952},
			expr: &actionExpr{
				pos: position{line: 1129, col: 11, offset: 31962},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1129, col: 11, offset: 31962},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1129, col: 12, offset: 31963},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1129, col: 12, offset: 31963},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1129, col: 19, offset: 31970},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1129, col: 25, offset: 31976},
							expr: &ruleRefExpr{
								pos:  position{line: 1129, col: 26, offset: 31977},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1130, col: 1, offset: 32013},
			expr: &actionExpr{
				pos: position{line: 1130, col: 11, offset: 32023},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 11, offset: 32023},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1130, col: 11, offset: 32023},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1130, col: 16, offset: 32028},
							expr: &ruleRefExpr{
								pos:  position{line: 1130, col: 17, offset: 32029},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1131, col: 1, offset: 32065},
			expr: &actionExpr{
				pos: position{line: 1131, col: 12, offset: 32076},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 12, offset: 32076},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1131, col: 13, offset: 32077},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1131, col: 13, offset: 32077},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1131, col: 21, offset: 32085},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1131, col: 28, offset: 32092},
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 29, offset: 32093},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1132, col: 1, offset: 32130},
			expr: &actionExpr{
				pos: position{line: 1132, col: 11, offset: 32140},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1132, col: 11, offset: 32140},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1132, col: 11, offset: 32140},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1132, col: 16, offset: 32145},
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 17, offset: 32146},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1134, col: 1, offset: 32183},
			expr: &charClassMatcher{
				pos:        position{line: 1134, col: 19, offset: 32201},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1136, col: 1, offset: 32213},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 18, offset: 32230},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1136, col: 18, offset: 32230},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1136, col: 36, offset: 32248},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1138, col: 1, offset: 32255},
			expr: &actionExpr{
				pos: position{line: 1139, col: 5, offset: 32270},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1139, col: 5, offset: 32270},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1139, col: 8, offset: 32273},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1141, col: 1, offset: 32354},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 5, offset: 32373},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 32373},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 32373},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1142, col: 5, offset: 32373},
									expr: &seqExpr{
										pos: position{line: 1142, col: 7, offset: 32375},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1142, col: 7, offset: 32375},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1142, col: 15, offset: 32383},
												expr: &ruleRefExpr{
													pos:  position{line: 1142, col: 16, offset: 32384},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 32, offset: 32400},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1142, col: 48, offset: 32416},
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 48, offset: 32416},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 32468},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1143, col: 5, offset: 32468},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 32507},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 32507},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 5, offset: 32507},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 10, offset: 32512},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 13, offset: 32515},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 32606},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1146, col: 5, offset: 32606},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1147, col: 5, offset: 32648},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1147, col: 5, offset: 32648},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1147, col: 5, offset: 32648},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 8, offset: 32651},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1147, col: 26, offset: 32669},
									expr: &seqExpr{
										pos: position{line: 1147, col: 28, offset: 32671},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1147, col: 28, offset: 32671},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1147, col: 31, offset: 32674},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1149, col: 1, offset: 32699},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 5, offset: 32711},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1150, col: 5, offset: 32711},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 5, offset: 32730},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 5, offset: 32746},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 5, offset: 32754},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1155, col: 1, offset: 32764},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 32773},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 32773},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1156, col: 5, offset: 32773},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1156, col: 14, offset: 32782},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1156, col: 18, offset: 32786},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1160, col: 1, offset: 32906},
			expr: &seqExpr{
				pos: position{line: 1160, col: 12, offset: 32917},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1160, col: 12, offset: 32917},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1160, col: 15, offset: 32920},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 19, offset: 32924},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1160, col: 22, offset: 32927},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 26, offset: 32931},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1162, col: 1, offset: 32935},
			expr: &seqExpr{
				pos: position{line: 1162, col: 6, offset: 32940},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1162, col: 6, offset: 32940},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1162, col: 11, offset: 32945},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1162, col: 16, offset: 32950},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1162, col: 21, offset: 32955},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1163, col: 1, offset: 32961},
			expr: &seqExpr{
				pos: position{line: 1163, col: 6, offset: 32966},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1163, col: 6, offset: 32966},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1163, col: 11, offset: 32971},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1165, col: 1, offset: 32978},
			expr: &seqExpr{
				pos: position{line: 1165, col: 12, offset: 32989},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1165, col: 12, offset: 32989},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 24, offset: 33001},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1167, col: 1, offset: 33013},
			expr: &seqExpr{
				pos: position{line: 1167, col: 15, offset: 33027},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1167, col: 15, offset: 33027},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1167, col: 18, offset: 33030},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 22, offset: 33034},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1167, col: 25, offset: 33037},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 29, offset: 33041},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1167, col: 32, offset: 33044},
						expr: &seqExpr{
							pos: position{line: 1167, col: 33, offset: 33045},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1167, col: 33, offset: 33045},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1167, col: 37, offset: 33049},
									expr: &charClassMatcher{
										pos:        position{line: 1167, col: 37, offset: 33049},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1169, col: 1, offset: 33059},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 5, offset: 33074},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1170, col: 5, offset: 33074},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1171, col: 5, offset: 33082},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1171, col: 6, offset: 33083},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1171, col: 6, offset: 33083},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1171, col: 12, offset: 33089},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1171, col: 17, offset: 33094},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1171, col: 20, offset: 33097},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1171, col: 24, offset: 33101},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1171, col: 27, offset: 33104},
								expr: &seqExpr{
									pos: position{line: 1171, col: 28, offset: 33105},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1171, col: 28, offset: 33105},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1171, col: 32, offset: 33109},
											expr: &charClassMatcher{
												pos:        position{line: 1171, col: 32, offset: 33109},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1173, col: 1, offset: 33119},
			expr: &actionExpr{
				pos: position{line: 1174, col: 5, offset: 33132},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 5, offset: 33132},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1174, col: 5, offset: 33132},
							expr: &litMatcher{
								pos:        position{line: 1174, col: 5, offset: 33132},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1174, col: 10, offset: 33137},
							expr: &seqExpr{
								pos: position{line: 1174, col: 11, offset: 33138},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1174, col: 11, offset: 33138},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 19, offset: 33146},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1178, col: 1, offset: 33272},
			expr: &seqExpr{
				pos: position{line: 1178, col: 11, offset: 33282},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 33282},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1178, col: 16, offset: 33287},
						expr: &seqExpr{
							pos: position{line: 1178, col: 17, offset: 33288},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1178, col: 17, offset: 33288},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1178, col: 21, offset: 33292},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1180, col: 1, offset: 33300},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 33313},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1181, col: 5, offset: 33313},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1182, col: 5, offset: 33322},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1183, col: 5, offset: 33331},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1184, col: 5, offset: 33340},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1185, col: 5, offset: 33348},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1186, col: 5, offset: 33356},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1187, col: 5, offset: 33364},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1188, col: 5, offset: 33372},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1189, col: 5, offset: 33380},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1191, col: 1, offset: 33385},
			expr: &actionExpr{
				pos: position{line: 1192, col: 5, offset: 33392},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 5, offset: 33392},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1192, col: 5, offset: 33392},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1192, col: 10, offset: 33397},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1192, col: 14, offset: 33401},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1192, col: 19, offset: 33406},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1192, col: 23, offset: 33410},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1192, col: 28, offset: 33415},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1192, col: 32, offset: 33419},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1194, col: 1, offset: 33456},
			expr: &actionExpr{
				pos: position{line: 1195, col: 5, offset: 33464},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1195, col: 5, offset: 33464},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1195, col: 5, offset: 33464},
							expr: &seqExpr{
								pos: position{line: 1195, col: 8, offset: 33467},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1195, col: 8, offset: 33467},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1195, col: 12, offset: 33471},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 16, offset: 33475},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1195, col: 20, offset: 33479},
										expr: &choiceExpr{
											pos: position{line: 1195, col: 22, offset: 33481},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1195, col: 22, offset: 33481},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1195, col: 33, offset: 33492},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 39, offset: 33498},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 41, offset: 33500},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1199, col: 1, offset: 33664},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 5, offset: 33682},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1200, col: 5, offset: 33682},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1200, col: 5, offset: 33682},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1200, col: 5, offset: 33682},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1200, col: 7, offset: 33684},
										expr: &ruleRefExpr{
											pos:  position{line: 1200, col: 7, offset: 33684},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 17, offset: 33694},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 19, offset: 33696},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1203, col: 5, offset: 33760},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1203, col: 5, offset: 33760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1203, col: 5, offset: 33760},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1203, col: 7, offset: 33762},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1203, col: 11, offset: 33766},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1203, col: 13, offset: 33768},
										expr: &ruleRefExpr{
											pos:  position{line: 1203, col: 13, offset: 33768},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1203, col: 23, offset: 33778},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1203, col: 28, offset: 33783},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1203, col: 30, offset: 33785},
										expr: &ruleRefExpr{
											pos:  position{line: 1203, col: 30, offset: 33785},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1203, col: 40, offset: 33795},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1203, col: 42, offset: 33797},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1206, col: 5, offset: 33896},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1206, col: 5, offset: 33896},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1206, col: 5, offset: 33896},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 10, offset: 33901},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1206, col: 12, offset: 33903},
										expr: &ruleRefExpr{
											pos:  position{line: 1206, col: 12, offset: 33903},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 22, offset: 33913},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1206, col: 24, offset: 33915},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1209, col: 5, offset: 33986},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1209, col: 5, offset: 33986},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1209, col: 5, offset: 33986},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1209, col: 7, offset: 33988},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1209, col: 11, offset: 33992},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1209, col: 13, offset: 33994},
										expr: &ruleRefExpr{
											pos:  position{line: 1209, col: 13, offset: 33994},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1209, col: 23, offset: 34004},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1212, col: 5, offset: 34072},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1212, col: 5, offset: 34072},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1216, col: 1, offset: 34109},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 5, offset: 34121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 5, offset: 34121},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 5, offset: 34128},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1220, col: 1, offset: 34133},
			expr: &actionExpr{
				pos: position{line: 1220, col: 12, offset: 34144},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1220, col: 12, offset: 34144},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1220, col: 12, offset: 34144},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 16, offset: 34148},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 18, offset: 34150},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1222, col: 1, offset: 34188},
			expr: &actionExpr{
				pos: position{line: 1222, col: 12, offset: 34199},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 12, offset: 34199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1222, col: 12, offset: 34199},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 14, offset: 34201},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1222, col: 18, offset: 34205},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1224, col: 1, offset: 34243},
			expr: &actionExpr{
				pos: position{line: 1225, col: 5, offset: 34254},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1225, col: 5, offset: 34254},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1225, col: 5, offset: 34254},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1225, col: 7, offset: 34256},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1225, col: 10, offset: 34259},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1225, col: 14, offset: 34263},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1225, col: 16, offset: 34265},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1229, col: 1, offset: 34338},
			expr: &actionExpr{
				pos: position{line: 1230, col: 5, offset: 34349},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1230, col: 5, offset: 34349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1230, col: 5, offset: 34349},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1230, col: 7, offset: 34351},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1230, col: 11, offset: 34355},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1230, col: 15, offset: 34359},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1230, col: 17, offset: 34361},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1234, col: 1, offset: 34424},
			expr: &actionExpr{
				pos: position{line: 1235, col: 4, offset: 34432},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1235, col: 4, offset: 34432},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1235, col: 6, offset: 34434},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1237, col: 1, offset: 34474},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 34488},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1238, col: 5, offset: 34488},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 5, offset: 34503},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1241, col: 1, offset: 34519},
			expr: &actionExpr{
				pos: position{line: 1241, col: 14, offset: 34532},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1241, col: 14, offset: 34532},
					expr: &charClassMatcher{
						pos:        position{line: 1241, col: 14, offset: 34532},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1243, col: 1, offset: 34571},
			expr: &actionExpr{
				pos: position{line: 1244, col: 5, offset: 34590},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 5, offset: 34590},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1244, col: 5, offset: 34590},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1244, col: 9, offset: 34594},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1246, col: 1, offset: 34637},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 5, offset: 34653},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1247, col: 5, offset: 34653},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1247, col: 5, offset: 34653},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1247, col: 5, offset: 34653},
									expr: &litMatcher{
										pos:        position{line: 1247, col: 5, offset: 34653},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1247, col: 10, offset: 34658},
									expr: &charClassMatcher{
										pos:        position{line: 1247, col: 10, offset: 34658},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1247, col: 17, offset: 34665},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1247, col: 21, offset: 34669},
									expr: &charClassMatcher{
										pos:        position{line: 1247, col: 21, offset: 34669},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1247, col: 28, offset: 34676},
									expr: &ruleRefExpr{
										pos:  position{line: 1247, col: 28, offset: 34676},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1250, col: 5, offset: 34735},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1250, col: 5, offset: 34735},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1250, col: 5, offset: 34735},
									expr: &litMatcher{
										pos:        position{line: 1250, col: 5, offset: 34735},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1250, col: 10, offset: 34740},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1250, col: 14, offset: 34744},
									expr: &charClassMatcher{
										pos:        position{line: 1250, col: 14, offset: 34744},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1250, col: 21, offset: 34751},
									expr: &ruleRefExpr{
										pos:  position{line: 1250, col: 21, offset: 34751},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1253, col: 5, offset: 34810},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1253, col: 7, offset: 34812},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1253, col: 7, offset: 34812},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1253, col: 13, offset: 34818},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1256, col: 1, offset: 34862},
			expr: &seqExpr{
				pos: position{line: 1256, col: 16, offset: 34877},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1256, col: 16, offset: 34877},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1256, col: 21, offset: 34882},
						expr: &charClassMatcher{
							pos:        position{line: 1256, col: 21, offset: 34882},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 27, offset: 34888},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1258, col: 1, offset: 34900},
			expr: &litMatcher{
				pos:        position{line: 1258, col: 7, offset: 34906},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1260, col: 1, offset: 34913},
			expr: &seqExpr{
				pos: position{line: 1260, col: 12, offset: 34924},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1260, col: 12, offset: 34924},
						expr: &choiceExpr{
							pos: position{line: 1260, col: 13, offset: 34925},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1260, col: 13, offset: 34925},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1260, col: 19, offset: 34931},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1260, col: 25, offset: 34937},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1262, col: 1, offset: 34944},
			expr: &actionExpr{
				pos: position{line: 1262, col: 7, offset: 34950},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1262, col: 7, offset: 34950},
					expr: &ruleRefExpr{
						pos:  position{line: 1262, col: 7, offset: 34950},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1264, col: 1, offset: 34992},
			expr: &charClassMatcher{
				pos:        position{line: 1264, col: 12, offset: 35003},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1266, col: 1, offset: 35016},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 5, offset: 35033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1267, col: 5, offset: 35033},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1267, col: 5, offset: 35033},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1267, col: 5, offset: 35033},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1267, col: 9, offset: 35037},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1267, col: 11, offset: 35039},
										expr: &ruleRefExpr{
											pos:  position{line: 1267, col: 11, offset: 35039},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1267, col: 29, offset: 35057},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1268, col: 5, offset: 35094},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1268, col: 5, offset: 35094},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1268, col: 5, offset: 35094},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1268, col: 9, offset: 35098},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1268, col: 11, offset: 35100},
										expr: &ruleRefExpr{
											pos:  position{line: 1268, col: 11, offset: 35100},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 29, offset: 35118},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1270, col: 1, offset: 35152},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 35173},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1271, col: 5, offset: 35173},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1271, col: 5, offset: 35173},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1271, col: 5, offset: 35173},
									expr: &choiceExpr{
										pos: position{line: 1271, col: 7, offset: 35175},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1271, col: 7, offset: 35175},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1271, col: 13, offset: 35181},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1271, col: 26, offset: 35194,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1272, col: 5, offset: 35231},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1272, col: 5, offset: 35231},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1272, col: 5, offset: 35231},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1272, col: 10, offset: 35236},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1272, col: 12, offset: 35238},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1274, col: 1, offset: 35272},
			expr: &actionExpr{
				pos: position{line: 1275, col: 5, offset: 35284},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 5, offset: 35284},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1275, col: 5, offset: 35284},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 10, offset: 35289},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 23, offset: 35302},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1275, col: 28, offset: 35307},
								expr: &ruleRefExpr{
									pos:  position{line: 1275, col: 28, offset: 35307},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1277, col: 1, offset: 35369},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 5, offset: 35386},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 5, offset: 35386},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1279, col: 5, offset: 35403},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1281, col: 1, offset: 35415},
			expr: &actionExpr{
				pos: position{line: 1281, col: 16, offset: 35430},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1281, col: 16, offset: 35430},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1283, col: 1, offset: 35479},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 5, offset: 35495},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1284, col: 5, offset: 35495},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1285, col: 5, offset: 35512},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1287, col: 1, offset: 35519},
			expr: &actionExpr{
				pos: position{line: 1287, col: 14, offset: 35532},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 14, offset: 35532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1287, col: 14, offset: 35532},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 19, offset: 35537},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1287, col: 22, offset: 35540},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1287, col: 22, offset: 35540},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 38, offset: 35556},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1289, col: 1, offset: 35592},
			expr: &actionExpr{
				pos: position{line: 1290, col: 5, offset: 35608},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 5, offset: 35608},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1290, col: 5, offset: 35608},
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 6, offset: 35609},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1290, col: 22, offset: 35625},
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 23, offset: 35626},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 35, offset: 35638},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 40, offset: 35643},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 50, offset: 35653},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1290, col: 55, offset: 35658},
								expr: &ruleRefExpr{
									pos:  position{line: 1290, col: 55, offset: 35658},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1294, col: 1, offset: 35727},
			expr: &seqExpr{
				pos: position{line: 1294, col: 19, offset: 35745},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1294, col: 19, offset: 35745},
						expr: &litMatcher{
							pos:        position{line: 1294, col: 19, offset: 35745},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 24, offset: 35750},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1295, col: 1, offset: 35763},
			expr: &seqExpr{
				pos: position{line: 1295, col: 15, offset: 35777},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1295, col: 15, offset: 35777},
						expr: &ruleRefExpr{
							pos:  position{line: 1295, col: 15, offset: 35777},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1295, col: 28, offset: 35790},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1297, col: 1, offset: 35795},
			expr: &choiceExpr{
				pos: position{line: 1298, col: 5, offset: 35809},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1298, col: 5, offset: 35809},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 5, offset: 35826},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35838},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1300, col: 5, offset: 35838},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1302, col: 1, offset: 35862},
			expr: &choiceExpr{
				pos: position{line: 1303, col: 5, offset: 35875},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1303, col: 5, offset: 35875},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1304, col: 5, offset: 35889},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1306, col: 1, offset: 35896},
			expr: &actionExpr{
				pos: position{line: 1306, col: 11, offset: 35906},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 11, offset: 35906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1306, col: 11, offset: 35906},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 16, offset: 35911},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1306, col: 19, offset: 35914},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1306, col: 19, offset: 35914},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1306, col: 32, offset: 35927},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1308, col: 1, offset: 35963},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 5, offset: 35978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 35978},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1309, col: 5, offset: 35978},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 36006},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1310, col: 5, offset: 36006},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1311, col: 5, offset: 36036},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1314, col: 1, offset: 36043},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 5, offset: 36064},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 36064},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1315, col: 5, offset: 36064},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1315, col: 5, offset: 36064},
									expr: &choiceExpr{
										pos: position{line: 1315, col: 7, offset: 36066},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1315, col: 7, offset: 36066},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1315, col: 13, offset: 36072},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1315, col: 26, offset: 36085,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1316, col: 5, offset: 36122},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1316, col: 5, offset: 36122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1316, col: 5, offset: 36122},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1316, col: 10, offset: 36127},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1316, col: 12, offset: 36129},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1318, col: 1, offset: 36163},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 5, offset: 36182},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1319, col: 5, offset: 36182},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 5, offset: 36203},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1322, col: 1, offset: 36218},
			expr: &choiceExpr{
				pos: position{line: 1323, col: 5, offset: 36239},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1323, col: 5, offset: 36239},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1324, col: 5, offset: 36247},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1324, col: 5, offset: 36247},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1325, col: 5, offset: 36287},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 36296},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1326, col: 5, offset: 36296},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1327, col: 5, offset: 36325},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1327, col: 5, offset: 36325},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1328, col: 5, offset: 36354},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1328, col: 5, offset: 36354},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1329, col: 5, offset: 36383},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1329, col: 5, offset: 36383},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1330, col: 5, offset: 36412},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1330, col: 5, offset: 36412},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1331, col: 5, offset: 36441},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1331, col: 5, offset: 36441},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1333, col: 1, offset: 36467},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 5, offset: 36485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1334, col: 5, offset: 36485},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1334, col: 5, offset: 36485},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1335, col: 5, offset: 36513},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1335, col: 5, offset: 36513},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1336, col: 5, offset: 36541},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1338, col: 1, offset: 36547},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 5, offset: 36565},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1339, col: 5, offset: 36565},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1339, col: 5, offset: 36565},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1339, col: 5, offset: 36565},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1339, col: 9, offset: 36569},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1339, col: 16, offset: 36576},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1339, col: 16, offset: 36576},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1339, col: 25, offset: 36585},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1339, col: 34, offset: 36594},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1339, col: 43, offset: 36603},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1342, col: 5, offset: 36666},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1342, col: 5, offset: 36666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1342, col: 5, offset: 36666},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1342, col: 9, offset: 36670},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1342, col: 13, offset: 36674},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1342, col: 20, offset: 36681},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1342, col: 20, offset: 36681},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1342, col: 29, offset: 36690},
												expr: &ruleRefExpr{
													pos:  position{line: 1342, col: 29, offset: 36690},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1342, col: 39, offset: 36700},
												expr: &ruleRefExpr{
													pos:  position{line: 1342, col: 39, offset: 36700},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1342, col: 49, offset: 36710},
												expr: &ruleRefExpr{
													pos:  position{line: 1342, col: 49, offset: 36710},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1342, col: 59, offset: 36720},
												expr: &ruleRefExpr{
													pos:  position{line: 1342, col: 59, offset: 36720},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1342, col: 69, offset: 36730},
												expr: &ruleRefExpr{
													pos:  position{line: 1342, col: 69, offset: 36730},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1342, col: 80, offset: 36741},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1346, col: 1, offset: 36795},
			expr: &actionExpr{
				pos: position{line: 1347, col: 5, offset: 36813},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 5, offset: 36813},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1347, col: 5, offset: 36813},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 9, offset: 36817},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 14, offset: 36822},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1347, col: 25, offset: 36833},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1347, col: 29, offset: 36837},
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 30, offset: 36838},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1349, col: 1, offset: 36873},
			expr: &actionExpr{
				pos: position{line: 1350, col: 5, offset: 36888},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1350, col: 5, offset: 36888},
					expr: &choiceExpr{
						pos: position{line: 1350, col: 6, offset: 36889},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1350, col: 6, offset: 36889},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1350, col: 15, offset: 36898},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1350, col: 15, offset: 36898},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1350, col: 20, offset: 36903,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1352, col: 1, offset: 36939},
			expr: &charClassMatcher{
				pos:        position{line: 1353, col: 5, offset: 36955},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1355, col: 1, offset: 36970},
			expr: &oneOrMoreExpr{
				pos: position{line: 1355, col: 6, offset: 36975},
				expr: &ruleRefExpr{
					pos:  position{line: 1355, col: 6, offset: 36975},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1357, col: 1, offset: 36986},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1357, col: 6, offset: 36991},
				expr: &ruleRefExpr{
					pos:  position{line: 1357, col: 6, offset: 36991},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1359, col: 1, offset: 37002},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 5, offset: 37015},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1360, col: 5, offset: 37015},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 5, offset: 37030},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 5, offset: 37049},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1364, col: 1, offset: 37058},
			expr: &anyMatcher{
				line: 1365, col: 5, offset: 37078,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1367, col: 1, offset: 37081},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 5, offset: 37109},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1368, col: 5, offset: 37109},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1369, col: 5, offset: 37118},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1370, col: 5, offset: 37127},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1371, col: 5, offset: 37136},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1372, col: 5, offset: 37144},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1373, col: 5, offset: 37157},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1375, col: 1, offset: 37167},
			expr: &charClassMatcher{
				pos:        position{line: 1376, col: 5, offset: 37186},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1382, col: 1, offset: 37516},
			expr: &ruleRefExpr{
				pos:  position{line: 1385, col: 5, offset: 37587},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1387, col: 1, offset: 37606},
			expr: &seqExpr{
				pos: position{line: 1388, col: 5, offset: 37627},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1388, col: 5, offset: 37627},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1388, col: 10, offset: 37632},
						expr: &seqExpr{
							pos: position{line: 1388, col: 11, offset: 37633},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1388, col: 11, offset: 37633},
									expr: &litMatcher{
										pos:        position{line: 1388, col: 12, offset: 37634},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1388, col: 17, offset: 37639},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1388, col: 35, offset: 37657},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1390, col: 1, offset: 37663},
			expr: &seqExpr{
				pos: position{line: 1391, col: 5, offset: 37685},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1391, col: 5, offset: 37685},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1391, col: 10, offset: 37690},
						expr: &seqExpr{
							pos: position{line: 1391, col: 11, offset: 37691},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1391, col: 11, offset: 37691},
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 12, offset: 37692},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 27, offset: 37707},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1393, col: 1, offset: 37726},
			expr: &seqExpr{
				pos: position{line: 1393, col: 7, offset: 37732},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1393, col: 7, offset: 37732},
						expr: &ruleRefExpr{
							pos:  position{line: 1393, col: 7, offset: 37732},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 19, offset: 37744},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1395, col: 1, offset: 37760},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 7, offset: 37766},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1395, col: 7, offset: 37766},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 37770},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1397, col: 1, offset: 37775},
			expr: &notExpr{
				pos: position{line: 1397, col: 7, offset: 37781},
				expr: &anyMatcher{
					line: 1397, col: 8, offset: 37782,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr12(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr12(stack["v"])
}

func (c *current) onSearchExpr18() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr18()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onWhereProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereProc1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["expr"])
}

func (c *current) onOverProc2(over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": nil, "over": over}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["over"])
}

func (c *current) onOverProc5(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil, "as": ""}, nil

}

func (p *parser) callonOverProc5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc5(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, as, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": as}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["as"], stack["scope"])
}

func (c *current) onOverWith1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": ""}}, nil

}

func (p *parser) callonOverWith1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverWith1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onAs2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonAs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs2(stack["id"])
}

func (c *current) onAs9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAs9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs9()
}

func (c *current) onLetProc2(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc2(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onComparisonExpr12(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "~", "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr12(stack["lhs"], stack["rhs"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onGrep2(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}, nil

}

func (p *parser) callonGrep2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep2(stack["pattern"])
}

func (c *current) onGrep12(pattern, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": expr}, nil

}

func (p *parser) callonGrep12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep12(stack["pattern"], stack["expr"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {

	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
