// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 355},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 435},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 435},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 435},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 435},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 441},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 441},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 447},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 450},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 456},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 471},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 471},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 744},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 756},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 763},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 763},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 768},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 795},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1445},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1450},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1453},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1455},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1484},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1497},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1497},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 45, col: 5, offset: 1497},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 10, offset: 1502},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 45, col: 13, offset: 1505},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 19, offset: 1511},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 30, offset: 1522},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 45, col: 33, offset: 1525},
									val:        ";",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 37, offset: 1529},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 45, col: 40, offset: 1532},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 45, offset: 1537},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 45, offset: 1537},
											name: "Parallel",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1653},
						run: (*parser).callonParallel14,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 1653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 48, col: 5, offset: 1653},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 10, offset: 1658},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 48, col: 13, offset: 1661},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 19, offset: 1667},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 30, offset: 1678},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 48, col: 33, offset: 1681},
									val:        ";",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 52, col: 1, offset: 1733},
			expr: &choiceExpr{
				pos: position{line: 53, col: 6, offset: 1751},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 53, col: 6, offset: 1751},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 53, col: 6, offset: 1751},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 53, col: 6, offset: 1751},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 19, offset: 1764},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 22, offset: 1767},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 27, offset: 1772},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 53, col: 30, offset: 1775},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 35, offset: 1780},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 46, offset: 1791},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 49, offset: 1794},
									val:        ";",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1950},
						run: (*parser).callonSwitchBranch12,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1950},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 56, col: 5, offset: 1950},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 7, offset: 1952},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 21, offset: 1966},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 24, offset: 1969},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 29, offset: 1974},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 32, offset: 1977},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 37, offset: 1982},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 48, offset: 1993},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 51, offset: 1996},
									val:        ";",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 60, col: 1, offset: 2075},
			expr: &choiceExpr{
				pos: position{line: 61, col: 5, offset: 2086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 2086},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 61, col: 5, offset: 2086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 61, col: 5, offset: 2086},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 2092},
										name: "SwitchBranch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 61, col: 24, offset: 2105},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 61, col: 27, offset: 2108},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 61, col: 32, offset: 2113},
										expr: &ruleRefExpr{
											pos:  position{line: 61, col: 32, offset: 2113},
											name: "Switch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2227},
						run: (*parser).callonSwitch10,
						expr: &labeledExpr{
							pos:   position{line: 64, col: 5, offset: 2227},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 11, offset: 2233},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 68, col: 1, offset: 2294},
			expr: &litMatcher{
				pos:        position{line: 68, col: 16, offset: 2309},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "FromTrunks",
			pos:  position{line: 70, col: 1, offset: 2321},
			expr: &choiceExpr{
				pos: position{line: 71, col: 5, offset: 2336},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 2336},
						run: (*parser).callonFromTrunks2,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 2336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 71, col: 5, offset: 2336},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2342},
										name: "FromTrunk",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 21, offset: 2352},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 71, col: 24, offset: 2355},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 71, col: 29, offset: 2360},
										expr: &ruleRefExpr{
											pos:  position{line: 71, col: 29, offset: 2360},
											name: "FromTrunks",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 74, col: 5, offset: 2478},
						run: (*parser).callonFromTrunks10,
						expr: &labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2478},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2484},
								name: "FromTrunk",
							},
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 78, col: 1, offset: 2542},
			expr: &actionExpr{
				pos: position{line: 79, col: 5, offset: 2556},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 79, col: 5, offset: 2556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 79, col: 5, offset: 2556},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 12, offset: 2563},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 79, col: 23, offset: 2574},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 27, offset: 2578},
								name: "FromTrunkSeq",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 40, offset: 2591},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 79, col: 43, offset: 2594},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 83, col: 1, offset: 2695},
			expr: &choiceExpr{
				pos: position{line: 84, col: 5, offset: 2712},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2712},
						run: (*parser).callonFromTrunkSeq2,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2712},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 84, col: 5, offset: 2712},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 84, col: 8, offset: 2715},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 13, offset: 2720},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 16, offset: 2723},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 20, offset: 2727},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2762},
						run: (*parser).callonFromTrunkSeq9,
						expr: &litMatcher{
							pos:        position{line: 85, col: 5, offset: 2762},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 87, col: 1, offset: 2785},
			expr: &choiceExpr{
				pos: position{line: 88, col: 5, offset: 2800},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 5, offset: 2800},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 5, offset: 2813},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2826},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 5, offset: 2839},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 93, col: 1, offset: 2849},
			expr: &choiceExpr{
				pos: position{line: 94, col: 5, offset: 2863},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 2863},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 94, col: 5, offset: 2863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 94, col: 5, offset: 2863},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 13, offset: 2871},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 94, col: 16, offset: 2874},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 20, offset: 2878},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 94, col: 23, offset: 2881},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 33, offset: 2891},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 94, col: 42, offset: 2900},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 94, col: 45, offset: 2903},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 3000},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 97, col: 5, offset: 3000},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 97, col: 5, offset: 3000},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 14, offset: 3009},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 97, col: 17, offset: 3012},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 21, offset: 3016},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 97, col: 24, offset: 3019},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 34, offset: 3029},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 41, offset: 3036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 97, col: 44, offset: 3039},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 100, col: 5, offset: 3134},
						run: (*parser).callonOperation22,
						expr: &seqExpr{
							pos: position{line: 100, col: 5, offset: 3134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 100, col: 5, offset: 3134},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 12, offset: 3141},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 100, col: 15, offset: 3144},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 19, offset: 3148},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 100, col: 22, offset: 3151},
									label: "trunks",
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 29, offset: 3158},
										name: "FromTrunks",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 40, offset: 3169},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 100, col: 43, offset: 3172},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3263},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 104, col: 5, offset: 3276},
						run: (*parser).callonOperation33,
						expr: &seqExpr{
							pos: position{line: 104, col: 5, offset: 3276},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 104, col: 5, offset: 3276},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 7, offset: 3278},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 104, col: 16, offset: 3287},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 17, offset: 3288},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 105, col: 5, offset: 3318},
						run: (*parser).callonOperation39,
						expr: &seqExpr{
							pos: position{line: 105, col: 5, offset: 3318},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 105, col: 5, offset: 3318},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 7, offset: 3320},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 105, col: 19, offset: 3332},
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 20, offset: 3333},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 106, col: 5, offset: 3364},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 106, col: 5, offset: 3364},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 106, col: 5, offset: 3364},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 106, col: 10, offset: 3369},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 106, col: 24, offset: 3383},
									expr: &ruleRefExpr{
										pos:  position{line: 106, col: 25, offset: 3384},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 110, col: 1, offset: 3475},
			expr: &seqExpr{
				pos: position{line: 110, col: 11, offset: 3485},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 110, col: 11, offset: 3485},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 110, col: 15, offset: 3489},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 110, col: 15, offset: 3489},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 110, col: 22, offset: 3496},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 110, col: 29, offset: 3503},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 110, col: 36, offset: 3510},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 111, col: 1, offset: 3515},
			expr: &seqExpr{
				pos: position{line: 111, col: 8, offset: 3522},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 111, col: 8, offset: 3522},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 111, col: 12, offset: 3526},
						expr: &choiceExpr{
							pos: position{line: 111, col: 14, offset: 3528},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 111, col: 14, offset: 3528},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 111, col: 20, offset: 3534},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 113, col: 1, offset: 3540},
			expr: &seqExpr{
				pos: position{line: 113, col: 13, offset: 3552},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 113, col: 13, offset: 3552},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 113, col: 17, offset: 3556},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 113, col: 18, offset: 3557},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 18, offset: 3557},
										expr: &litMatcher{
											pos:        position{line: 113, col: 19, offset: 3558},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 113, col: 24, offset: 3563},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 38, offset: 3577},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 57, offset: 3596},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 113, col: 82, offset: 3621},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 113, col: 88, offset: 3627},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 113, col: 94, offset: 3633},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 113, col: 100, offset: 3639},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 115, col: 1, offset: 3651},
			expr: &actionExpr{
				pos: position{line: 115, col: 14, offset: 3664},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 115, col: 15, offset: 3665},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 115, col: 15, offset: 3665},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 115, col: 22, offset: 3672},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 115, col: 29, offset: 3679},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 115, col: 36, offset: 3686},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 115, col: 43, offset: 3693},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 115, col: 49, offset: 3699},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 115, col: 56, offset: 3706},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 117, col: 1, offset: 3743},
			expr: &choiceExpr{
				pos: position{line: 117, col: 12, offset: 3754},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 117, col: 13, offset: 3755},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 117, col: 13, offset: 3755},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 117, col: 16, offset: 3758},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 117, col: 16, offset: 3758},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 117, col: 26, offset: 3768},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 117, col: 35, offset: 3777},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 117, col: 43, offset: 3785},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 117, col: 43, offset: 3785},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 117, col: 46, offset: 3788},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 119, col: 1, offset: 3794},
			expr: &actionExpr{
				pos: position{line: 120, col: 5, offset: 3812},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 120, col: 5, offset: 3812},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 120, col: 5, offset: 3812},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 11, offset: 3818},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 21, offset: 3828},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 120, col: 26, offset: 3833},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 26, offset: 3833},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 124, col: 1, offset: 3907},
			expr: &actionExpr{
				pos: position{line: 124, col: 16, offset: 3922},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 124, col: 16, offset: 3922},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 124, col: 16, offset: 3922},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 124, col: 18, offset: 3924},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 124, col: 26, offset: 3932},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 28, offset: 3934},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 30, offset: 3936},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 126, col: 1, offset: 3986},
			expr: &actionExpr{
				pos: position{line: 127, col: 5, offset: 4000},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 127, col: 5, offset: 4000},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 127, col: 5, offset: 4000},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 11, offset: 4006},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 5, offset: 4023},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 128, col: 10, offset: 4028},
								expr: &actionExpr{
									pos: position{line: 128, col: 11, offset: 4029},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 128, col: 11, offset: 4029},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 128, col: 11, offset: 4029},
												expr: &seqExpr{
													pos: position{line: 128, col: 12, offset: 4030},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 128, col: 12, offset: 4030},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 128, col: 14, offset: 4032},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 128, col: 25, offset: 4043},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 128, col: 27, offset: 4045},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 128, col: 32, offset: 4050},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 132, col: 1, offset: 4166},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 4183},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 133, col: 5, offset: 4183},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 133, col: 5, offset: 4183},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 133, col: 6, offset: 4184},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 133, col: 6, offset: 4184},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 133, col: 6, offset: 4184},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 133, col: 15, offset: 4193},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 133, col: 19, offset: 4197},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 133, col: 19, offset: 4197},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 133, col: 23, offset: 4201},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 27, offset: 4205},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 29, offset: 4207},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 136, col: 5, offset: 4319},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4334},
						run: (*parser).callonSearchFactor14,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4334},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 5, offset: 4334},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 9, offset: 4338},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 137, col: 12, offset: 4341},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 17, offset: 4346},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 31, offset: 4360},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 137, col: 34, offset: 4363},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TBD",
			pos:  position{line: 140, col: 1, offset: 4390},
			expr: &choiceExpr{
				pos: position{line: 141, col: 5, offset: 4398},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 141, col: 5, offset: 4398},
						run: (*parser).callonTBD2,
						expr: &seqExpr{
							pos: position{line: 141, col: 5, offset: 4398},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 141, col: 5, offset: 4398},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 9, offset: 4402},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 141, col: 12, offset: 4405},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 141, col: 22, offset: 4415},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 36, offset: 4429},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 141, col: 39, offset: 4432},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 141, col: 41, offset: 4434},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 168, col: 5, offset: 5116},
						run: (*parser).callonTBD11,
						expr: &seqExpr{
							pos: position{line: 168, col: 5, offset: 5116},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 168, col: 5, offset: 5116},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 11, offset: 5122},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 168, col: 24, offset: 5135},
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 25, offset: 5136},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5172},
						run: (*parser).callonTBD17,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5172},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 169, col: 5, offset: 5172},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 7, offset: 5174},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 19, offset: 5186},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 21, offset: 5188},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 29, offset: 5196},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 169, col: 31, offset: 5198},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 197, col: 1, offset: 5877},
			expr: &choiceExpr{
				pos: position{line: 198, col: 5, offset: 5892},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 5892},
						run: (*parser).callonSearchExpr2,
						expr: &seqExpr{
							pos: position{line: 198, col: 5, offset: 5892},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 198, col: 5, offset: 5892},
									expr: &seqExpr{
										pos: position{line: 198, col: 7, offset: 5894},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 198, col: 7, offset: 5894},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 198, col: 19, offset: 5906},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 198, col: 24, offset: 5911},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 198, col: 31, offset: 5918},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 199, col: 5, offset: 5959},
						run: (*parser).callonSearchExpr10,
						expr: &seqExpr{
							pos: position{line: 199, col: 5, offset: 5959},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 199, col: 5, offset: 5959},
									expr: &seqExpr{
										pos: position{line: 199, col: 7, offset: 5961},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 199, col: 7, offset: 5961},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 199, col: 19, offset: 5973},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 199, col: 24, offset: 5978},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 26, offset: 5980},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 199, col: 38, offset: 5992},
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 39, offset: 5993},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6110},
						run: (*parser).callonSearchExpr20,
						expr: &seqExpr{
							pos: position{line: 202, col: 5, offset: 6110},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 202, col: 5, offset: 6110},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 202, col: 9, offset: 6114},
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 10, offset: 6115},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6231},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 207, col: 1, offset: 6252},
			expr: &choiceExpr{
				pos: position{line: 208, col: 5, offset: 6268},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6268},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 209, col: 5, offset: 6280},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 209, col: 5, offset: 6280},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 209, col: 5, offset: 6280},
									expr: &ruleRefExpr{
										pos:  position{line: 209, col: 6, offset: 6281},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 209, col: 13, offset: 6288},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 209, col: 15, offset: 6290},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 213, col: 1, offset: 6398},
			expr: &actionExpr{
				pos: position{line: 214, col: 5, offset: 6416},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 214, col: 5, offset: 6416},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 214, col: 13, offset: 6424},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 218, col: 1, offset: 6526},
			expr: &actionExpr{
				pos: position{line: 219, col: 5, offset: 6543},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 219, col: 5, offset: 6543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 219, col: 5, offset: 6543},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 7, offset: 6545},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 219, col: 12, offset: 6550},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 219, col: 14, offset: 6552},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 219, col: 25, offset: 6563},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 28, offset: 6566},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 36, offset: 6574},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 223, col: 1, offset: 6686},
			expr: &choiceExpr{
				pos: position{line: 223, col: 11, offset: 6696},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 223, col: 11, offset: 6696},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 20, offset: 6705},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 225, col: 1, offset: 6711},
			expr: &choiceExpr{
				pos: position{line: 226, col: 5, offset: 6727},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6727},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6749},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6762},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6774},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6787},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6799},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6811},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 233, col: 5, offset: 6828},
						val:        "type(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 234, col: 5, offset: 6840},
						val:        "matches",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 238, col: 1, offset: 6878},
			expr: &choiceExpr{
				pos: position{line: 239, col: 5, offset: 6894},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 239, col: 5, offset: 6894},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 239, col: 5, offset: 6894},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 239, col: 5, offset: 6894},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 239, col: 15, offset: 6904},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 239, col: 21, offset: 6910},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 239, col: 30, offset: 6919},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 239, col: 35, offset: 6924},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 239, col: 47, offset: 6936},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 239, col: 53, offset: 6942},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 242, col: 5, offset: 7087},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 242, col: 5, offset: 7087},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 242, col: 5, offset: 7087},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 242, col: 15, offset: 7097},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 242, col: 21, offset: 7103},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 242, col: 30, offset: 7112},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 242, col: 35, offset: 7117},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 242, col: 50, offset: 7132},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 242, col: 55, offset: 7137},
										expr: &seqExpr{
											pos: position{line: 242, col: 56, offset: 7138},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 242, col: 56, offset: 7138},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 242, col: 58, offset: 7140},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 242, col: 72, offset: 7154},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 242, col: 78, offset: 7160},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 250, col: 1, offset: 7393},
			expr: &choiceExpr{
				pos: position{line: 250, col: 13, offset: 7405},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 250, col: 13, offset: 7405},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 250, col: 13, offset: 7405},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 250, col: 25, offset: 7417},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 250, col: 29, offset: 7421},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 252, col: 1, offset: 7425},
			expr: &choiceExpr{
				pos: position{line: 253, col: 5, offset: 7438},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 7438},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 7438},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 253, col: 5, offset: 7438},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 14, offset: 7447},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 253, col: 16, offset: 7449},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 20, offset: 7453},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 29, offset: 7462},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 7488},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 254, col: 5, offset: 7488},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 256, col: 1, offset: 7513},
			expr: &actionExpr{
				pos: position{line: 257, col: 5, offset: 7529},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 257, col: 5, offset: 7529},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 257, col: 5, offset: 7529},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 13, offset: 7537},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 15, offset: 7539},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 23, offset: 7547},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 259, col: 1, offset: 7588},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 7601},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 7601},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 260, col: 5, offset: 7601},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 260, col: 5, offset: 7601},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 260, col: 7, offset: 7603},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 260, col: 14, offset: 7610},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 260, col: 16, offset: 7612},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 260, col: 25, offset: 7621},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 260, col: 27, offset: 7623},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 33, offset: 7629},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7660},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 261, col: 5, offset: 7660},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 266, col: 1, offset: 7920},
			expr: &choiceExpr{
				pos: position{line: 267, col: 5, offset: 7939},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7939},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 268, col: 5, offset: 7954},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 268, col: 5, offset: 7954},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 10, offset: 7959},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 270, col: 1, offset: 8051},
			expr: &actionExpr{
				pos: position{line: 271, col: 5, offset: 8071},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 271, col: 5, offset: 8071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 271, col: 5, offset: 8071},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 11, offset: 8077},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 26, offset: 8092},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 31, offset: 8097},
								expr: &actionExpr{
									pos: position{line: 271, col: 32, offset: 8098},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 271, col: 32, offset: 8098},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 271, col: 32, offset: 8098},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 271, col: 35, offset: 8101},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 271, col: 39, offset: 8105},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 271, col: 42, offset: 8108},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 271, col: 47, offset: 8113},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 275, col: 1, offset: 8235},
			expr: &choiceExpr{
				pos: position{line: 276, col: 5, offset: 8253},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 8253},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 276, col: 5, offset: 8253},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 276, col: 5, offset: 8253},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 276, col: 10, offset: 8258},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 15, offset: 8263},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 276, col: 18, offset: 8266},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 23, offset: 8271},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 276, col: 26, offset: 8274},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 276, col: 30, offset: 8278},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 279, col: 5, offset: 8382},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 279, col: 5, offset: 8382},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 9, offset: 8386},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 283, col: 1, offset: 8486},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8494},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8494},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 5, offset: 8494},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 6, offset: 8495},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 16, offset: 8505},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 19, offset: 8508},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 27, offset: 8516},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 284, col: 30, offset: 8519},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 34, offset: 8523},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 37, offset: 8526},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 42, offset: 8531},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 42, offset: 8531},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 49, offset: 8538},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 284, col: 52, offset: 8541},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 284, col: 56, offset: 8545},
							expr: &seqExpr{
								pos: position{line: 284, col: 58, offset: 8547},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 284, col: 58, offset: 8547},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 284, col: 61, offset: 8550},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 66, offset: 8555},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 72, offset: 8561},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 72, offset: 8561},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 292, col: 1, offset: 8751},
			expr: &choiceExpr{
				pos: position{line: 293, col: 5, offset: 8763},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 8763},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8782},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 295, col: 5, offset: 8795},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 297, col: 1, offset: 8804},
			expr: &actionExpr{
				pos: position{line: 297, col: 15, offset: 8818},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 297, col: 15, offset: 8818},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 297, col: 15, offset: 8818},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 297, col: 17, offset: 8820},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 25, offset: 8828},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 27, offset: 8830},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 32, offset: 8835},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 299, col: 1, offset: 8871},
			expr: &actionExpr{
				pos: position{line: 300, col: 5, offset: 8890},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 300, col: 5, offset: 8890},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 300, col: 5, offset: 8890},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 11, offset: 8896},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 25, offset: 8910},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 300, col: 30, offset: 8915},
								expr: &seqExpr{
									pos: position{line: 300, col: 31, offset: 8916},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 300, col: 31, offset: 8916},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 300, col: 34, offset: 8919},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 300, col: 38, offset: 8923},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 300, col: 41, offset: 8926},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 310, col: 1, offset: 9162},
			expr: &choiceExpr{
				pos: position{line: 311, col: 5, offset: 9175},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 311, col: 5, offset: 9175},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 312, col: 5, offset: 9188},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 313, col: 5, offset: 9200},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 5, offset: 9212},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 9225},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 9238},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 5, offset: 9251},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 318, col: 5, offset: 9264},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 319, col: 5, offset: 9279},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 5, offset: 9292},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 321, col: 5, offset: 9304},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 5, offset: 9319},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 5, offset: 9332},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 324, col: 5, offset: 9346},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 325, col: 5, offset: 9359},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 5, offset: 9374},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 5, offset: 9386},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 328, col: 5, offset: 9399},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 5, offset: 9412},
						name: "ExplodeProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 331, col: 1, offset: 9425},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 9438},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 9438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 9438},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 13, offset: 9446},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 18, offset: 9451},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 27, offset: 9460},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 32, offset: 9465},
								expr: &actionExpr{
									pos: position{line: 332, col: 33, offset: 9466},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 332, col: 33, offset: 9466},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 332, col: 33, offset: 9466},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 35, offset: 9468},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 37, offset: 9470},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 346, col: 1, offset: 9889},
			expr: &actionExpr{
				pos: position{line: 346, col: 12, offset: 9900},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 346, col: 12, offset: 9900},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 346, col: 17, offset: 9905},
						expr: &actionExpr{
							pos: position{line: 346, col: 18, offset: 9906},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 346, col: 18, offset: 9906},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 346, col: 18, offset: 9906},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 346, col: 20, offset: 9908},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 346, col: 22, offset: 9910},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 348, col: 1, offset: 9966},
			expr: &choiceExpr{
				pos: position{line: 349, col: 5, offset: 9978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 349, col: 5, offset: 9978},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 349, col: 5, offset: 9978},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 350, col: 5, offset: 10053},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 350, col: 5, offset: 10053},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 350, col: 5, offset: 10053},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 350, col: 14, offset: 10062},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 350, col: 16, offset: 10064},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 350, col: 23, offset: 10071},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 350, col: 24, offset: 10072},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 350, col: 24, offset: 10072},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 350, col: 34, offset: 10082},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 352, col: 1, offset: 10196},
			expr: &actionExpr{
				pos: position{line: 353, col: 5, offset: 10208},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 353, col: 5, offset: 10208},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 5, offset: 10208},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 353, col: 12, offset: 10215},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 18, offset: 10221},
								expr: &actionExpr{
									pos: position{line: 353, col: 19, offset: 10222},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 353, col: 19, offset: 10222},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 353, col: 19, offset: 10222},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 353, col: 21, offset: 10224},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 353, col: 23, offset: 10226},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 47, offset: 10250},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 53, offset: 10256},
								expr: &seqExpr{
									pos: position{line: 353, col: 54, offset: 10257},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 353, col: 54, offset: 10257},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 353, col: 56, offset: 10259},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 67, offset: 10270},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 74, offset: 10277},
								expr: &actionExpr{
									pos: position{line: 353, col: 75, offset: 10278},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 353, col: 75, offset: 10278},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 353, col: 75, offset: 10278},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 353, col: 77, offset: 10280},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 353, col: 79, offset: 10282},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 367, col: 1, offset: 10627},
			expr: &actionExpr{
				pos: position{line: 368, col: 5, offset: 10639},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 368, col: 5, offset: 10639},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 5, offset: 10639},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 368, col: 12, offset: 10646},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 368, col: 14, offset: 10648},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 19, offset: 10653},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 372, col: 1, offset: 10748},
			expr: &actionExpr{
				pos: position{line: 373, col: 5, offset: 10761},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 373, col: 5, offset: 10761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 5, offset: 10761},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 13, offset: 10769},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 15, offset: 10771},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 20, offset: 10776},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 377, col: 1, offset: 10872},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 10885},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 10885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 10885},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 13, offset: 10893},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 15, offset: 10895},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 20, offset: 10900},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 382, col: 1, offset: 10991},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 11004},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 383, col: 5, offset: 11004},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 383, col: 5, offset: 11004},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 383, col: 5, offset: 11004},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 383, col: 13, offset: 11012},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 383, col: 15, offset: 11014},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 383, col: 21, offset: 11020},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 11100},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 384, col: 5, offset: 11100},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 386, col: 1, offset: 11176},
			expr: &choiceExpr{
				pos: position{line: 387, col: 5, offset: 11189},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 387, col: 5, offset: 11189},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 387, col: 5, offset: 11189},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 387, col: 5, offset: 11189},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 387, col: 13, offset: 11197},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 387, col: 15, offset: 11199},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 387, col: 21, offset: 11205},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 388, col: 5, offset: 11285},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 388, col: 5, offset: 11285},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 390, col: 1, offset: 11361},
			expr: &actionExpr{
				pos: position{line: 391, col: 5, offset: 11376},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 391, col: 5, offset: 11376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 5, offset: 11376},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 15, offset: 11386},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 17, offset: 11388},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 20, offset: 11391},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 395, col: 1, offset: 11428},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11439},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 396, col: 5, offset: 11439},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 396, col: 10, offset: 11444},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 400, col: 1, offset: 11540},
			expr: &choiceExpr{
				pos: position{line: 401, col: 5, offset: 11553},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 401, col: 5, offset: 11553},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 401, col: 5, offset: 11553},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 401, col: 5, offset: 11553},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 401, col: 13, offset: 11561},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 401, col: 15, offset: 11563},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 11652},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 404, col: 5, offset: 11652},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 408, col: 1, offset: 11742},
			expr: &actionExpr{
				pos: position{line: 409, col: 5, offset: 11754},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 409, col: 5, offset: 11754},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 409, col: 5, offset: 11754},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 409, col: 12, offset: 11761},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 409, col: 14, offset: 11763},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 19, offset: 11768},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 413, col: 1, offset: 11863},
			expr: &actionExpr{
				pos: position{line: 414, col: 5, offset: 11878},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 414, col: 5, offset: 11878},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 414, col: 5, offset: 11878},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 414, col: 15, offset: 11888},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 414, col: 17, offset: 11890},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 23, offset: 11896},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 414, col: 34, offset: 11907},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 414, col: 39, offset: 11912},
								expr: &actionExpr{
									pos: position{line: 414, col: 40, offset: 11913},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 414, col: 40, offset: 11913},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 414, col: 40, offset: 11913},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 414, col: 43, offset: 11916},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 414, col: 47, offset: 11920},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 414, col: 50, offset: 11923},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 414, col: 53, offset: 11926},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 422, col: 1, offset: 12335},
			expr: &actionExpr{
				pos: position{line: 423, col: 5, offset: 12348},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 423, col: 5, offset: 12348},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 423, col: 5, offset: 12348},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 423, col: 13, offset: 12356},
							expr: &seqExpr{
								pos: position{line: 423, col: 15, offset: 12358},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 423, col: 15, offset: 12358},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 423, col: 18, offset: 12361},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 427, col: 1, offset: 12432},
			expr: &actionExpr{
				pos: position{line: 428, col: 5, offset: 12446},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 428, col: 5, offset: 12446},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 432, col: 1, offset: 12522},
			expr: &choiceExpr{
				pos: position{line: 433, col: 5, offset: 12535},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 433, col: 5, offset: 12535},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 433, col: 5, offset: 12535},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 433, col: 5, offset: 12535},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 11, offset: 12541},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 433, col: 21, offset: 12551},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 29, offset: 12559},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 31, offset: 12561},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 34, offset: 12564},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 433, col: 36, offset: 12566},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 44, offset: 12574},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 52, offset: 12582},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 433, col: 55, offset: 12585},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 59, offset: 12589},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 433, col: 62, offset: 12592},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 71, offset: 12601},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 433, col: 79, offset: 12609},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 433, col: 87, offset: 12617},
										expr: &seqExpr{
											pos: position{line: 433, col: 88, offset: 12618},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 433, col: 88, offset: 12618},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 433, col: 90, offset: 12620},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 12886},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 12886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 440, col: 5, offset: 12886},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 11, offset: 12892},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 440, col: 22, offset: 12903},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 30, offset: 12911},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 32, offset: 12913},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 35, offset: 12916},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 440, col: 37, offset: 12918},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 41, offset: 12922},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 440, col: 49, offset: 12930},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 440, col: 57, offset: 12938},
										expr: &seqExpr{
											pos: position{line: 440, col: 58, offset: 12939},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 440, col: 58, offset: 12939},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 440, col: 60, offset: 12941},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 448, col: 1, offset: 13195},
			expr: &choiceExpr{
				pos: position{line: 449, col: 5, offset: 13209},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 13209},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 13209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 449, col: 5, offset: 13209},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 449, col: 14, offset: 13218},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 450, col: 5, offset: 13248},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 450, col: 5, offset: 13248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 450, col: 5, offset: 13248},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 14, offset: 13257},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 451, col: 5, offset: 13286},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 451, col: 5, offset: 13286},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 451, col: 5, offset: 13286},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 451, col: 14, offset: 13295},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 5, offset: 13325},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 452, col: 5, offset: 13325},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 454, col: 1, offset: 13361},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13373},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 455, col: 5, offset: 13373},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 13382},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 456, col: 5, offset: 13382},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 456, col: 5, offset: 13382},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 456, col: 9, offset: 13386},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 14, offset: 13391},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 456, col: 19, offset: 13396},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 458, col: 1, offset: 13422},
			expr: &actionExpr{
				pos: position{line: 459, col: 5, offset: 13437},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 459, col: 5, offset: 13437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 5, offset: 13437},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 459, col: 15, offset: 13447},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 17, offset: 13449},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 496, col: 1, offset: 14744},
			expr: &choiceExpr{
				pos: position{line: 497, col: 5, offset: 14759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 497, col: 5, offset: 14759},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 497, col: 5, offset: 14759},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 497, col: 5, offset: 14759},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 497, col: 7, offset: 14761},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 497, col: 12, offset: 14766},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 498, col: 5, offset: 14795},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 498, col: 5, offset: 14795},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 500, col: 1, offset: 14853},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14866},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 501, col: 5, offset: 14866},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 501, col: 12, offset: 14873},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 505, col: 1, offset: 15029},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 15041},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 506, col: 5, offset: 15041},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 507, col: 5, offset: 15054},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 508, col: 5, offset: 15067},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 510, col: 1, offset: 15077},
			expr: &actionExpr{
				pos: position{line: 511, col: 5, offset: 15090},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 511, col: 5, offset: 15090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 511, col: 5, offset: 15090},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 511, col: 13, offset: 15098},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 511, col: 15, offset: 15100},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 20, offset: 15105},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 511, col: 25, offset: 15110},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 32, offset: 15117},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 511, col: 42, offset: 15127},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 49, offset: 15134},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 515, col: 1, offset: 15262},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 15275},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 516, col: 5, offset: 15275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 516, col: 5, offset: 15275},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 516, col: 13, offset: 15283},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 516, col: 15, offset: 15285},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 20, offset: 15290},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 518, col: 1, offset: 15321},
			expr: &actionExpr{
				pos: position{line: 519, col: 5, offset: 15334},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 519, col: 5, offset: 15334},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 519, col: 5, offset: 15334},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 10, offset: 15339},
								name: "PoolName",
							},
						},
						&labeledExpr{
							pos:   position{line: 519, col: 19, offset: 15348},
							label: "at",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 22, offset: 15351},
								name: "PoolAt",
							},
						},
						&labeledExpr{
							pos:   position{line: 519, col: 29, offset: 15358},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 34, offset: 15363},
								name: "PoolRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 519, col: 44, offset: 15373},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 50, offset: 15379},
								name: "OrderArg",
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 523, col: 1, offset: 15514},
			expr: &actionExpr{
				pos: position{line: 524, col: 5, offset: 15527},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 524, col: 5, offset: 15527},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 524, col: 5, offset: 15527},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 524, col: 12, offset: 15534},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 14, offset: 15536},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 18, offset: 15540},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 524, col: 22, offset: 15544},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 29, offset: 15551},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 524, col: 39, offset: 15561},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 46, offset: 15568},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 528, col: 1, offset: 15693},
			expr: &actionExpr{
				pos: position{line: 528, col: 7, offset: 15699},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 528, col: 7, offset: 15699},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 528, col: 8, offset: 15700},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 528, col: 8, offset: 15700},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 528, col: 18, offset: 15710},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 28, offset: 15720},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 530, col: 1, offset: 15757},
			expr: &choiceExpr{
				pos: position{line: 531, col: 5, offset: 15766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 531, col: 5, offset: 15766},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 531, col: 5, offset: 15766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 7, offset: 15768},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 15803},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 532, col: 5, offset: 15803},
							expr: &charClassMatcher{
								pos:        position{line: 532, col: 5, offset: 15803},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 534, col: 1, offset: 15875},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 15886},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15886},
						run: (*parser).callonPoolAt2,
						expr: &seqExpr{
							pos: position{line: 535, col: 5, offset: 15886},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 535, col: 5, offset: 15886},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 535, col: 7, offset: 15888},
									val:        "at",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 13, offset: 15894},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 15, offset: 15896},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 18, offset: 15899},
										name: "KSUID",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 15928},
						run: (*parser).callonPoolAt9,
						expr: &litMatcher{
							pos:        position{line: 536, col: 5, offset: 15928},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 538, col: 1, offset: 15952},
			expr: &actionExpr{
				pos: position{line: 538, col: 9, offset: 15960},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 538, col: 9, offset: 15960},
					expr: &charClassMatcher{
						pos:        position{line: 538, col: 10, offset: 15961},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 540, col: 1, offset: 16007},
			expr: &choiceExpr{
				pos: position{line: 541, col: 5, offset: 16021},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 16021},
						run: (*parser).callonPoolRange2,
						expr: &seqExpr{
							pos: position{line: 541, col: 5, offset: 16021},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 541, col: 5, offset: 16021},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 541, col: 7, offset: 16023},
									val:        "over",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 541, col: 15, offset: 16031},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 541, col: 17, offset: 16033},
									label: "lower",
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 23, offset: 16039},
										name: "Literal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 541, col: 31, offset: 16047},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 541, col: 33, offset: 16049},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 541, col: 39, offset: 16055},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 541, col: 41, offset: 16057},
									label: "upper",
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 47, offset: 16063},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 544, col: 5, offset: 16171},
						run: (*parser).callonPoolRange14,
						expr: &litMatcher{
							pos:        position{line: 544, col: 5, offset: 16171},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolTo",
			pos:  position{line: 546, col: 1, offset: 16195},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 16206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16206},
						run: (*parser).callonPoolTo2,
						expr: &seqExpr{
							pos: position{line: 547, col: 5, offset: 16206},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 547, col: 5, offset: 16206},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 547, col: 7, offset: 16208},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 13, offset: 16214},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 547, col: 15, offset: 16216},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 19, offset: 16220},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 548, col: 5, offset: 16252},
						run: (*parser).callonPoolTo9,
						expr: &litMatcher{
							pos:        position{line: 548, col: 5, offset: 16252},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 550, col: 1, offset: 16276},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 16289},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16289},
						run: (*parser).callonPoolName2,
						expr: &labeledExpr{
							pos:   position{line: 551, col: 5, offset: 16289},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 10, offset: 16294},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 552, col: 5, offset: 16334},
						run: (*parser).callonPoolName5,
						expr: &labeledExpr{
							pos:   position{line: 552, col: 5, offset: 16334},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 8, offset: 16337},
								name: "KSUID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 16366},
						run: (*parser).callonPoolName8,
						expr: &labeledExpr{
							pos:   position{line: 553, col: 5, offset: 16366},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 7, offset: 16368},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 555, col: 1, offset: 16400},
			expr: &choiceExpr{
				pos: position{line: 556, col: 5, offset: 16414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16414},
						run: (*parser).callonLayoutArg2,
						expr: &seqExpr{
							pos: position{line: 556, col: 5, offset: 16414},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 556, col: 5, offset: 16414},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 556, col: 7, offset: 16416},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 556, col: 16, offset: 16425},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 556, col: 18, offset: 16427},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 556, col: 23, offset: 16432},
										name: "FieldExprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 556, col: 34, offset: 16443},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 556, col: 40, offset: 16449},
										name: "OrderSuffix",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 559, col: 5, offset: 16562},
						run: (*parser).callonLayoutArg11,
						expr: &litMatcher{
							pos:        position{line: 559, col: 5, offset: 16562},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 561, col: 1, offset: 16586},
			expr: &choiceExpr{
				pos: position{line: 562, col: 5, offset: 16600},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 16600},
						run: (*parser).callonFormatArg2,
						expr: &seqExpr{
							pos: position{line: 562, col: 5, offset: 16600},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 562, col: 5, offset: 16600},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 562, col: 7, offset: 16602},
									val:        "format",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 562, col: 17, offset: 16612},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 562, col: 19, offset: 16614},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 562, col: 23, offset: 16618},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 16657},
						run: (*parser).callonFormatArg9,
						expr: &litMatcher{
							pos:        position{line: 563, col: 5, offset: 16657},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 565, col: 1, offset: 16680},
			expr: &choiceExpr{
				pos: position{line: 566, col: 5, offset: 16696},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 16696},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 566, col: 5, offset: 16696},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 16731},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 567, col: 5, offset: 16731},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16768},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 568, col: 5, offset: 16768},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 570, col: 1, offset: 16794},
			expr: &choiceExpr{
				pos: position{line: 571, col: 5, offset: 16807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 16807},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 571, col: 5, offset: 16807},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 571, col: 5, offset: 16807},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 571, col: 7, offset: 16809},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 16, offset: 16818},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 571, col: 18, offset: 16820},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 572, col: 5, offset: 16854},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 572, col: 5, offset: 16854},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 572, col: 5, offset: 16854},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 572, col: 7, offset: 16856},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 572, col: 16, offset: 16865},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 572, col: 18, offset: 16867},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 16903},
						run: (*parser).callonOrderArg14,
						expr: &litMatcher{
							pos:        position{line: 573, col: 5, offset: 16903},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 575, col: 1, offset: 16926},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 16939},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 576, col: 5, offset: 16939},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 582, col: 1, offset: 17134},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 17150},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 17150},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 5, offset: 17150},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 583, col: 16, offset: 17161},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 18, offset: 17163},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 23, offset: 17168},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 29, offset: 17174},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 33, offset: 17178},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 41, offset: 17186},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 44, offset: 17189},
								name: "AsArg",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 587, col: 1, offset: 17300},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17312},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17312},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 588, col: 5, offset: 17312},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 588, col: 7, offset: 17314},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 588, col: 10, offset: 17317},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 12, offset: 17319},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 16, offset: 17323},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 590, col: 1, offset: 17348},
			expr: &choiceExpr{
				pos: position{line: 591, col: 5, offset: 17358},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 591, col: 5, offset: 17358},
						run: (*parser).callonAsArg2,
						expr: &seqExpr{
							pos: position{line: 591, col: 5, offset: 17358},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 591, col: 5, offset: 17358},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 591, col: 7, offset: 17360},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 591, col: 10, offset: 17363},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 591, col: 12, offset: 17365},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 591, col: 16, offset: 17369},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 17398},
						run: (*parser).callonAsArg9,
						expr: &litMatcher{
							pos:        position{line: 592, col: 5, offset: 17398},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 596, col: 1, offset: 17446},
			expr: &ruleRefExpr{
				pos:  position{line: 596, col: 8, offset: 17453},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 598, col: 1, offset: 17464},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17474},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 5, offset: 17474},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 11, offset: 17480},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 599, col: 16, offset: 17485},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 599, col: 21, offset: 17490},
								expr: &actionExpr{
									pos: position{line: 599, col: 22, offset: 17491},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 599, col: 22, offset: 17491},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 599, col: 22, offset: 17491},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 599, col: 25, offset: 17494},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 599, col: 29, offset: 17498},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 599, col: 32, offset: 17501},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 599, col: 37, offset: 17506},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 603, col: 1, offset: 17618},
			expr: &ruleRefExpr{
				pos:  position{line: 603, col: 13, offset: 17630},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 605, col: 1, offset: 17636},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17651},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17651},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17651},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 11, offset: 17657},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 21, offset: 17667},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 606, col: 26, offset: 17672},
								expr: &seqExpr{
									pos: position{line: 606, col: 27, offset: 17673},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 606, col: 27, offset: 17673},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 606, col: 30, offset: 17676},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 606, col: 34, offset: 17680},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 606, col: 37, offset: 17683},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 616, col: 1, offset: 17882},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 17897},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 17897},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 17897},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 9, offset: 17901},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 14, offset: 17906},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 617, col: 17, offset: 17909},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 22, offset: 17914},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 25, offset: 17917},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 29, offset: 17921},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 619, col: 1, offset: 18012},
			expr: &ruleRefExpr{
				pos:  position{line: 619, col: 8, offset: 18019},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 621, col: 1, offset: 18036},
			expr: &choiceExpr{
				pos: position{line: 622, col: 5, offset: 18056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18056},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 18056},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 18056},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 15, offset: 18066},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 29, offset: 18080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 622, col: 32, offset: 18083},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 36, offset: 18087},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 39, offset: 18090},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 50, offset: 18101},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 55, offset: 18106},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 622, col: 58, offset: 18109},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 62, offset: 18113},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 65, offset: 18116},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 76, offset: 18127},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 5, offset: 18267},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 627, col: 1, offset: 18282},
			expr: &actionExpr{
				pos: position{line: 628, col: 5, offset: 18300},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 628, col: 5, offset: 18300},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 628, col: 5, offset: 18300},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 18306},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18325},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 10, offset: 18330},
								expr: &actionExpr{
									pos: position{line: 629, col: 11, offset: 18331},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 629, col: 11, offset: 18331},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 629, col: 11, offset: 18331},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 629, col: 14, offset: 18334},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 629, col: 17, offset: 18337},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 629, col: 25, offset: 18345},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 629, col: 28, offset: 18348},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 629, col: 33, offset: 18353},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 633, col: 1, offset: 18471},
			expr: &actionExpr{
				pos: position{line: 634, col: 5, offset: 18490},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 634, col: 5, offset: 18490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 634, col: 5, offset: 18490},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 11, offset: 18496},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 635, col: 5, offset: 18520},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 635, col: 10, offset: 18525},
								expr: &actionExpr{
									pos: position{line: 635, col: 11, offset: 18526},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 635, col: 11, offset: 18526},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 635, col: 11, offset: 18526},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 635, col: 14, offset: 18529},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 635, col: 17, offset: 18532},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 635, col: 26, offset: 18541},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 635, col: 29, offset: 18544},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 635, col: 34, offset: 18549},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 639, col: 1, offset: 18672},
			expr: &choiceExpr{
				pos: position{line: 640, col: 5, offset: 18696},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 640, col: 5, offset: 18696},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 18713},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 18713},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 641, col: 5, offset: 18713},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 18719},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 642, col: 5, offset: 18736},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 642, col: 10, offset: 18741},
										expr: &actionExpr{
											pos: position{line: 642, col: 11, offset: 18742},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 642, col: 11, offset: 18742},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 642, col: 11, offset: 18742},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 642, col: 14, offset: 18745},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 642, col: 19, offset: 18750},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 642, col: 38, offset: 18769},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 642, col: 41, offset: 18772},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 642, col: 46, offset: 18777},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 646, col: 1, offset: 18895},
			expr: &choiceExpr{
				pos: position{line: 647, col: 5, offset: 18916},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 647, col: 5, offset: 18916},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 647, col: 5, offset: 18916},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 18945},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 648, col: 5, offset: 18945},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 650, col: 1, offset: 18982},
			expr: &choiceExpr{
				pos: position{line: 651, col: 5, offset: 19005},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 651, col: 5, offset: 19005},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 652, col: 5, offset: 19026},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 652, col: 5, offset: 19026},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 654, col: 1, offset: 19063},
			expr: &actionExpr{
				pos: position{line: 655, col: 5, offset: 19080},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 655, col: 5, offset: 19080},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 19080},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 11, offset: 19086},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19103},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 656, col: 10, offset: 19108},
								expr: &actionExpr{
									pos: position{line: 656, col: 11, offset: 19109},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 656, col: 11, offset: 19109},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 656, col: 11, offset: 19109},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 14, offset: 19112},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 17, offset: 19115},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 656, col: 34, offset: 19132},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 656, col: 37, offset: 19135},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 656, col: 42, offset: 19140},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 660, col: 1, offset: 19256},
			expr: &actionExpr{
				pos: position{line: 660, col: 20, offset: 19275},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 660, col: 21, offset: 19276},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 660, col: 21, offset: 19276},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 660, col: 28, offset: 19283},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 660, col: 34, offset: 19289},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 660, col: 41, offset: 19296},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 662, col: 1, offset: 19333},
			expr: &actionExpr{
				pos: position{line: 663, col: 5, offset: 19350},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 663, col: 5, offset: 19350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19350},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 11, offset: 19356},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 19379},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 664, col: 10, offset: 19384},
								expr: &actionExpr{
									pos: position{line: 664, col: 11, offset: 19385},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 664, col: 11, offset: 19385},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 664, col: 11, offset: 19385},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 14, offset: 19388},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 17, offset: 19391},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 664, col: 34, offset: 19408},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 664, col: 37, offset: 19411},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 664, col: 42, offset: 19416},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 668, col: 1, offset: 19538},
			expr: &actionExpr{
				pos: position{line: 668, col: 20, offset: 19557},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 668, col: 21, offset: 19558},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 668, col: 21, offset: 19558},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 668, col: 27, offset: 19564},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 670, col: 1, offset: 19601},
			expr: &actionExpr{
				pos: position{line: 671, col: 5, offset: 19624},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 671, col: 5, offset: 19624},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 671, col: 5, offset: 19624},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 11, offset: 19630},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 5, offset: 19642},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 672, col: 10, offset: 19647},
								expr: &actionExpr{
									pos: position{line: 672, col: 11, offset: 19648},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 672, col: 11, offset: 19648},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 672, col: 11, offset: 19648},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 672, col: 14, offset: 19651},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 672, col: 17, offset: 19654},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 672, col: 40, offset: 19677},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 672, col: 43, offset: 19680},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 672, col: 48, offset: 19685},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 676, col: 1, offset: 19796},
			expr: &actionExpr{
				pos: position{line: 676, col: 26, offset: 19821},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 676, col: 27, offset: 19822},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 676, col: 27, offset: 19822},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 676, col: 33, offset: 19828},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 678, col: 1, offset: 19865},
			expr: &choiceExpr{
				pos: position{line: 679, col: 5, offset: 19877},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 679, col: 5, offset: 19877},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 679, col: 5, offset: 19877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 679, col: 5, offset: 19877},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 679, col: 9, offset: 19881},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 679, col: 12, offset: 19884},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 679, col: 14, offset: 19886},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 682, col: 5, offset: 19995},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 684, col: 1, offset: 20005},
			expr: &choiceExpr{
				pos: position{line: 685, col: 5, offset: 20018},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 685, col: 5, offset: 20018},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 686, col: 5, offset: 20033},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 20047},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 687, col: 5, offset: 20047},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 687, col: 5, offset: 20047},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 687, col: 9, offset: 20051},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 687, col: 21, offset: 20063},
									expr: &seqExpr{
										pos: position{line: 687, col: 23, offset: 20065},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 687, col: 23, offset: 20065},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 687, col: 26, offset: 20068},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20097},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 20097},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 688, col: 5, offset: 20097},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 20103},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 688, col: 16, offset: 20108},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 688, col: 21, offset: 20113},
										expr: &ruleRefExpr{
											pos:  position{line: 688, col: 22, offset: 20114},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 691, col: 5, offset: 20185},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 691, col: 5, offset: 20185},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 691, col: 5, offset: 20185},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 20191},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 691, col: 20, offset: 20200},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 691, col: 25, offset: 20205},
										expr: &ruleRefExpr{
											pos:  position{line: 691, col: 26, offset: 20206},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 694, col: 5, offset: 20277},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 695, col: 5, offset: 20291},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 697, col: 1, offset: 20300},
			expr: &seqExpr{
				pos: position{line: 697, col: 13, offset: 20312},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 697, col: 13, offset: 20312},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 697, col: 22, offset: 20321},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 697, col: 25, offset: 20324},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 699, col: 1, offset: 20329},
			expr: &choiceExpr{
				pos: position{line: 700, col: 5, offset: 20342},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 700, col: 5, offset: 20342},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 701, col: 5, offset: 20352},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 702, col: 5, offset: 20364},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 703, col: 5, offset: 20377},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 705, col: 1, offset: 20385},
			expr: &actionExpr{
				pos: position{line: 706, col: 5, offset: 20399},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 706, col: 5, offset: 20399},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 706, col: 5, offset: 20399},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 13, offset: 20407},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 16, offset: 20410},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 706, col: 20, offset: 20414},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 25, offset: 20419},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 706, col: 39, offset: 20433},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 708, col: 1, offset: 20459},
			expr: &actionExpr{
				pos: position{line: 709, col: 5, offset: 20474},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 709, col: 5, offset: 20474},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 709, col: 5, offset: 20474},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 14, offset: 20483},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 709, col: 17, offset: 20486},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 21, offset: 20490},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 709, col: 24, offset: 20493},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 29, offset: 20498},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 35, offset: 20504},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 709, col: 38, offset: 20507},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 709, col: 42, offset: 20511},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 50, offset: 20519},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 717, col: 1, offset: 20917},
			expr: &choiceExpr{
				pos: position{line: 718, col: 5, offset: 20929},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 20929},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 718, col: 5, offset: 20929},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 718, col: 13, offset: 20937},
								expr: &ruleRefExpr{
									pos:  position{line: 718, col: 13, offset: 20937},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 20973},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 719, col: 5, offset: 20973},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 721, col: 1, offset: 20997},
			expr: &actionExpr{
				pos: position{line: 722, col: 5, offset: 21008},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 722, col: 5, offset: 21008},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 722, col: 5, offset: 21008},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 722, col: 8, offset: 21011},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 722, col: 12, offset: 21015},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 722, col: 15, offset: 21018},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 17, offset: 21020},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 724, col: 1, offset: 21048},
			expr: &actionExpr{
				pos: position{line: 725, col: 5, offset: 21057},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 725, col: 5, offset: 21057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 5, offset: 21057},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 9, offset: 21061},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 18, offset: 21070},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 725, col: 21, offset: 21073},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 25, offset: 21077},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 725, col: 28, offset: 21080},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 33, offset: 21085},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 38, offset: 21090},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 725, col: 41, offset: 21093},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 729, col: 1, offset: 21190},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 21203},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 730, col: 5, offset: 21203},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 730, col: 5, offset: 21203},
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 6, offset: 21204},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 16, offset: 21214},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 19, offset: 21217},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 34, offset: 21232},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 730, col: 37, offset: 21235},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 41, offset: 21239},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 730, col: 44, offset: 21242},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 49, offset: 21247},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 63, offset: 21261},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 730, col: 66, offset: 21264},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 734, col: 1, offset: 21360},
			expr: &choiceExpr{
				pos: position{line: 735, col: 5, offset: 21378},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 735, col: 5, offset: 21378},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21388},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 736, col: 5, offset: 21388},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 738, col: 1, offset: 21424},
			expr: &actionExpr{
				pos: position{line: 739, col: 5, offset: 21434},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 739, col: 5, offset: 21434},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 739, col: 5, offset: 21434},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 11, offset: 21440},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 16, offset: 21445},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 739, col: 21, offset: 21450},
								expr: &actionExpr{
									pos: position{line: 739, col: 22, offset: 21451},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 739, col: 22, offset: 21451},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 739, col: 22, offset: 21451},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 739, col: 25, offset: 21454},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 739, col: 29, offset: 21458},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 739, col: 32, offset: 21461},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 739, col: 34, offset: 21463},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 743, col: 1, offset: 21572},
			expr: &actionExpr{
				pos: position{line: 743, col: 13, offset: 21584},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 743, col: 13, offset: 21584},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 743, col: 13, offset: 21584},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 14, offset: 21585},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 743, col: 18, offset: 21589},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 20, offset: 21591},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 745, col: 1, offset: 21627},
			expr: &choiceExpr{
				pos: position{line: 746, col: 5, offset: 21648},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21648},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 21648},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 746, col: 5, offset: 21648},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 21654},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 746, col: 17, offset: 21660},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 746, col: 22, offset: 21665},
										expr: &ruleRefExpr{
											pos:  position{line: 746, col: 23, offset: 21666},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 21737},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 749, col: 5, offset: 21737},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 749, col: 5, offset: 21737},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 21743},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 749, col: 22, offset: 21754},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 749, col: 27, offset: 21759},
										expr: &ruleRefExpr{
											pos:  position{line: 749, col: 28, offset: 21760},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 21831},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 752, col: 5, offset: 21831},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 752, col: 5, offset: 21831},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 21837},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 752, col: 22, offset: 21848},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 752, col: 27, offset: 21853},
										expr: &ruleRefExpr{
											pos:  position{line: 752, col: 28, offset: 21854},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 21925},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 755, col: 5, offset: 21925},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 759, col: 1, offset: 21994},
			expr: &actionExpr{
				pos: position{line: 759, col: 14, offset: 22007},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 759, col: 14, offset: 22007},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 761, col: 1, offset: 22069},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22079},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22079},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 22079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 762, col: 5, offset: 22079},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 762, col: 9, offset: 22083},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 15, offset: 22089},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 22305},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 22305},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 771, col: 5, offset: 22305},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 771, col: 9, offset: 22309},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 771, col: 13, offset: 22313},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 18, offset: 22318},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 771, col: 23, offset: 22323},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 781, col: 1, offset: 22528},
			expr: &choiceExpr{
				pos: position{line: 782, col: 5, offset: 22538},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 782, col: 5, offset: 22538},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 782, col: 5, offset: 22538},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 782, col: 5, offset: 22538},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 782, col: 9, offset: 22542},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 14, offset: 22547},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 27, offset: 22560},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 782, col: 30, offset: 22563},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 34, offset: 22567},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 782, col: 37, offset: 22570},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 40, offset: 22573},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 782, col: 53, offset: 22586},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22757},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 22757},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 788, col: 5, offset: 22757},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 788, col: 9, offset: 22761},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 788, col: 12, offset: 22764},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 788, col: 16, offset: 22768},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 788, col: 19, offset: 22771},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 22, offset: 22774},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 788, col: 35, offset: 22787},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 794, col: 5, offset: 22958},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 794, col: 5, offset: 22958},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 794, col: 5, offset: 22958},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 794, col: 9, offset: 22962},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 794, col: 14, offset: 22967},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 794, col: 27, offset: 22980},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 794, col: 30, offset: 22983},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 794, col: 34, offset: 22987},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 794, col: 37, offset: 22990},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 23163},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 800, col: 5, offset: 23163},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 800, col: 5, offset: 23163},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 800, col: 9, offset: 23167},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 800, col: 14, offset: 23172},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 800, col: 19, offset: 23177},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 801, col: 5, offset: 23226},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 801, col: 5, offset: 23226},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 801, col: 5, offset: 23226},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 801, col: 9, offset: 23230},
									expr: &litMatcher{
										pos:        position{line: 801, col: 11, offset: 23232},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 801, col: 16, offset: 23237},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 801, col: 19, offset: 23240},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 803, col: 1, offset: 23291},
			expr: &choiceExpr{
				pos: position{line: 804, col: 5, offset: 23303},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 804, col: 5, offset: 23303},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 805, col: 5, offset: 23315},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 806, col: 5, offset: 23326},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 807, col: 5, offset: 23336},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 808, col: 5, offset: 23344},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 23352},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 809, col: 5, offset: 23352},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 809, col: 5, offset: 23352},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 9, offset: 23356},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 809, col: 12, offset: 23359},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 809, col: 17, offset: 23364},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 22, offset: 23369},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 809, col: 25, offset: 23372},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 811, col: 1, offset: 23398},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 23409},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 812, col: 5, offset: 23409},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 812, col: 5, offset: 23409},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 9, offset: 23413},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 812, col: 12, offset: 23416},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 19, offset: 23423},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 26, offset: 23430},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 812, col: 29, offset: 23433},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 816, col: 1, offset: 23526},
			expr: &actionExpr{
				pos: position{line: 817, col: 5, offset: 23537},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 817, col: 5, offset: 23537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 817, col: 5, offset: 23537},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 23543},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 17, offset: 23549},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 817, col: 22, offset: 23554},
								expr: &ruleRefExpr{
									pos:  position{line: 817, col: 22, offset: 23554},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 821, col: 1, offset: 23645},
			expr: &actionExpr{
				pos: position{line: 821, col: 13, offset: 23657},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 821, col: 13, offset: 23657},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 821, col: 13, offset: 23657},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 821, col: 16, offset: 23660},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 821, col: 20, offset: 23664},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 821, col: 23, offset: 23667},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 25, offset: 23669},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 823, col: 1, offset: 23694},
			expr: &actionExpr{
				pos: position{line: 824, col: 5, offset: 23704},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 824, col: 5, offset: 23704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 824, col: 5, offset: 23704},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 10, offset: 23709},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 824, col: 20, offset: 23719},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 824, col: 23, offset: 23722},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 824, col: 27, offset: 23726},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 824, col: 30, offset: 23729},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 36, offset: 23735},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 828, col: 1, offset: 23820},
			expr: &actionExpr{
				pos: position{line: 829, col: 5, offset: 23830},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 829, col: 5, offset: 23830},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 5, offset: 23830},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 9, offset: 23834},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 829, col: 12, offset: 23837},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 18, offset: 23843},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 32, offset: 23857},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 829, col: 35, offset: 23860},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 833, col: 1, offset: 23950},
			expr: &actionExpr{
				pos: position{line: 834, col: 5, offset: 23958},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 834, col: 5, offset: 23958},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 834, col: 5, offset: 23958},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 10, offset: 23963},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 13, offset: 23966},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 19, offset: 23972},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 33, offset: 23986},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 834, col: 36, offset: 23989},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 838, col: 1, offset: 24078},
			expr: &actionExpr{
				pos: position{line: 839, col: 5, offset: 24086},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 839, col: 5, offset: 24086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 839, col: 5, offset: 24086},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 10, offset: 24091},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 839, col: 13, offset: 24094},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 19, offset: 24100},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 27, offset: 24108},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 839, col: 30, offset: 24111},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 843, col: 1, offset: 24202},
			expr: &choiceExpr{
				pos: position{line: 844, col: 5, offset: 24214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 24214},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 24214},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 844, col: 5, offset: 24214},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 11, offset: 24220},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 844, col: 17, offset: 24226},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 844, col: 22, offset: 24231},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 22, offset: 24231},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 24325},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 847, col: 5, offset: 24325},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 850, col: 1, offset: 24362},
			expr: &actionExpr{
				pos: position{line: 850, col: 13, offset: 24374},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 850, col: 13, offset: 24374},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 850, col: 13, offset: 24374},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 850, col: 16, offset: 24377},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 20, offset: 24381},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 850, col: 23, offset: 24384},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 25, offset: 24386},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 852, col: 1, offset: 24411},
			expr: &actionExpr{
				pos: position{line: 853, col: 5, offset: 24421},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 853, col: 5, offset: 24421},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24421},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 9, offset: 24425},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 853, col: 14, offset: 24430},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 853, col: 17, offset: 24433},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 853, col: 21, offset: 24437},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 853, col: 24, offset: 24440},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 30, offset: 24446},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 859, col: 1, offset: 24553},
			expr: &actionExpr{
				pos: position{line: 860, col: 5, offset: 24565},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 860, col: 5, offset: 24565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 860, col: 5, offset: 24565},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 15, offset: 24575},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 861, col: 5, offset: 24589},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 10, offset: 24594},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 24606},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 11, offset: 24612},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 5, offset: 24625},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 11, offset: 24631},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 864, col: 5, offset: 24644},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 13, offset: 24652},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 5, offset: 24667},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 12, offset: 24674},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 866, col: 5, offset: 24688},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 13, offset: 24696},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 24711},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 11, offset: 24717},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 891, col: 1, offset: 25084},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 25098},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25098},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25098},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 892, col: 5, offset: 25098},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 12, offset: 25105},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 892, col: 14, offset: 25107},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 25135},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 893, col: 5, offset: 25135},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 893, col: 5, offset: 25135},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 893, col: 12, offset: 25142},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 893, col: 14, offset: 25144},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 893, col: 26, offset: 25156},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 895, col: 1, offset: 25200},
			expr: &choiceExpr{
				pos: position{line: 896, col: 5, offset: 25218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25218},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25218},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 896, col: 5, offset: 25218},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 9, offset: 25222},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 14, offset: 25227},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 16, offset: 25229},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 19, offset: 25232},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 896, col: 21, offset: 25234},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 25, offset: 25238},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 25332},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 897, col: 5, offset: 25332},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 10, offset: 25337},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 899, col: 1, offset: 25429},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 25448},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 25448},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 25448},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 11, offset: 25454},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 25, offset: 25468},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 900, col: 30, offset: 25473},
								expr: &actionExpr{
									pos: position{line: 900, col: 31, offset: 25474},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 900, col: 31, offset: 25474},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 900, col: 31, offset: 25474},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 900, col: 34, offset: 25477},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 900, col: 38, offset: 25481},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 900, col: 41, offset: 25484},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 900, col: 46, offset: 25489},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 904, col: 1, offset: 25610},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 25622},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 905, col: 5, offset: 25622},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 905, col: 5, offset: 25622},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 905, col: 5, offset: 25622},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 7, offset: 25624},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 12, offset: 25629},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 905, col: 14, offset: 25631},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 20, offset: 25637},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 905, col: 29, offset: 25646},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 35, offset: 25652},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 908, col: 5, offset: 25746},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 908, col: 5, offset: 25746},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 908, col: 5, offset: 25746},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 7, offset: 25748},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 12, offset: 25753},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 908, col: 14, offset: 25755},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 909, col: 5, offset: 25783},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 909, col: 5, offset: 25783},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 911, col: 1, offset: 25807},
			expr: &choiceExpr{
				pos: position{line: 912, col: 5, offset: 25820},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 25820},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 25820},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 912, col: 5, offset: 25820},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 912, col: 7, offset: 25822},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 912, col: 10, offset: 25825},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 912, col: 12, offset: 25827},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 15, offset: 25830},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 913, col: 5, offset: 25858},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 913, col: 5, offset: 25858},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 913, col: 5, offset: 25858},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 913, col: 7, offset: 25860},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 913, col: 10, offset: 25863},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 25891},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 914, col: 5, offset: 25891},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 916, col: 1, offset: 25915},
			expr: &ruleRefExpr{
				pos:  position{line: 917, col: 5, offset: 25928},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 919, col: 1, offset: 25934},
			expr: &choiceExpr{
				pos: position{line: 920, col: 5, offset: 25947},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 25947},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 920, col: 5, offset: 25947},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 920, col: 5, offset: 25947},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 25953},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 920, col: 19, offset: 25961},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 920, col: 24, offset: 25966},
										expr: &actionExpr{
											pos: position{line: 920, col: 25, offset: 25967},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 920, col: 25, offset: 25967},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 920, col: 30, offset: 25972},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 26090},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 923, col: 5, offset: 26090},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 925, col: 1, offset: 26114},
			expr: &actionExpr{
				pos: position{line: 926, col: 5, offset: 26126},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 926, col: 5, offset: 26126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 926, col: 5, offset: 26126},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 11, offset: 26132},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 24, offset: 26145},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 26, offset: 26147},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 31, offset: 26152},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 926, col: 33, offset: 26154},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 39, offset: 26160},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 926, col: 48, offset: 26169},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 54, offset: 26175},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 63, offset: 26184},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 65, offset: 26186},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 68, offset: 26189},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 926, col: 70, offset: 26191},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 78, offset: 26199},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 86, offset: 26207},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 926, col: 89, offset: 26210},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 93, offset: 26214},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 926, col: 96, offset: 26217},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 105, offset: 26226},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 945, col: 1, offset: 26461},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 26478},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 26478},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 946, col: 5, offset: 26478},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 946, col: 5, offset: 26478},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 946, col: 7, offset: 26480},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 946, col: 14, offset: 26487},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 946, col: 14, offset: 26487},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 946, col: 21, offset: 26494},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 946, col: 29, offset: 26502},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 26535},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 947, col: 5, offset: 26535},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 949, col: 1, offset: 26571},
			expr: &choiceExpr{
				pos: position{line: 950, col: 5, offset: 26584},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 950, col: 5, offset: 26584},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 950, col: 5, offset: 26584},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 950, col: 5, offset: 26584},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 7, offset: 26586},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 13, offset: 26592},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 950, col: 15, offset: 26594},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 950, col: 20, offset: 26599},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 951, col: 5, offset: 26638},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 951, col: 5, offset: 26638},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 953, col: 1, offset: 26662},
			expr: &choiceExpr{
				pos: position{line: 954, col: 5, offset: 26677},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 26677},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 26677},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 954, col: 5, offset: 26677},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 954, col: 7, offset: 26679},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 954, col: 13, offset: 26685},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 954, col: 15, offset: 26687},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 954, col: 18, offset: 26690},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 954, col: 20, offset: 26692},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 28, offset: 26700},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 955, col: 5, offset: 26739},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 955, col: 5, offset: 26739},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 957, col: 1, offset: 26763},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 26777},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 26777},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 26777},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 958, col: 5, offset: 26777},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 7, offset: 26779},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 14, offset: 26786},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 958, col: 16, offset: 26788},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 21, offset: 26793},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 26832},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 959, col: 5, offset: 26832},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 961, col: 1, offset: 26856},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 26871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 26871},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 962, col: 5, offset: 26871},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 962, col: 5, offset: 26871},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 7, offset: 26873},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 13, offset: 26879},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 15, offset: 26881},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 18, offset: 26884},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 962, col: 20, offset: 26886},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 25, offset: 26891},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 962, col: 31, offset: 26897},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 37, offset: 26903},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 27016},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 965, col: 5, offset: 27016},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 967, col: 1, offset: 27040},
			expr: &choiceExpr{
				pos: position{line: 968, col: 5, offset: 27053},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 27053},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 968, col: 5, offset: 27053},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 968, col: 5, offset: 27053},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 968, col: 7, offset: 27055},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 968, col: 12, offset: 27060},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 968, col: 12, offset: 27060},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 18, offset: 27066},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27096},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 969, col: 5, offset: 27096},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 971, col: 1, offset: 27122},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 27135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 27135},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 27135},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 972, col: 5, offset: 27135},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 972, col: 7, offset: 27137},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 972, col: 13, offset: 27143},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 15, offset: 27145},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 21, offset: 27151},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 27182},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 973, col: 5, offset: 27182},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 975, col: 1, offset: 27204},
			expr: &actionExpr{
				pos: position{line: 975, col: 10, offset: 27213},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 975, col: 10, offset: 27213},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 976, col: 1, offset: 27248},
			expr: &actionExpr{
				pos: position{line: 976, col: 6, offset: 27253},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 976, col: 6, offset: 27253},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 977, col: 1, offset: 27280},
			expr: &actionExpr{
				pos: position{line: 977, col: 8, offset: 27287},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 977, col: 8, offset: 27287},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 978, col: 1, offset: 27318},
			expr: &actionExpr{
				pos: position{line: 978, col: 8, offset: 27325},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 978, col: 8, offset: 27325},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 979, col: 1, offset: 27356},
			expr: &actionExpr{
				pos: position{line: 979, col: 9, offset: 27364},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 979, col: 9, offset: 27364},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 980, col: 1, offset: 27397},
			expr: &actionExpr{
				pos: position{line: 980, col: 9, offset: 27405},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 980, col: 9, offset: 27405},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 981, col: 1, offset: 27438},
			expr: &ruleRefExpr{
				pos:  position{line: 981, col: 6, offset: 27443},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 982, col: 1, offset: 27451},
			expr: &actionExpr{
				pos: position{line: 982, col: 10, offset: 27460},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 982, col: 10, offset: 27460},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 983, col: 1, offset: 27495},
			expr: &actionExpr{
				pos: position{line: 983, col: 9, offset: 27503},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 983, col: 9, offset: 27503},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 984, col: 1, offset: 27536},
			expr: &actionExpr{
				pos: position{line: 984, col: 6, offset: 27541},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 984, col: 6, offset: 27541},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 985, col: 1, offset: 27568},
			expr: &actionExpr{
				pos: position{line: 985, col: 9, offset: 27576},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 985, col: 9, offset: 27576},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 986, col: 1, offset: 27609},
			expr: &actionExpr{
				pos: position{line: 986, col: 7, offset: 27615},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 986, col: 7, offset: 27615},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 987, col: 1, offset: 27644},
			expr: &actionExpr{
				pos: position{line: 987, col: 8, offset: 27651},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 987, col: 8, offset: 27651},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 988, col: 1, offset: 27682},
			expr: &actionExpr{
				pos: position{line: 988, col: 8, offset: 27689},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 988, col: 8, offset: 27689},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 989, col: 1, offset: 27720},
			expr: &actionExpr{
				pos: position{line: 989, col: 9, offset: 27728},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 989, col: 9, offset: 27728},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 990, col: 1, offset: 27761},
			expr: &actionExpr{
				pos: position{line: 990, col: 9, offset: 27769},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 990, col: 9, offset: 27769},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 992, col: 1, offset: 27803},
			expr: &choiceExpr{
				pos: position{line: 993, col: 5, offset: 27825},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 993, col: 5, offset: 27825},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 14, offset: 27834},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 19, offset: 27839},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 27, offset: 27847},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 34, offset: 27854},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 42, offset: 27862},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 50, offset: 27870},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 59, offset: 27879},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 67, offset: 27887},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 75, offset: 27895},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 997, col: 1, offset: 27921},
			expr: &choiceExpr{
				pos: position{line: 998, col: 5, offset: 27933},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 27933},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 27949},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 5, offset: 27967},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 5, offset: 27985},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1002, col: 5, offset: 28004},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 5, offset: 28017},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 5, offset: 28026},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 5, offset: 28043},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 5, offset: 28062},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 28081},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1009, col: 1, offset: 28094},
			expr: &actionExpr{
				pos: position{line: 1010, col: 5, offset: 28112},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1010, col: 5, offset: 28112},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1010, col: 7, offset: 28114},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1014, col: 1, offset: 28227},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 5, offset: 28245},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28245},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 28245},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1015, col: 5, offset: 28245},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 7, offset: 28247},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1015, col: 14, offset: 28254},
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 15, offset: 28255},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 28370},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1018, col: 5, offset: 28370},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1018, col: 7, offset: 28372},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1022, col: 1, offset: 28476},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 5, offset: 28495},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 28495},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1023, col: 5, offset: 28495},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1023, col: 5, offset: 28495},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 7, offset: 28497},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1023, col: 11, offset: 28501},
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 12, offset: 28502},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 28616},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1026, col: 5, offset: 28616},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1026, col: 7, offset: 28618},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1030, col: 1, offset: 28717},
			expr: &actionExpr{
				pos: position{line: 1031, col: 5, offset: 28734},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1031, col: 5, offset: 28734},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1031, col: 7, offset: 28736},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1035, col: 1, offset: 28849},
			expr: &actionExpr{
				pos: position{line: 1036, col: 5, offset: 28868},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1036, col: 5, offset: 28868},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1036, col: 7, offset: 28870},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1040, col: 1, offset: 28979},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 28998},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1041, col: 5, offset: 28998},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1041, col: 5, offset: 28998},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 5, offset: 29111},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1042, col: 5, offset: 29111},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1044, col: 1, offset: 29222},
			expr: &actionExpr{
				pos: position{line: 1045, col: 5, offset: 29238},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1045, col: 5, offset: 29238},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1047, col: 1, offset: 29344},
			expr: &actionExpr{
				pos: position{line: 1048, col: 5, offset: 29360},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 5, offset: 29360},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1048, col: 5, offset: 29360},
							expr: &seqExpr{
								pos: position{line: 1048, col: 7, offset: 29362},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1048, col: 7, offset: 29362},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 1048, col: 25, offset: 29380},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 30, offset: 29385},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 34, offset: 29389},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1052, col: 1, offset: 29487},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 5, offset: 29500},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1053, col: 5, offset: 29500},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 5, offset: 29517},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 1056, col: 1, offset: 29532},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 5, offset: 29549},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1057, col: 5, offset: 29549},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 5, offset: 29566},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 1059, col: 5, offset: 29590},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 1059, col: 5, offset: 29590},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1059, col: 5, offset: 29590},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 9, offset: 29594},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 1059, col: 31, offset: 29616},
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 32, offset: 29617},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1061, col: 1, offset: 29653},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 29662},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1062, col: 5, offset: 29662},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 5, offset: 29679},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 5, offset: 29697},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 1066, col: 1, offset: 29710},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 5, offset: 29727},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 29727},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 1067, col: 5, offset: 29727},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1067, col: 5, offset: 29727},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1067, col: 12, offset: 29734},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1067, col: 15, offset: 29737},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1067, col: 19, offset: 29741},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1067, col: 22, offset: 29744},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1067, col: 26, offset: 29748},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1067, col: 31, offset: 29753},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1067, col: 34, offset: 29756},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 29783},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 1068, col: 5, offset: 29783},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1068, col: 5, offset: 29783},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1068, col: 12, offset: 29790},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1068, col: 15, offset: 29793},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1068, col: 19, offset: 29797},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 22, offset: 29800},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1068, col: 26, offset: 29804},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1068, col: 36, offset: 29814},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1068, col: 39, offset: 29817},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1070, col: 1, offset: 29842},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 29860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 29860},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 29860},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1071, col: 5, offset: 29860},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 10, offset: 29865},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1071, col: 24, offset: 29879},
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 25, offset: 29880},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1072, col: 5, offset: 29920},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1072, col: 5, offset: 29920},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1072, col: 5, offset: 29920},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1072, col: 10, offset: 29925},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1072, col: 25, offset: 29940},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1072, col: 28, offset: 29943},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1072, col: 32, offset: 29947},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1072, col: 35, offset: 29950},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1072, col: 39, offset: 29954},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1072, col: 42, offset: 29957},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1072, col: 46, offset: 29961},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1072, col: 51, offset: 29966},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1072, col: 54, offset: 29969},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1075, col: 5, offset: 30070},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1075, col: 5, offset: 30070},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1075, col: 10, offset: 30075},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 30177},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 30177},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1078, col: 5, offset: 30177},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1078, col: 9, offset: 30181},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 12, offset: 30184},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 14, offset: 30186},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 25, offset: 30197},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1080, col: 1, offset: 30220},
			expr: &actionExpr{
				pos: position{line: 1081, col: 5, offset: 30234},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1081, col: 5, offset: 30234},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 30240},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1085, col: 1, offset: 30336},
			expr: &actionExpr{
				pos: position{line: 1086, col: 5, offset: 30349},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 5, offset: 30349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1086, col: 5, offset: 30349},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 11, offset: 30355},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 16, offset: 30360},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1086, col: 21, offset: 30365},
								expr: &ruleRefExpr{
									pos:  position{line: 1086, col: 21, offset: 30365},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1090, col: 1, offset: 30459},
			expr: &actionExpr{
				pos: position{line: 1090, col: 16, offset: 30474},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1090, col: 16, offset: 30474},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1090, col: 16, offset: 30474},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1090, col: 19, offset: 30477},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1090, col: 23, offset: 30481},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1090, col: 26, offset: 30484},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1090, col: 30, offset: 30488},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1092, col: 1, offset: 30514},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 30530},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 30530},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 30530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 30530},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1093, col: 9, offset: 30534},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 12, offset: 30537},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1093, col: 19, offset: 30544},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1093, col: 33, offset: 30558},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1093, col: 36, offset: 30561},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1096, col: 5, offset: 30656},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1096, col: 5, offset: 30656},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1096, col: 5, offset: 30656},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1096, col: 9, offset: 30660},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1096, col: 12, offset: 30663},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1096, col: 16, offset: 30667},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1096, col: 21, offset: 30672},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1096, col: 24, offset: 30675},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1099, col: 5, offset: 30764},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1099, col: 5, offset: 30764},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1099, col: 5, offset: 30764},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1099, col: 10, offset: 30769},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 14, offset: 30773},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 18, offset: 30777},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1099, col: 23, offset: 30782},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1099, col: 26, offset: 30785},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1102, col: 5, offset: 30873},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1102, col: 5, offset: 30873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1102, col: 5, offset: 30873},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 10, offset: 30878},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 13, offset: 30881},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 21, offset: 30889},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 26, offset: 30894},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1102, col: 29, offset: 30897},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 33, offset: 30901},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 36, offset: 30904},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 44, offset: 30912},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 49, offset: 30917},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1102, col: 52, offset: 30920},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1106, col: 1, offset: 31034},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 31058},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 31058},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1107, col: 5, offset: 31058},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1107, col: 5, offset: 31058},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 9, offset: 31062},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 12, offset: 31065},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 19, offset: 31072},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 33, offset: 31086},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1107, col: 36, offset: 31089},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 31184},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1110, col: 5, offset: 31184},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1110, col: 5, offset: 31184},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 9, offset: 31188},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 12, offset: 31191},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 16, offset: 31195},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 29, offset: 31208},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1110, col: 32, offset: 31211},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 31300},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 31300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 31300},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 10, offset: 31305},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 13, offset: 31308},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 17, offset: 31312},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 30, offset: 31325},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1113, col: 33, offset: 31328},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 31416},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1116, col: 5, offset: 31416},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1116, col: 5, offset: 31416},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 10, offset: 31421},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 13, offset: 31424},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 21, offset: 31432},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 34, offset: 31445},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1116, col: 37, offset: 31448},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 41, offset: 31452},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 44, offset: 31455},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 52, offset: 31463},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 65, offset: 31476},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1116, col: 68, offset: 31479},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1120, col: 1, offset: 31593},
			expr: &choiceExpr{
				pos: position{line: 1121, col: 5, offset: 31611},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1121, col: 5, offset: 31611},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1122, col: 5, offset: 31637},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1128, col: 1, offset: 31896},
			expr: &actionExpr{
				pos: position{line: 1129, col: 5, offset: 31922},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1129, col: 9, offset: 31926},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1129, col: 9, offset: 31926},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1129, col: 19, offset: 31936},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1129, col: 30, offset: 31947},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1129, col: 41, offset: 31958},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1130, col: 9, offset: 31975},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1130, col: 18, offset: 31984},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1130, col: 28, offset: 31994},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1130, col: 38, offset: 32004},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1131, col: 9, offset: 32020},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 9, offset: 32038},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 18, offset: 32047},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1143, col: 1, offset: 32688},
			expr: &actionExpr{
				pos: position{line: 1144, col: 5, offset: 32714},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1144, col: 9, offset: 32718},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1144, col: 9, offset: 32718},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1144, col: 22, offset: 32731},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1145, col: 9, offset: 32746},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1146, col: 9, offset: 32762},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1147, col: 9, offset: 32780},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1147, col: 16, offset: 32787},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1148, col: 9, offset: 32801},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1148, col: 18, offset: 32810},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1148, col: 28, offset: 32820},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1152, col: 1, offset: 32936},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 32954},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 32954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1153, col: 5, offset: 32954},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 11, offset: 32960},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 21, offset: 32970},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1153, col: 26, offset: 32975},
								expr: &ruleRefExpr{
									pos:  position{line: 1153, col: 26, offset: 32975},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1157, col: 1, offset: 33074},
			expr: &actionExpr{
				pos: position{line: 1157, col: 21, offset: 33094},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 21, offset: 33094},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1157, col: 21, offset: 33094},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1157, col: 24, offset: 33097},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1157, col: 28, offset: 33101},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 31, offset: 33104},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1157, col: 35, offset: 33108},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1159, col: 1, offset: 33139},
			expr: &actionExpr{
				pos: position{line: 1160, col: 5, offset: 33153},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 5, offset: 33153},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1160, col: 5, offset: 33153},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 10, offset: 33158},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 20, offset: 33168},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1160, col: 23, offset: 33171},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1160, col: 27, offset: 33175},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 30, offset: 33178},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 34, offset: 33182},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1164, col: 1, offset: 33264},
			expr: &actionExpr{
				pos: position{line: 1165, col: 5, offset: 33290},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 5, offset: 33290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 33290},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 11, offset: 33296},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 21, offset: 33306},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1165, col: 26, offset: 33311},
								expr: &ruleRefExpr{
									pos:  position{line: 1165, col: 26, offset: 33311},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1169, col: 1, offset: 33418},
			expr: &actionExpr{
				pos: position{line: 1169, col: 29, offset: 33446},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1169, col: 29, offset: 33446},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1169, col: 29, offset: 33446},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1169, col: 32, offset: 33449},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1169, col: 36, offset: 33453},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1169, col: 39, offset: 33456},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 43, offset: 33460},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1171, col: 1, offset: 33499},
			expr: &actionExpr{
				pos: position{line: 1172, col: 5, offset: 33521},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 5, offset: 33521},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1172, col: 5, offset: 33521},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 10, offset: 33526},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1172, col: 20, offset: 33536},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1172, col: 23, offset: 33539},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1172, col: 27, offset: 33543},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 30, offset: 33546},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 34, offset: 33550},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1176, col: 1, offset: 33640},
			expr: &choiceExpr{
				pos: position{line: 1177, col: 5, offset: 33654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1177, col: 5, offset: 33654},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 5, offset: 33673},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1180, col: 1, offset: 33687},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 33705},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1181, col: 5, offset: 33705},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 24, offset: 33724},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1183, col: 1, offset: 33742},
			expr: &actionExpr{
				pos: position{line: 1183, col: 12, offset: 33753},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 12, offset: 33753},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1183, col: 12, offset: 33753},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1183, col: 19, offset: 33760},
							expr: &ruleRefExpr{
								pos:  position{line: 1183, col: 20, offset: 33761},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1184, col: 1, offset: 33798},
			expr: &actionExpr{
				pos: position{line: 1184, col: 11, offset: 33808},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1184, col: 11, offset: 33808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1184, col: 11, offset: 33808},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1184, col: 17, offset: 33814},
							expr: &ruleRefExpr{
								pos:  position{line: 1184, col: 18, offset: 33815},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1185, col: 1, offset: 33851},
			expr: &actionExpr{
				pos: position{line: 1185, col: 11, offset: 33861},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 11, offset: 33861},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1185, col: 11, offset: 33861},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1185, col: 17, offset: 33867},
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 18, offset: 33868},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1186, col: 1, offset: 33904},
			expr: &actionExpr{
				pos: position{line: 1186, col: 12, offset: 33915},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 12, offset: 33915},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1186, col: 12, offset: 33915},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1186, col: 19, offset: 33922},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 20, offset: 33923},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1187, col: 1, offset: 33960},
			expr: &actionExpr{
				pos: position{line: 1187, col: 11, offset: 33970},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 11, offset: 33970},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1187, col: 11, offset: 33970},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1187, col: 17, offset: 33976},
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 18, offset: 33977},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1189, col: 1, offset: 34014},
			expr: &charClassMatcher{
				pos:        position{line: 1189, col: 19, offset: 34032},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1191, col: 1, offset: 34044},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 18, offset: 34061},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1191, col: 18, offset: 34061},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1191, col: 36, offset: 34079},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1193, col: 1, offset: 34086},
			expr: &actionExpr{
				pos: position{line: 1194, col: 5, offset: 34101},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1194, col: 5, offset: 34101},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1194, col: 8, offset: 34104},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1196, col: 1, offset: 34185},
			expr: &choiceExpr{
				pos: position{line: 1197, col: 5, offset: 34204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 34204},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 34204},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1197, col: 5, offset: 34204},
									expr: &seqExpr{
										pos: position{line: 1197, col: 7, offset: 34206},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1197, col: 7, offset: 34206},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1197, col: 15, offset: 34214},
												expr: &ruleRefExpr{
													pos:  position{line: 1197, col: 16, offset: 34215},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1197, col: 32, offset: 34231},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1197, col: 48, offset: 34247},
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 48, offset: 34247},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1198, col: 5, offset: 34299},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1198, col: 5, offset: 34299},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 5, offset: 34338},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1199, col: 5, offset: 34338},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1199, col: 5, offset: 34338},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 10, offset: 34343},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 13, offset: 34346},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1201, col: 5, offset: 34437},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1201, col: 5, offset: 34437},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1202, col: 5, offset: 34479},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1202, col: 5, offset: 34479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1202, col: 5, offset: 34479},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1202, col: 8, offset: 34482},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1202, col: 26, offset: 34500},
									expr: &seqExpr{
										pos: position{line: 1202, col: 28, offset: 34502},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1202, col: 28, offset: 34502},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1202, col: 31, offset: 34505},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1204, col: 1, offset: 34530},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 5, offset: 34542},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 5, offset: 34542},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 5, offset: 34561},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 5, offset: 34577},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 5, offset: 34594},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1210, col: 1, offset: 34607},
			expr: &actionExpr{
				pos: position{line: 1211, col: 5, offset: 34616},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 5, offset: 34616},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1211, col: 5, offset: 34616},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1211, col: 14, offset: 34625},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1211, col: 18, offset: 34629},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1215, col: 1, offset: 34749},
			expr: &seqExpr{
				pos: position{line: 1215, col: 12, offset: 34760},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 12, offset: 34760},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1215, col: 15, offset: 34763},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 19, offset: 34767},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1215, col: 22, offset: 34770},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 26, offset: 34774},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1217, col: 1, offset: 34778},
			expr: &seqExpr{
				pos: position{line: 1217, col: 6, offset: 34783},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1217, col: 6, offset: 34783},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1217, col: 11, offset: 34788},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1217, col: 16, offset: 34793},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1217, col: 21, offset: 34798},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1218, col: 1, offset: 34804},
			expr: &seqExpr{
				pos: position{line: 1218, col: 6, offset: 34809},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1218, col: 6, offset: 34809},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1218, col: 11, offset: 34814},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1220, col: 1, offset: 34821},
			expr: &seqExpr{
				pos: position{line: 1220, col: 12, offset: 34832},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 12, offset: 34832},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 24, offset: 34844},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1222, col: 1, offset: 34856},
			expr: &seqExpr{
				pos: position{line: 1222, col: 15, offset: 34870},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1222, col: 15, offset: 34870},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1222, col: 18, offset: 34873},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 22, offset: 34877},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1222, col: 25, offset: 34880},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 29, offset: 34884},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1222, col: 32, offset: 34887},
						expr: &seqExpr{
							pos: position{line: 1222, col: 33, offset: 34888},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1222, col: 33, offset: 34888},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1222, col: 37, offset: 34892},
									expr: &charClassMatcher{
										pos:        position{line: 1222, col: 37, offset: 34892},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1224, col: 1, offset: 34902},
			expr: &choiceExpr{
				pos: position{line: 1225, col: 5, offset: 34917},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1225, col: 5, offset: 34917},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1226, col: 5, offset: 34925},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1226, col: 6, offset: 34926},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1226, col: 6, offset: 34926},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1226, col: 12, offset: 34932},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1226, col: 17, offset: 34937},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1226, col: 20, offset: 34940},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1226, col: 24, offset: 34944},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1226, col: 27, offset: 34947},
								expr: &seqExpr{
									pos: position{line: 1226, col: 28, offset: 34948},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1226, col: 28, offset: 34948},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1226, col: 32, offset: 34952},
											expr: &charClassMatcher{
												pos:        position{line: 1226, col: 32, offset: 34952},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1228, col: 1, offset: 34962},
			expr: &actionExpr{
				pos: position{line: 1229, col: 5, offset: 34975},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 5, offset: 34975},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1229, col: 5, offset: 34975},
							expr: &litMatcher{
								pos:        position{line: 1229, col: 5, offset: 34975},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1229, col: 10, offset: 34980},
							expr: &seqExpr{
								pos: position{line: 1229, col: 11, offset: 34981},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1229, col: 11, offset: 34981},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 19, offset: 34989},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1233, col: 1, offset: 35115},
			expr: &seqExpr{
				pos: position{line: 1233, col: 11, offset: 35125},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 35125},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1233, col: 16, offset: 35130},
						expr: &seqExpr{
							pos: position{line: 1233, col: 17, offset: 35131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1233, col: 17, offset: 35131},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1233, col: 21, offset: 35135},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1235, col: 1, offset: 35143},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 5, offset: 35156},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1236, col: 5, offset: 35156},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1237, col: 5, offset: 35166},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1238, col: 5, offset: 35176},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1239, col: 5, offset: 35186},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1240, col: 5, offset: 35195},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1241, col: 5, offset: 35204},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1242, col: 5, offset: 35213},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1243, col: 5, offset: 35222},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1244, col: 5, offset: 35231},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1246, col: 1, offset: 35237},
			expr: &actionExpr{
				pos: position{line: 1247, col: 5, offset: 35244},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1247, col: 5, offset: 35244},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1247, col: 5, offset: 35244},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1247, col: 10, offset: 35249},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1247, col: 14, offset: 35253},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1247, col: 19, offset: 35258},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1247, col: 23, offset: 35262},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1247, col: 28, offset: 35267},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1247, col: 32, offset: 35271},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1249, col: 1, offset: 35308},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 35316},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 35316},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1250, col: 5, offset: 35316},
							expr: &seqExpr{
								pos: position{line: 1250, col: 8, offset: 35319},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1250, col: 8, offset: 35319},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1250, col: 12, offset: 35323},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 16, offset: 35327},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1250, col: 20, offset: 35331},
										expr: &choiceExpr{
											pos: position{line: 1250, col: 22, offset: 35333},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1250, col: 22, offset: 35333},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1250, col: 33, offset: 35344},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 39, offset: 35350},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1250, col: 41, offset: 35352},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1254, col: 1, offset: 35516},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 35534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1255, col: 5, offset: 35534},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1255, col: 5, offset: 35534},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1255, col: 5, offset: 35534},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1255, col: 7, offset: 35536},
										expr: &ruleRefExpr{
											pos:  position{line: 1255, col: 7, offset: 35536},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1255, col: 17, offset: 35546},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1255, col: 19, offset: 35548},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 35612},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1258, col: 5, offset: 35612},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1258, col: 5, offset: 35612},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 7, offset: 35614},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 11, offset: 35618},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1258, col: 13, offset: 35620},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 13, offset: 35620},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 23, offset: 35630},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 28, offset: 35635},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1258, col: 30, offset: 35637},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 30, offset: 35637},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 40, offset: 35647},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 42, offset: 35649},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 35748},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 35748},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1261, col: 5, offset: 35748},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 10, offset: 35753},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1261, col: 12, offset: 35755},
										expr: &ruleRefExpr{
											pos:  position{line: 1261, col: 12, offset: 35755},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 22, offset: 35765},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 24, offset: 35767},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1264, col: 5, offset: 35838},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1264, col: 5, offset: 35838},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1264, col: 5, offset: 35838},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1264, col: 7, offset: 35840},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1264, col: 11, offset: 35844},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1264, col: 13, offset: 35846},
										expr: &ruleRefExpr{
											pos:  position{line: 1264, col: 13, offset: 35846},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1264, col: 23, offset: 35856},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1267, col: 5, offset: 35924},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1267, col: 5, offset: 35924},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1271, col: 1, offset: 35961},
			expr: &choiceExpr{
				pos: position{line: 1272, col: 5, offset: 35973},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1272, col: 5, offset: 35973},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 5, offset: 35980},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1275, col: 1, offset: 35985},
			expr: &actionExpr{
				pos: position{line: 1275, col: 12, offset: 35996},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 12, offset: 35996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1275, col: 12, offset: 35996},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 16, offset: 36000},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 18, offset: 36002},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1277, col: 1, offset: 36040},
			expr: &actionExpr{
				pos: position{line: 1277, col: 12, offset: 36051},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 12, offset: 36051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1277, col: 12, offset: 36051},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 14, offset: 36053},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1277, col: 18, offset: 36057},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1279, col: 1, offset: 36095},
			expr: &actionExpr{
				pos: position{line: 1280, col: 5, offset: 36106},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 5, offset: 36106},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 5, offset: 36106},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 7, offset: 36108},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1280, col: 10, offset: 36111},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 14, offset: 36115},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 16, offset: 36117},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1284, col: 1, offset: 36190},
			expr: &actionExpr{
				pos: position{line: 1285, col: 5, offset: 36201},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1285, col: 5, offset: 36201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1285, col: 5, offset: 36201},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 7, offset: 36203},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1285, col: 11, offset: 36207},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 15, offset: 36211},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 17, offset: 36213},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1289, col: 1, offset: 36276},
			expr: &actionExpr{
				pos: position{line: 1290, col: 4, offset: 36284},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1290, col: 4, offset: 36284},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1290, col: 6, offset: 36286},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1292, col: 1, offset: 36326},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 36340},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1293, col: 5, offset: 36340},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 36355},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1296, col: 1, offset: 36371},
			expr: &actionExpr{
				pos: position{line: 1296, col: 14, offset: 36384},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1296, col: 14, offset: 36384},
					expr: &charClassMatcher{
						pos:        position{line: 1296, col: 14, offset: 36384},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1298, col: 1, offset: 36423},
			expr: &actionExpr{
				pos: position{line: 1299, col: 5, offset: 36442},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 5, offset: 36442},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1299, col: 5, offset: 36442},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1299, col: 9, offset: 36446},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1301, col: 1, offset: 36489},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 5, offset: 36505},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 36505},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1302, col: 5, offset: 36505},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1302, col: 5, offset: 36505},
									expr: &litMatcher{
										pos:        position{line: 1302, col: 5, offset: 36505},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1302, col: 10, offset: 36510},
									expr: &charClassMatcher{
										pos:        position{line: 1302, col: 10, offset: 36510},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 17, offset: 36517},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1302, col: 21, offset: 36521},
									expr: &charClassMatcher{
										pos:        position{line: 1302, col: 21, offset: 36521},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1302, col: 28, offset: 36528},
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 28, offset: 36528},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36587},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36587},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1305, col: 5, offset: 36587},
									expr: &litMatcher{
										pos:        position{line: 1305, col: 5, offset: 36587},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 10, offset: 36592},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1305, col: 14, offset: 36596},
									expr: &charClassMatcher{
										pos:        position{line: 1305, col: 14, offset: 36596},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1305, col: 21, offset: 36603},
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 21, offset: 36603},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1309, col: 1, offset: 36659},
			expr: &seqExpr{
				pos: position{line: 1309, col: 16, offset: 36674},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1309, col: 16, offset: 36674},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1309, col: 21, offset: 36679},
						expr: &charClassMatcher{
							pos:        position{line: 1309, col: 21, offset: 36679},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 27, offset: 36685},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1311, col: 1, offset: 36697},
			expr: &actionExpr{
				pos: position{line: 1311, col: 7, offset: 36703},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1311, col: 7, offset: 36703},
					expr: &ruleRefExpr{
						pos:  position{line: 1311, col: 7, offset: 36703},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1313, col: 1, offset: 36745},
			expr: &charClassMatcher{
				pos:        position{line: 1313, col: 12, offset: 36756},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1316, col: 1, offset: 36770},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 5, offset: 36787},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 36787},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1317, col: 5, offset: 36787},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1317, col: 5, offset: 36787},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1317, col: 9, offset: 36791},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1317, col: 11, offset: 36793},
										expr: &ruleRefExpr{
											pos:  position{line: 1317, col: 11, offset: 36793},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1317, col: 29, offset: 36811},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1318, col: 5, offset: 36848},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1318, col: 5, offset: 36848},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1318, col: 5, offset: 36848},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 9, offset: 36852},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1318, col: 11, offset: 36854},
										expr: &ruleRefExpr{
											pos:  position{line: 1318, col: 11, offset: 36854},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1318, col: 29, offset: 36872},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1320, col: 1, offset: 36906},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 36927},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1321, col: 5, offset: 36927},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1321, col: 5, offset: 36927},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1321, col: 5, offset: 36927},
									expr: &choiceExpr{
										pos: position{line: 1321, col: 7, offset: 36929},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1321, col: 7, offset: 36929},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1321, col: 13, offset: 36935},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1321, col: 26, offset: 36948,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 36985},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1322, col: 5, offset: 36985},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1322, col: 5, offset: 36985},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 10, offset: 36990},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1322, col: 12, offset: 36992},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1324, col: 1, offset: 37026},
			expr: &actionExpr{
				pos: position{line: 1325, col: 5, offset: 37038},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 5, offset: 37038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1325, col: 5, offset: 37038},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 10, offset: 37043},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 23, offset: 37056},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1325, col: 28, offset: 37061},
								expr: &ruleRefExpr{
									pos:  position{line: 1325, col: 28, offset: 37061},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1327, col: 1, offset: 37123},
			expr: &choiceExpr{
				pos: position{line: 1328, col: 5, offset: 37140},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1328, col: 5, offset: 37140},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 5, offset: 37157},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1331, col: 1, offset: 37169},
			expr: &actionExpr{
				pos: position{line: 1331, col: 16, offset: 37184},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1331, col: 16, offset: 37184},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1333, col: 1, offset: 37233},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 5, offset: 37249},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1334, col: 5, offset: 37249},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1335, col: 5, offset: 37266},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1337, col: 1, offset: 37273},
			expr: &actionExpr{
				pos: position{line: 1337, col: 14, offset: 37286},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1337, col: 14, offset: 37286},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1337, col: 14, offset: 37286},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1337, col: 19, offset: 37291},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1337, col: 22, offset: 37294},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1337, col: 22, offset: 37294},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 38, offset: 37310},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1339, col: 1, offset: 37346},
			expr: &actionExpr{
				pos: position{line: 1340, col: 5, offset: 37355},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1340, col: 5, offset: 37355},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1340, col: 5, offset: 37355},
							expr: &ruleRefExpr{
								pos:  position{line: 1340, col: 6, offset: 37356},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1340, col: 22, offset: 37372},
							expr: &ruleRefExpr{
								pos:  position{line: 1340, col: 23, offset: 37373},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 35, offset: 37385},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1340, col: 40, offset: 37390},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 50, offset: 37400},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1340, col: 55, offset: 37405},
								expr: &ruleRefExpr{
									pos:  position{line: 1340, col: 55, offset: 37405},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1344, col: 1, offset: 37489},
			expr: &seqExpr{
				pos: position{line: 1344, col: 19, offset: 37507},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1344, col: 19, offset: 37507},
						expr: &litMatcher{
							pos:        position{line: 1344, col: 19, offset: 37507},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 24, offset: 37512},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1345, col: 1, offset: 37525},
			expr: &seqExpr{
				pos: position{line: 1345, col: 15, offset: 37539},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1345, col: 15, offset: 37539},
						expr: &ruleRefExpr{
							pos:  position{line: 1345, col: 15, offset: 37539},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1345, col: 28, offset: 37552},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1347, col: 1, offset: 37557},
			expr: &choiceExpr{
				pos: position{line: 1348, col: 5, offset: 37571},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1348, col: 5, offset: 37571},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 5, offset: 37588},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1350, col: 5, offset: 37600},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1350, col: 5, offset: 37600},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1352, col: 1, offset: 37624},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 5, offset: 37637},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1353, col: 5, offset: 37637},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1354, col: 5, offset: 37651},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1356, col: 1, offset: 37658},
			expr: &actionExpr{
				pos: position{line: 1356, col: 11, offset: 37668},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1356, col: 11, offset: 37668},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1356, col: 11, offset: 37668},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1356, col: 16, offset: 37673},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1356, col: 19, offset: 37676},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1356, col: 19, offset: 37676},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1356, col: 32, offset: 37689},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1358, col: 1, offset: 37725},
			expr: &choiceExpr{
				pos: position{line: 1359, col: 5, offset: 37740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1359, col: 5, offset: 37740},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1359, col: 5, offset: 37740},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1360, col: 5, offset: 37768},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1360, col: 5, offset: 37768},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1361, col: 5, offset: 37798},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1364, col: 1, offset: 37805},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 5, offset: 37826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1365, col: 5, offset: 37826},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1365, col: 5, offset: 37826},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1365, col: 5, offset: 37826},
									expr: &choiceExpr{
										pos: position{line: 1365, col: 7, offset: 37828},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1365, col: 7, offset: 37828},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1365, col: 13, offset: 37834},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1365, col: 26, offset: 37847,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1366, col: 5, offset: 37884},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1366, col: 5, offset: 37884},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1366, col: 5, offset: 37884},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1366, col: 10, offset: 37889},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 12, offset: 37891},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1368, col: 1, offset: 37925},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 5, offset: 37944},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1369, col: 5, offset: 37944},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1369, col: 5, offset: 37944},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1369, col: 5, offset: 37944},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1369, col: 9, offset: 37948},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1369, col: 18, offset: 37957},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 5, offset: 38008},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 5, offset: 38029},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1373, col: 1, offset: 38044},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 5, offset: 38065},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1374, col: 5, offset: 38065},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1375, col: 5, offset: 38073},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1375, col: 5, offset: 38073},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1376, col: 5, offset: 38113},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1377, col: 5, offset: 38122},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1377, col: 5, offset: 38122},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1378, col: 5, offset: 38151},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1378, col: 5, offset: 38151},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1379, col: 5, offset: 38180},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1379, col: 5, offset: 38180},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 38209},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1380, col: 5, offset: 38209},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1381, col: 5, offset: 38238},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1381, col: 5, offset: 38238},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1382, col: 5, offset: 38267},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1382, col: 5, offset: 38267},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1384, col: 1, offset: 38293},
			expr: &choiceExpr{
				pos: position{line: 1385, col: 5, offset: 38311},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1385, col: 5, offset: 38311},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1385, col: 5, offset: 38311},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1386, col: 5, offset: 38339},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1386, col: 5, offset: 38339},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1387, col: 5, offset: 38367},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1389, col: 1, offset: 38373},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 5, offset: 38391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1390, col: 5, offset: 38391},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1390, col: 5, offset: 38391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1390, col: 5, offset: 38391},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 9, offset: 38395},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1390, col: 16, offset: 38402},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1390, col: 16, offset: 38402},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1390, col: 25, offset: 38411},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1390, col: 34, offset: 38420},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1390, col: 43, offset: 38429},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1393, col: 5, offset: 38492},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1393, col: 5, offset: 38492},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1393, col: 5, offset: 38492},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1393, col: 9, offset: 38496},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1393, col: 13, offset: 38500},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1393, col: 20, offset: 38507},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1393, col: 20, offset: 38507},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1393, col: 29, offset: 38516},
												expr: &ruleRefExpr{
													pos:  position{line: 1393, col: 29, offset: 38516},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1393, col: 39, offset: 38526},
												expr: &ruleRefExpr{
													pos:  position{line: 1393, col: 39, offset: 38526},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1393, col: 49, offset: 38536},
												expr: &ruleRefExpr{
													pos:  position{line: 1393, col: 49, offset: 38536},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1393, col: 59, offset: 38546},
												expr: &ruleRefExpr{
													pos:  position{line: 1393, col: 59, offset: 38546},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1393, col: 69, offset: 38556},
												expr: &ruleRefExpr{
													pos:  position{line: 1393, col: 69, offset: 38556},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1393, col: 80, offset: 38567},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1397, col: 1, offset: 38621},
			expr: &actionExpr{
				pos: position{line: 1398, col: 5, offset: 38632},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 5, offset: 38632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1398, col: 5, offset: 38632},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 9, offset: 38636},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 14, offset: 38641},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 25, offset: 38652},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1398, col: 29, offset: 38656},
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 30, offset: 38657},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1400, col: 1, offset: 38692},
			expr: &actionExpr{
				pos: position{line: 1401, col: 5, offset: 38707},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1401, col: 5, offset: 38707},
					expr: &choiceExpr{
						pos: position{line: 1401, col: 6, offset: 38708},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1401, col: 6, offset: 38708},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1401, col: 13, offset: 38715},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1403, col: 1, offset: 38755},
			expr: &charClassMatcher{
				pos:        position{line: 1404, col: 5, offset: 38771},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1406, col: 1, offset: 38786},
			expr: &oneOrMoreExpr{
				pos: position{line: 1406, col: 6, offset: 38791},
				expr: &ruleRefExpr{
					pos:  position{line: 1406, col: 6, offset: 38791},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1408, col: 1, offset: 38802},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1408, col: 6, offset: 38807},
				expr: &ruleRefExpr{
					pos:  position{line: 1408, col: 6, offset: 38807},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1410, col: 1, offset: 38818},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 38831},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1411, col: 5, offset: 38831},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 5, offset: 38846},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 5, offset: 38865},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1415, col: 1, offset: 38874},
			expr: &anyMatcher{
				line: 1416, col: 5, offset: 38894,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1418, col: 1, offset: 38897},
			expr: &choiceExpr{
				pos: position{line: 1419, col: 5, offset: 38925},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1419, col: 5, offset: 38925},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1420, col: 5, offset: 38934},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1421, col: 5, offset: 38943},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1422, col: 5, offset: 38952},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1423, col: 5, offset: 38960},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 38973},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1426, col: 1, offset: 38983},
			expr: &charClassMatcher{
				pos:        position{line: 1427, col: 5, offset: 39002},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1433, col: 1, offset: 39332},
			expr: &ruleRefExpr{
				pos:  position{line: 1436, col: 5, offset: 39403},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1438, col: 1, offset: 39422},
			expr: &seqExpr{
				pos: position{line: 1439, col: 5, offset: 39443},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1439, col: 5, offset: 39443},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1439, col: 10, offset: 39448},
						expr: &seqExpr{
							pos: position{line: 1439, col: 11, offset: 39449},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1439, col: 11, offset: 39449},
									expr: &litMatcher{
										pos:        position{line: 1439, col: 12, offset: 39450},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1439, col: 17, offset: 39455},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1439, col: 35, offset: 39473},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1441, col: 1, offset: 39479},
			expr: &seqExpr{
				pos: position{line: 1442, col: 5, offset: 39501},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1442, col: 5, offset: 39501},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1442, col: 10, offset: 39506},
						expr: &seqExpr{
							pos: position{line: 1442, col: 11, offset: 39507},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1442, col: 11, offset: 39507},
									expr: &ruleRefExpr{
										pos:  position{line: 1442, col: 12, offset: 39508},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1442, col: 27, offset: 39523},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1444, col: 1, offset: 39542},
			expr: &seqExpr{
				pos: position{line: 1444, col: 7, offset: 39548},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1444, col: 7, offset: 39548},
						expr: &ruleRefExpr{
							pos:  position{line: 1444, col: 7, offset: 39548},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1444, col: 19, offset: 39560},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1446, col: 1, offset: 39576},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 7, offset: 39582},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1446, col: 7, offset: 39582},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 11, offset: 39586},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1448, col: 1, offset: 39591},
			expr: &notExpr{
				pos: position{line: 1448, col: 7, offset: 39597},
				expr: &anyMatcher{
					line: 1448, col: 8, offset: 39598,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{})[0].([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel14(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel14(stack["first"])
}

func (c *current) onSwitchBranch2(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["proc"])
}

func (c *current) onSwitchBranch12(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch12(stack["e"], stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{})[0].([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch10(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch10(stack["first"])
}

func (c *current) onFromTrunks2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{})[0].([]interface{}))...), nil

}

func (p *parser) callonFromTrunks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks2(stack["first"], stack["rest"])
}

func (c *current) onFromTrunks10(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonFromTrunks10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks10(stack["first"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq2(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq2(stack["seq"])
}

func (c *current) onFromTrunkSeq9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonFromTrunkSeq9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq9()
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["caseArray"])
}

func (c *current) onOperation22(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation22(stack["trunks"])
}

func (c *current) onOperation33(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation33(stack["f"])
}

func (c *current) onOperation39(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation39(stack["a"])
}

func (c *current) onOperation45(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["expr"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor14(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor14(stack["expr"])
}

func (c *current) onTBD2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonTBD2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD2(stack["compareOp"], stack["v"])
}

func (c *current) onTBD11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonTBD11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD11(stack["match"])
}

func (c *current) onTBD17(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonTBD17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD17(stack["v"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr10(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr10(stack["v"])
}

func (c *current) onSearchExpr20() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr20()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(name, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "name": name, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["name"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt2(stack["id"])
}

func (c *current) onPoolAt9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolAt9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt9()
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange2(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange2(stack["lower"], stack["upper"])
}

func (c *current) onPoolRange14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolRange14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange14()
}

func (c *current) onPoolTo2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonPoolTo2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo2(stack["val"])
}

func (c *current) onPoolTo9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolTo9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo9()
}

func (c *current) onPoolName2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonPoolName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName2(stack["name"])
}

func (c *current) onPoolName5(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolName5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName5(stack["id"])
}

func (c *current) onPoolName8(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonPoolName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName8(stack["s"])
}

func (c *current) onLayoutArg2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg2(stack["keys"], stack["order"])
}

func (c *current) onLayoutArg11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonLayoutArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg11()
}

func (c *current) onFormatArg2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg2(stack["val"])
}

func (c *current) onFormatArg9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonFormatArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg9()
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onOrderArg14() (interface{}, error) {
	return "", nil
}

func (p *parser) callonOrderArg14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg14()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg2(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg2(stack["lhs"])
}

func (c *current) onAsArg9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAsArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg9()
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
