// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 99},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 99},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 99},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 102},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 106},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 16, offset: 110},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 19, offset: 113},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 138},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 148},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 148},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 154},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 160},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 22, offset: 165},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 16, col: 1, offset: 266},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 274},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 280},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 295},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 295},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 21, col: 1, offset: 388},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 398},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 398},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 401},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 19, offset: 406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 409},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 24, offset: 411},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 449},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 449},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 452},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 464},
										name: "FuncDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 31, offset: 475},
										name: "OpDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 39, offset: 483},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 504},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 518},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 518},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 526},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 528},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 531},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 549},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 556},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 561},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 666},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 666},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 673},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 675},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 679},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 679},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 696},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 710},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 713},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 717},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 720},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 724},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 993},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1006},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 1006},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1015},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1018},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1036},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1043},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 49, offset: 1050},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 65, offset: 1066},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 68, offset: 1069},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 72, offset: 1073},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 75, offset: 1076},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 79, offset: 1080},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 82, offset: 1083},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 86, offset: 1087},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 89, offset: 1090},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 94, offset: 1095},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 99, offset: 1100},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 102, offset: 1103},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OpDecl",
			pos:  position{line: 55, col: 1, offset: 1287},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1298},
				run: (*parser).callonOpDecl1,
				expr: &seqExpr{
					pos: position{line: 56, col: 5, offset: 1298},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 56, col: 5, offset: 1298},
							val:        "op",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 10, offset: 1303},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 12, offset: 1305},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 17, offset: 1310},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 32, offset: 1325},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 35, offset: 1328},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 39, offset: 1332},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 42, offset: 1335},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 49, offset: 1342},
								name: "Params",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 56, offset: 1349},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 59, offset: 1352},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 63, offset: 1356},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 66, offset: 1359},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 70, offset: 1363},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 73, offset: 1366},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 77, offset: 1370},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 80, offset: 1373},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 85, offset: 1378},
								name: "Seq",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 89, offset: 1382},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 92, offset: 1385},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Params",
			pos:  position{line: 69, col: 1, offset: 1569},
			expr: &actionExpr{
				pos: position{line: 70, col: 5, offset: 1581},
				run: (*parser).callonParams1,
				expr: &seqExpr{
					pos: position{line: 70, col: 5, offset: 1581},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 70, col: 5, offset: 1581},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 1587},
								name: "Param",
							},
						},
						&labeledExpr{
							pos:   position{line: 70, col: 17, offset: 1593},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 70, col: 22, offset: 1598},
								expr: &actionExpr{
									pos: position{line: 70, col: 23, offset: 1599},
									run: (*parser).callonParams7,
									expr: &seqExpr{
										pos: position{line: 70, col: 23, offset: 1599},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 70, col: 23, offset: 1599},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 70, col: 26, offset: 1602},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 70, col: 30, offset: 1606},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 70, col: 33, offset: 1609},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 70, col: 35, offset: 1611},
													name: "Param",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Param",
			pos:  position{line: 74, col: 1, offset: 1725},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 1735},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 1735},
						run: (*parser).callonParam2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 1735},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 1735},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 1743},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 15, offset: 1745},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 18, offset: 1748},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1840},
						run: (*parser).callonParam8,
						expr: &litMatcher{
							pos:        position{line: 76, col: 5, offset: 1840},
							val:        "...",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 1912},
						run: (*parser).callonParam10,
						expr: &labeledExpr{
							pos:   position{line: 77, col: 5, offset: 1912},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 8, offset: 1915},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 79, col: 1, offset: 2004},
			expr: &choiceExpr{
				pos: position{line: 80, col: 5, offset: 2018},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2018},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2018},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 80, col: 5, offset: 2018},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 12, offset: 2025},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 80, col: 15, offset: 2028},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 80, col: 19, offset: 2032},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 80, col: 25, offset: 2038},
										expr: &ruleRefExpr{
											pos:  position{line: 80, col: 25, offset: 2038},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 30, offset: 2043},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 80, col: 33, offset: 2046},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2139},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2139},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 83, col: 5, offset: 2139},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 14, offset: 2148},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 83, col: 16, offset: 2150},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 21, offset: 2155},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 26, offset: 2160},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 83, col: 28, offset: 2162},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 83, col: 32, offset: 2166},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 83, col: 38, offset: 2172},
										expr: &ruleRefExpr{
											pos:  position{line: 83, col: 38, offset: 2172},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 49, offset: 2183},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 83, col: 52, offset: 2186},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2291},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2291},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 5, offset: 2291},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 14, offset: 2300},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 86, col: 17, offset: 2303},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 86, col: 21, offset: 2307},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 86, col: 27, offset: 2313},
										expr: &ruleRefExpr{
											pos:  position{line: 86, col: 27, offset: 2313},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 38, offset: 2324},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 86, col: 41, offset: 2327},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2431},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 89, col: 5, offset: 2431},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 89, col: 5, offset: 2431},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 89, col: 12, offset: 2438},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 89, col: 15, offset: 2441},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 89, col: 19, offset: 2445},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 89, col: 26, offset: 2452},
										expr: &ruleRefExpr{
											pos:  position{line: 89, col: 26, offset: 2452},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 89, col: 35, offset: 2461},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 89, col: 38, offset: 2464},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 2555},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 92, col: 5, offset: 2555},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 92, col: 5, offset: 2555},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 9, offset: 2559},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 92, col: 12, offset: 2562},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 92, col: 18, offset: 2568},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 24, offset: 2574},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 92, col: 27, offset: 2577},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 93, col: 5, offset: 2607},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 93, col: 8, offset: 2610},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 2623},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 94, col: 5, offset: 2623},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 94, col: 5, offset: 2623},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 7, offset: 2625},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 94, col: 20, offset: 2638},
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 21, offset: 2639},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 95, col: 5, offset: 2669},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 95, col: 5, offset: 2669},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 5, offset: 2669},
									expr: &seqExpr{
										pos: position{line: 95, col: 7, offset: 2671},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 95, col: 7, offset: 2671},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 95, col: 16, offset: 2680},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 95, col: 25, offset: 2689},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 27, offset: 2691},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 95, col: 39, offset: 2703},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 40, offset: 2704},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2734},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 5, offset: 2734},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 14, offset: 2743},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 16, offset: 2745},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 21, offset: 2750},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2849},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2849},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 10, offset: 2854},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 2953},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 102, col: 5, offset: 2953},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 10, offset: 2958},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 105, col: 5, offset: 3046},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3046},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 10, offset: 3051},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 109, col: 1, offset: 3138},
			expr: &seqExpr{
				pos: position{line: 109, col: 11, offset: 3148},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 11, offset: 3148},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 109, col: 15, offset: 3152},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 109, col: 15, offset: 3152},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 109, col: 22, offset: 3159},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 109, col: 43, offset: 3180},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 109, col: 50, offset: 3187},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 109, col: 56, offset: 3193},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 110, col: 1, offset: 3198},
			expr: &seqExpr{
				pos: position{line: 110, col: 8, offset: 3205},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 8, offset: 3205},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 110, col: 12, offset: 3209},
						expr: &choiceExpr{
							pos: position{line: 110, col: 14, offset: 3211},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 110, col: 14, offset: 3211},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 110, col: 20, offset: 3217},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 112, col: 1, offset: 3223},
			expr: &actionExpr{
				pos: position{line: 112, col: 7, offset: 3229},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 112, col: 7, offset: 3229},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 112, col: 7, offset: 3229},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 112, col: 10, offset: 3232},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 15, offset: 3237},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 18, offset: 3240},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 22, offset: 3244},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 114, col: 1, offset: 3269},
			expr: &actionExpr{
				pos: position{line: 115, col: 5, offset: 3283},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 115, col: 5, offset: 3283},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 115, col: 5, offset: 3283},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 115, col: 8, offset: 3286},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 13, offset: 3291},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 18, offset: 3296},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 23, offset: 3301},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 119, col: 1, offset: 3383},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 3392},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3392},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3392},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 5, offset: 3392},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 12, offset: 3399},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 120, col: 14, offset: 3401},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 19, offset: 3406},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3436},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 121, col: 5, offset: 3436},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 123, col: 1, offset: 3467},
			expr: &actionExpr{
				pos: position{line: 124, col: 5, offset: 3479},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 124, col: 5, offset: 3479},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 124, col: 5, offset: 3479},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 8, offset: 3482},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 15, offset: 3489},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 26, offset: 3500},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 124, col: 30, offset: 3504},
								expr: &seqExpr{
									pos: position{line: 124, col: 31, offset: 3505},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 124, col: 31, offset: 3505},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 124, col: 34, offset: 3508},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 124, col: 39, offset: 3513},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 124, col: 42, offset: 3516},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 132, col: 1, offset: 3707},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 3722},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3722},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 134, col: 5, offset: 3731},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 135, col: 5, offset: 3739},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 136, col: 5, offset: 3748},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 138, col: 1, offset: 3756},
			expr: &seqExpr{
				pos: position{line: 138, col: 13, offset: 3768},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 138, col: 13, offset: 3768},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 138, col: 17, offset: 3772},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 138, col: 18, offset: 3773},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 138, col: 18, offset: 3773},
										expr: &litMatcher{
											pos:        position{line: 138, col: 19, offset: 3774},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 24, offset: 3779},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 138, col: 38, offset: 3793},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 138, col: 57, offset: 3812},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 138, col: 82, offset: 3837},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 88, offset: 3843},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 94, offset: 3849},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 100, offset: 3855},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 140, col: 1, offset: 3861},
			expr: &actionExpr{
				pos: position{line: 140, col: 14, offset: 3874},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 140, col: 15, offset: 3875},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 140, col: 15, offset: 3875},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 22, offset: 3882},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 140, col: 30, offset: 3890},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 140, col: 30, offset: 3890},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 140, col: 35, offset: 3895},
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 36, offset: 3896},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 54, offset: 3914},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 61, offset: 3921},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 67, offset: 3927},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 74, offset: 3934},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 142, col: 1, offset: 3971},
			expr: &actionExpr{
				pos: position{line: 143, col: 5, offset: 3989},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 143, col: 5, offset: 3989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 143, col: 5, offset: 3989},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 11, offset: 3995},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 21, offset: 4005},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 143, col: 26, offset: 4010},
								expr: &ruleRefExpr{
									pos:  position{line: 143, col: 26, offset: 4010},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 147, col: 1, offset: 4084},
			expr: &actionExpr{
				pos: position{line: 147, col: 16, offset: 4099},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 147, col: 16, offset: 4099},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 147, col: 16, offset: 4099},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 18, offset: 4101},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 26, offset: 4109},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 28, offset: 4111},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 30, offset: 4113},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 149, col: 1, offset: 4163},
			expr: &actionExpr{
				pos: position{line: 150, col: 5, offset: 4177},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 150, col: 5, offset: 4177},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 4177},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 11, offset: 4183},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 151, col: 5, offset: 4200},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 151, col: 10, offset: 4205},
								expr: &actionExpr{
									pos: position{line: 151, col: 11, offset: 4206},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 151, col: 11, offset: 4206},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 151, col: 11, offset: 4206},
												expr: &seqExpr{
													pos: position{line: 151, col: 12, offset: 4207},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 151, col: 12, offset: 4207},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 151, col: 14, offset: 4209},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 151, col: 25, offset: 4220},
												name: "_",
											},
											&notExpr{
												pos: position{line: 151, col: 27, offset: 4222},
												expr: &choiceExpr{
													pos: position{line: 151, col: 29, offset: 4224},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 151, col: 29, offset: 4224},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 151, col: 39, offset: 4234},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 151, col: 59, offset: 4254},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 151, col: 64, offset: 4259},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 155, col: 1, offset: 4377},
			expr: &choiceExpr{
				pos: position{line: 156, col: 5, offset: 4400},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 156, col: 5, offset: 4400},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 156, col: 5, offset: 4400},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 16, offset: 4411},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 156, col: 19, offset: 4414},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 24, offset: 4419},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 157, col: 5, offset: 4426},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 5, offset: 4426},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 10, offset: 4431},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 159, col: 1, offset: 4435},
			expr: &choiceExpr{
				pos: position{line: 160, col: 5, offset: 4452},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 4452},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 160, col: 5, offset: 4452},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 160, col: 6, offset: 4453},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 160, col: 6, offset: 4453},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 160, col: 6, offset: 4453},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 160, col: 15, offset: 4462},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 160, col: 19, offset: 4466},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 160, col: 19, offset: 4466},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 160, col: 23, offset: 4470},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 27, offset: 4474},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 29, offset: 4476},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4588},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4588},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 163, col: 5, offset: 4588},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 163, col: 9, offset: 4592},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 163, col: 12, offset: 4595},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 17, offset: 4600},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 163, col: 31, offset: 4614},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 163, col: 34, offset: 4617},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 5, offset: 4646},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 166, col: 1, offset: 4658},
			expr: &choiceExpr{
				pos: position{line: 167, col: 5, offset: 4673},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 167, col: 5, offset: 4673},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 168, col: 5, offset: 4684},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4693},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4693},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 169, col: 5, offset: 4693},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 7, offset: 4695},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 169, col: 20, offset: 4708},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 169, col: 20, offset: 4708},
											expr: &ruleRefExpr{
												pos:  position{line: 169, col: 21, offset: 4709},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 169, col: 33, offset: 4721},
											expr: &seqExpr{
												pos: position{line: 169, col: 35, offset: 4723},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 169, col: 35, offset: 4723},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 169, col: 37, offset: 4725},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 4837},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 172, col: 5, offset: 4837},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 172, col: 5, offset: 4837},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 172, col: 9, offset: 4841},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 10, offset: 4842},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 4958},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 177, col: 1, offset: 4975},
			expr: &choiceExpr{
				pos: position{line: 178, col: 5, offset: 4995},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 4995},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 178, col: 5, offset: 4995},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 178, col: 5, offset: 4995},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 9, offset: 4999},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 22, offset: 5012},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 178, col: 25, offset: 5015},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 28, offset: 5018},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 39, offset: 5029},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 178, col: 42, offset: 5032},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 46, offset: 5036},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 6, offset: 5159},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 181, col: 6, offset: 5159},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 181, col: 6, offset: 5159},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 12, offset: 5165},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 181, col: 21, offset: 5174},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 181, col: 26, offset: 5179},
										expr: &ruleRefExpr{
											pos:  position{line: 181, col: 27, offset: 5180},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 185, col: 1, offset: 5252},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5268},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 5268},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5280},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 187, col: 5, offset: 5280},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 187, col: 5, offset: 5280},
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 6, offset: 5281},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 187, col: 20, offset: 5295},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 22, offset: 5297},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 191, col: 1, offset: 5405},
			expr: &actionExpr{
				pos: position{line: 192, col: 5, offset: 5414},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 5, offset: 5414},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 192, col: 13, offset: 5422},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 196, col: 1, offset: 5518},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5529},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 5, offset: 5529},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 197, col: 13, offset: 5537},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 203, col: 1, offset: 5663},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 5679},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 5679},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 5679},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 204, col: 5, offset: 5679},
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 5, offset: 5679},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 16, offset: 5690},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 21, offset: 5695},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 33, offset: 5707},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 39, offset: 5713},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 5839},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 207, col: 5, offset: 5839},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 207, col: 5, offset: 5839},
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 5, offset: 5839},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 16, offset: 5850},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 21, offset: 5855},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 36, offset: 5870},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 207, col: 41, offset: 5875},
										expr: &seqExpr{
											pos: position{line: 207, col: 42, offset: 5876},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 207, col: 42, offset: 5876},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 207, col: 44, offset: 5878},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 58, offset: 5892},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 64, offset: 5898},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 215, col: 1, offset: 6112},
			expr: &seqExpr{
				pos: position{line: 215, col: 13, offset: 6124},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 215, col: 13, offset: 6124},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 25, offset: 6136},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 217, col: 1, offset: 6139},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 6155},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 6155},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 218, col: 5, offset: 6155},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 13, offset: 6163},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 15, offset: 6165},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 23, offset: 6173},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 220, col: 1, offset: 6214},
			expr: &choiceExpr{
				pos: position{line: 221, col: 5, offset: 6227},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 5, offset: 6227},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 221, col: 5, offset: 6227},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 221, col: 5, offset: 6227},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 221, col: 7, offset: 6229},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 14, offset: 6236},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 221, col: 16, offset: 6238},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 25, offset: 6247},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 27, offset: 6249},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 33, offset: 6255},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 6286},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 222, col: 5, offset: 6286},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 227, col: 1, offset: 6546},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 6565},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6565},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 6580},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 229, col: 5, offset: 6580},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 10, offset: 6585},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 231, col: 1, offset: 6677},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 6697},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 6697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6697},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 11, offset: 6703},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 26, offset: 6718},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 31, offset: 6723},
								expr: &actionExpr{
									pos: position{line: 232, col: 32, offset: 6724},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 232, col: 32, offset: 6724},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 232, col: 32, offset: 6724},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 232, col: 35, offset: 6727},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 39, offset: 6731},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 42, offset: 6734},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 47, offset: 6739},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 236, col: 1, offset: 6861},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 6879},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 6879},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 237, col: 5, offset: 6879},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 237, col: 5, offset: 6879},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 10, offset: 6884},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 15, offset: 6889},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 237, col: 18, offset: 6892},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 23, offset: 6897},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 237, col: 26, offset: 6900},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 30, offset: 6904},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 7008},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 240, col: 5, offset: 7008},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 9, offset: 7012},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 244, col: 1, offset: 7112},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 7120},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 7120},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 245, col: 5, offset: 7120},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 6, offset: 7121},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 16, offset: 7131},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 19, offset: 7134},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 27, offset: 7142},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 245, col: 30, offset: 7145},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 34, offset: 7149},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 37, offset: 7152},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 42, offset: 7157},
								expr: &choiceExpr{
									pos: position{line: 245, col: 43, offset: 7158},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 245, col: 43, offset: 7158},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 245, col: 54, offset: 7169},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 61, offset: 7176},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 245, col: 64, offset: 7179},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 245, col: 68, offset: 7183},
							expr: &seqExpr{
								pos: position{line: 245, col: 70, offset: 7185},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 245, col: 70, offset: 7185},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 245, col: 73, offset: 7188},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 78, offset: 7193},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 84, offset: 7199},
								expr: &ruleRefExpr{
									pos:  position{line: 245, col: 84, offset: 7199},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 253, col: 1, offset: 7390},
			expr: &choiceExpr{
				pos: position{line: 254, col: 5, offset: 7402},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7402},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7421},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7434},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 258, col: 1, offset: 7443},
			expr: &actionExpr{
				pos: position{line: 258, col: 15, offset: 7457},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 258, col: 15, offset: 7457},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 258, col: 15, offset: 7457},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 258, col: 17, offset: 7459},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 25, offset: 7467},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 27, offset: 7469},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 32, offset: 7474},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 260, col: 1, offset: 7510},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 7529},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 7529},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 7529},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 11, offset: 7535},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 25, offset: 7549},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 30, offset: 7554},
								expr: &seqExpr{
									pos: position{line: 261, col: 31, offset: 7555},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 261, col: 31, offset: 7555},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 261, col: 34, offset: 7558},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 261, col: 38, offset: 7562},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 261, col: 41, offset: 7565},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 271, col: 1, offset: 7789},
			expr: &choiceExpr{
				pos: position{line: 272, col: 5, offset: 7802},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 272, col: 5, offset: 7802},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 5, offset: 7815},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 5, offset: 7826},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 7836},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 7846},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 7857},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 7868},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 7879},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 7891},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 7902},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7912},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7925},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7936},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 7948},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 7959},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 7972},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 7982},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 7993},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 8004},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 291, col: 5, offset: 8018},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8030},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 8041},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8053},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 296, col: 1, offset: 8061},
			expr: &actionExpr{
				pos: position{line: 297, col: 5, offset: 8074},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 297, col: 5, offset: 8074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 5, offset: 8074},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 14, offset: 8083},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 16, offset: 8085},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 297, col: 22, offset: 8091},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 297, col: 22, offset: 8091},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 297, col: 24, offset: 8093},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 333, col: 1, offset: 9444},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 9455},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 9455},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 5, offset: 9455},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 334, col: 12, offset: 9462},
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 13, offset: 9463},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 18, offset: 9468},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 23, offset: 9473},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 32, offset: 9482},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 334, col: 37, offset: 9487},
								expr: &actionExpr{
									pos: position{line: 334, col: 38, offset: 9488},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 334, col: 38, offset: 9488},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 334, col: 38, offset: 9488},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 334, col: 40, offset: 9490},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 334, col: 42, offset: 9492},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 348, col: 1, offset: 9903},
			expr: &actionExpr{
				pos: position{line: 348, col: 12, offset: 9914},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 348, col: 12, offset: 9914},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 348, col: 17, offset: 9919},
						expr: &actionExpr{
							pos: position{line: 348, col: 18, offset: 9920},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 348, col: 18, offset: 9920},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 348, col: 18, offset: 9920},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 348, col: 20, offset: 9922},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 348, col: 22, offset: 9924},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 350, col: 1, offset: 9981},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 9993},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 9993},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 351, col: 5, offset: 9993},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10068},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10068},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 352, col: 5, offset: 10068},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 14, offset: 10077},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 352, col: 16, offset: 10079},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 352, col: 23, offset: 10086},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 352, col: 24, offset: 10087},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 352, col: 24, offset: 10087},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 352, col: 34, offset: 10097},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 354, col: 1, offset: 10210},
			expr: &actionExpr{
				pos: position{line: 355, col: 5, offset: 10220},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 355, col: 5, offset: 10220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 5, offset: 10220},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 355, col: 11, offset: 10226},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 12, offset: 10227},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 17, offset: 10232},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 23, offset: 10238},
								expr: &actionExpr{
									pos: position{line: 355, col: 24, offset: 10239},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 355, col: 24, offset: 10239},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 24, offset: 10239},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 26, offset: 10241},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 28, offset: 10243},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 53, offset: 10268},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 59, offset: 10274},
								expr: &seqExpr{
									pos: position{line: 355, col: 60, offset: 10275},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 355, col: 60, offset: 10275},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 355, col: 62, offset: 10277},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 73, offset: 10288},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 80, offset: 10295},
								expr: &actionExpr{
									pos: position{line: 355, col: 81, offset: 10296},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 355, col: 81, offset: 10296},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 81, offset: 10296},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 83, offset: 10298},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 85, offset: 10300},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 369, col: 1, offset: 10635},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 10645},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 370, col: 5, offset: 10645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 370, col: 5, offset: 10645},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 11, offset: 10651},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 370, col: 13, offset: 10653},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 18, offset: 10658},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 374, col: 1, offset: 10753},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 10764},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 10764},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 10764},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 375, col: 12, offset: 10771},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 14, offset: 10773},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 19, offset: 10778},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 379, col: 1, offset: 10869},
			expr: &choiceExpr{
				pos: position{line: 380, col: 5, offset: 10880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 380, col: 5, offset: 10880},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 380, col: 5, offset: 10880},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 380, col: 5, offset: 10880},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 380, col: 12, offset: 10887},
									name: "_",
								},
								&notExpr{
									pos: position{line: 380, col: 14, offset: 10889},
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 15, offset: 10890},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 380, col: 23, offset: 10898},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 29, offset: 10904},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 10984},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 381, col: 5, offset: 10984},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 383, col: 1, offset: 11131},
			expr: &choiceExpr{
				pos: position{line: 384, col: 5, offset: 11142},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 11142},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 384, col: 5, offset: 11142},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 384, col: 5, offset: 11142},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 384, col: 12, offset: 11149},
									name: "_",
								},
								&notExpr{
									pos: position{line: 384, col: 14, offset: 11151},
									expr: &ruleRefExpr{
										pos:  position{line: 384, col: 15, offset: 11152},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 384, col: 23, offset: 11160},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 384, col: 29, offset: 11166},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 385, col: 5, offset: 11246},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 385, col: 5, offset: 11246},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 387, col: 1, offset: 11393},
			expr: &actionExpr{
				pos: position{line: 388, col: 5, offset: 11405},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 388, col: 5, offset: 11405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 5, offset: 11405},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 13, offset: 11413},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 15, offset: 11415},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 20, offset: 11420},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 392, col: 1, offset: 11506},
			expr: &choiceExpr{
				pos: position{line: 393, col: 5, offset: 11517},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 11517},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 11517},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 393, col: 5, offset: 11517},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 12, offset: 11524},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 393, col: 14, offset: 11526},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 11615},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 396, col: 5, offset: 11615},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 400, col: 1, offset: 11704},
			expr: &actionExpr{
				pos: position{line: 401, col: 5, offset: 11714},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 401, col: 5, offset: 11714},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 5, offset: 11714},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 11, offset: 11720},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 13, offset: 11722},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 18, offset: 11727},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 405, col: 1, offset: 11818},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 11831},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 11831},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 5, offset: 11831},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 14, offset: 11840},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 16, offset: 11842},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 22, offset: 11848},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 33, offset: 11859},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 406, col: 38, offset: 11864},
								expr: &actionExpr{
									pos: position{line: 406, col: 39, offset: 11865},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 406, col: 39, offset: 11865},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 406, col: 39, offset: 11865},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 406, col: 42, offset: 11868},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 406, col: 46, offset: 11872},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 49, offset: 11875},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 52, offset: 11878},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 414, col: 1, offset: 12285},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 12296},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 12296},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 415, col: 5, offset: 12296},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 415, col: 12, offset: 12303},
							expr: &seqExpr{
								pos: position{line: 415, col: 14, offset: 12305},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 415, col: 14, offset: 12305},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 415, col: 17, offset: 12308},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 415, col: 22, offset: 12313},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 23, offset: 12314},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 419, col: 1, offset: 12385},
			expr: &actionExpr{
				pos: position{line: 420, col: 5, offset: 12397},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 420, col: 5, offset: 12397},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 420, col: 5, offset: 12397},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 420, col: 13, offset: 12405},
							expr: &seqExpr{
								pos: position{line: 420, col: 15, offset: 12407},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 420, col: 15, offset: 12407},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 420, col: 18, offset: 12410},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 420, col: 23, offset: 12415},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 24, offset: 12416},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 424, col: 1, offset: 12488},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12499},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 425, col: 5, offset: 12499},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 425, col: 5, offset: 12499},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 12505},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 425, col: 21, offset: 12515},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 425, col: 28, offset: 12522},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 39, offset: 12533},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 54, offset: 12548},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 57, offset: 12551},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 59, offset: 12553},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 63, offset: 12557},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 71, offset: 12565},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 78, offset: 12572},
								expr: &seqExpr{
									pos: position{line: 425, col: 79, offset: 12573},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 79, offset: 12573},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 425, col: 82, offset: 12576},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 86, offset: 12580},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 89, offset: 12583},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 99, offset: 12593},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 107, offset: 12601},
								expr: &seqExpr{
									pos: position{line: 425, col: 108, offset: 12602},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 108, offset: 12602},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 110, offset: 12604},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 436, col: 1, offset: 12960},
			expr: &choiceExpr{
				pos: position{line: 437, col: 5, offset: 12974},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 437, col: 5, offset: 12974},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 437, col: 5, offset: 12974},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 5, offset: 12974},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 437, col: 12, offset: 12981},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 13011},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 438, col: 5, offset: 13011},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 5, offset: 13011},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 438, col: 13, offset: 13019},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 5, offset: 13049},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 439, col: 5, offset: 13049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 5, offset: 13049},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 13, offset: 13057},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 13086},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 13086},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 440, col: 5, offset: 13086},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 13, offset: 13094},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 5, offset: 13124},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 441, col: 5, offset: 13124},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 443, col: 1, offset: 13159},
			expr: &choiceExpr{
				pos: position{line: 444, col: 5, offset: 13178},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 444, col: 5, offset: 13178},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 444, col: 5, offset: 13178},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 444, col: 5, offset: 13178},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 444, col: 8, offset: 13181},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 12, offset: 13185},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 444, col: 15, offset: 13188},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 444, col: 17, offset: 13190},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 21, offset: 13194},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 444, col: 24, offset: 13197},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 28, offset: 13201},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 445, col: 5, offset: 13226},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 445, col: 5, offset: 13226},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 447, col: 1, offset: 13249},
			expr: &choiceExpr{
				pos: position{line: 448, col: 5, offset: 13261},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 5, offset: 13261},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 13270},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 13270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 449, col: 5, offset: 13270},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 449, col: 9, offset: 13274},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 14, offset: 13279},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 19, offset: 13284},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 451, col: 1, offset: 13310},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 13323},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 452, col: 5, offset: 13323},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 452, col: 5, offset: 13323},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 452, col: 14, offset: 13332},
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 15, offset: 13333},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 20, offset: 13338},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 22, offset: 13340},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 459, col: 1, offset: 13688},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 13705},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 460, col: 5, offset: 13705},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 460, col: 7, offset: 13707},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 464, col: 1, offset: 13807},
			expr: &choiceExpr{
				pos: position{line: 465, col: 5, offset: 13822},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13822},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 465, col: 5, offset: 13822},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 465, col: 5, offset: 13822},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 465, col: 7, offset: 13824},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 465, col: 12, offset: 13829},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 13859},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 466, col: 5, offset: 13859},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 468, col: 1, offset: 13932},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 13943},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 13943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 469, col: 5, offset: 13943},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 12, offset: 13950},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 14, offset: 13952},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 19, offset: 13957},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 34, offset: 13972},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 41, offset: 13979},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 41, offset: 13979},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 53, offset: 13991},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 60, offset: 13998},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 60, offset: 13998},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 71, offset: 14009},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 79, offset: 14017},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 79, offset: 14017},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 91, offset: 14029},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 96, offset: 14034},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 96, offset: 14034},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 473, col: 1, offset: 14193},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 14207},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 14207},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 5, offset: 14207},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 7, offset: 14209},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 16, offset: 14218},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 18, offset: 14220},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 22, offset: 14224},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 476, col: 1, offset: 14258},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14273},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14273},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 477, col: 5, offset: 14273},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 477, col: 7, offset: 14275},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 477, col: 17, offset: 14285},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 477, col: 19, offset: 14287},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 23, offset: 14291},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 479, col: 1, offset: 14325},
			expr: &actionExpr{
				pos: position{line: 480, col: 5, offset: 14337},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 480, col: 5, offset: 14337},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 480, col: 5, offset: 14337},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 480, col: 7, offset: 14339},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 14, offset: 14346},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 16, offset: 14348},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 20, offset: 14352},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 482, col: 1, offset: 14386},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 14401},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 483, col: 5, offset: 14401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 483, col: 5, offset: 14401},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 483, col: 9, offset: 14405},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 483, col: 17, offset: 14413},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 17, offset: 14413},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 34, offset: 14430},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 485, col: 1, offset: 14468},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14479},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 486, col: 5, offset: 14479},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 486, col: 12, offset: 14486},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 490, col: 1, offset: 14644},
			expr: &choiceExpr{
				pos: position{line: 491, col: 5, offset: 14656},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14656},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14665},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14673},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 495, col: 1, offset: 14679},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14688},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14688},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 5, offset: 14688},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 12, offset: 14695},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 14, offset: 14697},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 19, offset: 14702},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 24, offset: 14707},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 31, offset: 14714},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 31, offset: 14714},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 42, offset: 14725},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 51, offset: 14734},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 51, offset: 14734},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 500, col: 1, offset: 14866},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14875},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14875},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 501, col: 5, offset: 14875},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 12, offset: 14882},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 14, offset: 14884},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 19, offset: 14889},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 503, col: 1, offset: 14920},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 14929},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 14929},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 504, col: 5, offset: 14929},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 12, offset: 14936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 504, col: 14, offset: 14938},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 19, offset: 14943},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 506, col: 1, offset: 14974},
			expr: &actionExpr{
				pos: position{line: 507, col: 5, offset: 14987},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 507, col: 5, offset: 14987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 507, col: 5, offset: 14987},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 10, offset: 14992},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 19, offset: 15001},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 507, col: 22, offset: 15004},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 22, offset: 15004},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 511, col: 1, offset: 15102},
			expr: &actionExpr{
				pos: position{line: 512, col: 5, offset: 15110},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 512, col: 5, offset: 15110},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 5, offset: 15110},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 512, col: 11, offset: 15116},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 13, offset: 15118},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 17, offset: 15122},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 21, offset: 15126},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 28, offset: 15133},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 28, offset: 15133},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 39, offset: 15144},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 48, offset: 15153},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 48, offset: 15153},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 516, col: 1, offset: 15283},
			expr: &actionExpr{
				pos: position{line: 516, col: 7, offset: 15289},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 516, col: 7, offset: 15289},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 516, col: 8, offset: 15290},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 516, col: 8, offset: 15290},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 516, col: 18, offset: 15300},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 516, col: 28, offset: 15310},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 518, col: 1, offset: 15347},
			expr: &choiceExpr{
				pos: position{line: 519, col: 5, offset: 15356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 519, col: 5, offset: 15356},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 519, col: 5, offset: 15356},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 7, offset: 15358},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 520, col: 5, offset: 15393},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 520, col: 5, offset: 15393},
							expr: &charClassMatcher{
								pos:        position{line: 520, col: 5, offset: 15393},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 523, col: 1, offset: 15495},
			expr: &actionExpr{
				pos: position{line: 524, col: 5, offset: 15506},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 524, col: 5, offset: 15506},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 524, col: 5, offset: 15506},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 524, col: 7, offset: 15508},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 524, col: 12, offset: 15513},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 14, offset: 15515},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 17, offset: 15518},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 527, col: 1, offset: 15584},
			expr: &actionExpr{
				pos: position{line: 527, col: 9, offset: 15592},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 527, col: 9, offset: 15592},
					expr: &charClassMatcher{
						pos:        position{line: 527, col: 10, offset: 15593},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 529, col: 1, offset: 15639},
			expr: &choiceExpr{
				pos: position{line: 530, col: 5, offset: 15652},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 15652},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 530, col: 5, offset: 15652},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 530, col: 5, offset: 15652},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 10, offset: 15657},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 530, col: 19, offset: 15666},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 530, col: 26, offset: 15673},
										expr: &ruleRefExpr{
											pos:  position{line: 530, col: 26, offset: 15673},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 530, col: 38, offset: 15685},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 530, col: 43, offset: 15690},
										expr: &ruleRefExpr{
											pos:  position{line: 530, col: 43, offset: 15690},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 530, col: 53, offset: 15700},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 57, offset: 15704},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 15822},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 533, col: 5, offset: 15822},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 10, offset: 15827},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 537, col: 1, offset: 15928},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15943},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 5, offset: 15943},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 538, col: 9, offset: 15947},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 16, offset: 15954},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 540, col: 1, offset: 15993},
			expr: &actionExpr{
				pos: position{line: 541, col: 5, offset: 16006},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 541, col: 5, offset: 16006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 5, offset: 16006},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 541, col: 9, offset: 16010},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 14, offset: 16015},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 543, col: 1, offset: 16052},
			expr: &choiceExpr{
				pos: position{line: 544, col: 5, offset: 16065},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 544, col: 5, offset: 16065},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 5, offset: 16076},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 16085},
						run: (*parser).callonPoolName4,
						expr: &seqExpr{
							pos: position{line: 546, col: 5, offset: 16085},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 546, col: 5, offset: 16085},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 546, col: 9, offset: 16089},
									expr: &ruleRefExpr{
										pos:  position{line: 546, col: 10, offset: 16090},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16175},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 547, col: 5, offset: 16175},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 10, offset: 16180},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 549, col: 1, offset: 16267},
			expr: &choiceExpr{
				pos: position{line: 550, col: 5, offset: 16286},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 550, col: 5, offset: 16286},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 551, col: 5, offset: 16305},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 5, offset: 16315},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 554, col: 1, offset: 16329},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 16348},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 16348},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 555, col: 6, offset: 16349},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 555, col: 6, offset: 16349},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 555, col: 24, offset: 16367},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 555, col: 29, offset: 16372},
							expr: &choiceExpr{
								pos: position{line: 555, col: 30, offset: 16373},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 555, col: 30, offset: 16373},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 555, col: 47, offset: 16390},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 557, col: 1, offset: 16428},
			expr: &actionExpr{
				pos: position{line: 558, col: 5, offset: 16443},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 558, col: 5, offset: 16443},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 558, col: 5, offset: 16443},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 558, col: 7, offset: 16445},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 558, col: 15, offset: 16453},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 558, col: 17, offset: 16455},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 22, offset: 16460},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 33, offset: 16471},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 39, offset: 16477},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 562, col: 1, offset: 16588},
			expr: &choiceExpr{
				pos: position{line: 563, col: 5, offset: 16599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 16599},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 563, col: 5, offset: 16599},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 563, col: 5, offset: 16599},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 563, col: 7, offset: 16601},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 564, col: 5, offset: 16632},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 564, col: 5, offset: 16632},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 566, col: 1, offset: 16658},
			expr: &actionExpr{
				pos: position{line: 567, col: 5, offset: 16672},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 567, col: 5, offset: 16672},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 567, col: 5, offset: 16672},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 567, col: 7, offset: 16674},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 567, col: 16, offset: 16683},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 567, col: 18, offset: 16685},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 22, offset: 16689},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 569, col: 1, offset: 16725},
			expr: &choiceExpr{
				pos: position{line: 570, col: 5, offset: 16741},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 16741},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 570, col: 5, offset: 16741},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 16775},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 571, col: 5, offset: 16775},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 572, col: 5, offset: 16810},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 572, col: 5, offset: 16810},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 574, col: 1, offset: 16841},
			expr: &actionExpr{
				pos: position{line: 575, col: 5, offset: 16852},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 575, col: 5, offset: 16852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 575, col: 5, offset: 16852},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 575, col: 12, offset: 16859},
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 13, offset: 16860},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 581, col: 1, offset: 17053},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17067},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17067},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 582, col: 5, offset: 17067},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 15, offset: 17077},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 582, col: 17, offset: 17079},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 22, offset: 17084},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 28, offset: 17090},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 32, offset: 17094},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 40, offset: 17102},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 582, col: 43, offset: 17105},
								expr: &ruleRefExpr{
									pos:  position{line: 582, col: 43, offset: 17105},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 586, col: 1, offset: 17218},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 17230},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 17230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 5, offset: 17230},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 13, offset: 17238},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 15, offset: 17240},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 20, offset: 17245},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 591, col: 1, offset: 17331},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 17342},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 17342},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 592, col: 5, offset: 17342},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 12, offset: 17349},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 14, offset: 17351},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 20, offset: 17357},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 592, col: 26, offset: 17363},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 592, col: 33, offset: 17370},
								expr: &ruleRefExpr{
									pos:  position{line: 592, col: 33, offset: 17370},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 592, col: 41, offset: 17378},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 592, col: 46, offset: 17383},
								expr: &ruleRefExpr{
									pos:  position{line: 592, col: 46, offset: 17383},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 596, col: 1, offset: 17506},
			expr: &choiceExpr{
				pos: position{line: 597, col: 5, offset: 17518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 597, col: 5, offset: 17518},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 597, col: 5, offset: 17518},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 597, col: 5, offset: 17518},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 597, col: 8, offset: 17521},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 13, offset: 17526},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 597, col: 16, offset: 17529},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 20, offset: 17533},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 597, col: 23, offset: 17536},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 597, col: 29, offset: 17542},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 35, offset: 17548},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 597, col: 38, offset: 17551},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 17581},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 598, col: 5, offset: 17581},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 598, col: 5, offset: 17581},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 598, col: 8, offset: 17584},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 598, col: 13, offset: 17589},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 598, col: 16, offset: 17592},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 598, col: 20, offset: 17596},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 598, col: 23, offset: 17599},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 598, col: 27, offset: 17603},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 598, col: 31, offset: 17607},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 598, col: 34, offset: 17610},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 600, col: 1, offset: 17635},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 17646},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 17646},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 601, col: 5, offset: 17646},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 601, col: 7, offset: 17648},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 14, offset: 17655},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 601, col: 16, offset: 17657},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 22, offset: 17663},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 39, offset: 17680},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 601, col: 44, offset: 17685},
								expr: &actionExpr{
									pos: position{line: 601, col: 45, offset: 17686},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 601, col: 45, offset: 17686},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 601, col: 45, offset: 17686},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 601, col: 48, offset: 17689},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 601, col: 52, offset: 17693},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 601, col: 55, offset: 17696},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 601, col: 57, offset: 17698},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 605, col: 1, offset: 17819},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17840},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17840},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17840},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 10, offset: 17845},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 25, offset: 17860},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 606, col: 29, offset: 17864},
								expr: &seqExpr{
									pos: position{line: 606, col: 30, offset: 17865},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 606, col: 30, offset: 17865},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 606, col: 33, offset: 17868},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 606, col: 37, offset: 17872},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 606, col: 40, offset: 17875},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 614, col: 1, offset: 18096},
			expr: &actionExpr{
				pos: position{line: 615, col: 5, offset: 18108},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 615, col: 5, offset: 18108},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 615, col: 5, offset: 18108},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 13, offset: 18116},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 615, col: 15, offset: 18118},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 21, offset: 18124},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 619, col: 1, offset: 18213},
			expr: &actionExpr{
				pos: position{line: 620, col: 5, offset: 18225},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 620, col: 5, offset: 18225},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 620, col: 5, offset: 18225},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 7, offset: 18227},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 10, offset: 18230},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 12, offset: 18232},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 16, offset: 18236},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 622, col: 1, offset: 18262},
			expr: &actionExpr{
				pos: position{line: 623, col: 5, offset: 18272},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 623, col: 5, offset: 18272},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 623, col: 5, offset: 18272},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 7, offset: 18274},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 10, offset: 18277},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 623, col: 12, offset: 18279},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 16, offset: 18283},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 627, col: 1, offset: 18334},
			expr: &ruleRefExpr{
				pos:  position{line: 627, col: 8, offset: 18341},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 629, col: 1, offset: 18352},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18362},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18362},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 630, col: 5, offset: 18362},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 11, offset: 18368},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 16, offset: 18373},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 630, col: 21, offset: 18378},
								expr: &actionExpr{
									pos: position{line: 630, col: 22, offset: 18379},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 630, col: 22, offset: 18379},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 630, col: 22, offset: 18379},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 630, col: 25, offset: 18382},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 630, col: 29, offset: 18386},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 630, col: 32, offset: 18389},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 630, col: 37, offset: 18394},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 634, col: 1, offset: 18506},
			expr: &ruleRefExpr{
				pos:  position{line: 634, col: 13, offset: 18518},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 636, col: 1, offset: 18524},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 18539},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 637, col: 5, offset: 18539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 18539},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 11, offset: 18545},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 637, col: 21, offset: 18555},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 637, col: 26, offset: 18560},
								expr: &seqExpr{
									pos: position{line: 637, col: 27, offset: 18561},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 637, col: 27, offset: 18561},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 637, col: 30, offset: 18564},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 637, col: 34, offset: 18568},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 637, col: 37, offset: 18571},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 647, col: 1, offset: 18770},
			expr: &actionExpr{
				pos: position{line: 648, col: 5, offset: 18786},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 648, col: 5, offset: 18786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 18786},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 11, offset: 18792},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 22, offset: 18803},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 648, col: 27, offset: 18808},
								expr: &actionExpr{
									pos: position{line: 648, col: 28, offset: 18809},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 648, col: 28, offset: 18809},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 648, col: 28, offset: 18809},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 648, col: 31, offset: 18812},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 648, col: 35, offset: 18816},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 648, col: 38, offset: 18819},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 648, col: 40, offset: 18821},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 652, col: 1, offset: 18932},
			expr: &actionExpr{
				pos: position{line: 653, col: 5, offset: 18947},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 653, col: 5, offset: 18947},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 18947},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 9, offset: 18951},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 14, offset: 18956},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 653, col: 17, offset: 18959},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 22, offset: 18964},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 25, offset: 18967},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 29, offset: 18971},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 655, col: 1, offset: 19062},
			expr: &ruleRefExpr{
				pos:  position{line: 655, col: 8, offset: 19069},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 657, col: 1, offset: 19086},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 19106},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 19106},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 19106},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 10, offset: 19111},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 24, offset: 19125},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 658, col: 28, offset: 19129},
								expr: &seqExpr{
									pos: position{line: 658, col: 29, offset: 19130},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 658, col: 29, offset: 19130},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 658, col: 32, offset: 19133},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 36, offset: 19137},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 39, offset: 19140},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 44, offset: 19145},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 658, col: 47, offset: 19148},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 51, offset: 19152},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 54, offset: 19155},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 667, col: 1, offset: 19416},
			expr: &actionExpr{
				pos: position{line: 668, col: 5, offset: 19434},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 668, col: 5, offset: 19434},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 19434},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 11, offset: 19440},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 669, col: 5, offset: 19459},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 669, col: 10, offset: 19464},
								expr: &actionExpr{
									pos: position{line: 669, col: 11, offset: 19465},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 669, col: 11, offset: 19465},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 669, col: 11, offset: 19465},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 669, col: 14, offset: 19468},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 669, col: 17, offset: 19471},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 669, col: 25, offset: 19479},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 669, col: 28, offset: 19482},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 669, col: 33, offset: 19487},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 673, col: 1, offset: 19606},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 19625},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 19625},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 19625},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 19631},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 19650},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 675, col: 10, offset: 19655},
								expr: &actionExpr{
									pos: position{line: 675, col: 11, offset: 19656},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 675, col: 11, offset: 19656},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 675, col: 11, offset: 19656},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 675, col: 14, offset: 19659},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 675, col: 17, offset: 19662},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 675, col: 26, offset: 19671},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 675, col: 29, offset: 19674},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 675, col: 34, offset: 19679},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 679, col: 1, offset: 19798},
			expr: &actionExpr{
				pos: position{line: 680, col: 5, offset: 19817},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 680, col: 5, offset: 19817},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 19817},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 9, offset: 19821},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 22, offset: 19834},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 680, col: 31, offset: 19843},
								expr: &choiceExpr{
									pos: position{line: 680, col: 32, offset: 19844},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 680, col: 32, offset: 19844},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 680, col: 32, offset: 19844},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 680, col: 35, offset: 19847},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 680, col: 46, offset: 19858},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 680, col: 49, offset: 19861},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 680, col: 64, offset: 19876},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 680, col: 64, offset: 19876},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 680, col: 68, offset: 19880},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 680, col: 68, offset: 19880},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 680, col: 104, offset: 19916},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 680, col: 107, offset: 19919},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 689, col: 1, offset: 20180},
			expr: &actionExpr{
				pos: position{line: 690, col: 5, offset: 20197},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 690, col: 5, offset: 20197},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 20197},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 11, offset: 20203},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 5, offset: 20226},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 691, col: 10, offset: 20231},
								expr: &actionExpr{
									pos: position{line: 691, col: 11, offset: 20232},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 691, col: 11, offset: 20232},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 691, col: 11, offset: 20232},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 691, col: 14, offset: 20235},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 691, col: 17, offset: 20238},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 691, col: 34, offset: 20255},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 691, col: 37, offset: 20258},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 691, col: 42, offset: 20263},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 695, col: 1, offset: 20386},
			expr: &actionExpr{
				pos: position{line: 695, col: 20, offset: 20405},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 695, col: 21, offset: 20406},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 695, col: 21, offset: 20406},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 695, col: 27, offset: 20412},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 697, col: 1, offset: 20449},
			expr: &actionExpr{
				pos: position{line: 698, col: 5, offset: 20472},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 698, col: 5, offset: 20472},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 698, col: 5, offset: 20472},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 11, offset: 20478},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 5, offset: 20490},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 699, col: 10, offset: 20495},
								expr: &actionExpr{
									pos: position{line: 699, col: 11, offset: 20496},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 699, col: 11, offset: 20496},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 699, col: 11, offset: 20496},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 699, col: 14, offset: 20499},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 699, col: 17, offset: 20502},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 699, col: 40, offset: 20525},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 699, col: 43, offset: 20528},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 699, col: 48, offset: 20533},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 703, col: 1, offset: 20645},
			expr: &actionExpr{
				pos: position{line: 703, col: 26, offset: 20670},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 703, col: 27, offset: 20671},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 703, col: 27, offset: 20671},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 703, col: 33, offset: 20677},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 703, col: 39, offset: 20683},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 705, col: 1, offset: 20720},
			expr: &choiceExpr{
				pos: position{line: 706, col: 5, offset: 20732},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20732},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20732},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 706, col: 5, offset: 20732},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 9, offset: 20736},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 706, col: 12, offset: 20739},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 14, offset: 20741},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 709, col: 5, offset: 20850},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 711, col: 1, offset: 20864},
			expr: &choiceExpr{
				pos: position{line: 712, col: 5, offset: 20881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20881},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20881},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 712, col: 5, offset: 20881},
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 6, offset: 20882},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 712, col: 14, offset: 20890},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 18, offset: 20894},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 712, col: 21, offset: 20897},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 23, offset: 20899},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 715, col: 5, offset: 21009},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 717, col: 1, offset: 21019},
			expr: &choiceExpr{
				pos: position{line: 718, col: 5, offset: 21032},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 21032},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 718, col: 5, offset: 21032},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 718, col: 5, offset: 21032},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 11, offset: 21038},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 718, col: 16, offset: 21043},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 718, col: 21, offset: 21048},
										expr: &ruleRefExpr{
											pos:  position{line: 718, col: 22, offset: 21049},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 21120},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 21120},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 721, col: 5, offset: 21120},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 11, offset: 21126},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 721, col: 20, offset: 21135},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 721, col: 25, offset: 21140},
										expr: &ruleRefExpr{
											pos:  position{line: 721, col: 26, offset: 21141},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 21212},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21226},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 727, col: 1, offset: 21235},
			expr: &seqExpr{
				pos: position{line: 727, col: 13, offset: 21247},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 727, col: 13, offset: 21247},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 22, offset: 21256},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 727, col: 25, offset: 21259},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 729, col: 1, offset: 21264},
			expr: &choiceExpr{
				pos: position{line: 730, col: 5, offset: 21277},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 730, col: 5, offset: 21277},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 731, col: 5, offset: 21287},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 733, col: 1, offset: 21297},
			expr: &actionExpr{
				pos: position{line: 734, col: 5, offset: 21306},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 734, col: 5, offset: 21306},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 734, col: 5, offset: 21306},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 9, offset: 21310},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 18, offset: 21319},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 734, col: 21, offset: 21322},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 25, offset: 21326},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 28, offset: 21329},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 734, col: 34, offset: 21335},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 734, col: 34, offset: 21335},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 45, offset: 21346},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 51, offset: 21352},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 734, col: 54, offset: 21355},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 738, col: 1, offset: 21452},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 21465},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 739, col: 5, offset: 21465},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 741, col: 5, offset: 21552},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 741, col: 5, offset: 21552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 741, col: 5, offset: 21552},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 741, col: 14, offset: 21561},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 741, col: 17, offset: 21564},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 741, col: 21, offset: 21568},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 741, col: 24, offset: 21571},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 741, col: 33, offset: 21580},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 741, col: 47, offset: 21594},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 741, col: 50, offset: 21597},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 741, col: 54, offset: 21601},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 741, col: 57, offset: 21604},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 741, col: 62, offset: 21609},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 741, col: 67, offset: 21614},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 741, col: 70, offset: 21617},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 741, col: 74, offset: 21621},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 741, col: 80, offset: 21627},
										expr: &ruleRefExpr{
											pos:  position{line: 741, col: 80, offset: 21627},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 21875},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 745, col: 5, offset: 21875},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 745, col: 5, offset: 21875},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 22, offset: 21892},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 745, col: 25, offset: 21895},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 29, offset: 21899},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 745, col: 32, offset: 21902},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 37, offset: 21907},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 42, offset: 21912},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 745, col: 45, offset: 21915},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 49, offset: 21919},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 745, col: 52, offset: 21922},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 61, offset: 21931},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 75, offset: 21945},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 745, col: 78, offset: 21948},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 82, offset: 21952},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 745, col: 85, offset: 21955},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 90, offset: 21960},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 95, offset: 21965},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 745, col: 98, offset: 21968},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 745, col: 102, offset: 21972},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 745, col: 108, offset: 21978},
										expr: &ruleRefExpr{
											pos:  position{line: 745, col: 108, offset: 21978},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 22240},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 749, col: 5, offset: 22240},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 749, col: 5, offset: 22240},
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 6, offset: 22241},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 749, col: 16, offset: 22251},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 19, offset: 22254},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 749, col: 34, offset: 22269},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 749, col: 37, offset: 22272},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 749, col: 41, offset: 22276},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 749, col: 44, offset: 22279},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 49, offset: 22284},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 749, col: 62, offset: 22297},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 749, col: 65, offset: 22300},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 749, col: 69, offset: 22304},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 749, col: 75, offset: 22310},
										expr: &ruleRefExpr{
											pos:  position{line: 749, col: 75, offset: 22310},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 753, col: 1, offset: 22431},
			expr: &choiceExpr{
				pos: position{line: 754, col: 5, offset: 22448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 22448},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 754, col: 5, offset: 22448},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 7, offset: 22450},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 755, col: 5, offset: 22496},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 757, col: 1, offset: 22511},
			expr: &actionExpr{
				pos: position{line: 758, col: 5, offset: 22520},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 758, col: 5, offset: 22520},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 758, col: 5, offset: 22520},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 12, offset: 22527},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 758, col: 15, offset: 22530},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 19, offset: 22534},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 758, col: 22, offset: 22537},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 30, offset: 22545},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 38, offset: 22553},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 758, col: 41, offset: 22556},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 758, col: 45, offset: 22560},
								expr: &seqExpr{
									pos: position{line: 758, col: 46, offset: 22561},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 758, col: 46, offset: 22561},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 758, col: 50, offset: 22565},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 758, col: 54, offset: 22569},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 758, col: 54, offset: 22569},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 758, col: 65, offset: 22580},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 758, col: 71, offset: 22586},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 758, col: 76, offset: 22591},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 766, col: 1, offset: 22832},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 22844},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 22844},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 768, col: 5, offset: 22855},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22864},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 769, col: 5, offset: 22864},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 7, offset: 22866},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 773, col: 1, offset: 22958},
			expr: &choiceExpr{
				pos: position{line: 774, col: 5, offset: 22976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 774, col: 5, offset: 22976},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 22986},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 775, col: 5, offset: 22986},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 777, col: 1, offset: 23022},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 23032},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 23032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 778, col: 5, offset: 23032},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 11, offset: 23038},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 16, offset: 23043},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 778, col: 21, offset: 23048},
								expr: &actionExpr{
									pos: position{line: 778, col: 22, offset: 23049},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 778, col: 22, offset: 23049},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 778, col: 22, offset: 23049},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 778, col: 25, offset: 23052},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 778, col: 29, offset: 23056},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 778, col: 32, offset: 23059},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 778, col: 34, offset: 23061},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 782, col: 1, offset: 23170},
			expr: &actionExpr{
				pos: position{line: 783, col: 5, offset: 23184},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 783, col: 5, offset: 23184},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 783, col: 5, offset: 23184},
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 6, offset: 23185},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 10, offset: 23189},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 16, offset: 23195},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 27, offset: 23206},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 783, col: 32, offset: 23211},
								expr: &ruleRefExpr{
									pos:  position{line: 783, col: 33, offset: 23212},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 787, col: 1, offset: 23280},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 23290},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 23290},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 23290},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 788, col: 5, offset: 23290},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 788, col: 9, offset: 23294},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 14, offset: 23299},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 788, col: 27, offset: 23312},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 788, col: 30, offset: 23315},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 788, col: 34, offset: 23319},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 788, col: 37, offset: 23322},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 788, col: 40, offset: 23325},
										expr: &ruleRefExpr{
											pos:  position{line: 788, col: 40, offset: 23325},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 788, col: 54, offset: 23339},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 794, col: 5, offset: 23513},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 794, col: 5, offset: 23513},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 794, col: 5, offset: 23513},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 794, col: 9, offset: 23517},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 794, col: 12, offset: 23520},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 794, col: 16, offset: 23524},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 794, col: 19, offset: 23527},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 794, col: 22, offset: 23530},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 794, col: 35, offset: 23543},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 23716},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 800, col: 5, offset: 23716},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 800, col: 5, offset: 23716},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 800, col: 9, offset: 23720},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 800, col: 14, offset: 23725},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 800, col: 19, offset: 23730},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 801, col: 5, offset: 23779},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 801, col: 5, offset: 23779},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 801, col: 5, offset: 23779},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 801, col: 9, offset: 23783},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 801, col: 12, offset: 23786},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 803, col: 1, offset: 23837},
			expr: &choiceExpr{
				pos: position{line: 804, col: 5, offset: 23849},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 804, col: 5, offset: 23849},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 805, col: 5, offset: 23860},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 806, col: 5, offset: 23870},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 807, col: 5, offset: 23878},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 808, col: 5, offset: 23886},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 23898},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 809, col: 5, offset: 23898},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 809, col: 5, offset: 23898},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 9, offset: 23902},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 809, col: 12, offset: 23905},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 809, col: 17, offset: 23910},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 26, offset: 23919},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 809, col: 29, offset: 23922},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 23951},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 23951},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 810, col: 5, offset: 23951},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 9, offset: 23955},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 810, col: 12, offset: 23958},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 17, offset: 23963},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 810, col: 22, offset: 23968},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 810, col: 25, offset: 23971},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 812, col: 1, offset: 23997},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 24010},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 813, col: 5, offset: 24010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 813, col: 5, offset: 24010},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 12, offset: 24017},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 813, col: 14, offset: 24019},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 20, offset: 24025},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 26, offset: 24031},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 813, col: 33, offset: 24038},
								expr: &ruleRefExpr{
									pos:  position{line: 813, col: 33, offset: 24038},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 41, offset: 24046},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 813, col: 44, offset: 24049},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 48, offset: 24053},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 813, col: 51, offset: 24056},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 56, offset: 24061},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 817, col: 1, offset: 24183},
			expr: &actionExpr{
				pos: position{line: 818, col: 5, offset: 24194},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 818, col: 5, offset: 24194},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 818, col: 5, offset: 24194},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 818, col: 9, offset: 24198},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 818, col: 12, offset: 24201},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 18, offset: 24207},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 818, col: 30, offset: 24219},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 818, col: 33, offset: 24222},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 822, col: 1, offset: 24314},
			expr: &choiceExpr{
				pos: position{line: 823, col: 5, offset: 24330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 24330},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 24330},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 823, col: 5, offset: 24330},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 11, offset: 24336},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 823, col: 22, offset: 24347},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 823, col: 27, offset: 24352},
										expr: &ruleRefExpr{
											pos:  position{line: 823, col: 27, offset: 24352},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 24451},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 826, col: 5, offset: 24451},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 828, col: 1, offset: 24487},
			expr: &actionExpr{
				pos: position{line: 828, col: 18, offset: 24504},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 828, col: 18, offset: 24504},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 828, col: 18, offset: 24504},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 828, col: 21, offset: 24507},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 25, offset: 24511},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 828, col: 28, offset: 24514},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 33, offset: 24519},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 830, col: 1, offset: 24552},
			expr: &choiceExpr{
				pos: position{line: 831, col: 5, offset: 24567},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 831, col: 5, offset: 24567},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 832, col: 5, offset: 24578},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 833, col: 5, offset: 24588},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 835, col: 1, offset: 24600},
			expr: &actionExpr{
				pos: position{line: 836, col: 5, offset: 24611},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 836, col: 5, offset: 24611},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 836, col: 5, offset: 24611},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 11, offset: 24617},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 836, col: 14, offset: 24620},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 19, offset: 24625},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 840, col: 1, offset: 24712},
			expr: &actionExpr{
				pos: position{line: 841, col: 5, offset: 24722},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 841, col: 5, offset: 24722},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 841, col: 5, offset: 24722},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 10, offset: 24727},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 20, offset: 24737},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 841, col: 23, offset: 24740},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 27, offset: 24744},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 841, col: 30, offset: 24747},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 36, offset: 24753},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 845, col: 1, offset: 24855},
			expr: &actionExpr{
				pos: position{line: 846, col: 5, offset: 24865},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 846, col: 5, offset: 24865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 5, offset: 24865},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 9, offset: 24869},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 846, col: 12, offset: 24872},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 18, offset: 24878},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 30, offset: 24890},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 846, col: 33, offset: 24893},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 850, col: 1, offset: 24984},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 24992},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 851, col: 5, offset: 24992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 851, col: 5, offset: 24992},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 10, offset: 24997},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 851, col: 13, offset: 25000},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 19, offset: 25006},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 31, offset: 25018},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 851, col: 34, offset: 25021},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 855, col: 1, offset: 25111},
			expr: &choiceExpr{
				pos: position{line: 856, col: 5, offset: 25127},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 25127},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 856, col: 5, offset: 25127},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 856, col: 5, offset: 25127},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 25133},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 856, col: 22, offset: 25144},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 856, col: 27, offset: 25149},
										expr: &actionExpr{
											pos: position{line: 856, col: 28, offset: 25150},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 856, col: 28, offset: 25150},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 856, col: 28, offset: 25150},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 856, col: 31, offset: 25153},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 856, col: 35, offset: 25157},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 856, col: 38, offset: 25160},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 856, col: 40, offset: 25162},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 25280},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 859, col: 5, offset: 25280},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 861, col: 1, offset: 25316},
			expr: &choiceExpr{
				pos: position{line: 862, col: 5, offset: 25331},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 862, col: 5, offset: 25331},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 25342},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 863, col: 5, offset: 25342},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 7, offset: 25344},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 865, col: 1, offset: 25423},
			expr: &actionExpr{
				pos: position{line: 866, col: 5, offset: 25431},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 866, col: 5, offset: 25431},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 866, col: 5, offset: 25431},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 866, col: 10, offset: 25436},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 866, col: 13, offset: 25439},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 19, offset: 25445},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 866, col: 27, offset: 25453},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 866, col: 30, offset: 25456},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 870, col: 1, offset: 25548},
			expr: &choiceExpr{
				pos: position{line: 871, col: 5, offset: 25560},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 25560},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 871, col: 5, offset: 25560},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 871, col: 5, offset: 25560},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 11, offset: 25566},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 871, col: 17, offset: 25572},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 871, col: 22, offset: 25577},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 22, offset: 25577},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 25671},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 874, col: 5, offset: 25671},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 877, col: 1, offset: 25708},
			expr: &actionExpr{
				pos: position{line: 877, col: 13, offset: 25720},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 877, col: 13, offset: 25720},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 877, col: 13, offset: 25720},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 877, col: 16, offset: 25723},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 20, offset: 25727},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 23, offset: 25730},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 25, offset: 25732},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 879, col: 1, offset: 25757},
			expr: &actionExpr{
				pos: position{line: 880, col: 5, offset: 25767},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 880, col: 5, offset: 25767},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 880, col: 5, offset: 25767},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 880, col: 9, offset: 25771},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 880, col: 14, offset: 25776},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 880, col: 17, offset: 25779},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 880, col: 21, offset: 25783},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 880, col: 24, offset: 25786},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 880, col: 30, offset: 25792},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 886, col: 1, offset: 25899},
			expr: &actionExpr{
				pos: position{line: 887, col: 5, offset: 25909},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 887, col: 5, offset: 25909},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 887, col: 5, offset: 25909},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 15, offset: 25919},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 5, offset: 25933},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 888, col: 10, offset: 25938},
								expr: &ruleRefExpr{
									pos:  position{line: 888, col: 10, offset: 25938},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 889, col: 5, offset: 25951},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 889, col: 11, offset: 25957},
								expr: &ruleRefExpr{
									pos:  position{line: 889, col: 11, offset: 25957},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 25971},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 890, col: 11, offset: 25977},
								expr: &ruleRefExpr{
									pos:  position{line: 890, col: 11, offset: 25977},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 5, offset: 25991},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 891, col: 13, offset: 25999},
								expr: &ruleRefExpr{
									pos:  position{line: 891, col: 13, offset: 25999},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 892, col: 5, offset: 26015},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 892, col: 12, offset: 26022},
								expr: &ruleRefExpr{
									pos:  position{line: 892, col: 12, offset: 26022},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 893, col: 5, offset: 26037},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 893, col: 13, offset: 26045},
								expr: &ruleRefExpr{
									pos:  position{line: 893, col: 13, offset: 26045},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 26061},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 11, offset: 26067},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 918, col: 1, offset: 26433},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 26447},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 26447},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 26447},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 919, col: 5, offset: 26447},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 12, offset: 26454},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 919, col: 14, offset: 26456},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 26484},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 920, col: 5, offset: 26484},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 920, col: 5, offset: 26484},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 920, col: 12, offset: 26491},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 920, col: 14, offset: 26493},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 920, col: 26, offset: 26505},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 922, col: 1, offset: 26549},
			expr: &actionExpr{
				pos: position{line: 923, col: 5, offset: 26567},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 923, col: 5, offset: 26567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 923, col: 5, offset: 26567},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 9, offset: 26571},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 14, offset: 26576},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 923, col: 18, offset: 26580},
								expr: &seqExpr{
									pos: position{line: 923, col: 19, offset: 26581},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 923, col: 19, offset: 26581},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 923, col: 21, offset: 26583},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 923, col: 24, offset: 26586},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 923, col: 26, offset: 26588},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 931, col: 1, offset: 26779},
			expr: &actionExpr{
				pos: position{line: 932, col: 5, offset: 26798},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 932, col: 5, offset: 26798},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 932, col: 5, offset: 26798},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 932, col: 11, offset: 26804},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 25, offset: 26818},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 932, col: 30, offset: 26823},
								expr: &actionExpr{
									pos: position{line: 932, col: 31, offset: 26824},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 932, col: 31, offset: 26824},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 932, col: 31, offset: 26824},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 932, col: 34, offset: 26827},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 932, col: 38, offset: 26831},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 932, col: 41, offset: 26834},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 932, col: 46, offset: 26839},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 936, col: 1, offset: 26960},
			expr: &choiceExpr{
				pos: position{line: 937, col: 5, offset: 26972},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 26972},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 26972},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 937, col: 5, offset: 26972},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 7, offset: 26974},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 12, offset: 26979},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 937, col: 14, offset: 26981},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 20, offset: 26987},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 937, col: 29, offset: 26996},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 937, col: 35, offset: 27002},
										expr: &ruleRefExpr{
											pos:  position{line: 937, col: 35, offset: 27002},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 27097},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 27097},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 940, col: 5, offset: 27097},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 7, offset: 27099},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 12, offset: 27104},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 940, col: 14, offset: 27106},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 942, col: 1, offset: 27131},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 27144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 27144},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 27144},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 943, col: 5, offset: 27144},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 7, offset: 27146},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 10, offset: 27149},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 943, col: 12, offset: 27151},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 15, offset: 27154},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 27182},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 27182},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 944, col: 5, offset: 27182},
									name: "_",
								},
								&notExpr{
									pos: position{line: 944, col: 7, offset: 27184},
									expr: &seqExpr{
										pos: position{line: 944, col: 9, offset: 27186},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 944, col: 9, offset: 27186},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 944, col: 27, offset: 27204},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 944, col: 30, offset: 27207},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 33, offset: 27210},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 946, col: 1, offset: 27235},
			expr: &ruleRefExpr{
				pos:  position{line: 947, col: 5, offset: 27248},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 949, col: 1, offset: 27254},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 27267},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 27267},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 27267},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 11, offset: 27273},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 950, col: 19, offset: 27281},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 950, col: 24, offset: 27286},
								expr: &actionExpr{
									pos: position{line: 950, col: 25, offset: 27287},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 950, col: 25, offset: 27287},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 950, col: 30, offset: 27292},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 954, col: 1, offset: 27407},
			expr: &actionExpr{
				pos: position{line: 955, col: 5, offset: 27419},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 955, col: 5, offset: 27419},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 955, col: 5, offset: 27419},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 11, offset: 27425},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 24, offset: 27438},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 26, offset: 27440},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 31, offset: 27445},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 955, col: 33, offset: 27447},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 39, offset: 27453},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 955, col: 48, offset: 27462},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 955, col: 54, offset: 27468},
								expr: &ruleRefExpr{
									pos:  position{line: 955, col: 54, offset: 27468},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 64, offset: 27478},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 66, offset: 27480},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 69, offset: 27483},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 955, col: 71, offset: 27485},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 79, offset: 27493},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 87, offset: 27501},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 955, col: 90, offset: 27504},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 94, offset: 27508},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 955, col: 97, offset: 27511},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 106, offset: 27520},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 970, col: 1, offset: 27751},
			expr: &choiceExpr{
				pos: position{line: 971, col: 5, offset: 27768},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 971, col: 5, offset: 27768},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 971, col: 5, offset: 27768},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 971, col: 5, offset: 27768},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 971, col: 7, offset: 27770},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 971, col: 14, offset: 27777},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 971, col: 14, offset: 27777},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 21, offset: 27784},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 29, offset: 27792},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 36, offset: 27799},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 27832},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 972, col: 5, offset: 27832},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 974, col: 1, offset: 27860},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 27873},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 975, col: 5, offset: 27873},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 975, col: 5, offset: 27873},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 975, col: 7, offset: 27875},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 975, col: 13, offset: 27881},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 975, col: 15, offset: 27883},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 20, offset: 27888},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 977, col: 1, offset: 27924},
			expr: &actionExpr{
				pos: position{line: 978, col: 5, offset: 27939},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 978, col: 5, offset: 27939},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 978, col: 5, offset: 27939},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 978, col: 7, offset: 27941},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 978, col: 13, offset: 27947},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 978, col: 15, offset: 27949},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 978, col: 18, offset: 27952},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 978, col: 20, offset: 27954},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 28, offset: 27962},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 980, col: 1, offset: 27998},
			expr: &actionExpr{
				pos: position{line: 981, col: 5, offset: 28012},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 981, col: 5, offset: 28012},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 981, col: 5, offset: 28012},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 981, col: 7, offset: 28014},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 981, col: 14, offset: 28021},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 981, col: 16, offset: 28023},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 21, offset: 28028},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 983, col: 1, offset: 28064},
			expr: &actionExpr{
				pos: position{line: 984, col: 5, offset: 28079},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 984, col: 5, offset: 28079},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 984, col: 5, offset: 28079},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 984, col: 7, offset: 28081},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 984, col: 13, offset: 28087},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 984, col: 15, offset: 28089},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 984, col: 18, offset: 28092},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 984, col: 20, offset: 28094},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 984, col: 25, offset: 28099},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 984, col: 31, offset: 28105},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 984, col: 37, offset: 28111},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 988, col: 1, offset: 28222},
			expr: &choiceExpr{
				pos: position{line: 989, col: 5, offset: 28235},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 28235},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 989, col: 5, offset: 28235},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 989, col: 5, offset: 28235},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 989, col: 7, offset: 28237},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 989, col: 12, offset: 28242},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 989, col: 12, offset: 28242},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 989, col: 18, offset: 28248},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 990, col: 5, offset: 28278},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 990, col: 5, offset: 28278},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 992, col: 1, offset: 28304},
			expr: &choiceExpr{
				pos: position{line: 993, col: 5, offset: 28317},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 28317},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 993, col: 5, offset: 28317},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 993, col: 5, offset: 28317},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 993, col: 7, offset: 28319},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 993, col: 13, offset: 28325},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 993, col: 15, offset: 28327},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 993, col: 21, offset: 28333},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 5, offset: 28364},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 994, col: 5, offset: 28364},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 996, col: 1, offset: 28386},
			expr: &actionExpr{
				pos: position{line: 996, col: 10, offset: 28395},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 996, col: 10, offset: 28395},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 997, col: 1, offset: 28430},
			expr: &actionExpr{
				pos: position{line: 997, col: 6, offset: 28435},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 997, col: 6, offset: 28435},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 998, col: 1, offset: 28462},
			expr: &actionExpr{
				pos: position{line: 998, col: 8, offset: 28469},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 998, col: 8, offset: 28469},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 999, col: 1, offset: 28500},
			expr: &actionExpr{
				pos: position{line: 999, col: 8, offset: 28507},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 999, col: 8, offset: 28507},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1000, col: 1, offset: 28538},
			expr: &actionExpr{
				pos: position{line: 1000, col: 9, offset: 28546},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1000, col: 9, offset: 28546},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1001, col: 1, offset: 28579},
			expr: &actionExpr{
				pos: position{line: 1001, col: 9, offset: 28587},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1001, col: 9, offset: 28587},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1002, col: 1, offset: 28620},
			expr: &actionExpr{
				pos: position{line: 1002, col: 6, offset: 28625},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 1002, col: 6, offset: 28625},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1003, col: 1, offset: 28652},
			expr: &actionExpr{
				pos: position{line: 1003, col: 10, offset: 28661},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1003, col: 10, offset: 28661},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1004, col: 1, offset: 28696},
			expr: &actionExpr{
				pos: position{line: 1004, col: 9, offset: 28704},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1004, col: 9, offset: 28704},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1005, col: 1, offset: 28737},
			expr: &actionExpr{
				pos: position{line: 1005, col: 6, offset: 28742},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1005, col: 6, offset: 28742},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1006, col: 1, offset: 28769},
			expr: &actionExpr{
				pos: position{line: 1006, col: 9, offset: 28777},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 9, offset: 28777},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1007, col: 1, offset: 28810},
			expr: &actionExpr{
				pos: position{line: 1007, col: 7, offset: 28816},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1007, col: 7, offset: 28816},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1008, col: 1, offset: 28845},
			expr: &actionExpr{
				pos: position{line: 1008, col: 8, offset: 28852},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1008, col: 8, offset: 28852},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1009, col: 1, offset: 28883},
			expr: &actionExpr{
				pos: position{line: 1009, col: 8, offset: 28890},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1009, col: 8, offset: 28890},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1010, col: 1, offset: 28921},
			expr: &actionExpr{
				pos: position{line: 1010, col: 8, offset: 28928},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1010, col: 8, offset: 28928},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1011, col: 1, offset: 28959},
			expr: &actionExpr{
				pos: position{line: 1011, col: 9, offset: 28967},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1011, col: 9, offset: 28967},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1012, col: 1, offset: 29000},
			expr: &actionExpr{
				pos: position{line: 1012, col: 9, offset: 29008},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1012, col: 9, offset: 29008},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1014, col: 1, offset: 29042},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 5, offset: 29064},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1015, col: 5, offset: 29064},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 14, offset: 29073},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 19, offset: 29078},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 26, offset: 29085},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 33, offset: 29092},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 41, offset: 29100},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 49, offset: 29108},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 58, offset: 29117},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 66, offset: 29125},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 74, offset: 29133},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1019, col: 1, offset: 29159},
			expr: &choiceExpr{
				pos: position{line: 1020, col: 5, offset: 29171},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1020, col: 5, offset: 29171},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 5, offset: 29187},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 5, offset: 29207},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 5, offset: 29225},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 5, offset: 29244},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 29261},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 5, offset: 29274},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 5, offset: 29283},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 5, offset: 29300},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 5, offset: 29319},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 5, offset: 29338},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1032, col: 1, offset: 29351},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 5, offset: 29369},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1033, col: 5, offset: 29369},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1033, col: 5, offset: 29369},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1033, col: 5, offset: 29369},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1033, col: 7, offset: 29371},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1033, col: 14, offset: 29378},
									expr: &ruleRefExpr{
										pos:  position{line: 1033, col: 15, offset: 29379},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 29494},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1036, col: 5, offset: 29494},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 7, offset: 29496},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1040, col: 1, offset: 29600},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 29619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1041, col: 5, offset: 29619},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1041, col: 5, offset: 29619},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1041, col: 5, offset: 29619},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1041, col: 7, offset: 29621},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1041, col: 11, offset: 29625},
									expr: &ruleRefExpr{
										pos:  position{line: 1041, col: 12, offset: 29626},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1044, col: 5, offset: 29740},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1044, col: 5, offset: 29740},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 7, offset: 29742},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1048, col: 1, offset: 29841},
			expr: &actionExpr{
				pos: position{line: 1049, col: 5, offset: 29858},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1049, col: 5, offset: 29858},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1049, col: 7, offset: 29860},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1053, col: 1, offset: 29973},
			expr: &actionExpr{
				pos: position{line: 1054, col: 5, offset: 29992},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1054, col: 5, offset: 29992},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1054, col: 7, offset: 29994},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1058, col: 1, offset: 30103},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 5, offset: 30122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1059, col: 5, offset: 30122},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1059, col: 5, offset: 30122},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 30226},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1060, col: 5, offset: 30226},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1062, col: 1, offset: 30328},
			expr: &actionExpr{
				pos: position{line: 1063, col: 5, offset: 30344},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1063, col: 5, offset: 30344},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1065, col: 1, offset: 30440},
			expr: &actionExpr{
				pos: position{line: 1066, col: 5, offset: 30457},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 5, offset: 30457},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1066, col: 5, offset: 30457},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1066, col: 10, offset: 30462},
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 10, offset: 30462},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1070, col: 1, offset: 30577},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 30593},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1071, col: 5, offset: 30593},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1071, col: 5, offset: 30593},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1071, col: 9, offset: 30597},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1071, col: 13, offset: 30601},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1071, col: 18, offset: 30606},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1075, col: 1, offset: 30695},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 30708},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1076, col: 5, offset: 30708},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30724},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1077, col: 5, offset: 30724},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1077, col: 9, offset: 30728},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1081, col: 1, offset: 30827},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 5, offset: 30836},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1082, col: 5, offset: 30836},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 5, offset: 30852},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 5, offset: 30870},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1086, col: 1, offset: 30883},
			expr: &choiceExpr{
				pos: position{line: 1087, col: 5, offset: 30901},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 30901},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1087, col: 5, offset: 30901},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1087, col: 5, offset: 30901},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 10, offset: 30906},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1087, col: 24, offset: 30920},
									expr: &ruleRefExpr{
										pos:  position{line: 1087, col: 25, offset: 30921},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 5, offset: 30961},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1088, col: 5, offset: 30961},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1088, col: 5, offset: 30961},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 10, offset: 30966},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 25, offset: 30981},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1088, col: 29, offset: 30985},
										expr: &seqExpr{
											pos: position{line: 1088, col: 30, offset: 30986},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1088, col: 30, offset: 30986},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1088, col: 33, offset: 30989},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1088, col: 37, offset: 30993},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1088, col: 40, offset: 30996},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 31228},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1094, col: 5, offset: 31228},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1094, col: 10, offset: 31233},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 31333},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 31333},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1097, col: 5, offset: 31333},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 9, offset: 31337},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1097, col: 12, offset: 31340},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 14, offset: 31342},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1097, col: 24, offset: 31352},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1099, col: 1, offset: 31375},
			expr: &actionExpr{
				pos: position{line: 1100, col: 5, offset: 31389},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1100, col: 5, offset: 31389},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 31395},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1104, col: 1, offset: 31491},
			expr: &actionExpr{
				pos: position{line: 1105, col: 5, offset: 31504},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 5, offset: 31504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1105, col: 5, offset: 31504},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 11, offset: 31510},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1105, col: 16, offset: 31515},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1105, col: 21, offset: 31520},
								expr: &ruleRefExpr{
									pos:  position{line: 1105, col: 21, offset: 31520},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1109, col: 1, offset: 31614},
			expr: &actionExpr{
				pos: position{line: 1109, col: 16, offset: 31629},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 16, offset: 31629},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1109, col: 16, offset: 31629},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1109, col: 19, offset: 31632},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1109, col: 23, offset: 31636},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1109, col: 26, offset: 31639},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 30, offset: 31643},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1111, col: 1, offset: 31669},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 31685},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 31685},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 31685},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 5, offset: 31685},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 9, offset: 31689},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 12, offset: 31692},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 19, offset: 31699},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 33, offset: 31713},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1112, col: 36, offset: 31716},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 31813},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 31813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1115, col: 5, offset: 31813},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1115, col: 9, offset: 31817},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 12, offset: 31820},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1115, col: 16, offset: 31824},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1115, col: 21, offset: 31829},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1115, col: 24, offset: 31832},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 31923},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 31923},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 31923},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 10, offset: 31928},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 13, offset: 31931},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 17, offset: 31935},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 22, offset: 31940},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1118, col: 25, offset: 31943},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 32033},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 32033},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1121, col: 5, offset: 32033},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1121, col: 10, offset: 32038},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 13, offset: 32041},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 21, offset: 32049},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1121, col: 26, offset: 32054},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1121, col: 29, offset: 32057},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1121, col: 33, offset: 32061},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 36, offset: 32064},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 44, offset: 32072},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1121, col: 49, offset: 32077},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1121, col: 52, offset: 32080},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1125, col: 1, offset: 32196},
			expr: &actionExpr{
				pos: position{line: 1126, col: 5, offset: 32216},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1126, col: 5, offset: 32216},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1126, col: 7, offset: 32218},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1133, col: 1, offset: 32434},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 32459},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 32459},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 32459},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 5, offset: 32459},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 9, offset: 32463},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1134, col: 11, offset: 32465},
										expr: &ruleRefExpr{
											pos:  position{line: 1134, col: 11, offset: 32465},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1134, col: 37, offset: 32491},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 32517},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1135, col: 5, offset: 32517},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1135, col: 5, offset: 32517},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 9, offset: 32521},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1135, col: 11, offset: 32523},
										expr: &ruleRefExpr{
											pos:  position{line: 1135, col: 11, offset: 32523},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1135, col: 37, offset: 32549},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1137, col: 1, offset: 32572},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 5, offset: 32601},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1138, col: 5, offset: 32601},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 32618},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1139, col: 5, offset: 32618},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1139, col: 7, offset: 32620},
								expr: &ruleRefExpr{
									pos:  position{line: 1139, col: 7, offset: 32620},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1143, col: 1, offset: 32757},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 32786},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 32786},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 32786},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 5, offset: 32786},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 10, offset: 32791},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1144, col: 12, offset: 32793},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 32820},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 32820},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1145, col: 5, offset: 32820},
									expr: &litMatcher{
										pos:        position{line: 1145, col: 7, offset: 32822},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 13, offset: 32828},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1145, col: 15, offset: 32830},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1147, col: 1, offset: 32866},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 5, offset: 32895},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 5, offset: 32895},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 32912},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 32912},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1149, col: 7, offset: 32914},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 7, offset: 32914},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1153, col: 1, offset: 33051},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 33080},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1154, col: 5, offset: 33080},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1154, col: 5, offset: 33080},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1154, col: 5, offset: 33080},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 10, offset: 33085},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1154, col: 12, offset: 33087},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1155, col: 5, offset: 33114},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1155, col: 5, offset: 33114},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1155, col: 5, offset: 33114},
									expr: &litMatcher{
										pos:        position{line: 1155, col: 7, offset: 33116},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 13, offset: 33122},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1155, col: 15, offset: 33124},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1157, col: 1, offset: 33160},
			expr: &actionExpr{
				pos: position{line: 1158, col: 5, offset: 33177},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1158, col: 5, offset: 33177},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1158, col: 5, offset: 33177},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1158, col: 10, offset: 33182},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 13, offset: 33185},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1158, col: 15, offset: 33187},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1158, col: 20, offset: 33192},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1158, col: 23, offset: 33195},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1173, col: 1, offset: 33491},
			expr: &actionExpr{
				pos: position{line: 1174, col: 5, offset: 33509},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1174, col: 9, offset: 33513},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1174, col: 9, offset: 33513},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 19, offset: 33523},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 30, offset: 33534},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 41, offset: 33545},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 9, offset: 33562},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 18, offset: 33571},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 28, offset: 33581},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 38, offset: 33591},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 9, offset: 33607},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 21, offset: 33619},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 33, offset: 33631},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1177, col: 9, offset: 33649},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1177, col: 18, offset: 33658},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1178, col: 9, offset: 33675},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1178, col: 22, offset: 33688},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1179, col: 9, offset: 33703},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1180, col: 9, offset: 33719},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1180, col: 16, offset: 33726},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1181, col: 9, offset: 33740},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1181, col: 18, offset: 33749},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1185, col: 1, offset: 33864},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 5, offset: 33882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1186, col: 5, offset: 33882},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1186, col: 5, offset: 33882},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1186, col: 5, offset: 33882},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 11, offset: 33888},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 21, offset: 33898},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1186, col: 26, offset: 33903},
										expr: &ruleRefExpr{
											pos:  position{line: 1186, col: 26, offset: 33903},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1189, col: 5, offset: 34005},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1189, col: 5, offset: 34005},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1191, col: 1, offset: 34029},
			expr: &actionExpr{
				pos: position{line: 1191, col: 21, offset: 34049},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 21, offset: 34049},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1191, col: 21, offset: 34049},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1191, col: 24, offset: 34052},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1191, col: 28, offset: 34056},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 31, offset: 34059},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 35, offset: 34063},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1193, col: 1, offset: 34094},
			expr: &actionExpr{
				pos: position{line: 1194, col: 5, offset: 34108},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1194, col: 5, offset: 34108},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1194, col: 5, offset: 34108},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1194, col: 10, offset: 34113},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1194, col: 20, offset: 34123},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1194, col: 23, offset: 34126},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1194, col: 27, offset: 34130},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 30, offset: 34133},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1194, col: 34, offset: 34137},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1198, col: 1, offset: 34219},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 5, offset: 34233},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 5, offset: 34233},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 5, offset: 34252},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1202, col: 1, offset: 34266},
			expr: &actionExpr{
				pos: position{line: 1202, col: 12, offset: 34277},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 12, offset: 34277},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1202, col: 13, offset: 34278},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1202, col: 13, offset: 34278},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1202, col: 21, offset: 34286},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1202, col: 28, offset: 34293},
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 29, offset: 34294},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1203, col: 1, offset: 34331},
			expr: &actionExpr{
				pos: position{line: 1203, col: 11, offset: 34341},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 11, offset: 34341},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1203, col: 12, offset: 34342},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1203, col: 12, offset: 34342},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1203, col: 19, offset: 34349},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1203, col: 25, offset: 34355},
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 26, offset: 34356},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1204, col: 1, offset: 34392},
			expr: &actionExpr{
				pos: position{line: 1204, col: 11, offset: 34402},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 11, offset: 34402},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1204, col: 11, offset: 34402},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1204, col: 16, offset: 34407},
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 17, offset: 34408},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1205, col: 1, offset: 34444},
			expr: &actionExpr{
				pos: position{line: 1205, col: 12, offset: 34455},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1205, col: 12, offset: 34455},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1205, col: 13, offset: 34456},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1205, col: 13, offset: 34456},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1205, col: 21, offset: 34464},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1205, col: 28, offset: 34471},
							expr: &ruleRefExpr{
								pos:  position{line: 1205, col: 29, offset: 34472},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1206, col: 1, offset: 34509},
			expr: &actionExpr{
				pos: position{line: 1206, col: 11, offset: 34519},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 11, offset: 34519},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1206, col: 11, offset: 34519},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1206, col: 16, offset: 34524},
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 17, offset: 34525},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1208, col: 1, offset: 34562},
			expr: &charClassMatcher{
				pos:        position{line: 1208, col: 19, offset: 34580},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1210, col: 1, offset: 34592},
			expr: &choiceExpr{
				pos: position{line: 1210, col: 18, offset: 34609},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1210, col: 18, offset: 34609},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1210, col: 36, offset: 34627},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1212, col: 1, offset: 34634},
			expr: &actionExpr{
				pos: position{line: 1213, col: 5, offset: 34649},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1213, col: 5, offset: 34649},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1213, col: 8, offset: 34652},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1215, col: 1, offset: 34733},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 5, offset: 34752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 34752},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 34752},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1216, col: 5, offset: 34752},
									expr: &seqExpr{
										pos: position{line: 1216, col: 7, offset: 34754},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1216, col: 7, offset: 34754},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1216, col: 15, offset: 34762},
												expr: &ruleRefExpr{
													pos:  position{line: 1216, col: 16, offset: 34763},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1216, col: 32, offset: 34779},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1216, col: 48, offset: 34795},
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 48, offset: 34795},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1217, col: 5, offset: 34846},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1217, col: 5, offset: 34846},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 34885},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1218, col: 5, offset: 34885},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1218, col: 5, offset: 34885},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1218, col: 10, offset: 34890},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1218, col: 13, offset: 34893},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1220, col: 5, offset: 34984},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1220, col: 5, offset: 34984},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 35026},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1221, col: 5, offset: 35026},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1221, col: 5, offset: 35026},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1221, col: 8, offset: 35029},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1221, col: 26, offset: 35047},
									expr: &seqExpr{
										pos: position{line: 1221, col: 28, offset: 35049},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1221, col: 28, offset: 35049},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1221, col: 31, offset: 35052},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1223, col: 1, offset: 35077},
			expr: &actionExpr{
				pos: position{line: 1224, col: 5, offset: 35097},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 5, offset: 35097},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1224, col: 5, offset: 35097},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 11, offset: 35103},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1224, col: 26, offset: 35118},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1224, col: 31, offset: 35123},
								expr: &actionExpr{
									pos: position{line: 1224, col: 32, offset: 35124},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1224, col: 32, offset: 35124},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1224, col: 32, offset: 35124},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1224, col: 35, offset: 35127},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1224, col: 39, offset: 35131},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1224, col: 42, offset: 35134},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1224, col: 45, offset: 35137},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1228, col: 1, offset: 35253},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 35265},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1229, col: 5, offset: 35265},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 5, offset: 35284},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 5, offset: 35300},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 5, offset: 35308},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1234, col: 1, offset: 35318},
			expr: &actionExpr{
				pos: position{line: 1235, col: 5, offset: 35327},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 5, offset: 35327},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1235, col: 5, offset: 35327},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1235, col: 14, offset: 35336},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1235, col: 18, offset: 35340},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1239, col: 1, offset: 35460},
			expr: &seqExpr{
				pos: position{line: 1239, col: 12, offset: 35471},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 12, offset: 35471},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1239, col: 15, offset: 35474},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 19, offset: 35478},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1239, col: 22, offset: 35481},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 26, offset: 35485},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1241, col: 1, offset: 35489},
			expr: &seqExpr{
				pos: position{line: 1241, col: 6, offset: 35494},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1241, col: 6, offset: 35494},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1241, col: 11, offset: 35499},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1241, col: 16, offset: 35504},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1241, col: 21, offset: 35509},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1242, col: 1, offset: 35515},
			expr: &seqExpr{
				pos: position{line: 1242, col: 6, offset: 35520},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1242, col: 6, offset: 35520},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1242, col: 11, offset: 35525},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1244, col: 1, offset: 35532},
			expr: &seqExpr{
				pos: position{line: 1244, col: 12, offset: 35543},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1244, col: 12, offset: 35543},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 24, offset: 35555},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1246, col: 1, offset: 35567},
			expr: &seqExpr{
				pos: position{line: 1246, col: 15, offset: 35581},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1246, col: 15, offset: 35581},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1246, col: 18, offset: 35584},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 22, offset: 35588},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1246, col: 25, offset: 35591},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 29, offset: 35595},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1246, col: 32, offset: 35598},
						expr: &seqExpr{
							pos: position{line: 1246, col: 33, offset: 35599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1246, col: 33, offset: 35599},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1246, col: 37, offset: 35603},
									expr: &charClassMatcher{
										pos:        position{line: 1246, col: 37, offset: 35603},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1248, col: 1, offset: 35613},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 5, offset: 35628},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1249, col: 5, offset: 35628},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1250, col: 5, offset: 35636},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1250, col: 6, offset: 35637},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1250, col: 6, offset: 35637},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1250, col: 12, offset: 35643},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1250, col: 17, offset: 35648},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1250, col: 20, offset: 35651},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1250, col: 24, offset: 35655},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1250, col: 27, offset: 35658},
								expr: &seqExpr{
									pos: position{line: 1250, col: 28, offset: 35659},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1250, col: 28, offset: 35659},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1250, col: 32, offset: 35663},
											expr: &charClassMatcher{
												pos:        position{line: 1250, col: 32, offset: 35663},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1252, col: 1, offset: 35673},
			expr: &actionExpr{
				pos: position{line: 1253, col: 5, offset: 35686},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1253, col: 5, offset: 35686},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1253, col: 5, offset: 35686},
							expr: &litMatcher{
								pos:        position{line: 1253, col: 5, offset: 35686},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1253, col: 10, offset: 35691},
							expr: &seqExpr{
								pos: position{line: 1253, col: 11, offset: 35692},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1253, col: 11, offset: 35692},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1253, col: 19, offset: 35700},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1257, col: 1, offset: 35826},
			expr: &seqExpr{
				pos: position{line: 1257, col: 11, offset: 35836},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 35836},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1257, col: 16, offset: 35841},
						expr: &seqExpr{
							pos: position{line: 1257, col: 17, offset: 35842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1257, col: 17, offset: 35842},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1257, col: 21, offset: 35846},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1259, col: 1, offset: 35854},
			expr: &choiceExpr{
				pos: position{line: 1260, col: 5, offset: 35867},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 35867},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1261, col: 5, offset: 35876},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1262, col: 5, offset: 35885},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1263, col: 5, offset: 35894},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1264, col: 5, offset: 35902},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1265, col: 5, offset: 35910},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1266, col: 5, offset: 35918},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1267, col: 5, offset: 35926},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1268, col: 5, offset: 35934},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1270, col: 1, offset: 35939},
			expr: &actionExpr{
				pos: position{line: 1271, col: 5, offset: 35946},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1271, col: 5, offset: 35946},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1271, col: 5, offset: 35946},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1271, col: 10, offset: 35951},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1271, col: 14, offset: 35955},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1271, col: 19, offset: 35960},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1271, col: 23, offset: 35964},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1271, col: 28, offset: 35969},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1271, col: 32, offset: 35973},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1273, col: 1, offset: 36010},
			expr: &actionExpr{
				pos: position{line: 1274, col: 5, offset: 36018},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1274, col: 5, offset: 36018},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1274, col: 5, offset: 36018},
							expr: &seqExpr{
								pos: position{line: 1274, col: 7, offset: 36020},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1274, col: 7, offset: 36020},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1274, col: 11, offset: 36024},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 15, offset: 36028},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1274, col: 19, offset: 36032},
										expr: &choiceExpr{
											pos: position{line: 1274, col: 21, offset: 36034},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1274, col: 21, offset: 36034},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1274, col: 32, offset: 36045},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 38, offset: 36051},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 40, offset: 36053},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1278, col: 1, offset: 36217},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 36235},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1279, col: 5, offset: 36235},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1279, col: 5, offset: 36235},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1279, col: 5, offset: 36235},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1279, col: 7, offset: 36237},
										expr: &ruleRefExpr{
											pos:  position{line: 1279, col: 7, offset: 36237},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 17, offset: 36247},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 19, offset: 36249},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1282, col: 5, offset: 36313},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1282, col: 5, offset: 36313},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1282, col: 5, offset: 36313},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1282, col: 7, offset: 36315},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 11, offset: 36319},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1282, col: 13, offset: 36321},
										expr: &ruleRefExpr{
											pos:  position{line: 1282, col: 13, offset: 36321},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1282, col: 23, offset: 36331},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 28, offset: 36336},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1282, col: 30, offset: 36338},
										expr: &ruleRefExpr{
											pos:  position{line: 1282, col: 30, offset: 36338},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 40, offset: 36348},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1282, col: 42, offset: 36350},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 36449},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1285, col: 5, offset: 36449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1285, col: 5, offset: 36449},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1285, col: 10, offset: 36454},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1285, col: 12, offset: 36456},
										expr: &ruleRefExpr{
											pos:  position{line: 1285, col: 12, offset: 36456},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1285, col: 22, offset: 36466},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1285, col: 24, offset: 36468},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1288, col: 5, offset: 36539},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1288, col: 5, offset: 36539},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1288, col: 5, offset: 36539},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1288, col: 7, offset: 36541},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1288, col: 11, offset: 36545},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1288, col: 13, offset: 36547},
										expr: &ruleRefExpr{
											pos:  position{line: 1288, col: 13, offset: 36547},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1288, col: 23, offset: 36557},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 36625},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1291, col: 5, offset: 36625},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1295, col: 1, offset: 36662},
			expr: &choiceExpr{
				pos: position{line: 1296, col: 5, offset: 36674},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1296, col: 5, offset: 36674},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 5, offset: 36681},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1299, col: 1, offset: 36686},
			expr: &actionExpr{
				pos: position{line: 1299, col: 12, offset: 36697},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 12, offset: 36697},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1299, col: 12, offset: 36697},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 16, offset: 36701},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 18, offset: 36703},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1301, col: 1, offset: 36741},
			expr: &actionExpr{
				pos: position{line: 1301, col: 12, offset: 36752},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 12, offset: 36752},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1301, col: 12, offset: 36752},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 14, offset: 36754},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1301, col: 18, offset: 36758},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1303, col: 1, offset: 36796},
			expr: &actionExpr{
				pos: position{line: 1304, col: 5, offset: 36807},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 5, offset: 36807},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1304, col: 5, offset: 36807},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 7, offset: 36809},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1304, col: 10, offset: 36812},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 14, offset: 36816},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 16, offset: 36818},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1308, col: 1, offset: 36891},
			expr: &actionExpr{
				pos: position{line: 1309, col: 5, offset: 36902},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1309, col: 5, offset: 36902},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1309, col: 5, offset: 36902},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1309, col: 7, offset: 36904},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1309, col: 11, offset: 36908},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1309, col: 15, offset: 36912},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1309, col: 17, offset: 36914},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1313, col: 1, offset: 36977},
			expr: &actionExpr{
				pos: position{line: 1314, col: 4, offset: 36985},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1314, col: 4, offset: 36985},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1314, col: 6, offset: 36987},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1316, col: 1, offset: 37027},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 5, offset: 37041},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 5, offset: 37041},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 5, offset: 37056},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1320, col: 1, offset: 37072},
			expr: &actionExpr{
				pos: position{line: 1320, col: 14, offset: 37085},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1320, col: 14, offset: 37085},
					expr: &charClassMatcher{
						pos:        position{line: 1320, col: 14, offset: 37085},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1322, col: 1, offset: 37124},
			expr: &actionExpr{
				pos: position{line: 1323, col: 5, offset: 37143},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 5, offset: 37143},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1323, col: 5, offset: 37143},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1323, col: 9, offset: 37147},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1325, col: 1, offset: 37190},
			expr: &choiceExpr{
				pos: position{line: 1326, col: 5, offset: 37206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 37206},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1326, col: 5, offset: 37206},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1326, col: 5, offset: 37206},
									expr: &litMatcher{
										pos:        position{line: 1326, col: 5, offset: 37206},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1326, col: 10, offset: 37211},
									expr: &charClassMatcher{
										pos:        position{line: 1326, col: 10, offset: 37211},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1326, col: 17, offset: 37218},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1326, col: 21, offset: 37222},
									expr: &charClassMatcher{
										pos:        position{line: 1326, col: 21, offset: 37222},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1326, col: 28, offset: 37229},
									expr: &ruleRefExpr{
										pos:  position{line: 1326, col: 28, offset: 37229},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1329, col: 5, offset: 37288},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1329, col: 5, offset: 37288},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1329, col: 5, offset: 37288},
									expr: &litMatcher{
										pos:        position{line: 1329, col: 5, offset: 37288},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1329, col: 10, offset: 37293},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1329, col: 14, offset: 37297},
									expr: &charClassMatcher{
										pos:        position{line: 1329, col: 14, offset: 37297},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1329, col: 21, offset: 37304},
									expr: &ruleRefExpr{
										pos:  position{line: 1329, col: 21, offset: 37304},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1332, col: 5, offset: 37363},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1332, col: 6, offset: 37364},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1332, col: 6, offset: 37364},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1332, col: 12, offset: 37370},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1335, col: 1, offset: 37413},
			expr: &seqExpr{
				pos: position{line: 1335, col: 16, offset: 37428},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1335, col: 16, offset: 37428},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1335, col: 21, offset: 37433},
						expr: &charClassMatcher{
							pos:        position{line: 1335, col: 21, offset: 37433},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 27, offset: 37439},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1337, col: 1, offset: 37451},
			expr: &litMatcher{
				pos:        position{line: 1337, col: 7, offset: 37457},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1339, col: 1, offset: 37464},
			expr: &seqExpr{
				pos: position{line: 1339, col: 12, offset: 37475},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1339, col: 12, offset: 37475},
						expr: &choiceExpr{
							pos: position{line: 1339, col: 13, offset: 37476},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1339, col: 13, offset: 37476},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1339, col: 19, offset: 37482},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1339, col: 25, offset: 37488},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1341, col: 1, offset: 37495},
			expr: &actionExpr{
				pos: position{line: 1341, col: 7, offset: 37501},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1341, col: 7, offset: 37501},
					expr: &ruleRefExpr{
						pos:  position{line: 1341, col: 7, offset: 37501},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1343, col: 1, offset: 37543},
			expr: &charClassMatcher{
				pos:        position{line: 1343, col: 12, offset: 37554},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1345, col: 1, offset: 37567},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 5, offset: 37584},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1346, col: 5, offset: 37584},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1346, col: 5, offset: 37584},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 5, offset: 37584},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1346, col: 9, offset: 37588},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1346, col: 11, offset: 37590},
										expr: &ruleRefExpr{
											pos:  position{line: 1346, col: 11, offset: 37590},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 29, offset: 37608},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1347, col: 5, offset: 37645},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1347, col: 5, offset: 37645},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1347, col: 5, offset: 37645},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1347, col: 9, offset: 37649},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1347, col: 11, offset: 37651},
										expr: &ruleRefExpr{
											pos:  position{line: 1347, col: 11, offset: 37651},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1347, col: 29, offset: 37669},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1349, col: 1, offset: 37703},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 5, offset: 37724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1350, col: 5, offset: 37724},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1350, col: 5, offset: 37724},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1350, col: 5, offset: 37724},
									expr: &choiceExpr{
										pos: position{line: 1350, col: 7, offset: 37726},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1350, col: 7, offset: 37726},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1350, col: 13, offset: 37732},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1350, col: 26, offset: 37745,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1351, col: 5, offset: 37782},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1351, col: 5, offset: 37782},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1351, col: 5, offset: 37782},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1351, col: 10, offset: 37787},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1351, col: 12, offset: 37789},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1353, col: 1, offset: 37823},
			expr: &actionExpr{
				pos: position{line: 1354, col: 5, offset: 37835},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 5, offset: 37835},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1354, col: 5, offset: 37835},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 10, offset: 37840},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 23, offset: 37853},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1354, col: 28, offset: 37858},
								expr: &ruleRefExpr{
									pos:  position{line: 1354, col: 28, offset: 37858},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1356, col: 1, offset: 37920},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 5, offset: 37937},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1357, col: 5, offset: 37937},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 5, offset: 37954},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1360, col: 1, offset: 37966},
			expr: &actionExpr{
				pos: position{line: 1360, col: 16, offset: 37981},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1360, col: 16, offset: 37981},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1362, col: 1, offset: 38030},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 5, offset: 38046},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1363, col: 5, offset: 38046},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1364, col: 5, offset: 38063},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1366, col: 1, offset: 38070},
			expr: &actionExpr{
				pos: position{line: 1366, col: 14, offset: 38083},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1366, col: 14, offset: 38083},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1366, col: 14, offset: 38083},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 19, offset: 38088},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1366, col: 22, offset: 38091},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1366, col: 22, offset: 38091},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1366, col: 38, offset: 38107},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1368, col: 1, offset: 38142},
			expr: &actionExpr{
				pos: position{line: 1369, col: 5, offset: 38158},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 5, offset: 38158},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1369, col: 5, offset: 38158},
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 6, offset: 38159},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1369, col: 22, offset: 38175},
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 23, offset: 38176},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 35, offset: 38188},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1369, col: 40, offset: 38193},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 50, offset: 38203},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1369, col: 55, offset: 38208},
								expr: &ruleRefExpr{
									pos:  position{line: 1369, col: 55, offset: 38208},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1373, col: 1, offset: 38277},
			expr: &choiceExpr{
				pos: position{line: 1373, col: 19, offset: 38295},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1373, col: 19, offset: 38295},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1373, col: 34, offset: 38310},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1373, col: 34, offset: 38310},
								expr: &litMatcher{
									pos:        position{line: 1373, col: 34, offset: 38310},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1373, col: 39, offset: 38315},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1374, col: 1, offset: 38327},
			expr: &seqExpr{
				pos: position{line: 1374, col: 15, offset: 38341},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1374, col: 15, offset: 38341},
						expr: &ruleRefExpr{
							pos:  position{line: 1374, col: 15, offset: 38341},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1374, col: 28, offset: 38354},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1376, col: 1, offset: 38359},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 38373},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1377, col: 5, offset: 38373},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 5, offset: 38390},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1379, col: 5, offset: 38402},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1379, col: 5, offset: 38402},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1381, col: 1, offset: 38427},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 38440},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1382, col: 5, offset: 38440},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1383, col: 5, offset: 38454},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1385, col: 1, offset: 38461},
			expr: &actionExpr{
				pos: position{line: 1385, col: 11, offset: 38471},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1385, col: 11, offset: 38471},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1385, col: 11, offset: 38471},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1385, col: 16, offset: 38476},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1385, col: 19, offset: 38479},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1385, col: 19, offset: 38479},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 32, offset: 38492},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1387, col: 1, offset: 38527},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 5, offset: 38542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1388, col: 5, offset: 38542},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1388, col: 5, offset: 38542},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 38570},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1389, col: 5, offset: 38570},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1390, col: 5, offset: 38600},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1392, col: 1, offset: 38606},
			expr: &choiceExpr{
				pos: position{line: 1393, col: 5, offset: 38627},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1393, col: 5, offset: 38627},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1393, col: 5, offset: 38627},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1393, col: 5, offset: 38627},
									expr: &choiceExpr{
										pos: position{line: 1393, col: 7, offset: 38629},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1393, col: 7, offset: 38629},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1393, col: 13, offset: 38635},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1393, col: 26, offset: 38648,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1394, col: 5, offset: 38685},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1394, col: 5, offset: 38685},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1394, col: 5, offset: 38685},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1394, col: 10, offset: 38690},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1394, col: 12, offset: 38692},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1396, col: 1, offset: 38726},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 5, offset: 38745},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 5, offset: 38745},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 5, offset: 38766},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1400, col: 1, offset: 38781},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 5, offset: 38802},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1401, col: 5, offset: 38802},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 38810},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1402, col: 5, offset: 38810},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1403, col: 5, offset: 38850},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1404, col: 5, offset: 38859},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1404, col: 5, offset: 38859},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1405, col: 5, offset: 38888},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1405, col: 5, offset: 38888},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1406, col: 5, offset: 38917},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1406, col: 5, offset: 38917},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1407, col: 5, offset: 38946},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1407, col: 5, offset: 38946},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1408, col: 5, offset: 38975},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1408, col: 5, offset: 38975},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 39004},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 39004},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1411, col: 1, offset: 39030},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 5, offset: 39048},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1412, col: 5, offset: 39048},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1412, col: 5, offset: 39048},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1413, col: 5, offset: 39076},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1413, col: 5, offset: 39076},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1414, col: 5, offset: 39104},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1416, col: 1, offset: 39110},
			expr: &choiceExpr{
				pos: position{line: 1417, col: 5, offset: 39128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1417, col: 5, offset: 39128},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1417, col: 5, offset: 39128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1417, col: 5, offset: 39128},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1417, col: 9, offset: 39132},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1417, col: 16, offset: 39139},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1417, col: 16, offset: 39139},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1417, col: 25, offset: 39148},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1417, col: 34, offset: 39157},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1417, col: 43, offset: 39166},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1420, col: 5, offset: 39229},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1420, col: 5, offset: 39229},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1420, col: 5, offset: 39229},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1420, col: 9, offset: 39233},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1420, col: 13, offset: 39237},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1420, col: 20, offset: 39244},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1420, col: 20, offset: 39244},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 29, offset: 39253},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 29, offset: 39253},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 39, offset: 39263},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 39, offset: 39263},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 49, offset: 39273},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 49, offset: 39273},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 59, offset: 39283},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 59, offset: 39283},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1420, col: 69, offset: 39293},
												expr: &ruleRefExpr{
													pos:  position{line: 1420, col: 69, offset: 39293},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1420, col: 80, offset: 39304},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1424, col: 1, offset: 39358},
			expr: &actionExpr{
				pos: position{line: 1425, col: 5, offset: 39376},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 5, offset: 39376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1425, col: 5, offset: 39376},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1425, col: 9, offset: 39380},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 14, offset: 39385},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1425, col: 25, offset: 39396},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1425, col: 29, offset: 39400},
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 30, offset: 39401},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1427, col: 1, offset: 39436},
			expr: &actionExpr{
				pos: position{line: 1428, col: 5, offset: 39451},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1428, col: 5, offset: 39451},
					expr: &choiceExpr{
						pos: position{line: 1428, col: 6, offset: 39452},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1428, col: 6, offset: 39452},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1428, col: 15, offset: 39461},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1428, col: 15, offset: 39461},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1428, col: 20, offset: 39466,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1430, col: 1, offset: 39502},
			expr: &charClassMatcher{
				pos:        position{line: 1431, col: 5, offset: 39518},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1433, col: 1, offset: 39533},
			expr: &oneOrMoreExpr{
				pos: position{line: 1433, col: 5, offset: 39537},
				expr: &ruleRefExpr{
					pos:  position{line: 1433, col: 5, offset: 39537},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1435, col: 1, offset: 39548},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1435, col: 6, offset: 39553},
				expr: &ruleRefExpr{
					pos:  position{line: 1435, col: 6, offset: 39553},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1437, col: 1, offset: 39564},
			expr: &choiceExpr{
				pos: position{line: 1438, col: 5, offset: 39577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1438, col: 5, offset: 39577},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1439, col: 5, offset: 39592},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 5, offset: 39611},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1442, col: 1, offset: 39620},
			expr: &anyMatcher{
				line: 1443, col: 5, offset: 39640,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1445, col: 1, offset: 39643},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 5, offset: 39671},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1446, col: 5, offset: 39671},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1447, col: 5, offset: 39680},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1448, col: 5, offset: 39689},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1449, col: 5, offset: 39698},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1450, col: 5, offset: 39706},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 5, offset: 39719},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1453, col: 1, offset: 39729},
			expr: &charClassMatcher{
				pos:        position{line: 1454, col: 5, offset: 39748},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1460, col: 1, offset: 40078},
			expr: &ruleRefExpr{
				pos:  position{line: 1463, col: 5, offset: 40149},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1465, col: 1, offset: 40168},
			expr: &seqExpr{
				pos: position{line: 1466, col: 5, offset: 40189},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1466, col: 5, offset: 40189},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1466, col: 10, offset: 40194},
						expr: &seqExpr{
							pos: position{line: 1466, col: 11, offset: 40195},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1466, col: 11, offset: 40195},
									expr: &litMatcher{
										pos:        position{line: 1466, col: 12, offset: 40196},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1466, col: 17, offset: 40201},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1466, col: 35, offset: 40219},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1468, col: 1, offset: 40225},
			expr: &seqExpr{
				pos: position{line: 1469, col: 5, offset: 40247},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1469, col: 5, offset: 40247},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1469, col: 10, offset: 40252},
						expr: &seqExpr{
							pos: position{line: 1469, col: 11, offset: 40253},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1469, col: 11, offset: 40253},
									expr: &ruleRefExpr{
										pos:  position{line: 1469, col: 12, offset: 40254},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1469, col: 27, offset: 40269},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1471, col: 1, offset: 40288},
			expr: &seqExpr{
				pos: position{line: 1471, col: 7, offset: 40294},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1471, col: 7, offset: 40294},
						expr: &ruleRefExpr{
							pos:  position{line: 1471, col: 7, offset: 40294},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 19, offset: 40306},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1473, col: 1, offset: 40322},
			expr: &choiceExpr{
				pos: position{line: 1473, col: 7, offset: 40328},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1473, col: 7, offset: 40328},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 11, offset: 40332},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1475, col: 1, offset: 40337},
			expr: &notExpr{
				pos: position{line: 1475, col: 7, offset: 40343},
				expr: &anyMatcher{
					line: 1475, col: 8, offset: 40344,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1477, col: 1, offset: 40347},
			expr: &notExpr{
				pos: position{line: 1477, col: 8, offset: 40354},
				expr: &ruleRefExpr{
					pos:  position{line: 1477, col: 9, offset: 40355},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOpDecl1(name, params, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "OpDecl",

		"name": name,

		"params": params,

		"body": body}, nil

}

func (p *parser) callonOpDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDecl1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onParams7(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonParams7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParams7(stack["p"])
}

func (c *current) onParams1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParams1(stack["first"], stack["rest"])
}

func (c *current) onParam2(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstParam", "name": id}, nil
}

func (p *parser) callonParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam2(stack["id"])
}

func (c *current) onParam8() (interface{}, error) {
	return map[string]interface{}{"kind": "SpreadParam"}, nil
}

func (p *parser) callonParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam8()
}

func (c *current) onParam10(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "NamedParam", "name": id}, nil
}

func (p *parser) callonParam10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam10(stack["id"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName4() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName4()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
