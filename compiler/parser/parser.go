// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 4, col: 1, offset: 23},
			expr: &choiceExpr{
				pos: position{line: 5, col: 5, offset: 33},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 5, col: 5, offset: 33},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 5, col: 5, offset: 33},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 5, col: 5, offset: 33},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 5, col: 8, offset: 36},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 5, col: 14, offset: 42},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 20, offset: 48},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 23, offset: 51},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 6, col: 5, offset: 96},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 6, col: 5, offset: 96},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 6, col: 5, offset: 96},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 6, col: 8, offset: 99},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 6, col: 12, offset: 103},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 16, offset: 107},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 19, offset: 110},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 7, col: 1, offset: 134},
			expr: &actionExpr{
				pos: position{line: 8, col: 5, offset: 144},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 8, col: 5, offset: 144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 8, col: 5, offset: 144},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 8, col: 11, offset: 150},
								expr: &ruleRefExpr{
									pos:  position{line: 8, col: 11, offset: 150},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 17, offset: 156},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 8, col: 22, offset: 161},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 11, col: 1, offset: 261},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 269},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 269},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 11, offset: 275},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 21, offset: 285},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 12, col: 26, offset: 290},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 26, offset: 290},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 15, col: 1, offset: 381},
			expr: &actionExpr{
				pos: position{line: 15, col: 11, offset: 391},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 15, col: 11, offset: 391},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 15, col: 11, offset: 391},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 15, col: 14, offset: 394},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 15, col: 19, offset: 399},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 15, col: 22, offset: 402},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 15, col: 24, offset: 404},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 16, col: 1, offset: 432},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 441},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 441},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 441},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 17, col: 8, offset: 444},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 17, col: 8, offset: 444},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 20, offset: 456},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 30, offset: 466},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 18, col: 1, offset: 486},
			expr: &choiceExpr{
				pos: position{line: 19, col: 5, offset: 500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 19, col: 5, offset: 500},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 19, col: 5, offset: 500},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 19, col: 5, offset: 500},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 13, offset: 508},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 19, col: 15, offset: 510},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 18, offset: 513},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 33, offset: 528},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 19, col: 36, offset: 531},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 40, offset: 535},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 19, col: 43, offset: 538},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 48, offset: 543},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 22, col: 5, offset: 648},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 22, col: 5, offset: 648},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 22, col: 5, offset: 648},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 12, offset: 655},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 22, col: 14, offset: 657},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 22, col: 18, offset: 661},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 22, col: 18, offset: 661},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 22, col: 35, offset: 678},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 49, offset: 692},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 22, col: 52, offset: 695},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 56, offset: 699},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 22, col: 59, offset: 702},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 22, col: 63, offset: 706},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 25, col: 1, offset: 923},
			expr: &actionExpr{
				pos: position{line: 26, col: 5, offset: 936},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 26, col: 5, offset: 936},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 26, col: 5, offset: 936},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 12, offset: 943},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 14, offset: 945},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 17, offset: 948},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 32, offset: 963},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 35, offset: 966},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 39, offset: 970},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 42, offset: 973},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 49, offset: 980},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 65, offset: 996},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 68, offset: 999},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 72, offset: 1003},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 75, offset: 1006},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 79, offset: 1010},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 82, offset: 1013},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 86, offset: 1017},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 89, offset: 1020},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 94, offset: 1025},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 99, offset: 1030},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 102, offset: 1033},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 29, col: 1, offset: 1150},
			expr: &choiceExpr{
				pos: position{line: 30, col: 5, offset: 1164},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 1164},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 1164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 1164},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 1171},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 15, offset: 1174},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 30, col: 19, offset: 1178},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 30, col: 25, offset: 1184},
										expr: &ruleRefExpr{
											pos:  position{line: 30, col: 25, offset: 1184},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 30, offset: 1189},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 33, offset: 1192},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 1285},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 33, col: 5, offset: 1285},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 33, col: 5, offset: 1285},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 14, offset: 1294},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 33, col: 16, offset: 1296},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 33, col: 21, offset: 1301},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 26, offset: 1306},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 33, col: 28, offset: 1308},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 33, col: 32, offset: 1312},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 33, col: 38, offset: 1318},
										expr: &ruleRefExpr{
											pos:  position{line: 33, col: 38, offset: 1318},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 49, offset: 1329},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 33, col: 52, offset: 1332},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 36, col: 5, offset: 1437},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 36, col: 5, offset: 1437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 36, col: 5, offset: 1437},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 14, offset: 1446},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 17, offset: 1449},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 36, col: 21, offset: 1453},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 36, col: 27, offset: 1459},
										expr: &ruleRefExpr{
											pos:  position{line: 36, col: 27, offset: 1459},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 38, offset: 1470},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 41, offset: 1473},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 5, offset: 1577},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 39, col: 5, offset: 1577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 39, col: 5, offset: 1577},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 12, offset: 1584},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 15, offset: 1587},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 39, col: 19, offset: 1591},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 39, col: 26, offset: 1598},
										expr: &ruleRefExpr{
											pos:  position{line: 39, col: 26, offset: 1598},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 35, offset: 1607},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 38, offset: 1610},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 42, col: 5, offset: 1701},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 42, col: 5, offset: 1701},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 42, col: 5, offset: 1701},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 9, offset: 1705},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 42, col: 12, offset: 1708},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 42, col: 18, offset: 1714},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 24, offset: 1720},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 42, col: 27, offset: 1723},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 43, col: 5, offset: 1753},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 43, col: 8, offset: 1756},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 44, col: 5, offset: 1769},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 44, col: 5, offset: 1769},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 44, col: 5, offset: 1769},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 7, offset: 1771},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 44, col: 20, offset: 1784},
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 21, offset: 1785},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1815},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1815},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 45, col: 5, offset: 1815},
									expr: &seqExpr{
										pos: position{line: 45, col: 7, offset: 1817},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 45, col: 7, offset: 1817},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 45, col: 16, offset: 1826},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 25, offset: 1835},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 27, offset: 1837},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 45, col: 39, offset: 1849},
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 40, offset: 1850},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1880},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1880},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1880},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1889},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 46, col: 16, offset: 1891},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 21, offset: 1896},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1995},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 49, col: 5, offset: 1995},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 49, col: 10, offset: 2000},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 52, col: 5, offset: 2099},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 52, col: 5, offset: 2099},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 10, offset: 2104},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 2192},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 55, col: 5, offset: 2192},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 10, offset: 2197},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 58, col: 1, offset: 2283},
			expr: &seqExpr{
				pos: position{line: 58, col: 11, offset: 2293},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 2293},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 58, col: 15, offset: 2297},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 58, col: 15, offset: 2297},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 58, col: 22, offset: 2304},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 58, col: 43, offset: 2325},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 58, col: 50, offset: 2332},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 58, col: 56, offset: 2338},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 59, col: 1, offset: 2343},
			expr: &seqExpr{
				pos: position{line: 59, col: 8, offset: 2350},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 59, col: 8, offset: 2350},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 59, col: 12, offset: 2354},
						expr: &choiceExpr{
							pos: position{line: 59, col: 14, offset: 2356},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 14, offset: 2356},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 59, col: 20, offset: 2362},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 60, col: 1, offset: 2367},
			expr: &actionExpr{
				pos: position{line: 60, col: 7, offset: 2373},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 60, col: 7, offset: 2373},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 60, col: 7, offset: 2373},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 60, col: 10, offset: 2376},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 15, offset: 2381},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 60, col: 18, offset: 2384},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 22, offset: 2388},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 61, col: 1, offset: 2412},
			expr: &actionExpr{
				pos: position{line: 62, col: 5, offset: 2426},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 62, col: 5, offset: 2426},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 62, col: 5, offset: 2426},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 8, offset: 2429},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 13, offset: 2434},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 18, offset: 2439},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 23, offset: 2444},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 65, col: 1, offset: 2525},
			expr: &choiceExpr{
				pos: position{line: 66, col: 5, offset: 2534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 2534},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 2534},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 5, offset: 2534},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 12, offset: 2541},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 14, offset: 2543},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 19, offset: 2548},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2578},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 67, col: 5, offset: 2578},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 68, col: 1, offset: 2608},
			expr: &actionExpr{
				pos: position{line: 69, col: 5, offset: 2620},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 69, col: 5, offset: 2620},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 69, col: 5, offset: 2620},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 69, col: 8, offset: 2623},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 15, offset: 2630},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 26, offset: 2641},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 69, col: 30, offset: 2645},
								expr: &seqExpr{
									pos: position{line: 69, col: 31, offset: 2646},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 69, col: 31, offset: 2646},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 69, col: 34, offset: 2649},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 69, col: 39, offset: 2654},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 69, col: 42, offset: 2657},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 76, col: 1, offset: 2847},
			expr: &choiceExpr{
				pos: position{line: 77, col: 5, offset: 2862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 77, col: 5, offset: 2862},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 5, offset: 2871},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 5, offset: 2879},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 5, offset: 2888},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 81, col: 1, offset: 2895},
			expr: &seqExpr{
				pos: position{line: 81, col: 13, offset: 2907},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 81, col: 13, offset: 2907},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 81, col: 17, offset: 2911},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 81, col: 18, offset: 2912},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 81, col: 18, offset: 2912},
										expr: &litMatcher{
											pos:        position{line: 81, col: 19, offset: 2913},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 24, offset: 2918},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 38, offset: 2932},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 57, offset: 2951},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 81, col: 82, offset: 2976},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 81, col: 88, offset: 2982},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 81, col: 94, offset: 2988},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 81, col: 100, offset: 2994},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 82, col: 1, offset: 2999},
			expr: &actionExpr{
				pos: position{line: 82, col: 14, offset: 3012},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 82, col: 15, offset: 3013},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 82, col: 15, offset: 3013},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 22, offset: 3020},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 82, col: 30, offset: 3028},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 82, col: 30, offset: 3028},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 82, col: 35, offset: 3033},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 36, offset: 3034},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 82, col: 54, offset: 3052},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 61, offset: 3059},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 67, offset: 3065},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 74, offset: 3072},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 83, col: 1, offset: 3108},
			expr: &actionExpr{
				pos: position{line: 84, col: 5, offset: 3126},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 84, col: 5, offset: 3126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 3126},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 3132},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 21, offset: 3142},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 26, offset: 3147},
								expr: &ruleRefExpr{
									pos:  position{line: 84, col: 26, offset: 3147},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 87, col: 1, offset: 3220},
			expr: &actionExpr{
				pos: position{line: 87, col: 16, offset: 3235},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 87, col: 16, offset: 3235},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 87, col: 16, offset: 3235},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 18, offset: 3237},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 26, offset: 3245},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 28, offset: 3247},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 30, offset: 3249},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 88, col: 1, offset: 3298},
			expr: &actionExpr{
				pos: position{line: 89, col: 5, offset: 3312},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 89, col: 5, offset: 3312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 3312},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 11, offset: 3318},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 5, offset: 3335},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 90, col: 10, offset: 3340},
								expr: &actionExpr{
									pos: position{line: 90, col: 11, offset: 3341},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 90, col: 11, offset: 3341},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 90, col: 11, offset: 3341},
												expr: &seqExpr{
													pos: position{line: 90, col: 12, offset: 3342},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 90, col: 12, offset: 3342},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 90, col: 14, offset: 3344},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 90, col: 25, offset: 3355},
												name: "_",
											},
											&notExpr{
												pos: position{line: 90, col: 27, offset: 3357},
												expr: &choiceExpr{
													pos: position{line: 90, col: 29, offset: 3359},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 90, col: 29, offset: 3359},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 90, col: 39, offset: 3369},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 90, col: 59, offset: 3389},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 90, col: 64, offset: 3394},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 93, col: 1, offset: 3511},
			expr: &choiceExpr{
				pos: position{line: 94, col: 5, offset: 3534},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 94, col: 5, offset: 3534},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 5, offset: 3534},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 16, offset: 3545},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 94, col: 19, offset: 3548},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 24, offset: 3553},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 95, col: 5, offset: 3560},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 95, col: 5, offset: 3560},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 10, offset: 3565},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 96, col: 1, offset: 3568},
			expr: &choiceExpr{
				pos: position{line: 97, col: 5, offset: 3585},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 3585},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 97, col: 5, offset: 3585},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 97, col: 6, offset: 3586},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 97, col: 6, offset: 3586},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 97, col: 6, offset: 3586},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 97, col: 15, offset: 3595},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 97, col: 19, offset: 3599},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 97, col: 19, offset: 3599},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 97, col: 23, offset: 3603},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 97, col: 27, offset: 3607},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 29, offset: 3609},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 100, col: 5, offset: 3721},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 100, col: 5, offset: 3721},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 100, col: 5, offset: 3721},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 9, offset: 3725},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 100, col: 12, offset: 3728},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 17, offset: 3733},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 31, offset: 3747},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 100, col: 34, offset: 3750},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 5, offset: 3779},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 102, col: 1, offset: 3790},
			expr: &choiceExpr{
				pos: position{line: 103, col: 5, offset: 3805},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3805},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 5, offset: 3814},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 105, col: 5, offset: 3825},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 105, col: 5, offset: 3825},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 105, col: 5, offset: 3825},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 7, offset: 3827},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 105, col: 20, offset: 3840},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 105, col: 20, offset: 3840},
											expr: &ruleRefExpr{
												pos:  position{line: 105, col: 21, offset: 3841},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 105, col: 33, offset: 3853},
											expr: &seqExpr{
												pos: position{line: 105, col: 35, offset: 3855},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 105, col: 35, offset: 3855},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 105, col: 37, offset: 3857},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3969},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3969},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 108, col: 5, offset: 3969},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 108, col: 9, offset: 3973},
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 10, offset: 3974},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 4090},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 112, col: 1, offset: 4106},
			expr: &choiceExpr{
				pos: position{line: 113, col: 5, offset: 4126},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 4126},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 4126},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 113, col: 5, offset: 4126},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 9, offset: 4130},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 22, offset: 4143},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 25, offset: 4146},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 28, offset: 4149},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 39, offset: 4160},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 42, offset: 4163},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 46, offset: 4167},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 116, col: 6, offset: 4290},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 116, col: 6, offset: 4290},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 116, col: 6, offset: 4290},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 12, offset: 4296},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 21, offset: 4305},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 116, col: 26, offset: 4310},
										expr: &ruleRefExpr{
											pos:  position{line: 116, col: 27, offset: 4311},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 119, col: 1, offset: 4382},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 4398},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 4398},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 4410},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 4410},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 121, col: 5, offset: 4410},
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 6, offset: 4411},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 121, col: 20, offset: 4425},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 22, offset: 4427},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 124, col: 1, offset: 4534},
			expr: &actionExpr{
				pos: position{line: 125, col: 5, offset: 4543},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 125, col: 5, offset: 4543},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 125, col: 13, offset: 4551},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 128, col: 1, offset: 4646},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 4657},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 129, col: 5, offset: 4657},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 129, col: 13, offset: 4665},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 132, col: 1, offset: 4764},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 4780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 133, col: 5, offset: 4780},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 133, col: 5, offset: 4780},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 133, col: 5, offset: 4780},
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 5, offset: 4780},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 16, offset: 4791},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 21, offset: 4796},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 33, offset: 4808},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 39, offset: 4814},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 4940},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 4940},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 136, col: 5, offset: 4940},
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 5, offset: 4940},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 16, offset: 4951},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 21, offset: 4956},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 36, offset: 4971},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 136, col: 41, offset: 4976},
										expr: &seqExpr{
											pos: position{line: 136, col: 42, offset: 4977},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 136, col: 42, offset: 4977},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 44, offset: 4979},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 58, offset: 4993},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 64, offset: 4999},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 143, col: 1, offset: 5212},
			expr: &seqExpr{
				pos: position{line: 143, col: 13, offset: 5224},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 143, col: 13, offset: 5224},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 143, col: 25, offset: 5236},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 144, col: 1, offset: 5238},
			expr: &actionExpr{
				pos: position{line: 145, col: 5, offset: 5254},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 145, col: 5, offset: 5254},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 145, col: 5, offset: 5254},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 145, col: 13, offset: 5262},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 145, col: 15, offset: 5264},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 145, col: 23, offset: 5272},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 146, col: 1, offset: 5312},
			expr: &choiceExpr{
				pos: position{line: 147, col: 5, offset: 5325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 5325},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 5325},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 147, col: 5, offset: 5325},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 147, col: 7, offset: 5327},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 14, offset: 5334},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 147, col: 16, offset: 5336},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 25, offset: 5345},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 147, col: 27, offset: 5347},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 33, offset: 5353},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 5384},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 148, col: 5, offset: 5384},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 149, col: 1, offset: 5405},
			expr: &choiceExpr{
				pos: position{line: 150, col: 5, offset: 5424},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 150, col: 5, offset: 5424},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 5439},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 151, col: 5, offset: 5439},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 10, offset: 5444},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 152, col: 1, offset: 5535},
			expr: &actionExpr{
				pos: position{line: 153, col: 5, offset: 5555},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 153, col: 5, offset: 5555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 153, col: 5, offset: 5555},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 153, col: 11, offset: 5561},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 153, col: 26, offset: 5576},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 153, col: 31, offset: 5581},
								expr: &actionExpr{
									pos: position{line: 153, col: 32, offset: 5582},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 153, col: 32, offset: 5582},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 153, col: 32, offset: 5582},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 153, col: 35, offset: 5585},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 153, col: 39, offset: 5589},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 153, col: 42, offset: 5592},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 153, col: 47, offset: 5597},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 156, col: 1, offset: 5717},
			expr: &choiceExpr{
				pos: position{line: 157, col: 5, offset: 5735},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 157, col: 5, offset: 5735},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 157, col: 5, offset: 5735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 157, col: 5, offset: 5735},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 10, offset: 5740},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 15, offset: 5745},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 157, col: 18, offset: 5748},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 23, offset: 5753},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 157, col: 26, offset: 5756},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 30, offset: 5760},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 5864},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 160, col: 5, offset: 5864},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 9, offset: 5868},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 163, col: 1, offset: 5967},
			expr: &actionExpr{
				pos: position{line: 164, col: 5, offset: 5975},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 164, col: 5, offset: 5975},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 164, col: 5, offset: 5975},
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 6, offset: 5976},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 16, offset: 5986},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 19, offset: 5989},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 27, offset: 5997},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 164, col: 30, offset: 6000},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 34, offset: 6004},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 6007},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 42, offset: 6012},
								expr: &choiceExpr{
									pos: position{line: 164, col: 43, offset: 6013},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 164, col: 43, offset: 6013},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 164, col: 54, offset: 6024},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 61, offset: 6031},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 164, col: 64, offset: 6034},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 164, col: 68, offset: 6038},
							expr: &seqExpr{
								pos: position{line: 164, col: 70, offset: 6040},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 164, col: 70, offset: 6040},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 164, col: 73, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 78, offset: 6048},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 84, offset: 6054},
								expr: &ruleRefExpr{
									pos:  position{line: 164, col: 84, offset: 6054},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 171, col: 1, offset: 6244},
			expr: &choiceExpr{
				pos: position{line: 172, col: 5, offset: 6256},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 172, col: 5, offset: 6256},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 6275},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 174, col: 5, offset: 6288},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 175, col: 1, offset: 6296},
			expr: &actionExpr{
				pos: position{line: 175, col: 15, offset: 6310},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 175, col: 15, offset: 6310},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 175, col: 15, offset: 6310},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 175, col: 17, offset: 6312},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 25, offset: 6320},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 27, offset: 6322},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 32, offset: 6327},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 176, col: 1, offset: 6362},
			expr: &actionExpr{
				pos: position{line: 177, col: 5, offset: 6381},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 177, col: 5, offset: 6381},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 177, col: 5, offset: 6381},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 11, offset: 6387},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 177, col: 25, offset: 6401},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 177, col: 30, offset: 6406},
								expr: &seqExpr{
									pos: position{line: 177, col: 31, offset: 6407},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 177, col: 31, offset: 6407},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 177, col: 34, offset: 6410},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 177, col: 38, offset: 6414},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 177, col: 41, offset: 6417},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 184, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 185, col: 5, offset: 6628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 185, col: 5, offset: 6628},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 6641},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 6652},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 6662},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 6672},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 6683},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 6694},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 6705},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 6717},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 5, offset: 6728},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 195, col: 5, offset: 6738},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 6751},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 5, offset: 6762},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 5, offset: 6774},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 6785},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6798},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6808},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 202, col: 5, offset: 6819},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6830},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6844},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6856},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 6867},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6879},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 208, col: 1, offset: 6886},
			expr: &actionExpr{
				pos: position{line: 209, col: 5, offset: 6899},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 209, col: 5, offset: 6899},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 5, offset: 6899},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 14, offset: 6908},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 16, offset: 6910},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 209, col: 22, offset: 6916},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 209, col: 22, offset: 6916},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 209, col: 24, offset: 6918},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 212, col: 1, offset: 7817},
			expr: &actionExpr{
				pos: position{line: 213, col: 5, offset: 7828},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 213, col: 5, offset: 7828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 5, offset: 7828},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 213, col: 12, offset: 7835},
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 13, offset: 7836},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 18, offset: 7841},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 23, offset: 7846},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 32, offset: 7855},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 213, col: 37, offset: 7860},
								expr: &actionExpr{
									pos: position{line: 213, col: 38, offset: 7861},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 213, col: 38, offset: 7861},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 213, col: 38, offset: 7861},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 213, col: 40, offset: 7863},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 213, col: 42, offset: 7865},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 226, col: 1, offset: 8273},
			expr: &actionExpr{
				pos: position{line: 226, col: 12, offset: 8284},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 226, col: 12, offset: 8284},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 226, col: 17, offset: 8289},
						expr: &actionExpr{
							pos: position{line: 226, col: 18, offset: 8290},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 226, col: 18, offset: 8290},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 226, col: 18, offset: 8290},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 226, col: 20, offset: 8292},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 226, col: 22, offset: 8294},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 227, col: 1, offset: 8350},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 8362},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 228, col: 5, offset: 8362},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 228, col: 5, offset: 8362},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 8437},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 229, col: 5, offset: 8437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 229, col: 5, offset: 8437},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 229, col: 14, offset: 8446},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 229, col: 16, offset: 8448},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 229, col: 23, offset: 8455},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 229, col: 24, offset: 8456},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 229, col: 24, offset: 8456},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 229, col: 34, offset: 8466},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 230, col: 1, offset: 8578},
			expr: &actionExpr{
				pos: position{line: 231, col: 5, offset: 8588},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 231, col: 5, offset: 8588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 5, offset: 8588},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 231, col: 11, offset: 8594},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 12, offset: 8595},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 17, offset: 8600},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 23, offset: 8606},
								expr: &actionExpr{
									pos: position{line: 231, col: 24, offset: 8607},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 231, col: 24, offset: 8607},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 231, col: 24, offset: 8607},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 231, col: 26, offset: 8609},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 231, col: 28, offset: 8611},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 53, offset: 8636},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 59, offset: 8642},
								expr: &seqExpr{
									pos: position{line: 231, col: 60, offset: 8643},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 231, col: 60, offset: 8643},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 231, col: 62, offset: 8645},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 73, offset: 8656},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 80, offset: 8663},
								expr: &actionExpr{
									pos: position{line: 231, col: 81, offset: 8664},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 231, col: 81, offset: 8664},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 231, col: 81, offset: 8664},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 231, col: 83, offset: 8666},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 231, col: 85, offset: 8668},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 244, col: 1, offset: 9002},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 9012},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 9012},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 5, offset: 9012},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 11, offset: 9018},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 13, offset: 9020},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 18, offset: 9025},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 248, col: 1, offset: 9119},
			expr: &actionExpr{
				pos: position{line: 249, col: 5, offset: 9130},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 249, col: 5, offset: 9130},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 5, offset: 9130},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 12, offset: 9137},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 14, offset: 9139},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 19, offset: 9144},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 252, col: 1, offset: 9234},
			expr: &choiceExpr{
				pos: position{line: 253, col: 5, offset: 9245},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 9245},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 9245},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 253, col: 5, offset: 9245},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 12, offset: 9252},
									name: "_",
								},
								&notExpr{
									pos: position{line: 253, col: 14, offset: 9254},
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 15, offset: 9255},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 23, offset: 9263},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 29, offset: 9269},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 9349},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 254, col: 5, offset: 9349},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 255, col: 1, offset: 9495},
			expr: &choiceExpr{
				pos: position{line: 256, col: 5, offset: 9506},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 9506},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 256, col: 5, offset: 9506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 256, col: 5, offset: 9506},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 256, col: 12, offset: 9513},
									name: "_",
								},
								&notExpr{
									pos: position{line: 256, col: 14, offset: 9515},
									expr: &ruleRefExpr{
										pos:  position{line: 256, col: 15, offset: 9516},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 256, col: 23, offset: 9524},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 256, col: 29, offset: 9530},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 257, col: 5, offset: 9610},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 257, col: 5, offset: 9610},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 258, col: 1, offset: 9756},
			expr: &actionExpr{
				pos: position{line: 259, col: 5, offset: 9768},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 259, col: 5, offset: 9768},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 5, offset: 9768},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 259, col: 13, offset: 9776},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 15, offset: 9778},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 20, offset: 9783},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 262, col: 1, offset: 9868},
			expr: &choiceExpr{
				pos: position{line: 263, col: 5, offset: 9879},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 9879},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 263, col: 5, offset: 9879},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 263, col: 5, offset: 9879},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 263, col: 12, offset: 9886},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 263, col: 14, offset: 9888},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 9977},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 9977},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 269, col: 1, offset: 10065},
			expr: &actionExpr{
				pos: position{line: 270, col: 5, offset: 10075},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 270, col: 5, offset: 10075},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 5, offset: 10075},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 11, offset: 10081},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 13, offset: 10083},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 18, offset: 10088},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 273, col: 1, offset: 10178},
			expr: &actionExpr{
				pos: position{line: 274, col: 5, offset: 10191},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 274, col: 5, offset: 10191},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 274, col: 5, offset: 10191},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 274, col: 14, offset: 10200},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 274, col: 16, offset: 10202},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 22, offset: 10208},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 274, col: 33, offset: 10219},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 274, col: 38, offset: 10224},
								expr: &actionExpr{
									pos: position{line: 274, col: 39, offset: 10225},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 274, col: 39, offset: 10225},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 274, col: 39, offset: 10225},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 274, col: 42, offset: 10228},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 274, col: 46, offset: 10232},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 274, col: 49, offset: 10235},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 274, col: 52, offset: 10238},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 277, col: 1, offset: 10402},
			expr: &actionExpr{
				pos: position{line: 278, col: 5, offset: 10413},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 278, col: 5, offset: 10413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 278, col: 5, offset: 10413},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 278, col: 12, offset: 10420},
							expr: &seqExpr{
								pos: position{line: 278, col: 14, offset: 10422},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 278, col: 14, offset: 10422},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 278, col: 17, offset: 10425},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 278, col: 22, offset: 10430},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 23, offset: 10431},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 281, col: 1, offset: 10501},
			expr: &actionExpr{
				pos: position{line: 282, col: 5, offset: 10513},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 282, col: 5, offset: 10513},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 282, col: 5, offset: 10513},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 282, col: 13, offset: 10521},
							expr: &seqExpr{
								pos: position{line: 282, col: 15, offset: 10523},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 282, col: 15, offset: 10523},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 282, col: 18, offset: 10526},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 282, col: 23, offset: 10531},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 24, offset: 10532},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 285, col: 1, offset: 10603},
			expr: &actionExpr{
				pos: position{line: 286, col: 5, offset: 10614},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 286, col: 5, offset: 10614},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 286, col: 5, offset: 10614},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 11, offset: 10620},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 21, offset: 10630},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 286, col: 28, offset: 10637},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 39, offset: 10648},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 54, offset: 10663},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 57, offset: 10666},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 59, offset: 10668},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 63, offset: 10672},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 71, offset: 10680},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 78, offset: 10687},
								expr: &seqExpr{
									pos: position{line: 286, col: 79, offset: 10688},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 286, col: 79, offset: 10688},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 286, col: 82, offset: 10691},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 286, col: 86, offset: 10695},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 286, col: 89, offset: 10698},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 99, offset: 10708},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 107, offset: 10716},
								expr: &seqExpr{
									pos: position{line: 286, col: 108, offset: 10717},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 286, col: 108, offset: 10717},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 286, col: 110, offset: 10719},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 296, col: 1, offset: 11074},
			expr: &choiceExpr{
				pos: position{line: 297, col: 5, offset: 11088},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 297, col: 5, offset: 11088},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 297, col: 5, offset: 11088},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 297, col: 5, offset: 11088},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 297, col: 12, offset: 11095},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 11124},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 11124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 5, offset: 11124},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 13, offset: 11132},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 11162},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 299, col: 5, offset: 11162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 299, col: 5, offset: 11162},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 12, offset: 11169},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 300, col: 5, offset: 11198},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 300, col: 5, offset: 11198},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 300, col: 5, offset: 11198},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 13, offset: 11206},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 11236},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 301, col: 5, offset: 11236},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 302, col: 1, offset: 11263},
			expr: &choiceExpr{
				pos: position{line: 303, col: 5, offset: 11282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 303, col: 5, offset: 11282},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 303, col: 5, offset: 11282},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 303, col: 5, offset: 11282},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 303, col: 8, offset: 11285},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 12, offset: 11289},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 303, col: 15, offset: 11292},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 303, col: 17, offset: 11294},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 21, offset: 11298},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 303, col: 24, offset: 11301},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 28, offset: 11305},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 304, col: 5, offset: 11330},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 304, col: 5, offset: 11330},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 305, col: 1, offset: 11352},
			expr: &choiceExpr{
				pos: position{line: 306, col: 5, offset: 11364},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 306, col: 5, offset: 11364},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 11373},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 307, col: 5, offset: 11373},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 307, col: 5, offset: 11373},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 307, col: 9, offset: 11377},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 307, col: 14, offset: 11382},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 307, col: 19, offset: 11387},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 308, col: 1, offset: 11412},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 11425},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 11425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 11425},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 309, col: 14, offset: 11434},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 15, offset: 11435},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 20, offset: 11440},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 22, offset: 11442},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 310, col: 1, offset: 11521},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 11538},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 311, col: 5, offset: 11538},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 311, col: 7, offset: 11540},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 314, col: 1, offset: 11639},
			expr: &choiceExpr{
				pos: position{line: 315, col: 5, offset: 11654},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 11654},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 315, col: 5, offset: 11654},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 315, col: 5, offset: 11654},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 315, col: 7, offset: 11656},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 315, col: 12, offset: 11661},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 316, col: 5, offset: 11691},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 316, col: 5, offset: 11691},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 317, col: 1, offset: 11763},
			expr: &actionExpr{
				pos: position{line: 318, col: 5, offset: 11774},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 318, col: 5, offset: 11774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 5, offset: 11774},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 12, offset: 11781},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 14, offset: 11783},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 19, offset: 11788},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 34, offset: 11803},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 41, offset: 11810},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 41, offset: 11810},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 53, offset: 11822},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 60, offset: 11829},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 60, offset: 11829},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 71, offset: 11840},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 79, offset: 11848},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 79, offset: 11848},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 91, offset: 11860},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 96, offset: 11865},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 96, offset: 11865},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 321, col: 1, offset: 12023},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 12037},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 12037},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 322, col: 5, offset: 12037},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 322, col: 7, offset: 12039},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 16, offset: 12048},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 18, offset: 12050},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 22, offset: 12054},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 323, col: 1, offset: 12087},
			expr: &actionExpr{
				pos: position{line: 324, col: 5, offset: 12102},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 324, col: 5, offset: 12102},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 324, col: 5, offset: 12102},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 324, col: 7, offset: 12104},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 17, offset: 12114},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 19, offset: 12116},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 23, offset: 12120},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 325, col: 1, offset: 12153},
			expr: &actionExpr{
				pos: position{line: 326, col: 5, offset: 12165},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 326, col: 5, offset: 12165},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 326, col: 5, offset: 12165},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 326, col: 7, offset: 12167},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 14, offset: 12174},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 16, offset: 12176},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 20, offset: 12180},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 327, col: 1, offset: 12213},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 12228},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 12228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 328, col: 5, offset: 12228},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 328, col: 9, offset: 12232},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 328, col: 17, offset: 12240},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 328, col: 17, offset: 12240},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 328, col: 34, offset: 12257},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 329, col: 1, offset: 12294},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 12305},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 330, col: 5, offset: 12305},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 330, col: 12, offset: 12312},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 333, col: 1, offset: 12469},
			expr: &choiceExpr{
				pos: position{line: 334, col: 5, offset: 12481},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 12481},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 12490},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 12498},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 337, col: 1, offset: 12503},
			expr: &actionExpr{
				pos: position{line: 338, col: 5, offset: 12512},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 338, col: 5, offset: 12512},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 338, col: 5, offset: 12512},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 12, offset: 12519},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 338, col: 14, offset: 12521},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 19, offset: 12526},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 24, offset: 12531},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 31, offset: 12538},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 31, offset: 12538},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 42, offset: 12549},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 51, offset: 12558},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 51, offset: 12558},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 341, col: 1, offset: 12689},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 12698},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 12698},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 5, offset: 12698},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 12, offset: 12705},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 14, offset: 12707},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 19, offset: 12712},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 343, col: 1, offset: 12742},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 12751},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 12751},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 12751},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 12, offset: 12758},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 14, offset: 12760},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 19, offset: 12765},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 345, col: 1, offset: 12795},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 12808},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 12808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 346, col: 5, offset: 12808},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 10, offset: 12813},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 346, col: 19, offset: 12822},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 346, col: 22, offset: 12825},
								expr: &ruleRefExpr{
									pos:  position{line: 346, col: 22, offset: 12825},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 349, col: 1, offset: 12922},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 12930},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 12930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 5, offset: 12930},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 11, offset: 12936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 13, offset: 12938},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 17, offset: 12942},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 21, offset: 12946},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 28, offset: 12953},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 28, offset: 12953},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 39, offset: 12964},
							label: "method",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 46, offset: 12971},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 46, offset: 12971},
									name: "MethodArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 57, offset: 12982},
							label: "headers",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 65, offset: 12990},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 65, offset: 12990},
									name: "RecordArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 76, offset: 13001},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 81, offset: 13006},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 81, offset: 13006},
									name: "BodyArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 90, offset: 13015},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 99, offset: 13024},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 99, offset: 13024},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 353, col: 1, offset: 13205},
			expr: &actionExpr{
				pos: position{line: 353, col: 7, offset: 13211},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 353, col: 7, offset: 13211},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 353, col: 8, offset: 13212},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 353, col: 8, offset: 13212},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 353, col: 18, offset: 13222},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 28, offset: 13232},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "MethodArg",
			pos:  position{line: 354, col: 1, offset: 13268},
			expr: &actionExpr{
				pos: position{line: 355, col: 5, offset: 13282},
				run: (*parser).callonMethodArg1,
				expr: &seqExpr{
					pos: position{line: 355, col: 5, offset: 13282},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 355, col: 5, offset: 13282},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 355, col: 7, offset: 13284},
							val:        "method",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 355, col: 16, offset: 13293},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 18, offset: 13295},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 22, offset: 13299},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "BodyArg",
			pos:  position{line: 356, col: 1, offset: 13332},
			expr: &actionExpr{
				pos: position{line: 357, col: 5, offset: 13344},
				run: (*parser).callonBodyArg1,
				expr: &seqExpr{
					pos: position{line: 357, col: 5, offset: 13344},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 357, col: 5, offset: 13344},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 357, col: 7, offset: 13346},
							val:        "body",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 14, offset: 13353},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 16, offset: 13355},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 20, offset: 13359},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordArg",
			pos:  position{line: 358, col: 1, offset: 13392},
			expr: &actionExpr{
				pos: position{line: 359, col: 5, offset: 13406},
				run: (*parser).callonRecordArg1,
				expr: &seqExpr{
					pos: position{line: 359, col: 5, offset: 13406},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 359, col: 5, offset: 13406},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 359, col: 7, offset: 13408},
							val:        "headers",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 359, col: 17, offset: 13418},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 19, offset: 13420},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 23, offset: 13424},
								name: "Record",
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 360, col: 1, offset: 13451},
			expr: &choiceExpr{
				pos: position{line: 361, col: 5, offset: 13460},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 13460},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 361, col: 5, offset: 13460},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 7, offset: 13462},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 13497},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 362, col: 5, offset: 13497},
							expr: &charClassMatcher{
								pos:        position{line: 362, col: 5, offset: 13497},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 363, col: 1, offset: 13565},
			expr: &actionExpr{
				pos: position{line: 364, col: 5, offset: 13576},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 364, col: 5, offset: 13576},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 364, col: 5, offset: 13576},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 364, col: 7, offset: 13578},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 364, col: 12, offset: 13583},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 364, col: 14, offset: 13585},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 17, offset: 13588},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 365, col: 1, offset: 13613},
			expr: &actionExpr{
				pos: position{line: 365, col: 9, offset: 13621},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 365, col: 9, offset: 13621},
					expr: &charClassMatcher{
						pos:        position{line: 365, col: 10, offset: 13622},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 366, col: 1, offset: 13667},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 13680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 13680},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 13680},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 367, col: 5, offset: 13680},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 367, col: 10, offset: 13685},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 367, col: 19, offset: 13694},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 367, col: 26, offset: 13701},
										expr: &ruleRefExpr{
											pos:  position{line: 367, col: 26, offset: 13701},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 367, col: 38, offset: 13713},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 367, col: 43, offset: 13718},
										expr: &ruleRefExpr{
											pos:  position{line: 367, col: 43, offset: 13718},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 367, col: 53, offset: 13728},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 367, col: 57, offset: 13732},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 13850},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 370, col: 5, offset: 13850},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 10, offset: 13855},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 373, col: 1, offset: 13955},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 13970},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 374, col: 5, offset: 13970},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 5, offset: 13970},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 374, col: 9, offset: 13974},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 16, offset: 13981},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 375, col: 1, offset: 14019},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 14032},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 376, col: 5, offset: 14032},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 376, col: 5, offset: 14032},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 376, col: 9, offset: 14036},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 14, offset: 14041},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 377, col: 1, offset: 14077},
			expr: &choiceExpr{
				pos: position{line: 378, col: 5, offset: 14090},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 14090},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 379, col: 5, offset: 14099},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 379, col: 5, offset: 14099},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 379, col: 5, offset: 14099},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 379, col: 9, offset: 14103},
									expr: &ruleRefExpr{
										pos:  position{line: 379, col: 10, offset: 14104},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 5, offset: 14189},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 14200},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 381, col: 5, offset: 14200},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 10, offset: 14205},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 382, col: 1, offset: 14291},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 14310},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 383, col: 5, offset: 14310},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 384, col: 5, offset: 14329},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 385, col: 5, offset: 14339},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 386, col: 1, offset: 14352},
			expr: &actionExpr{
				pos: position{line: 387, col: 5, offset: 14371},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 387, col: 5, offset: 14371},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 387, col: 6, offset: 14372},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 387, col: 6, offset: 14372},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 387, col: 24, offset: 14390},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 387, col: 29, offset: 14395},
							expr: &choiceExpr{
								pos: position{line: 387, col: 30, offset: 14396},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 387, col: 30, offset: 14396},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 387, col: 47, offset: 14413},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 388, col: 1, offset: 14450},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 14465},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 14465},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 389, col: 5, offset: 14465},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 389, col: 7, offset: 14467},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 15, offset: 14475},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 17, offset: 14477},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 22, offset: 14482},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 389, col: 33, offset: 14493},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 39, offset: 14499},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 392, col: 1, offset: 14609},
			expr: &choiceExpr{
				pos: position{line: 393, col: 5, offset: 14620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 14620},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 14620},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 393, col: 5, offset: 14620},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 393, col: 7, offset: 14622},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 5, offset: 14653},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 394, col: 5, offset: 14653},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 395, col: 1, offset: 14678},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 14692},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 14692},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 396, col: 5, offset: 14692},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 396, col: 7, offset: 14694},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 16, offset: 14703},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 18, offset: 14705},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 22, offset: 14709},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 397, col: 1, offset: 14744},
			expr: &choiceExpr{
				pos: position{line: 398, col: 5, offset: 14760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 14760},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 398, col: 5, offset: 14760},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 399, col: 5, offset: 14793},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 399, col: 5, offset: 14793},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 14828},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 400, col: 5, offset: 14828},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 401, col: 1, offset: 14853},
			expr: &actionExpr{
				pos: position{line: 402, col: 5, offset: 14864},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 402, col: 5, offset: 14864},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 402, col: 5, offset: 14864},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 402, col: 12, offset: 14871},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 13, offset: 14872},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 405, col: 1, offset: 14942},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 14956},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 14956},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 5, offset: 14956},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 15, offset: 14966},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 17, offset: 14968},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 22, offset: 14973},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 28, offset: 14979},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 32, offset: 14983},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 40, offset: 14991},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 43, offset: 14994},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 43, offset: 14994},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 409, col: 1, offset: 15106},
			expr: &actionExpr{
				pos: position{line: 410, col: 5, offset: 15118},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 410, col: 5, offset: 15118},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 5, offset: 15118},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 13, offset: 15126},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 410, col: 15, offset: 15128},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 20, offset: 15133},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 413, col: 1, offset: 15218},
			expr: &actionExpr{
				pos: position{line: 414, col: 5, offset: 15229},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 414, col: 5, offset: 15229},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 414, col: 5, offset: 15229},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 414, col: 12, offset: 15236},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 414, col: 14, offset: 15238},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 20, offset: 15244},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 414, col: 26, offset: 15250},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 414, col: 33, offset: 15257},
								expr: &ruleRefExpr{
									pos:  position{line: 414, col: 33, offset: 15257},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 414, col: 41, offset: 15265},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 414, col: 46, offset: 15270},
								expr: &ruleRefExpr{
									pos:  position{line: 414, col: 46, offset: 15270},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 417, col: 1, offset: 15392},
			expr: &choiceExpr{
				pos: position{line: 418, col: 5, offset: 15404},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 15404},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 418, col: 5, offset: 15404},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 418, col: 5, offset: 15404},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 418, col: 8, offset: 15407},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 13, offset: 15412},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 418, col: 16, offset: 15415},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 20, offset: 15419},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 418, col: 23, offset: 15422},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 29, offset: 15428},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 35, offset: 15434},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 418, col: 38, offset: 15437},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 15467},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 419, col: 5, offset: 15467},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 419, col: 5, offset: 15467},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 419, col: 8, offset: 15470},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 13, offset: 15475},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 419, col: 16, offset: 15478},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 20, offset: 15482},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 419, col: 23, offset: 15485},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 419, col: 27, offset: 15489},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 31, offset: 15493},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 419, col: 34, offset: 15496},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 420, col: 1, offset: 15520},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 15531},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 421, col: 5, offset: 15531},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 421, col: 5, offset: 15531},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 421, col: 7, offset: 15533},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 421, col: 14, offset: 15540},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 16, offset: 15542},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 22, offset: 15548},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 421, col: 39, offset: 15565},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 421, col: 44, offset: 15570},
								expr: &actionExpr{
									pos: position{line: 421, col: 45, offset: 15571},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 421, col: 45, offset: 15571},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 421, col: 45, offset: 15571},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 421, col: 48, offset: 15574},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 421, col: 52, offset: 15578},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 421, col: 55, offset: 15581},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 421, col: 57, offset: 15583},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 424, col: 1, offset: 15702},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 15723},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 425, col: 5, offset: 15723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 425, col: 5, offset: 15723},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 10, offset: 15728},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 25, offset: 15743},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 29, offset: 15747},
								expr: &seqExpr{
									pos: position{line: 425, col: 30, offset: 15748},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 30, offset: 15748},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 425, col: 33, offset: 15751},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 37, offset: 15755},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 40, offset: 15758},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 432, col: 1, offset: 15978},
			expr: &actionExpr{
				pos: position{line: 433, col: 5, offset: 15990},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 433, col: 5, offset: 15990},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 433, col: 5, offset: 15990},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 433, col: 13, offset: 15998},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 433, col: 15, offset: 16000},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 21, offset: 16006},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 436, col: 1, offset: 16094},
			expr: &actionExpr{
				pos: position{line: 437, col: 5, offset: 16106},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 437, col: 5, offset: 16106},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 437, col: 5, offset: 16106},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 7, offset: 16108},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 10, offset: 16111},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 12, offset: 16113},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 16, offset: 16117},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 438, col: 1, offset: 16142},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 16152},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 16152},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 439, col: 5, offset: 16152},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 7, offset: 16154},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 10, offset: 16157},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 439, col: 12, offset: 16159},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 16, offset: 16163},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 440, col: 1, offset: 16188},
			expr: &ruleRefExpr{
				pos:  position{line: 440, col: 8, offset: 16195},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 441, col: 1, offset: 16205},
			expr: &actionExpr{
				pos: position{line: 442, col: 5, offset: 16215},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 442, col: 5, offset: 16215},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 442, col: 5, offset: 16215},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 11, offset: 16221},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 16, offset: 16226},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 442, col: 21, offset: 16231},
								expr: &actionExpr{
									pos: position{line: 442, col: 22, offset: 16232},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 442, col: 22, offset: 16232},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 442, col: 22, offset: 16232},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 442, col: 25, offset: 16235},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 442, col: 29, offset: 16239},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 442, col: 32, offset: 16242},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 442, col: 37, offset: 16247},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 445, col: 1, offset: 16357},
			expr: &ruleRefExpr{
				pos:  position{line: 445, col: 13, offset: 16369},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 446, col: 1, offset: 16374},
			expr: &actionExpr{
				pos: position{line: 447, col: 5, offset: 16389},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 447, col: 5, offset: 16389},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 5, offset: 16389},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 11, offset: 16395},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 447, col: 21, offset: 16405},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 447, col: 26, offset: 16410},
								expr: &seqExpr{
									pos: position{line: 447, col: 27, offset: 16411},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 447, col: 27, offset: 16411},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 447, col: 30, offset: 16414},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 447, col: 34, offset: 16418},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 447, col: 37, offset: 16421},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 454, col: 1, offset: 16615},
			expr: &actionExpr{
				pos: position{line: 455, col: 5, offset: 16631},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 455, col: 5, offset: 16631},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 455, col: 5, offset: 16631},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 455, col: 11, offset: 16637},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 455, col: 22, offset: 16648},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 455, col: 27, offset: 16653},
								expr: &actionExpr{
									pos: position{line: 455, col: 28, offset: 16654},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 455, col: 28, offset: 16654},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 455, col: 28, offset: 16654},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 455, col: 31, offset: 16657},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 455, col: 35, offset: 16661},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 455, col: 38, offset: 16664},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 455, col: 40, offset: 16666},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 458, col: 1, offset: 16775},
			expr: &actionExpr{
				pos: position{line: 459, col: 5, offset: 16790},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 459, col: 5, offset: 16790},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 459, col: 5, offset: 16790},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 9, offset: 16794},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 14, offset: 16799},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 459, col: 17, offset: 16802},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 22, offset: 16807},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 459, col: 25, offset: 16810},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 29, offset: 16814},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 460, col: 1, offset: 16904},
			expr: &ruleRefExpr{
				pos:  position{line: 460, col: 8, offset: 16911},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 461, col: 1, offset: 16927},
			expr: &actionExpr{
				pos: position{line: 462, col: 5, offset: 16947},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 462, col: 5, offset: 16947},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 462, col: 5, offset: 16947},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 10, offset: 16952},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 462, col: 24, offset: 16966},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 462, col: 28, offset: 16970},
								expr: &seqExpr{
									pos: position{line: 462, col: 29, offset: 16971},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 462, col: 29, offset: 16971},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 462, col: 32, offset: 16974},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 462, col: 36, offset: 16978},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 462, col: 39, offset: 16981},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 462, col: 44, offset: 16986},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 462, col: 47, offset: 16989},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 462, col: 51, offset: 16993},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 462, col: 54, offset: 16996},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 470, col: 1, offset: 17256},
			expr: &actionExpr{
				pos: position{line: 471, col: 5, offset: 17274},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 471, col: 5, offset: 17274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 17274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 17280},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 472, col: 5, offset: 17299},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 472, col: 10, offset: 17304},
								expr: &actionExpr{
									pos: position{line: 472, col: 11, offset: 17305},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 472, col: 11, offset: 17305},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 472, col: 11, offset: 17305},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 14, offset: 17308},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 17, offset: 17311},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 472, col: 25, offset: 17319},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 28, offset: 17322},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 33, offset: 17327},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 475, col: 1, offset: 17445},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 17464},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 17464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 17464},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 17470},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 477, col: 5, offset: 17489},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 477, col: 10, offset: 17494},
								expr: &actionExpr{
									pos: position{line: 477, col: 11, offset: 17495},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 477, col: 11, offset: 17495},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 477, col: 11, offset: 17495},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 477, col: 14, offset: 17498},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 477, col: 17, offset: 17501},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 477, col: 26, offset: 17510},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 477, col: 29, offset: 17513},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 477, col: 34, offset: 17518},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 480, col: 1, offset: 17636},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 17655},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 481, col: 5, offset: 17655},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 481, col: 5, offset: 17655},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 9, offset: 17659},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 22, offset: 17672},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 481, col: 31, offset: 17681},
								expr: &choiceExpr{
									pos: position{line: 481, col: 32, offset: 17682},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 481, col: 32, offset: 17682},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 481, col: 32, offset: 17682},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 481, col: 35, offset: 17685},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 481, col: 46, offset: 17696},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 481, col: 49, offset: 17699},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 481, col: 64, offset: 17714},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 481, col: 64, offset: 17714},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 481, col: 68, offset: 17718},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 481, col: 68, offset: 17718},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 481, col: 104, offset: 17754},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 481, col: 107, offset: 17757},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 489, col: 1, offset: 18017},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 18034},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 18034},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 490, col: 5, offset: 18034},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 11, offset: 18040},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 5, offset: 18063},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 491, col: 10, offset: 18068},
								expr: &actionExpr{
									pos: position{line: 491, col: 11, offset: 18069},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 491, col: 11, offset: 18069},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 491, col: 11, offset: 18069},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 14, offset: 18072},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 17, offset: 18075},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 491, col: 34, offset: 18092},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 37, offset: 18095},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 42, offset: 18100},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 494, col: 1, offset: 18222},
			expr: &actionExpr{
				pos: position{line: 494, col: 20, offset: 18241},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 494, col: 21, offset: 18242},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 21, offset: 18242},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 27, offset: 18248},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 495, col: 1, offset: 18284},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 18307},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 18307},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 5, offset: 18307},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 18313},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 5, offset: 18325},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 497, col: 10, offset: 18330},
								expr: &actionExpr{
									pos: position{line: 497, col: 11, offset: 18331},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 497, col: 11, offset: 18331},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 497, col: 11, offset: 18331},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 497, col: 14, offset: 18334},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 497, col: 17, offset: 18337},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 497, col: 40, offset: 18360},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 497, col: 43, offset: 18363},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 497, col: 48, offset: 18368},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 500, col: 1, offset: 18479},
			expr: &actionExpr{
				pos: position{line: 500, col: 26, offset: 18504},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 500, col: 27, offset: 18505},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 500, col: 27, offset: 18505},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 500, col: 33, offset: 18511},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 500, col: 39, offset: 18517},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 501, col: 1, offset: 18553},
			expr: &choiceExpr{
				pos: position{line: 502, col: 5, offset: 18565},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 18565},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 502, col: 5, offset: 18565},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 502, col: 5, offset: 18565},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 502, col: 9, offset: 18569},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 502, col: 12, offset: 18572},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 502, col: 14, offset: 18574},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 5, offset: 18683},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 506, col: 1, offset: 18696},
			expr: &choiceExpr{
				pos: position{line: 507, col: 5, offset: 18713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 18713},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 507, col: 5, offset: 18713},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 507, col: 5, offset: 18713},
									expr: &ruleRefExpr{
										pos:  position{line: 507, col: 6, offset: 18714},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 507, col: 14, offset: 18722},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 18, offset: 18726},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 507, col: 21, offset: 18729},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 507, col: 23, offset: 18731},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 510, col: 5, offset: 18841},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 511, col: 1, offset: 18850},
			expr: &choiceExpr{
				pos: position{line: 512, col: 5, offset: 18863},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 512, col: 5, offset: 18863},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 512, col: 5, offset: 18863},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 512, col: 5, offset: 18863},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 512, col: 11, offset: 18869},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 512, col: 16, offset: 18874},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 512, col: 21, offset: 18879},
										expr: &ruleRefExpr{
											pos:  position{line: 512, col: 22, offset: 18880},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 18951},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 515, col: 5, offset: 18951},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 515, col: 5, offset: 18951},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 515, col: 11, offset: 18957},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 515, col: 20, offset: 18966},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 515, col: 25, offset: 18971},
										expr: &ruleRefExpr{
											pos:  position{line: 515, col: 26, offset: 18972},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 5, offset: 19043},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 519, col: 5, offset: 19057},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 520, col: 1, offset: 19065},
			expr: &seqExpr{
				pos: position{line: 520, col: 13, offset: 19077},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 520, col: 13, offset: 19077},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 22, offset: 19086},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 520, col: 25, offset: 19089},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 521, col: 1, offset: 19093},
			expr: &choiceExpr{
				pos: position{line: 522, col: 5, offset: 19106},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 522, col: 5, offset: 19106},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 523, col: 5, offset: 19116},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 524, col: 1, offset: 19125},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 19134},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 19134},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 525, col: 5, offset: 19134},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 9, offset: 19138},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 18, offset: 19147},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 525, col: 21, offset: 19150},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 25, offset: 19154},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 28, offset: 19157},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 525, col: 34, offset: 19163},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 525, col: 34, offset: 19163},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 45, offset: 19174},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 51, offset: 19180},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 525, col: 54, offset: 19183},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 528, col: 1, offset: 19279},
			expr: &choiceExpr{
				pos: position{line: 529, col: 5, offset: 19292},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 529, col: 5, offset: 19292},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 19301},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 530, col: 5, offset: 19301},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 530, col: 5, offset: 19301},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 14, offset: 19310},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 530, col: 17, offset: 19313},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 21, offset: 19317},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 530, col: 24, offset: 19320},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 33, offset: 19329},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 47, offset: 19343},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 530, col: 50, offset: 19346},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 54, offset: 19350},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 530, col: 57, offset: 19353},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 62, offset: 19358},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 67, offset: 19363},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 530, col: 70, offset: 19366},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 530, col: 74, offset: 19370},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 530, col: 80, offset: 19376},
										expr: &ruleRefExpr{
											pos:  position{line: 530, col: 80, offset: 19376},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 534, col: 5, offset: 19624},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 534, col: 5, offset: 19624},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 534, col: 5, offset: 19624},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 22, offset: 19641},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 534, col: 25, offset: 19644},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 29, offset: 19648},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 534, col: 32, offset: 19651},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 37, offset: 19656},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 42, offset: 19661},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 534, col: 45, offset: 19664},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 49, offset: 19668},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 534, col: 52, offset: 19671},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 61, offset: 19680},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 75, offset: 19694},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 534, col: 78, offset: 19697},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 82, offset: 19701},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 534, col: 85, offset: 19704},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 90, offset: 19709},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 95, offset: 19714},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 534, col: 98, offset: 19717},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 534, col: 102, offset: 19721},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 534, col: 108, offset: 19727},
										expr: &ruleRefExpr{
											pos:  position{line: 534, col: 108, offset: 19727},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 19989},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 19989},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 538, col: 5, offset: 19989},
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 6, offset: 19990},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 538, col: 16, offset: 20000},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 19, offset: 20003},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 34, offset: 20018},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 538, col: 37, offset: 20021},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 41, offset: 20025},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 538, col: 44, offset: 20028},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 49, offset: 20033},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 62, offset: 20046},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 538, col: 65, offset: 20049},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 538, col: 69, offset: 20053},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 538, col: 75, offset: 20059},
										expr: &ruleRefExpr{
											pos:  position{line: 538, col: 75, offset: 20059},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 541, col: 1, offset: 20179},
			expr: &choiceExpr{
				pos: position{line: 542, col: 5, offset: 20196},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 20196},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 542, col: 5, offset: 20196},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 7, offset: 20198},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 5, offset: 20244},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 544, col: 1, offset: 20258},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 20267},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 20267},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 5, offset: 20267},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 12, offset: 20274},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 545, col: 15, offset: 20277},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 19, offset: 20281},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 22, offset: 20284},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 30, offset: 20292},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 38, offset: 20300},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 41, offset: 20303},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 45, offset: 20307},
								expr: &seqExpr{
									pos: position{line: 545, col: 46, offset: 20308},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 545, col: 46, offset: 20308},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 50, offset: 20312},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 545, col: 54, offset: 20316},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 545, col: 54, offset: 20316},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 545, col: 65, offset: 20327},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 71, offset: 20333},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 545, col: 76, offset: 20338},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 552, col: 1, offset: 20578},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 20590},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 553, col: 5, offset: 20590},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 554, col: 5, offset: 20601},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 20610},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 555, col: 5, offset: 20610},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 7, offset: 20612},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 558, col: 1, offset: 20703},
			expr: &choiceExpr{
				pos: position{line: 559, col: 5, offset: 20721},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 559, col: 5, offset: 20721},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 560, col: 5, offset: 20731},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 560, col: 5, offset: 20731},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 561, col: 1, offset: 20766},
			expr: &actionExpr{
				pos: position{line: 562, col: 5, offset: 20776},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 562, col: 5, offset: 20776},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 562, col: 5, offset: 20776},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 11, offset: 20782},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 562, col: 16, offset: 20787},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 562, col: 21, offset: 20792},
								expr: &actionExpr{
									pos: position{line: 562, col: 22, offset: 20793},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 562, col: 22, offset: 20793},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 562, col: 22, offset: 20793},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 562, col: 25, offset: 20796},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 562, col: 29, offset: 20800},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 562, col: 32, offset: 20803},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 562, col: 34, offset: 20805},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 565, col: 1, offset: 20912},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 20926},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 20926},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 566, col: 5, offset: 20926},
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 6, offset: 20927},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 10, offset: 20931},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 16, offset: 20937},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 27, offset: 20948},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 566, col: 32, offset: 20953},
								expr: &ruleRefExpr{
									pos:  position{line: 566, col: 33, offset: 20954},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 569, col: 1, offset: 21021},
			expr: &choiceExpr{
				pos: position{line: 570, col: 5, offset: 21031},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 21031},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 21031},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 570, col: 5, offset: 21031},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 570, col: 9, offset: 21035},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 14, offset: 21040},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 27, offset: 21053},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 570, col: 30, offset: 21056},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 34, offset: 21060},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 570, col: 37, offset: 21063},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 570, col: 40, offset: 21066},
										expr: &ruleRefExpr{
											pos:  position{line: 570, col: 40, offset: 21066},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 570, col: 54, offset: 21080},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 21214},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 573, col: 5, offset: 21214},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 573, col: 5, offset: 21214},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 573, col: 9, offset: 21218},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 573, col: 12, offset: 21221},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 573, col: 16, offset: 21225},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 573, col: 19, offset: 21228},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 573, col: 22, offset: 21231},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 573, col: 35, offset: 21244},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 21377},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 576, col: 5, offset: 21377},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 576, col: 5, offset: 21377},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 576, col: 9, offset: 21381},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 576, col: 14, offset: 21386},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 576, col: 19, offset: 21391},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 577, col: 5, offset: 21440},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 577, col: 5, offset: 21440},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 577, col: 5, offset: 21440},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 577, col: 9, offset: 21444},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 577, col: 12, offset: 21447},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 578, col: 1, offset: 21497},
			expr: &choiceExpr{
				pos: position{line: 579, col: 5, offset: 21509},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 579, col: 5, offset: 21509},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 580, col: 5, offset: 21520},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 581, col: 5, offset: 21530},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 582, col: 5, offset: 21538},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 583, col: 5, offset: 21546},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 584, col: 5, offset: 21558},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 584, col: 5, offset: 21558},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 584, col: 5, offset: 21558},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 584, col: 9, offset: 21562},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 584, col: 12, offset: 21565},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 584, col: 17, offset: 21570},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 584, col: 26, offset: 21579},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 584, col: 29, offset: 21582},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 21611},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 585, col: 5, offset: 21611},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 585, col: 5, offset: 21611},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 585, col: 9, offset: 21615},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 585, col: 12, offset: 21618},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 585, col: 17, offset: 21623},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 585, col: 22, offset: 21628},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 585, col: 25, offset: 21631},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 586, col: 1, offset: 21656},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 21669},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 21669},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 5, offset: 21669},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 12, offset: 21676},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 14, offset: 21678},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 20, offset: 21684},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 26, offset: 21690},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 587, col: 33, offset: 21697},
								expr: &ruleRefExpr{
									pos:  position{line: 587, col: 33, offset: 21697},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 41, offset: 21705},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 587, col: 44, offset: 21708},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 48, offset: 21712},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 51, offset: 21715},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 56, offset: 21720},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 590, col: 1, offset: 21841},
			expr: &actionExpr{
				pos: position{line: 591, col: 5, offset: 21852},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 591, col: 5, offset: 21852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 591, col: 5, offset: 21852},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 9, offset: 21856},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 12, offset: 21859},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 18, offset: 21865},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 30, offset: 21877},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 591, col: 33, offset: 21880},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 594, col: 1, offset: 21971},
			expr: &choiceExpr{
				pos: position{line: 595, col: 5, offset: 21987},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 595, col: 5, offset: 21987},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 595, col: 5, offset: 21987},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 595, col: 5, offset: 21987},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 595, col: 11, offset: 21993},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 595, col: 22, offset: 22004},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 595, col: 27, offset: 22009},
										expr: &ruleRefExpr{
											pos:  position{line: 595, col: 27, offset: 22009},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 22107},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 598, col: 5, offset: 22107},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 599, col: 1, offset: 22142},
			expr: &actionExpr{
				pos: position{line: 599, col: 18, offset: 22159},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 599, col: 18, offset: 22159},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 599, col: 18, offset: 22159},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 599, col: 21, offset: 22162},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 25, offset: 22166},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 28, offset: 22169},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 33, offset: 22174},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 600, col: 1, offset: 22206},
			expr: &choiceExpr{
				pos: position{line: 601, col: 5, offset: 22221},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 601, col: 5, offset: 22221},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 602, col: 5, offset: 22232},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 603, col: 5, offset: 22242},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 604, col: 1, offset: 22253},
			expr: &actionExpr{
				pos: position{line: 605, col: 5, offset: 22264},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 605, col: 5, offset: 22264},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 605, col: 5, offset: 22264},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 11, offset: 22270},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 14, offset: 22273},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 19, offset: 22278},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 608, col: 1, offset: 22364},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 22374},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 609, col: 5, offset: 22374},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 22374},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 10, offset: 22379},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 20, offset: 22389},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 609, col: 23, offset: 22392},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 27, offset: 22396},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 609, col: 30, offset: 22399},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 36, offset: 22405},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 612, col: 1, offset: 22506},
			expr: &actionExpr{
				pos: position{line: 613, col: 5, offset: 22516},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 613, col: 5, offset: 22516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 613, col: 5, offset: 22516},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 9, offset: 22520},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 12, offset: 22523},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 18, offset: 22529},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 30, offset: 22541},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 613, col: 33, offset: 22544},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 616, col: 1, offset: 22634},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 22642},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 22642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 617, col: 5, offset: 22642},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 10, offset: 22647},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 13, offset: 22650},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 19, offset: 22656},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 31, offset: 22668},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 617, col: 34, offset: 22671},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 620, col: 1, offset: 22760},
			expr: &choiceExpr{
				pos: position{line: 621, col: 5, offset: 22776},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 22776},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 621, col: 5, offset: 22776},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 621, col: 5, offset: 22776},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 621, col: 11, offset: 22782},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 621, col: 22, offset: 22793},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 621, col: 27, offset: 22798},
										expr: &actionExpr{
											pos: position{line: 621, col: 28, offset: 22799},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 621, col: 28, offset: 22799},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 621, col: 28, offset: 22799},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 621, col: 31, offset: 22802},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 621, col: 35, offset: 22806},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 621, col: 38, offset: 22809},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 621, col: 40, offset: 22811},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 624, col: 5, offset: 22928},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 624, col: 5, offset: 22928},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 625, col: 1, offset: 22963},
			expr: &choiceExpr{
				pos: position{line: 626, col: 5, offset: 22978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 626, col: 5, offset: 22978},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 22989},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 627, col: 5, offset: 22989},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 7, offset: 22991},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 628, col: 1, offset: 23069},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 23077},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 23077},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 629, col: 5, offset: 23077},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 10, offset: 23082},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 13, offset: 23085},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 19, offset: 23091},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 27, offset: 23099},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 629, col: 30, offset: 23102},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 632, col: 1, offset: 23193},
			expr: &choiceExpr{
				pos: position{line: 633, col: 5, offset: 23205},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 633, col: 5, offset: 23205},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 633, col: 5, offset: 23205},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 633, col: 5, offset: 23205},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 633, col: 11, offset: 23211},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 633, col: 17, offset: 23217},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 633, col: 22, offset: 23222},
										expr: &ruleRefExpr{
											pos:  position{line: 633, col: 22, offset: 23222},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 5, offset: 23315},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 636, col: 5, offset: 23315},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 637, col: 1, offset: 23350},
			expr: &actionExpr{
				pos: position{line: 637, col: 13, offset: 23362},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 637, col: 13, offset: 23362},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 637, col: 13, offset: 23362},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 637, col: 16, offset: 23365},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 20, offset: 23369},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 23, offset: 23372},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 25, offset: 23374},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 638, col: 1, offset: 23398},
			expr: &actionExpr{
				pos: position{line: 639, col: 5, offset: 23408},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 639, col: 5, offset: 23408},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 23408},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 9, offset: 23412},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 14, offset: 23417},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 639, col: 17, offset: 23420},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 21, offset: 23424},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 639, col: 24, offset: 23427},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 30, offset: 23433},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 642, col: 1, offset: 23515},
			expr: &actionExpr{
				pos: position{line: 643, col: 5, offset: 23525},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 643, col: 5, offset: 23525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 23525},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 15, offset: 23535},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 23549},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 10, offset: 23554},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 10, offset: 23554},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 23567},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 645, col: 11, offset: 23573},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 11, offset: 23573},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 23587},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 646, col: 11, offset: 23593},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 11, offset: 23593},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 23607},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 647, col: 13, offset: 23615},
								expr: &ruleRefExpr{
									pos:  position{line: 647, col: 13, offset: 23615},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 23631},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 648, col: 12, offset: 23638},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 12, offset: 23638},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 23653},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 649, col: 13, offset: 23661},
								expr: &ruleRefExpr{
									pos:  position{line: 649, col: 13, offset: 23661},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 23677},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 11, offset: 23683},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 654, col: 1, offset: 23907},
			expr: &choiceExpr{
				pos: position{line: 655, col: 5, offset: 23921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 655, col: 5, offset: 23921},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 655, col: 5, offset: 23921},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 655, col: 5, offset: 23921},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 655, col: 12, offset: 23928},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 655, col: 14, offset: 23930},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 23958},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 656, col: 5, offset: 23958},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 656, col: 5, offset: 23958},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 656, col: 12, offset: 23965},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 656, col: 14, offset: 23967},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 656, col: 26, offset: 23979},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 657, col: 1, offset: 24022},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 24040},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 24040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 24040},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 9, offset: 24044},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 14, offset: 24049},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 658, col: 18, offset: 24053},
								expr: &seqExpr{
									pos: position{line: 658, col: 19, offset: 24054},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 658, col: 19, offset: 24054},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 21, offset: 24056},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 24, offset: 24059},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 26, offset: 24061},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 665, col: 1, offset: 24251},
			expr: &actionExpr{
				pos: position{line: 666, col: 5, offset: 24270},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 666, col: 5, offset: 24270},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 666, col: 5, offset: 24270},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 11, offset: 24276},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 25, offset: 24290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 666, col: 30, offset: 24295},
								expr: &actionExpr{
									pos: position{line: 666, col: 31, offset: 24296},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 666, col: 31, offset: 24296},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 666, col: 31, offset: 24296},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 666, col: 34, offset: 24299},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 666, col: 38, offset: 24303},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 666, col: 41, offset: 24306},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 666, col: 46, offset: 24311},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 669, col: 1, offset: 24430},
			expr: &choiceExpr{
				pos: position{line: 670, col: 5, offset: 24442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 24442},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 24442},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 670, col: 5, offset: 24442},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 7, offset: 24444},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 12, offset: 24449},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 670, col: 14, offset: 24451},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 20, offset: 24457},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 670, col: 29, offset: 24466},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 670, col: 35, offset: 24472},
										expr: &ruleRefExpr{
											pos:  position{line: 670, col: 35, offset: 24472},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 24567},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 24567},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 673, col: 5, offset: 24567},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 7, offset: 24569},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 673, col: 12, offset: 24574},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 673, col: 14, offset: 24576},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 674, col: 1, offset: 24600},
			expr: &choiceExpr{
				pos: position{line: 675, col: 5, offset: 24613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 675, col: 5, offset: 24613},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 675, col: 5, offset: 24613},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 675, col: 5, offset: 24613},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 675, col: 7, offset: 24615},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 675, col: 10, offset: 24618},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 675, col: 12, offset: 24620},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 675, col: 15, offset: 24623},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 24651},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 24651},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 676, col: 5, offset: 24651},
									name: "_",
								},
								&notExpr{
									pos: position{line: 676, col: 7, offset: 24653},
									expr: &seqExpr{
										pos: position{line: 676, col: 9, offset: 24655},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 676, col: 9, offset: 24655},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 676, col: 27, offset: 24673},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 676, col: 30, offset: 24676},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 33, offset: 24679},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 677, col: 1, offset: 24703},
			expr: &ruleRefExpr{
				pos:  position{line: 678, col: 5, offset: 24716},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 679, col: 1, offset: 24721},
			expr: &actionExpr{
				pos: position{line: 680, col: 5, offset: 24734},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 680, col: 5, offset: 24734},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 24734},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 11, offset: 24740},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 19, offset: 24748},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 680, col: 24, offset: 24753},
								expr: &actionExpr{
									pos: position{line: 680, col: 25, offset: 24754},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 680, col: 25, offset: 24754},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 680, col: 30, offset: 24759},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 683, col: 1, offset: 24872},
			expr: &actionExpr{
				pos: position{line: 684, col: 5, offset: 24884},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 684, col: 5, offset: 24884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 5, offset: 24884},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 11, offset: 24890},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 24, offset: 24903},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 26, offset: 24905},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 31, offset: 24910},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 684, col: 33, offset: 24912},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 39, offset: 24918},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 48, offset: 24927},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 684, col: 54, offset: 24933},
								expr: &ruleRefExpr{
									pos:  position{line: 684, col: 54, offset: 24933},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 64, offset: 24943},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 66, offset: 24945},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 69, offset: 24948},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 684, col: 71, offset: 24950},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 79, offset: 24958},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 87, offset: 24966},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 684, col: 90, offset: 24969},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 94, offset: 24973},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 684, col: 97, offset: 24976},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 106, offset: 24985},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 687, col: 1, offset: 25134},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 25151},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 25151},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 25151},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 688, col: 5, offset: 25151},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 688, col: 7, offset: 25153},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 688, col: 14, offset: 25160},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 688, col: 14, offset: 25160},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 688, col: 21, offset: 25167},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 688, col: 29, offset: 25175},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 688, col: 36, offset: 25182},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 25215},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 689, col: 5, offset: 25215},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 690, col: 1, offset: 25242},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 25255},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 691, col: 5, offset: 25255},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 5, offset: 25255},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 7, offset: 25257},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 13, offset: 25263},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 15, offset: 25265},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 20, offset: 25270},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 692, col: 1, offset: 25305},
			expr: &actionExpr{
				pos: position{line: 693, col: 5, offset: 25320},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 693, col: 5, offset: 25320},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 693, col: 5, offset: 25320},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 7, offset: 25322},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 13, offset: 25328},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 15, offset: 25330},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 18, offset: 25333},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 20, offset: 25335},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 28, offset: 25343},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 694, col: 1, offset: 25378},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 25392},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 25392},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 695, col: 5, offset: 25392},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 7, offset: 25394},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 14, offset: 25401},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 695, col: 16, offset: 25403},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 21, offset: 25408},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 696, col: 1, offset: 25443},
			expr: &actionExpr{
				pos: position{line: 697, col: 5, offset: 25458},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 697, col: 5, offset: 25458},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 697, col: 5, offset: 25458},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 7, offset: 25460},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 13, offset: 25466},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 15, offset: 25468},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 18, offset: 25471},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 697, col: 20, offset: 25473},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 25, offset: 25478},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 697, col: 31, offset: 25484},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 37, offset: 25490},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 700, col: 1, offset: 25600},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 25613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 25613},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 25613},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 701, col: 5, offset: 25613},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 7, offset: 25615},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 701, col: 12, offset: 25620},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 701, col: 12, offset: 25620},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 701, col: 18, offset: 25626},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 25656},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 702, col: 5, offset: 25656},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 703, col: 1, offset: 25681},
			expr: &choiceExpr{
				pos: position{line: 704, col: 5, offset: 25694},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 704, col: 5, offset: 25694},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 704, col: 5, offset: 25694},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 704, col: 5, offset: 25694},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 704, col: 7, offset: 25696},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 704, col: 13, offset: 25702},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 704, col: 15, offset: 25704},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 704, col: 21, offset: 25710},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 25741},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 705, col: 5, offset: 25741},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 706, col: 1, offset: 25762},
			expr: &actionExpr{
				pos: position{line: 706, col: 10, offset: 25771},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 706, col: 10, offset: 25771},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 707, col: 1, offset: 25806},
			expr: &actionExpr{
				pos: position{line: 707, col: 6, offset: 25811},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 707, col: 6, offset: 25811},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 708, col: 1, offset: 25838},
			expr: &actionExpr{
				pos: position{line: 708, col: 8, offset: 25845},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 708, col: 8, offset: 25845},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 709, col: 1, offset: 25876},
			expr: &actionExpr{
				pos: position{line: 709, col: 8, offset: 25883},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 709, col: 8, offset: 25883},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 710, col: 1, offset: 25914},
			expr: &actionExpr{
				pos: position{line: 710, col: 9, offset: 25922},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 710, col: 9, offset: 25922},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 711, col: 1, offset: 25955},
			expr: &actionExpr{
				pos: position{line: 711, col: 9, offset: 25963},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 711, col: 9, offset: 25963},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 712, col: 1, offset: 25996},
			expr: &actionExpr{
				pos: position{line: 712, col: 6, offset: 26001},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 712, col: 6, offset: 26001},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 713, col: 1, offset: 26028},
			expr: &actionExpr{
				pos: position{line: 713, col: 10, offset: 26037},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 713, col: 10, offset: 26037},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 714, col: 1, offset: 26072},
			expr: &actionExpr{
				pos: position{line: 714, col: 9, offset: 26080},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 714, col: 9, offset: 26080},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 715, col: 1, offset: 26113},
			expr: &actionExpr{
				pos: position{line: 715, col: 6, offset: 26118},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 715, col: 6, offset: 26118},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 716, col: 1, offset: 26145},
			expr: &actionExpr{
				pos: position{line: 716, col: 9, offset: 26153},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 716, col: 9, offset: 26153},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 717, col: 1, offset: 26186},
			expr: &actionExpr{
				pos: position{line: 717, col: 7, offset: 26192},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 717, col: 7, offset: 26192},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 718, col: 1, offset: 26221},
			expr: &actionExpr{
				pos: position{line: 718, col: 8, offset: 26228},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 718, col: 8, offset: 26228},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 719, col: 1, offset: 26259},
			expr: &actionExpr{
				pos: position{line: 719, col: 8, offset: 26266},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 719, col: 8, offset: 26266},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 720, col: 1, offset: 26297},
			expr: &actionExpr{
				pos: position{line: 720, col: 8, offset: 26304},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 720, col: 8, offset: 26304},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 721, col: 1, offset: 26335},
			expr: &actionExpr{
				pos: position{line: 721, col: 9, offset: 26343},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 721, col: 9, offset: 26343},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 722, col: 1, offset: 26376},
			expr: &actionExpr{
				pos: position{line: 722, col: 9, offset: 26384},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 722, col: 9, offset: 26384},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 723, col: 1, offset: 26417},
			expr: &choiceExpr{
				pos: position{line: 724, col: 5, offset: 26439},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 26439},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 14, offset: 26448},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 19, offset: 26453},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 26, offset: 26460},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 33, offset: 26467},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 41, offset: 26475},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 49, offset: 26483},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 58, offset: 26492},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 66, offset: 26500},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 74, offset: 26508},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 725, col: 1, offset: 26511},
			expr: &choiceExpr{
				pos: position{line: 726, col: 5, offset: 26523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 26523},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 26539},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 728, col: 5, offset: 26559},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 729, col: 5, offset: 26577},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 26596},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 26613},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 26626},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 733, col: 5, offset: 26635},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 26652},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 735, col: 5, offset: 26671},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 736, col: 5, offset: 26690},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 737, col: 1, offset: 26702},
			expr: &choiceExpr{
				pos: position{line: 738, col: 5, offset: 26720},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 26720},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 738, col: 5, offset: 26720},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 738, col: 5, offset: 26720},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 7, offset: 26722},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 738, col: 14, offset: 26729},
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 15, offset: 26730},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 741, col: 5, offset: 26845},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 741, col: 5, offset: 26845},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 7, offset: 26847},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 744, col: 1, offset: 26950},
			expr: &choiceExpr{
				pos: position{line: 745, col: 5, offset: 26969},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 26969},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 745, col: 5, offset: 26969},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 745, col: 5, offset: 26969},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 7, offset: 26971},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 745, col: 11, offset: 26975},
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 12, offset: 26976},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 748, col: 5, offset: 27090},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 748, col: 5, offset: 27090},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 7, offset: 27092},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 751, col: 1, offset: 27190},
			expr: &actionExpr{
				pos: position{line: 752, col: 5, offset: 27207},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 752, col: 5, offset: 27207},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 752, col: 7, offset: 27209},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 755, col: 1, offset: 27321},
			expr: &actionExpr{
				pos: position{line: 756, col: 5, offset: 27340},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 756, col: 5, offset: 27340},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 756, col: 7, offset: 27342},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 759, col: 1, offset: 27450},
			expr: &choiceExpr{
				pos: position{line: 760, col: 5, offset: 27469},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 760, col: 5, offset: 27469},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 760, col: 5, offset: 27469},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 761, col: 5, offset: 27572},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 761, col: 5, offset: 27572},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 762, col: 1, offset: 27673},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 27689},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 763, col: 5, offset: 27689},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 764, col: 1, offset: 27784},
			expr: &actionExpr{
				pos: position{line: 765, col: 5, offset: 27801},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 765, col: 5, offset: 27801},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 765, col: 5, offset: 27801},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 765, col: 10, offset: 27806},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 10, offset: 27806},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 768, col: 1, offset: 27920},
			expr: &actionExpr{
				pos: position{line: 769, col: 5, offset: 27936},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 769, col: 5, offset: 27936},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 769, col: 5, offset: 27936},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 769, col: 9, offset: 27940},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 13, offset: 27944},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 769, col: 18, offset: 27949},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 772, col: 1, offset: 28037},
			expr: &choiceExpr{
				pos: position{line: 773, col: 5, offset: 28050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 773, col: 5, offset: 28050},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 774, col: 5, offset: 28066},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 774, col: 5, offset: 28066},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 9, offset: 28070},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 777, col: 1, offset: 28168},
			expr: &choiceExpr{
				pos: position{line: 778, col: 5, offset: 28177},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 778, col: 5, offset: 28177},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 779, col: 5, offset: 28193},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 780, col: 5, offset: 28211},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 781, col: 1, offset: 28223},
			expr: &choiceExpr{
				pos: position{line: 782, col: 5, offset: 28241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 782, col: 5, offset: 28241},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 782, col: 5, offset: 28241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 782, col: 5, offset: 28241},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 10, offset: 28246},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 782, col: 24, offset: 28260},
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 25, offset: 28261},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 28301},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 783, col: 5, offset: 28301},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 783, col: 5, offset: 28301},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 10, offset: 28306},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 783, col: 25, offset: 28321},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 783, col: 29, offset: 28325},
										expr: &seqExpr{
											pos: position{line: 783, col: 30, offset: 28326},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 783, col: 30, offset: 28326},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 783, col: 33, offset: 28329},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 783, col: 37, offset: 28333},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 783, col: 40, offset: 28336},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 28568},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 789, col: 5, offset: 28568},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 10, offset: 28573},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 792, col: 5, offset: 28673},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 792, col: 5, offset: 28673},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 792, col: 5, offset: 28673},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 792, col: 9, offset: 28677},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 792, col: 12, offset: 28680},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 792, col: 14, offset: 28682},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 792, col: 24, offset: 28692},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 793, col: 1, offset: 28714},
			expr: &actionExpr{
				pos: position{line: 794, col: 5, offset: 28728},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 794, col: 5, offset: 28728},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 794, col: 11, offset: 28734},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 797, col: 1, offset: 28829},
			expr: &actionExpr{
				pos: position{line: 798, col: 5, offset: 28842},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 798, col: 5, offset: 28842},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 798, col: 5, offset: 28842},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 11, offset: 28848},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 16, offset: 28853},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 798, col: 21, offset: 28858},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 21, offset: 28858},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 801, col: 1, offset: 28950},
			expr: &actionExpr{
				pos: position{line: 801, col: 16, offset: 28965},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 801, col: 16, offset: 28965},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 801, col: 16, offset: 28965},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 801, col: 19, offset: 28968},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 801, col: 23, offset: 28972},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 801, col: 26, offset: 28975},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 30, offset: 28979},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 802, col: 1, offset: 29004},
			expr: &choiceExpr{
				pos: position{line: 803, col: 5, offset: 29020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 803, col: 5, offset: 29020},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 803, col: 5, offset: 29020},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 803, col: 5, offset: 29020},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 9, offset: 29024},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 803, col: 12, offset: 29027},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 19, offset: 29034},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 33, offset: 29048},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 803, col: 36, offset: 29051},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 806, col: 5, offset: 29148},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 806, col: 5, offset: 29148},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 806, col: 5, offset: 29148},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 9, offset: 29152},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 12, offset: 29155},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 16, offset: 29159},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 21, offset: 29164},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 806, col: 24, offset: 29167},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 29258},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 809, col: 5, offset: 29258},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 809, col: 5, offset: 29258},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 10, offset: 29263},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 809, col: 13, offset: 29266},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 809, col: 17, offset: 29270},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 22, offset: 29275},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 809, col: 25, offset: 29278},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 812, col: 5, offset: 29368},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 812, col: 5, offset: 29368},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 812, col: 5, offset: 29368},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 812, col: 10, offset: 29373},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 812, col: 13, offset: 29376},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 21, offset: 29384},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 812, col: 26, offset: 29389},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 812, col: 29, offset: 29392},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 812, col: 33, offset: 29396},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 812, col: 36, offset: 29399},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 44, offset: 29407},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 812, col: 49, offset: 29412},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 812, col: 52, offset: 29415},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 815, col: 1, offset: 29530},
			expr: &actionExpr{
				pos: position{line: 816, col: 5, offset: 29550},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 816, col: 5, offset: 29550},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 816, col: 7, offset: 29552},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 822, col: 1, offset: 29767},
			expr: &choiceExpr{
				pos: position{line: 823, col: 5, offset: 29792},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 29792},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 29792},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 823, col: 5, offset: 29792},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 823, col: 9, offset: 29796},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 823, col: 11, offset: 29798},
										expr: &ruleRefExpr{
											pos:  position{line: 823, col: 11, offset: 29798},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 823, col: 37, offset: 29824},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 29850},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 824, col: 5, offset: 29850},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 824, col: 5, offset: 29850},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 824, col: 9, offset: 29854},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 824, col: 11, offset: 29856},
										expr: &ruleRefExpr{
											pos:  position{line: 824, col: 11, offset: 29856},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 824, col: 37, offset: 29882},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 825, col: 1, offset: 29904},
			expr: &choiceExpr{
				pos: position{line: 826, col: 5, offset: 29933},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 826, col: 5, offset: 29933},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 29950},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 827, col: 5, offset: 29950},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 827, col: 7, offset: 29952},
								expr: &ruleRefExpr{
									pos:  position{line: 827, col: 7, offset: 29952},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 830, col: 1, offset: 30088},
			expr: &choiceExpr{
				pos: position{line: 831, col: 5, offset: 30117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 30117},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 30117},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 831, col: 5, offset: 30117},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 831, col: 10, offset: 30122},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 831, col: 12, offset: 30124},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 30151},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 30151},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 832, col: 5, offset: 30151},
									expr: &litMatcher{
										pos:        position{line: 832, col: 7, offset: 30153},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 832, col: 13, offset: 30159},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 15, offset: 30161},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 833, col: 1, offset: 30196},
			expr: &choiceExpr{
				pos: position{line: 834, col: 5, offset: 30225},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 834, col: 5, offset: 30225},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 30242},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 835, col: 5, offset: 30242},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 835, col: 7, offset: 30244},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 7, offset: 30244},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 838, col: 1, offset: 30380},
			expr: &choiceExpr{
				pos: position{line: 839, col: 5, offset: 30409},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 839, col: 5, offset: 30409},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 839, col: 5, offset: 30409},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 839, col: 5, offset: 30409},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 839, col: 10, offset: 30414},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 839, col: 12, offset: 30416},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 30443},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 840, col: 5, offset: 30443},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 840, col: 5, offset: 30443},
									expr: &litMatcher{
										pos:        position{line: 840, col: 7, offset: 30445},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 840, col: 13, offset: 30451},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 15, offset: 30453},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 841, col: 1, offset: 30488},
			expr: &actionExpr{
				pos: position{line: 842, col: 5, offset: 30505},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 842, col: 5, offset: 30505},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 842, col: 5, offset: 30505},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 842, col: 10, offset: 30510},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 842, col: 13, offset: 30513},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 15, offset: 30515},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 842, col: 20, offset: 30520},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 842, col: 23, offset: 30523},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 845, col: 1, offset: 30732},
			expr: &actionExpr{
				pos: position{line: 846, col: 5, offset: 30750},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 846, col: 7, offset: 30752},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 7, offset: 30752},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 17, offset: 30762},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 28, offset: 30773},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 39, offset: 30784},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 9, offset: 30801},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 18, offset: 30810},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 28, offset: 30820},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 38, offset: 30830},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 9, offset: 30846},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 21, offset: 30858},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 33, offset: 30870},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 849, col: 9, offset: 30888},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 849, col: 18, offset: 30897},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 850, col: 9, offset: 30914},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 850, col: 22, offset: 30927},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 851, col: 9, offset: 30942},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 852, col: 9, offset: 30958},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 852, col: 16, offset: 30965},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 853, col: 9, offset: 30979},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 853, col: 18, offset: 30988},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 856, col: 1, offset: 31102},
			expr: &choiceExpr{
				pos: position{line: 857, col: 5, offset: 31120},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 31120},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 857, col: 5, offset: 31120},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 857, col: 5, offset: 31120},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 31126},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 857, col: 21, offset: 31136},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 857, col: 26, offset: 31141},
										expr: &ruleRefExpr{
											pos:  position{line: 857, col: 26, offset: 31141},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 860, col: 5, offset: 31242},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 860, col: 5, offset: 31242},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 861, col: 1, offset: 31265},
			expr: &actionExpr{
				pos: position{line: 861, col: 21, offset: 31285},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 861, col: 21, offset: 31285},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 861, col: 21, offset: 31285},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 24, offset: 31288},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 28, offset: 31292},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 31, offset: 31295},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 35, offset: 31299},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 862, col: 1, offset: 31329},
			expr: &actionExpr{
				pos: position{line: 863, col: 5, offset: 31343},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 863, col: 5, offset: 31343},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 863, col: 5, offset: 31343},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 10, offset: 31348},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 863, col: 20, offset: 31358},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 863, col: 23, offset: 31361},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 863, col: 27, offset: 31365},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 863, col: 30, offset: 31368},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 34, offset: 31372},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 866, col: 1, offset: 31453},
			expr: &choiceExpr{
				pos: position{line: 867, col: 5, offset: 31467},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 867, col: 5, offset: 31467},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 868, col: 5, offset: 31486},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 869, col: 1, offset: 31499},
			expr: &actionExpr{
				pos: position{line: 869, col: 12, offset: 31510},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 869, col: 12, offset: 31510},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 869, col: 13, offset: 31511},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 869, col: 13, offset: 31511},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 869, col: 21, offset: 31519},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 869, col: 28, offset: 31526},
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 29, offset: 31527},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 870, col: 1, offset: 31564},
			expr: &actionExpr{
				pos: position{line: 870, col: 11, offset: 31574},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 870, col: 11, offset: 31574},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 870, col: 12, offset: 31575},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 870, col: 12, offset: 31575},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 870, col: 19, offset: 31582},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 870, col: 25, offset: 31588},
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 26, offset: 31589},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 871, col: 1, offset: 31625},
			expr: &actionExpr{
				pos: position{line: 871, col: 11, offset: 31635},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 871, col: 11, offset: 31635},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 871, col: 11, offset: 31635},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 871, col: 16, offset: 31640},
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 17, offset: 31641},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 872, col: 1, offset: 31677},
			expr: &actionExpr{
				pos: position{line: 872, col: 12, offset: 31688},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 872, col: 12, offset: 31688},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 872, col: 13, offset: 31689},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 872, col: 13, offset: 31689},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 872, col: 21, offset: 31697},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 872, col: 28, offset: 31704},
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 29, offset: 31705},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 873, col: 1, offset: 31742},
			expr: &actionExpr{
				pos: position{line: 873, col: 11, offset: 31752},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 873, col: 11, offset: 31752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 873, col: 11, offset: 31752},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 873, col: 16, offset: 31757},
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 17, offset: 31758},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 874, col: 1, offset: 31794},
			expr: &charClassMatcher{
				pos:        position{line: 874, col: 19, offset: 31812},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 875, col: 1, offset: 31823},
			expr: &choiceExpr{
				pos: position{line: 875, col: 18, offset: 31840},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 875, col: 18, offset: 31840},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 875, col: 36, offset: 31858},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 876, col: 1, offset: 31864},
			expr: &actionExpr{
				pos: position{line: 877, col: 5, offset: 31879},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 877, col: 5, offset: 31879},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 877, col: 8, offset: 31882},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 878, col: 1, offset: 31962},
			expr: &choiceExpr{
				pos: position{line: 879, col: 5, offset: 31981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 31981},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 879, col: 5, offset: 31981},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 879, col: 5, offset: 31981},
									expr: &seqExpr{
										pos: position{line: 879, col: 7, offset: 31983},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 879, col: 7, offset: 31983},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 879, col: 15, offset: 31991},
												expr: &ruleRefExpr{
													pos:  position{line: 879, col: 16, offset: 31992},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 879, col: 32, offset: 32008},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 879, col: 48, offset: 32024},
									expr: &ruleRefExpr{
										pos:  position{line: 879, col: 48, offset: 32024},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 32075},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 880, col: 5, offset: 32075},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 32114},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 32114},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 881, col: 5, offset: 32114},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 881, col: 10, offset: 32119},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 13, offset: 32122},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 882, col: 5, offset: 32153},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 882, col: 5, offset: 32153},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 5, offset: 32195},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 883, col: 5, offset: 32195},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 883, col: 5, offset: 32195},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 8, offset: 32198},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 883, col: 26, offset: 32216},
									expr: &seqExpr{
										pos: position{line: 883, col: 28, offset: 32218},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 883, col: 28, offset: 32218},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 883, col: 31, offset: 32221},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 884, col: 1, offset: 32245},
			expr: &actionExpr{
				pos: position{line: 885, col: 5, offset: 32265},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 885, col: 5, offset: 32265},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 32265},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 11, offset: 32271},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 26, offset: 32286},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 885, col: 31, offset: 32291},
								expr: &actionExpr{
									pos: position{line: 885, col: 32, offset: 32292},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 885, col: 32, offset: 32292},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 885, col: 32, offset: 32292},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 885, col: 35, offset: 32295},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 885, col: 39, offset: 32299},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 885, col: 42, offset: 32302},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 885, col: 45, offset: 32305},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 888, col: 1, offset: 32419},
			expr: &choiceExpr{
				pos: position{line: 889, col: 5, offset: 32431},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 889, col: 5, offset: 32431},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 5, offset: 32450},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 891, col: 5, offset: 32466},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 892, col: 5, offset: 32474},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 893, col: 1, offset: 32483},
			expr: &actionExpr{
				pos: position{line: 894, col: 5, offset: 32492},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 894, col: 5, offset: 32492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 894, col: 5, offset: 32492},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 894, col: 14, offset: 32501},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 18, offset: 32505},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 897, col: 1, offset: 32624},
			expr: &seqExpr{
				pos: position{line: 897, col: 12, offset: 32635},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 897, col: 12, offset: 32635},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 897, col: 15, offset: 32638},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 897, col: 19, offset: 32642},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 897, col: 22, offset: 32645},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 897, col: 26, offset: 32649},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 898, col: 1, offset: 32652},
			expr: &seqExpr{
				pos: position{line: 898, col: 6, offset: 32657},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 898, col: 6, offset: 32657},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 898, col: 11, offset: 32662},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 898, col: 16, offset: 32667},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 898, col: 21, offset: 32672},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 899, col: 1, offset: 32678},
			expr: &seqExpr{
				pos: position{line: 899, col: 6, offset: 32683},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 899, col: 6, offset: 32683},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 899, col: 11, offset: 32688},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 900, col: 1, offset: 32694},
			expr: &seqExpr{
				pos: position{line: 900, col: 12, offset: 32705},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 900, col: 12, offset: 32705},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 900, col: 24, offset: 32717},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 901, col: 1, offset: 32728},
			expr: &seqExpr{
				pos: position{line: 901, col: 15, offset: 32742},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 901, col: 15, offset: 32742},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 901, col: 18, offset: 32745},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 901, col: 22, offset: 32749},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 901, col: 25, offset: 32752},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 901, col: 29, offset: 32756},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 901, col: 32, offset: 32759},
						expr: &seqExpr{
							pos: position{line: 901, col: 33, offset: 32760},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 901, col: 33, offset: 32760},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 901, col: 37, offset: 32764},
									expr: &charClassMatcher{
										pos:        position{line: 901, col: 37, offset: 32764},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 902, col: 1, offset: 32773},
			expr: &choiceExpr{
				pos: position{line: 903, col: 5, offset: 32788},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 903, col: 5, offset: 32788},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 904, col: 5, offset: 32796},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 904, col: 6, offset: 32797},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 904, col: 6, offset: 32797},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 904, col: 12, offset: 32803},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 904, col: 17, offset: 32808},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 904, col: 20, offset: 32811},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 904, col: 24, offset: 32815},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 904, col: 27, offset: 32818},
								expr: &seqExpr{
									pos: position{line: 904, col: 28, offset: 32819},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 904, col: 28, offset: 32819},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 904, col: 32, offset: 32823},
											expr: &charClassMatcher{
												pos:        position{line: 904, col: 32, offset: 32823},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 905, col: 1, offset: 32832},
			expr: &actionExpr{
				pos: position{line: 906, col: 5, offset: 32845},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 906, col: 5, offset: 32845},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 906, col: 5, offset: 32845},
							expr: &litMatcher{
								pos:        position{line: 906, col: 5, offset: 32845},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 906, col: 10, offset: 32850},
							expr: &seqExpr{
								pos: position{line: 906, col: 11, offset: 32851},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 906, col: 11, offset: 32851},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 906, col: 19, offset: 32859},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 909, col: 1, offset: 32984},
			expr: &seqExpr{
				pos: position{line: 909, col: 11, offset: 32994},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 909, col: 11, offset: 32994},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 909, col: 16, offset: 32999},
						expr: &seqExpr{
							pos: position{line: 909, col: 17, offset: 33000},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 909, col: 17, offset: 33000},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 909, col: 21, offset: 33004},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 910, col: 1, offset: 33011},
			expr: &choiceExpr{
				pos: position{line: 911, col: 5, offset: 33024},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 911, col: 5, offset: 33024},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 912, col: 5, offset: 33033},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 913, col: 5, offset: 33042},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 914, col: 5, offset: 33051},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 915, col: 5, offset: 33059},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 916, col: 5, offset: 33067},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 917, col: 5, offset: 33075},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 918, col: 5, offset: 33083},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 919, col: 5, offset: 33091},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 920, col: 1, offset: 33095},
			expr: &actionExpr{
				pos: position{line: 921, col: 5, offset: 33102},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 921, col: 5, offset: 33102},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 921, col: 5, offset: 33102},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 921, col: 10, offset: 33107},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 921, col: 14, offset: 33111},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 921, col: 19, offset: 33116},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 921, col: 23, offset: 33120},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 921, col: 28, offset: 33125},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 921, col: 32, offset: 33129},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 922, col: 1, offset: 33165},
			expr: &actionExpr{
				pos: position{line: 923, col: 5, offset: 33173},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 923, col: 5, offset: 33173},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 923, col: 5, offset: 33173},
							expr: &seqExpr{
								pos: position{line: 923, col: 7, offset: 33175},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 923, col: 7, offset: 33175},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 923, col: 11, offset: 33179},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 15, offset: 33183},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 923, col: 19, offset: 33187},
										expr: &choiceExpr{
											pos: position{line: 923, col: 21, offset: 33189},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 923, col: 21, offset: 33189},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 923, col: 32, offset: 33200},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 38, offset: 33206},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 40, offset: 33208},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 924, col: 1, offset: 33240},
			expr: &choiceExpr{
				pos: position{line: 925, col: 5, offset: 33258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 925, col: 5, offset: 33258},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 925, col: 5, offset: 33258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 925, col: 5, offset: 33258},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 925, col: 7, offset: 33260},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 7, offset: 33260},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 925, col: 17, offset: 33270},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 925, col: 19, offset: 33272},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 928, col: 5, offset: 33336},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 928, col: 5, offset: 33336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 928, col: 5, offset: 33336},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 7, offset: 33338},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 928, col: 11, offset: 33342},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 928, col: 13, offset: 33344},
										expr: &ruleRefExpr{
											pos:  position{line: 928, col: 13, offset: 33344},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 23, offset: 33354},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 928, col: 28, offset: 33359},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 928, col: 30, offset: 33361},
										expr: &ruleRefExpr{
											pos:  position{line: 928, col: 30, offset: 33361},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 928, col: 40, offset: 33371},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 42, offset: 33373},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 33472},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 33472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 931, col: 5, offset: 33472},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 931, col: 10, offset: 33477},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 931, col: 12, offset: 33479},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 12, offset: 33479},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 931, col: 22, offset: 33489},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 24, offset: 33491},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 33562},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 33562},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 934, col: 5, offset: 33562},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 7, offset: 33564},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 934, col: 11, offset: 33568},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 934, col: 13, offset: 33570},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 13, offset: 33570},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 934, col: 23, offset: 33580},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 33648},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 937, col: 5, offset: 33648},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 940, col: 1, offset: 33684},
			expr: &choiceExpr{
				pos: position{line: 941, col: 5, offset: 33696},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 941, col: 5, offset: 33696},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 942, col: 5, offset: 33703},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 943, col: 1, offset: 33707},
			expr: &actionExpr{
				pos: position{line: 943, col: 12, offset: 33718},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 943, col: 12, offset: 33718},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 943, col: 12, offset: 33718},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 943, col: 16, offset: 33722},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 18, offset: 33724},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 944, col: 1, offset: 33761},
			expr: &actionExpr{
				pos: position{line: 944, col: 12, offset: 33772},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 944, col: 12, offset: 33772},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 12, offset: 33772},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 14, offset: 33774},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 944, col: 18, offset: 33778},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 945, col: 1, offset: 33815},
			expr: &actionExpr{
				pos: position{line: 946, col: 5, offset: 33826},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 946, col: 5, offset: 33826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 946, col: 5, offset: 33826},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 7, offset: 33828},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 946, col: 10, offset: 33831},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 946, col: 14, offset: 33835},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 16, offset: 33837},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 949, col: 1, offset: 33909},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 33920},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 33920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 33920},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 7, offset: 33922},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 950, col: 11, offset: 33926},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 950, col: 15, offset: 33930},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 17, offset: 33932},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 953, col: 1, offset: 33994},
			expr: &actionExpr{
				pos: position{line: 954, col: 4, offset: 34002},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 954, col: 4, offset: 34002},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 954, col: 6, offset: 34004},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 955, col: 1, offset: 34043},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 34057},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 956, col: 5, offset: 34057},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 5, offset: 34072},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 958, col: 1, offset: 34087},
			expr: &actionExpr{
				pos: position{line: 958, col: 14, offset: 34100},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 958, col: 14, offset: 34100},
					expr: &charClassMatcher{
						pos:        position{line: 958, col: 14, offset: 34100},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 959, col: 1, offset: 34138},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 34157},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 960, col: 5, offset: 34157},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 960, col: 5, offset: 34157},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 9, offset: 34161},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 961, col: 1, offset: 34203},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 34219},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 34219},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 962, col: 5, offset: 34219},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 962, col: 5, offset: 34219},
									expr: &litMatcher{
										pos:        position{line: 962, col: 5, offset: 34219},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 962, col: 10, offset: 34224},
									expr: &charClassMatcher{
										pos:        position{line: 962, col: 10, offset: 34224},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 962, col: 17, offset: 34231},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 962, col: 21, offset: 34235},
									expr: &charClassMatcher{
										pos:        position{line: 962, col: 21, offset: 34235},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 962, col: 28, offset: 34242},
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 28, offset: 34242},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 34301},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 965, col: 5, offset: 34301},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 965, col: 5, offset: 34301},
									expr: &litMatcher{
										pos:        position{line: 965, col: 5, offset: 34301},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 965, col: 10, offset: 34306},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 965, col: 14, offset: 34310},
									expr: &charClassMatcher{
										pos:        position{line: 965, col: 14, offset: 34310},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 965, col: 21, offset: 34317},
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 21, offset: 34317},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 34376},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 968, col: 6, offset: 34377},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 968, col: 6, offset: 34377},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 968, col: 12, offset: 34383},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 969, col: 1, offset: 34424},
			expr: &seqExpr{
				pos: position{line: 969, col: 16, offset: 34439},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 969, col: 16, offset: 34439},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 969, col: 21, offset: 34444},
						expr: &charClassMatcher{
							pos:        position{line: 969, col: 21, offset: 34444},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 27, offset: 34450},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 970, col: 1, offset: 34461},
			expr: &litMatcher{
				pos:        position{line: 970, col: 7, offset: 34467},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 971, col: 1, offset: 34473},
			expr: &seqExpr{
				pos: position{line: 971, col: 12, offset: 34484},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 971, col: 12, offset: 34484},
						expr: &choiceExpr{
							pos: position{line: 971, col: 13, offset: 34485},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 971, col: 13, offset: 34485},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 971, col: 19, offset: 34491},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 971, col: 25, offset: 34497},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 972, col: 1, offset: 34503},
			expr: &actionExpr{
				pos: position{line: 972, col: 7, offset: 34509},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 972, col: 7, offset: 34509},
					expr: &ruleRefExpr{
						pos:  position{line: 972, col: 7, offset: 34509},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 973, col: 1, offset: 34550},
			expr: &charClassMatcher{
				pos:        position{line: 973, col: 12, offset: 34561},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 974, col: 1, offset: 34573},
			expr: &choiceExpr{
				pos: position{line: 975, col: 5, offset: 34590},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 975, col: 5, offset: 34590},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 975, col: 5, offset: 34590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 975, col: 5, offset: 34590},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 975, col: 9, offset: 34594},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 975, col: 11, offset: 34596},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 11, offset: 34596},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 975, col: 29, offset: 34614},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 34651},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 34651},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 976, col: 5, offset: 34651},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 976, col: 9, offset: 34655},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 976, col: 11, offset: 34657},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 11, offset: 34657},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 29, offset: 34675},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 977, col: 1, offset: 34708},
			expr: &choiceExpr{
				pos: position{line: 978, col: 5, offset: 34729},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 978, col: 5, offset: 34729},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 978, col: 5, offset: 34729},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 978, col: 5, offset: 34729},
									expr: &choiceExpr{
										pos: position{line: 978, col: 7, offset: 34731},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 978, col: 7, offset: 34731},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 13, offset: 34737},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 978, col: 26, offset: 34750,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 34787},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 979, col: 5, offset: 34787},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 979, col: 5, offset: 34787},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 979, col: 10, offset: 34792},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 12, offset: 34794},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 980, col: 1, offset: 34827},
			expr: &actionExpr{
				pos: position{line: 981, col: 5, offset: 34839},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 981, col: 5, offset: 34839},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 981, col: 5, offset: 34839},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 10, offset: 34844},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 981, col: 23, offset: 34857},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 981, col: 28, offset: 34862},
								expr: &ruleRefExpr{
									pos:  position{line: 981, col: 28, offset: 34862},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 982, col: 1, offset: 34923},
			expr: &choiceExpr{
				pos: position{line: 983, col: 5, offset: 34940},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 983, col: 5, offset: 34940},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 5, offset: 34957},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 985, col: 1, offset: 34968},
			expr: &actionExpr{
				pos: position{line: 985, col: 16, offset: 34983},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 985, col: 16, offset: 34983},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 986, col: 1, offset: 35031},
			expr: &choiceExpr{
				pos: position{line: 987, col: 5, offset: 35047},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 35047},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 988, col: 5, offset: 35064},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 989, col: 1, offset: 35070},
			expr: &actionExpr{
				pos: position{line: 989, col: 14, offset: 35083},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 989, col: 14, offset: 35083},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 989, col: 14, offset: 35083},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 989, col: 19, offset: 35088},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 989, col: 22, offset: 35091},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 989, col: 22, offset: 35091},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 989, col: 38, offset: 35107},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 990, col: 1, offset: 35141},
			expr: &actionExpr{
				pos: position{line: 991, col: 5, offset: 35157},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 991, col: 5, offset: 35157},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 991, col: 5, offset: 35157},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 6, offset: 35158},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 991, col: 22, offset: 35174},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 23, offset: 35175},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 991, col: 35, offset: 35187},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 40, offset: 35192},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 991, col: 50, offset: 35202},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 991, col: 55, offset: 35207},
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 55, offset: 35207},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 994, col: 1, offset: 35275},
			expr: &choiceExpr{
				pos: position{line: 994, col: 19, offset: 35293},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 994, col: 19, offset: 35293},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 994, col: 34, offset: 35308},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 994, col: 34, offset: 35308},
								expr: &litMatcher{
									pos:        position{line: 994, col: 34, offset: 35308},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 994, col: 39, offset: 35313},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 995, col: 1, offset: 35325},
			expr: &seqExpr{
				pos: position{line: 995, col: 15, offset: 35339},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 995, col: 15, offset: 35339},
						expr: &ruleRefExpr{
							pos:  position{line: 995, col: 15, offset: 35339},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 995, col: 28, offset: 35352},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 996, col: 1, offset: 35356},
			expr: &choiceExpr{
				pos: position{line: 997, col: 5, offset: 35370},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 997, col: 5, offset: 35370},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 35387},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 35399},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 999, col: 5, offset: 35399},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1000, col: 1, offset: 35423},
			expr: &choiceExpr{
				pos: position{line: 1001, col: 5, offset: 35436},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1001, col: 5, offset: 35436},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1002, col: 5, offset: 35450},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1003, col: 1, offset: 35456},
			expr: &actionExpr{
				pos: position{line: 1003, col: 11, offset: 35466},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1003, col: 11, offset: 35466},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1003, col: 11, offset: 35466},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1003, col: 16, offset: 35471},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1003, col: 19, offset: 35474},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1003, col: 19, offset: 35474},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1003, col: 32, offset: 35487},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1004, col: 1, offset: 35521},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 5, offset: 35536},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 35536},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1005, col: 5, offset: 35536},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1006, col: 5, offset: 35564},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1006, col: 5, offset: 35564},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1007, col: 5, offset: 35594},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1008, col: 1, offset: 35599},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 5, offset: 35620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1009, col: 5, offset: 35620},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1009, col: 5, offset: 35620},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1009, col: 5, offset: 35620},
									expr: &choiceExpr{
										pos: position{line: 1009, col: 7, offset: 35622},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1009, col: 7, offset: 35622},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1009, col: 13, offset: 35628},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1009, col: 26, offset: 35641,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 35678},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1010, col: 5, offset: 35678},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1010, col: 5, offset: 35678},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 10, offset: 35683},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 12, offset: 35685},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1011, col: 1, offset: 35718},
			expr: &choiceExpr{
				pos: position{line: 1012, col: 5, offset: 35737},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1012, col: 5, offset: 35737},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1013, col: 5, offset: 35758},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1014, col: 1, offset: 35772},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 5, offset: 35793},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1015, col: 5, offset: 35793},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 35801},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1016, col: 5, offset: 35801},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1017, col: 5, offset: 35841},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 35850},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1018, col: 5, offset: 35850},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 35879},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1019, col: 5, offset: 35879},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 35908},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1020, col: 5, offset: 35908},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 35937},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1021, col: 5, offset: 35937},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 35966},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1022, col: 5, offset: 35966},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 35995},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1023, col: 5, offset: 35995},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1024, col: 1, offset: 36020},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 36038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 36038},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1025, col: 5, offset: 36038},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 36066},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1026, col: 5, offset: 36066},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1027, col: 5, offset: 36094},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1028, col: 1, offset: 36099},
			expr: &choiceExpr{
				pos: position{line: 1029, col: 5, offset: 36117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1029, col: 5, offset: 36117},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1029, col: 5, offset: 36117},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1029, col: 5, offset: 36117},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1029, col: 9, offset: 36121},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1029, col: 16, offset: 36128},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1029, col: 16, offset: 36128},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 25, offset: 36137},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 34, offset: 36146},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 43, offset: 36155},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1032, col: 5, offset: 36218},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1032, col: 5, offset: 36218},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1032, col: 5, offset: 36218},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1032, col: 9, offset: 36222},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1032, col: 13, offset: 36226},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1032, col: 20, offset: 36233},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1032, col: 20, offset: 36233},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1032, col: 29, offset: 36242},
												expr: &ruleRefExpr{
													pos:  position{line: 1032, col: 29, offset: 36242},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1032, col: 39, offset: 36252},
												expr: &ruleRefExpr{
													pos:  position{line: 1032, col: 39, offset: 36252},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1032, col: 49, offset: 36262},
												expr: &ruleRefExpr{
													pos:  position{line: 1032, col: 49, offset: 36262},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1032, col: 59, offset: 36272},
												expr: &ruleRefExpr{
													pos:  position{line: 1032, col: 59, offset: 36272},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1032, col: 69, offset: 36282},
												expr: &ruleRefExpr{
													pos:  position{line: 1032, col: 69, offset: 36282},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1032, col: 80, offset: 36293},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1035, col: 1, offset: 36346},
			expr: &actionExpr{
				pos: position{line: 1036, col: 5, offset: 36364},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 5, offset: 36364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1036, col: 5, offset: 36364},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 9, offset: 36368},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 14, offset: 36373},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1036, col: 25, offset: 36384},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1036, col: 29, offset: 36388},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 30, offset: 36389},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1037, col: 1, offset: 36423},
			expr: &actionExpr{
				pos: position{line: 1038, col: 5, offset: 36438},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1038, col: 5, offset: 36438},
					expr: &choiceExpr{
						pos: position{line: 1038, col: 6, offset: 36439},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1038, col: 6, offset: 36439},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1038, col: 15, offset: 36448},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1038, col: 15, offset: 36448},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1038, col: 20, offset: 36453,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1039, col: 1, offset: 36488},
			expr: &charClassMatcher{
				pos:        position{line: 1040, col: 5, offset: 36504},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1041, col: 1, offset: 36518},
			expr: &oneOrMoreExpr{
				pos: position{line: 1041, col: 5, offset: 36522},
				expr: &ruleRefExpr{
					pos:  position{line: 1041, col: 5, offset: 36522},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1042, col: 1, offset: 36532},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1042, col: 6, offset: 36537},
				expr: &ruleRefExpr{
					pos:  position{line: 1042, col: 6, offset: 36537},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1043, col: 1, offset: 36547},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 5, offset: 36560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 36560},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 5, offset: 36575},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 36594},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1047, col: 1, offset: 36602},
			expr: &anyMatcher{
				line: 1048, col: 5, offset: 36622,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1049, col: 1, offset: 36624},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 5, offset: 36652},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1050, col: 5, offset: 36652},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1051, col: 5, offset: 36661},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1052, col: 5, offset: 36670},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1053, col: 5, offset: 36679},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1054, col: 5, offset: 36687},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1055, col: 5, offset: 36700},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1056, col: 1, offset: 36709},
			expr: &charClassMatcher{
				pos:        position{line: 1057, col: 5, offset: 36728},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1058, col: 1, offset: 36747},
			expr: &ruleRefExpr{
				pos:  position{line: 1059, col: 5, offset: 36769},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1060, col: 1, offset: 36787},
			expr: &seqExpr{
				pos: position{line: 1061, col: 5, offset: 36808},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1061, col: 5, offset: 36808},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1061, col: 10, offset: 36813},
						expr: &seqExpr{
							pos: position{line: 1061, col: 11, offset: 36814},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1061, col: 11, offset: 36814},
									expr: &litMatcher{
										pos:        position{line: 1061, col: 12, offset: 36815},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 17, offset: 36820},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1061, col: 35, offset: 36838},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1062, col: 1, offset: 36843},
			expr: &seqExpr{
				pos: position{line: 1063, col: 5, offset: 36865},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1063, col: 5, offset: 36865},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1063, col: 10, offset: 36870},
						expr: &seqExpr{
							pos: position{line: 1063, col: 11, offset: 36871},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1063, col: 11, offset: 36871},
									expr: &ruleRefExpr{
										pos:  position{line: 1063, col: 12, offset: 36872},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1063, col: 27, offset: 36887},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1064, col: 1, offset: 36905},
			expr: &seqExpr{
				pos: position{line: 1064, col: 7, offset: 36911},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1064, col: 7, offset: 36911},
						expr: &ruleRefExpr{
							pos:  position{line: 1064, col: 7, offset: 36911},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 19, offset: 36923},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1065, col: 1, offset: 36938},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 7, offset: 36944},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1065, col: 7, offset: 36944},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 36948},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1066, col: 1, offset: 36952},
			expr: &notExpr{
				pos: position{line: 1066, col: 7, offset: 36958},
				expr: &anyMatcher{
					line: 1066, col: 8, offset: 36959,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1067, col: 1, offset: 36961},
			expr: &notExpr{
				pos: position{line: 1067, col: 8, offset: 36968},
				expr: &ruleRefExpr{
					pos:  position{line: 1067, col: 9, offset: 36969},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "FuncDecl", "name": id, "params": params, "expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "Conditional", "cond": expr.([]interface{})[0], "then": map[string]interface{}{"kind": "ID", "name": "this"}, "else": map[string]interface{}{"kind": "Call", "name": "error", "args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{"kind": "Primitive", "text": "assertion failed", "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{"kind": "ID", "name": "this"}}}}}, "where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, method, headers, body, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "method": method, "headers": headers, "body": body, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["method"], stack["headers"], stack["body"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onMethodArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMethodArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodArg1(stack["val"])
}

func (c *current) onBodyArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonBodyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBodyArg1(stack["val"])
}

func (c *current) onRecordArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonRecordArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordArg1(stack["val"])
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLExpr", "select": selection, "from": from, "joins": joins, "where": where, "group_by": groupby, "having": having, "order_by": orderby, "limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "style": style, "left_key": leftKey, "right_key": rightKey, "alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
