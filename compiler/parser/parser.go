// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 306},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 306},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 306},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 313},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 320},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 323},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 326},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 451},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 468},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 468},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 468},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 471},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 476},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 479},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 481},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 510},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 521},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 521},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 521},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 532},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 532},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 568},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 576},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 576},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 576},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 579},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 581},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 609},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 622},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 622},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 622},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 622},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 630},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 632},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 635},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 650},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 653},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 657},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 660},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 665},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 747},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 747},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 747},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 754},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 756},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 759},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 774},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 777},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 781},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 784},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 788},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1012},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1026},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1026},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1026},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 12, offset: 1033},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 15, offset: 1036},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 19, offset: 1040},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 23, offset: 1044},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 23, offset: 1044},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 28, offset: 1049},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 31, offset: 1052},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1141},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1141},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1150},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1152},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1157},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1162},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1164},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1168},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1174},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1174},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1185},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1188},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1293},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1293},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1293},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1302},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1305},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1309},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1315},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1315},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1326},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1329},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1433},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1433},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1433},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1440},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1443},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1447},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1454},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1454},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1463},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1466},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1557},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1560},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1573},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1573},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1573},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1575},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 20, offset: 1588},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 21, offset: 1589},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1619},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1619},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 54, col: 5, offset: 1619},
									expr: &seqExpr{
										pos: position{line: 54, col: 7, offset: 1621},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 54, col: 7, offset: 1621},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 54, col: 16, offset: 1630},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 54, col: 25, offset: 1639},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 27, offset: 1641},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 39, offset: 1653},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 40, offset: 1654},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1685},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1685},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 55, col: 5, offset: 1685},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 55, col: 14, offset: 1694},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 55, col: 16, offset: 1696},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 21, offset: 1701},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1800},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1800},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 10, offset: 1805},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 1904},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1904},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 10, offset: 1909},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 1997},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 64, col: 5, offset: 1997},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 10, offset: 2002},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 68, col: 1, offset: 2089},
			expr: &seqExpr{
				pos: position{line: 68, col: 11, offset: 2099},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2099},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 68, col: 15, offset: 2103},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 68, col: 15, offset: 2103},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 22, offset: 2110},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 68, col: 43, offset: 2131},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 68, col: 50, offset: 2138},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 56, offset: 2144},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 69, col: 1, offset: 2149},
			expr: &seqExpr{
				pos: position{line: 69, col: 8, offset: 2156},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 69, col: 8, offset: 2156},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 69, col: 12, offset: 2160},
						expr: &choiceExpr{
							pos: position{line: 69, col: 14, offset: 2162},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 69, col: 14, offset: 2162},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 69, col: 20, offset: 2168},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 71, col: 1, offset: 2174},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 2182},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 72, col: 5, offset: 2182},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 72, col: 5, offset: 2182},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 72, col: 8, offset: 2185},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 13, offset: 2190},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 16, offset: 2193},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 18, offset: 2195},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 74, col: 1, offset: 2225},
			expr: &actionExpr{
				pos: position{line: 75, col: 5, offset: 2239},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 75, col: 5, offset: 2239},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 75, col: 5, offset: 2239},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 8, offset: 2242},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 13, offset: 2247},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 18, offset: 2252},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 75, col: 21, offset: 2255},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 26, offset: 2260},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 29, offset: 2263},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 32, offset: 2266},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 79, col: 1, offset: 2351},
			expr: &choiceExpr{
				pos: position{line: 80, col: 5, offset: 2360},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2360},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2360},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 80, col: 5, offset: 2360},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 12, offset: 2367},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 80, col: 14, offset: 2369},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 19, offset: 2374},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2404},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 81, col: 5, offset: 2404},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 83, col: 1, offset: 2435},
			expr: &choiceExpr{
				pos: position{line: 84, col: 5, offset: 2447},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2447},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2447},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 84, col: 5, offset: 2447},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 8, offset: 2450},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 15, offset: 2457},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 84, col: 24, offset: 2466},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 28, offset: 2470},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 32, offset: 2474},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2585},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 87, col: 5, offset: 2585},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 87, col: 5, offset: 2585},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 87, col: 8, offset: 2588},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 15, offset: 2595},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 91, col: 1, offset: 2703},
			expr: &actionExpr{
				pos: position{line: 92, col: 5, offset: 2716},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 92, col: 5, offset: 2716},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2716},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 9, offset: 2720},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 20, offset: 2731},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 92, col: 23, offset: 2734},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 94, col: 1, offset: 2760},
			expr: &choiceExpr{
				pos: position{line: 95, col: 5, offset: 2775},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2775},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2784},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 2792},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 2801},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 100, col: 1, offset: 2809},
			expr: &seqExpr{
				pos: position{line: 100, col: 13, offset: 2821},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 100, col: 13, offset: 2821},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 100, col: 17, offset: 2825},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 100, col: 18, offset: 2826},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 100, col: 18, offset: 2826},
										expr: &litMatcher{
											pos:        position{line: 100, col: 19, offset: 2827},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 100, col: 24, offset: 2832},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 38, offset: 2846},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 57, offset: 2865},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 100, col: 82, offset: 2890},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 88, offset: 2896},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 94, offset: 2902},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 100, col: 100, offset: 2908},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 102, col: 1, offset: 2914},
			expr: &actionExpr{
				pos: position{line: 102, col: 14, offset: 2927},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 102, col: 15, offset: 2928},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 15, offset: 2928},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 22, offset: 2935},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 102, col: 30, offset: 2943},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 102, col: 30, offset: 2943},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 102, col: 35, offset: 2948},
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 36, offset: 2949},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 102, col: 54, offset: 2967},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 61, offset: 2974},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 67, offset: 2980},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 102, col: 74, offset: 2987},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 104, col: 1, offset: 3024},
			expr: &actionExpr{
				pos: position{line: 105, col: 5, offset: 3042},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 105, col: 5, offset: 3042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3042},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 11, offset: 3048},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 21, offset: 3058},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 26, offset: 3063},
								expr: &ruleRefExpr{
									pos:  position{line: 105, col: 26, offset: 3063},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 109, col: 1, offset: 3137},
			expr: &actionExpr{
				pos: position{line: 109, col: 16, offset: 3152},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 109, col: 16, offset: 3152},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 109, col: 16, offset: 3152},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 18, offset: 3154},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 26, offset: 3162},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 109, col: 28, offset: 3164},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 30, offset: 3166},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 111, col: 1, offset: 3216},
			expr: &actionExpr{
				pos: position{line: 112, col: 5, offset: 3230},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 112, col: 5, offset: 3230},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 3230},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 11, offset: 3236},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 5, offset: 3253},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 10, offset: 3258},
								expr: &actionExpr{
									pos: position{line: 113, col: 11, offset: 3259},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 113, col: 11, offset: 3259},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 113, col: 11, offset: 3259},
												expr: &seqExpr{
													pos: position{line: 113, col: 12, offset: 3260},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 113, col: 12, offset: 3260},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 14, offset: 3262},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 113, col: 25, offset: 3273},
												name: "_",
											},
											&notExpr{
												pos: position{line: 113, col: 27, offset: 3275},
												expr: &choiceExpr{
													pos: position{line: 113, col: 29, offset: 3277},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 113, col: 29, offset: 3277},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 113, col: 39, offset: 3287},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 113, col: 59, offset: 3307},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 113, col: 64, offset: 3312},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 117, col: 1, offset: 3428},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3451},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 118, col: 5, offset: 3451},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 118, col: 5, offset: 3451},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 118, col: 14, offset: 3460},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 119, col: 5, offset: 3467},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 119, col: 5, offset: 3467},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 119, col: 10, offset: 3472},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 121, col: 1, offset: 3476},
			expr: &choiceExpr{
				pos: position{line: 122, col: 5, offset: 3493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 122, col: 5, offset: 3493},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 122, col: 5, offset: 3493},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 122, col: 6, offset: 3494},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 122, col: 6, offset: 3494},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 122, col: 6, offset: 3494},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 15, offset: 3503},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 122, col: 19, offset: 3507},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 122, col: 19, offset: 3507},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 122, col: 23, offset: 3511},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 122, col: 27, offset: 3515},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 122, col: 29, offset: 3517},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 3629},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 125, col: 5, offset: 3629},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 125, col: 5, offset: 3629},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 9, offset: 3633},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 125, col: 12, offset: 3636},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 17, offset: 3641},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 31, offset: 3655},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 125, col: 34, offset: 3658},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3687},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 128, col: 1, offset: 3699},
			expr: &choiceExpr{
				pos: position{line: 129, col: 5, offset: 3714},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 129, col: 5, offset: 3714},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 130, col: 5, offset: 3723},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 131, col: 5, offset: 3734},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 131, col: 5, offset: 3734},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 131, col: 5, offset: 3734},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 7, offset: 3736},
										name: "SearchValue",
									},
								},
								&andExpr{
									pos: position{line: 131, col: 19, offset: 3748},
									expr: &seqExpr{
										pos: position{line: 131, col: 21, offset: 3750},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 131, col: 21, offset: 3750},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 131, col: 23, offset: 3752},
												name: "Glob",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3863},
						run: (*parser).callonSearchExpr12,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3863},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 134, col: 5, offset: 3863},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 7, offset: 3865},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 134, col: 19, offset: 3877},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 20, offset: 3878},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 3993},
						run: (*parser).callonSearchExpr18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 3993},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 5, offset: 3993},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 137, col: 9, offset: 3997},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 10, offset: 3998},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 5, offset: 4114},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 142, col: 1, offset: 4131},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 4151},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4151},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4151},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4151},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 9, offset: 4155},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 22, offset: 4168},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 25, offset: 4171},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 28, offset: 4174},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 39, offset: 4185},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 42, offset: 4188},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 46, offset: 4192},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 6, offset: 4315},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 146, col: 6, offset: 4315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 6, offset: 4315},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 12, offset: 4321},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 146, col: 21, offset: 4330},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 146, col: 26, offset: 4335},
										expr: &ruleRefExpr{
											pos:  position{line: 146, col: 27, offset: 4336},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 150, col: 1, offset: 4408},
			expr: &choiceExpr{
				pos: position{line: 151, col: 5, offset: 4424},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 151, col: 5, offset: 4424},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4436},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4436},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 152, col: 5, offset: 4436},
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 6, offset: 4437},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 152, col: 20, offset: 4451},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 22, offset: 4453},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 156, col: 1, offset: 4561},
			expr: &actionExpr{
				pos: position{line: 157, col: 5, offset: 4570},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 157, col: 5, offset: 4570},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 157, col: 13, offset: 4578},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 161, col: 1, offset: 4674},
			expr: &actionExpr{
				pos: position{line: 162, col: 5, offset: 4685},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 162, col: 5, offset: 4685},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 162, col: 13, offset: 4693},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 168, col: 1, offset: 4819},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 4835},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4835},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4835},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 169, col: 5, offset: 4835},
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 5, offset: 4835},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 16, offset: 4846},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 21, offset: 4851},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 33, offset: 4863},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 39, offset: 4869},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 4995},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 172, col: 5, offset: 4995},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 172, col: 5, offset: 4995},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 5, offset: 4995},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 16, offset: 5006},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 21, offset: 5011},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 36, offset: 5026},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 172, col: 41, offset: 5031},
										expr: &seqExpr{
											pos: position{line: 172, col: 42, offset: 5032},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 172, col: 42, offset: 5032},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 172, col: 44, offset: 5034},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 172, col: 58, offset: 5048},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 64, offset: 5054},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 180, col: 1, offset: 5268},
			expr: &seqExpr{
				pos: position{line: 180, col: 13, offset: 5280},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 180, col: 13, offset: 5280},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 25, offset: 5292},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 182, col: 1, offset: 5295},
			expr: &actionExpr{
				pos: position{line: 183, col: 5, offset: 5311},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 183, col: 5, offset: 5311},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 183, col: 5, offset: 5311},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 13, offset: 5319},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 15, offset: 5321},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 23, offset: 5329},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 185, col: 1, offset: 5370},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5383},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5383},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5383},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 186, col: 5, offset: 5383},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 186, col: 7, offset: 5385},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 14, offset: 5392},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 186, col: 16, offset: 5394},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 25, offset: 5403},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 27, offset: 5405},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 33, offset: 5411},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5442},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 187, col: 5, offset: 5442},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 192, col: 1, offset: 5702},
			expr: &choiceExpr{
				pos: position{line: 193, col: 5, offset: 5721},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 5721},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5736},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 194, col: 5, offset: 5736},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 10, offset: 5741},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 196, col: 1, offset: 5833},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5853},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 197, col: 5, offset: 5853},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 5853},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 11, offset: 5859},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 26, offset: 5874},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 197, col: 31, offset: 5879},
								expr: &actionExpr{
									pos: position{line: 197, col: 32, offset: 5880},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 197, col: 32, offset: 5880},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 197, col: 32, offset: 5880},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 197, col: 35, offset: 5883},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 197, col: 39, offset: 5887},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 197, col: 42, offset: 5890},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 197, col: 47, offset: 5895},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 201, col: 1, offset: 6017},
			expr: &choiceExpr{
				pos: position{line: 202, col: 5, offset: 6035},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6035},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 202, col: 5, offset: 6035},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 202, col: 5, offset: 6035},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 10, offset: 6040},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 15, offset: 6045},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 202, col: 18, offset: 6048},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 23, offset: 6053},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 202, col: 26, offset: 6056},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 30, offset: 6060},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 6164},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 205, col: 5, offset: 6164},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 9, offset: 6168},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 209, col: 1, offset: 6268},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6276},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6276},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 210, col: 5, offset: 6276},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 6, offset: 6277},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 16, offset: 6287},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 19, offset: 6290},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 27, offset: 6298},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 210, col: 30, offset: 6301},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 34, offset: 6305},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 37, offset: 6308},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 42, offset: 6313},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 42, offset: 6313},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 49, offset: 6320},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 210, col: 52, offset: 6323},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 210, col: 56, offset: 6327},
							expr: &seqExpr{
								pos: position{line: 210, col: 58, offset: 6329},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 210, col: 58, offset: 6329},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 210, col: 61, offset: 6332},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 66, offset: 6337},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 210, col: 72, offset: 6343},
								expr: &ruleRefExpr{
									pos:  position{line: 210, col: 72, offset: 6343},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 218, col: 1, offset: 6533},
			expr: &choiceExpr{
				pos: position{line: 219, col: 5, offset: 6545},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 5, offset: 6545},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 5, offset: 6564},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 5, offset: 6577},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 223, col: 1, offset: 6586},
			expr: &actionExpr{
				pos: position{line: 223, col: 15, offset: 6600},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 223, col: 15, offset: 6600},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 223, col: 15, offset: 6600},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 6602},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 25, offset: 6610},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 27, offset: 6612},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 32, offset: 6617},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 225, col: 1, offset: 6653},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 6672},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 6672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6672},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 11, offset: 6678},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 6692},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 30, offset: 6697},
								expr: &seqExpr{
									pos: position{line: 226, col: 31, offset: 6698},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 226, col: 31, offset: 6698},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 226, col: 34, offset: 6701},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 226, col: 38, offset: 6705},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 226, col: 41, offset: 6708},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 236, col: 1, offset: 6932},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 6945},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6945},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6956},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6966},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6976},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6987},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6998},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7009},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7021},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7032},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7042},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7055},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7066},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7078},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7089},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7102},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7112},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7123},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7134},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7148},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7160},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7171},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 259, col: 1, offset: 7180},
			expr: &actionExpr{
				pos: position{line: 260, col: 5, offset: 7191},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 260, col: 5, offset: 7191},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 5, offset: 7191},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 260, col: 12, offset: 7198},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 17, offset: 7203},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 260, col: 26, offset: 7212},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 260, col: 31, offset: 7217},
								expr: &actionExpr{
									pos: position{line: 260, col: 32, offset: 7218},
									run: (*parser).callonSortOp8,
									expr: &seqExpr{
										pos: position{line: 260, col: 32, offset: 7218},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 260, col: 32, offset: 7218},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 260, col: 34, offset: 7220},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 36, offset: 7222},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 274, col: 1, offset: 7633},
			expr: &actionExpr{
				pos: position{line: 274, col: 12, offset: 7644},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 274, col: 12, offset: 7644},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 274, col: 17, offset: 7649},
						expr: &actionExpr{
							pos: position{line: 274, col: 18, offset: 7650},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 274, col: 18, offset: 7650},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 274, col: 18, offset: 7650},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 274, col: 20, offset: 7652},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 274, col: 22, offset: 7654},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 276, col: 1, offset: 7710},
			expr: &choiceExpr{
				pos: position{line: 277, col: 5, offset: 7722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 277, col: 5, offset: 7722},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 277, col: 5, offset: 7722},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 278, col: 5, offset: 7797},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 278, col: 5, offset: 7797},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 278, col: 5, offset: 7797},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 14, offset: 7806},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 278, col: 16, offset: 7808},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 278, col: 23, offset: 7815},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 278, col: 24, offset: 7816},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 278, col: 24, offset: 7816},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 278, col: 34, offset: 7826},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 280, col: 1, offset: 7940},
			expr: &actionExpr{
				pos: position{line: 281, col: 5, offset: 7950},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 281, col: 5, offset: 7950},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 5, offset: 7950},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 11, offset: 7956},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 17, offset: 7962},
								expr: &actionExpr{
									pos: position{line: 281, col: 18, offset: 7963},
									run: (*parser).callonTopOp6,
									expr: &seqExpr{
										pos: position{line: 281, col: 18, offset: 7963},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 281, col: 18, offset: 7963},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 20, offset: 7965},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 22, offset: 7967},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 46, offset: 7991},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 52, offset: 7997},
								expr: &seqExpr{
									pos: position{line: 281, col: 53, offset: 7998},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 281, col: 53, offset: 7998},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 281, col: 55, offset: 8000},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 66, offset: 8011},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 73, offset: 8018},
								expr: &actionExpr{
									pos: position{line: 281, col: 74, offset: 8019},
									run: (*parser).callonTopOp18,
									expr: &seqExpr{
										pos: position{line: 281, col: 74, offset: 8019},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 281, col: 74, offset: 8019},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 281, col: 76, offset: 8021},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 281, col: 78, offset: 8023},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 295, col: 1, offset: 8358},
			expr: &actionExpr{
				pos: position{line: 296, col: 5, offset: 8368},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 296, col: 5, offset: 8368},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 5, offset: 8368},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 11, offset: 8374},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 13, offset: 8376},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 18, offset: 8381},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 300, col: 1, offset: 8476},
			expr: &actionExpr{
				pos: position{line: 301, col: 5, offset: 8487},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 301, col: 5, offset: 8487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 5, offset: 8487},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 12, offset: 8494},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 301, col: 14, offset: 8496},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 19, offset: 8501},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 305, col: 1, offset: 8592},
			expr: &choiceExpr{
				pos: position{line: 306, col: 5, offset: 8603},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 8603},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 306, col: 5, offset: 8603},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 306, col: 5, offset: 8603},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 306, col: 12, offset: 8610},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 306, col: 14, offset: 8612},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 306, col: 20, offset: 8618},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8698},
						run: (*parser).callonHeadOp8,
						expr: &litMatcher{
							pos:        position{line: 307, col: 5, offset: 8698},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 309, col: 1, offset: 8773},
			expr: &choiceExpr{
				pos: position{line: 310, col: 5, offset: 8784},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 8784},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 310, col: 5, offset: 8784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 310, col: 5, offset: 8784},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 310, col: 12, offset: 8791},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 310, col: 14, offset: 8793},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 310, col: 20, offset: 8799},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 8879},
						run: (*parser).callonTailOp8,
						expr: &litMatcher{
							pos:        position{line: 311, col: 5, offset: 8879},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 313, col: 1, offset: 8954},
			expr: &actionExpr{
				pos: position{line: 314, col: 5, offset: 8966},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 314, col: 5, offset: 8966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 8966},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 13, offset: 8974},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 15, offset: 8976},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 20, offset: 8981},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 318, col: 1, offset: 9067},
			expr: &choiceExpr{
				pos: position{line: 319, col: 5, offset: 9078},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 319, col: 5, offset: 9078},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 319, col: 5, offset: 9078},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 319, col: 5, offset: 9078},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 319, col: 12, offset: 9085},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 319, col: 14, offset: 9087},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 9176},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 322, col: 5, offset: 9176},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 326, col: 1, offset: 9265},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 9275},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 327, col: 5, offset: 9275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 5, offset: 9275},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 11, offset: 9281},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 13, offset: 9283},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 18, offset: 9288},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 331, col: 1, offset: 9379},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 9392},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 9392},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 9392},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 332, col: 14, offset: 9401},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 16, offset: 9403},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 22, offset: 9409},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 33, offset: 9420},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 332, col: 38, offset: 9425},
								expr: &actionExpr{
									pos: position{line: 332, col: 39, offset: 9426},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 332, col: 39, offset: 9426},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 332, col: 39, offset: 9426},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 332, col: 42, offset: 9429},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 332, col: 46, offset: 9433},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 49, offset: 9436},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 52, offset: 9439},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 340, col: 1, offset: 9846},
			expr: &actionExpr{
				pos: position{line: 341, col: 5, offset: 9857},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 341, col: 5, offset: 9857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 5, offset: 9857},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 341, col: 12, offset: 9864},
							expr: &seqExpr{
								pos: position{line: 341, col: 14, offset: 9866},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 341, col: 14, offset: 9866},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 341, col: 17, offset: 9869},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 345, col: 1, offset: 9940},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 9952},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 9952},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 5, offset: 9952},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 346, col: 13, offset: 9960},
							expr: &seqExpr{
								pos: position{line: 346, col: 15, offset: 9962},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 346, col: 15, offset: 9962},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 346, col: 18, offset: 9965},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 350, col: 1, offset: 10037},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 10048},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10048},
						run: (*parser).callonJoinOp2,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10048},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 10048},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 11, offset: 10054},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 351, col: 21, offset: 10064},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 28, offset: 10071},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 30, offset: 10073},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 33, offset: 10076},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 35, offset: 10078},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 43, offset: 10086},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 51, offset: 10094},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 351, col: 54, offset: 10097},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 58, offset: 10101},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 61, offset: 10104},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 70, offset: 10113},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 351, col: 78, offset: 10121},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 351, col: 86, offset: 10129},
										expr: &seqExpr{
											pos: position{line: 351, col: 87, offset: 10130},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 351, col: 87, offset: 10130},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 351, col: 89, offset: 10132},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10392},
						run: (*parser).callonJoinOp22,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10392},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 358, col: 5, offset: 10392},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 11, offset: 10398},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 358, col: 22, offset: 10409},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 29, offset: 10416},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 31, offset: 10418},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 34, offset: 10421},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 358, col: 36, offset: 10423},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 40, offset: 10427},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 358, col: 48, offset: 10435},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 358, col: 56, offset: 10443},
										expr: &seqExpr{
											pos: position{line: 358, col: 57, offset: 10444},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 358, col: 57, offset: 10444},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 358, col: 59, offset: 10446},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 366, col: 1, offset: 10694},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10708},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10708},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 10708},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 367, col: 5, offset: 10708},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 367, col: 12, offset: 10715},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10745},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10745},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10745},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 13, offset: 10753},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10783},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 10783},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 369, col: 5, offset: 10783},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 369, col: 13, offset: 10791},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10820},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10820},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10820},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 13, offset: 10828},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10858},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10858},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 373, col: 1, offset: 10894},
			expr: &choiceExpr{
				pos: position{line: 374, col: 5, offset: 10906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 374, col: 5, offset: 10906},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 10915},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 375, col: 5, offset: 10915},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 375, col: 5, offset: 10915},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 375, col: 9, offset: 10919},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 375, col: 14, offset: 10924},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 375, col: 19, offset: 10929},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 377, col: 1, offset: 10955},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 10968},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 10968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 10968},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 14, offset: 10977},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 16, offset: 10979},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 420, col: 1, offset: 12479},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 12496},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 421, col: 5, offset: 12496},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 421, col: 7, offset: 12498},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 425, col: 1, offset: 12598},
			expr: &choiceExpr{
				pos: position{line: 426, col: 5, offset: 12613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12613},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 12613},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 426, col: 5, offset: 12613},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 426, col: 7, offset: 12615},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 426, col: 12, offset: 12620},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12649},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 427, col: 5, offset: 12649},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 429, col: 1, offset: 12720},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12731},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 430, col: 5, offset: 12731},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 430, col: 12, offset: 12738},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 434, col: 1, offset: 12894},
			expr: &choiceExpr{
				pos: position{line: 435, col: 5, offset: 12906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 435, col: 5, offset: 12906},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 5, offset: 12915},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 5, offset: 12923},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 439, col: 1, offset: 12929},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 12938},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 12938},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 12938},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 12, offset: 12945},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 14, offset: 12947},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 19, offset: 12952},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 24, offset: 12957},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 440, col: 31, offset: 12964},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 31, offset: 12964},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 42, offset: 12975},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 440, col: 49, offset: 12982},
								expr: &ruleRefExpr{
									pos:  position{line: 440, col: 49, offset: 12982},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 444, col: 1, offset: 13111},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13120},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 13120},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 5, offset: 13120},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 445, col: 12, offset: 13127},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 14, offset: 13129},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 19, offset: 13134},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 447, col: 1, offset: 13165},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 13174},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 13174},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 448, col: 5, offset: 13174},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 12, offset: 13181},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 14, offset: 13183},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 19, offset: 13188},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 450, col: 1, offset: 13219},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13232},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13232},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 13232},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 10, offset: 13237},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 19, offset: 13246},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 22, offset: 13249},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 22, offset: 13249},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 30, offset: 13257},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 35, offset: 13262},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 35, offset: 13262},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 46, offset: 13273},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 52, offset: 13279},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 52, offset: 13279},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 455, col: 1, offset: 13415},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 13423},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 13423},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 456, col: 5, offset: 13423},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 11, offset: 13429},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 13, offset: 13431},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 17, offset: 13435},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 21, offset: 13439},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 28, offset: 13446},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 28, offset: 13446},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 39, offset: 13457},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 46, offset: 13464},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 46, offset: 13464},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 460, col: 1, offset: 13590},
			expr: &actionExpr{
				pos: position{line: 460, col: 7, offset: 13596},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 460, col: 7, offset: 13596},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 460, col: 8, offset: 13597},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 460, col: 8, offset: 13597},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 460, col: 18, offset: 13607},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 28, offset: 13617},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 462, col: 1, offset: 13654},
			expr: &choiceExpr{
				pos: position{line: 463, col: 5, offset: 13663},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 13663},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 463, col: 5, offset: 13663},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 7, offset: 13665},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 13700},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 464, col: 5, offset: 13700},
							expr: &charClassMatcher{
								pos:        position{line: 464, col: 5, offset: 13700},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 467, col: 1, offset: 13805},
			expr: &actionExpr{
				pos: position{line: 468, col: 5, offset: 13816},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 468, col: 5, offset: 13816},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 468, col: 5, offset: 13816},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 468, col: 7, offset: 13818},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 12, offset: 13823},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 14, offset: 13825},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 17, offset: 13828},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 471, col: 1, offset: 13894},
			expr: &actionExpr{
				pos: position{line: 471, col: 9, offset: 13902},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 471, col: 9, offset: 13902},
					expr: &charClassMatcher{
						pos:        position{line: 471, col: 10, offset: 13903},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 473, col: 1, offset: 13949},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 13963},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 13963},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 5, offset: 13963},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 7, offset: 13965},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 15, offset: 13973},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 17, offset: 13975},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 23, offset: 13981},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 31, offset: 13989},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 33, offset: 13991},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 38, offset: 13996},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 40, offset: 13998},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 46, offset: 14004},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 478, col: 1, offset: 14109},
			expr: &choiceExpr{
				pos: position{line: 479, col: 5, offset: 14122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 479, col: 5, offset: 14122},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 479, col: 5, offset: 14122},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 479, col: 5, offset: 14122},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 479, col: 10, offset: 14127},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 479, col: 19, offset: 14136},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 479, col: 26, offset: 14143},
										expr: &ruleRefExpr{
											pos:  position{line: 479, col: 26, offset: 14143},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 479, col: 38, offset: 14155},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 479, col: 43, offset: 14160},
										expr: &ruleRefExpr{
											pos:  position{line: 479, col: 43, offset: 14160},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 482, col: 5, offset: 14269},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 482, col: 5, offset: 14269},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 10, offset: 14274},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 486, col: 1, offset: 14375},
			expr: &actionExpr{
				pos: position{line: 487, col: 5, offset: 14390},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 487, col: 5, offset: 14390},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 487, col: 5, offset: 14390},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 487, col: 9, offset: 14394},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 16, offset: 14401},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 489, col: 1, offset: 14434},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 14447},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 14447},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 490, col: 5, offset: 14447},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 490, col: 9, offset: 14451},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 14, offset: 14456},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 492, col: 1, offset: 14493},
			expr: &choiceExpr{
				pos: position{line: 493, col: 5, offset: 14506},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14506},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 5, offset: 14525},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 495, col: 5, offset: 14535},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 497, col: 1, offset: 14549},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 14568},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 14568},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 498, col: 6, offset: 14569},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 498, col: 6, offset: 14569},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 498, col: 24, offset: 14587},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 498, col: 29, offset: 14592},
							expr: &choiceExpr{
								pos: position{line: 498, col: 30, offset: 14593},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 498, col: 30, offset: 14593},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 498, col: 47, offset: 14610},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 500, col: 1, offset: 14649},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14663},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14663},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 501, col: 5, offset: 14663},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 501, col: 7, offset: 14665},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 15, offset: 14673},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 17, offset: 14675},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 22, offset: 14680},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 33, offset: 14691},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 39, offset: 14697},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 505, col: 1, offset: 14807},
			expr: &actionExpr{
				pos: position{line: 506, col: 5, offset: 14821},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 506, col: 5, offset: 14821},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 506, col: 5, offset: 14821},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 506, col: 7, offset: 14823},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 506, col: 16, offset: 14832},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 506, col: 18, offset: 14834},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 22, offset: 14838},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 508, col: 1, offset: 14874},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 14890},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 14890},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 509, col: 5, offset: 14890},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 14924},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 510, col: 5, offset: 14924},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 14960},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 511, col: 5, offset: 14960},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 513, col: 1, offset: 14986},
			expr: &choiceExpr{
				pos: position{line: 514, col: 5, offset: 14999},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 14999},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 514, col: 5, offset: 14999},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 514, col: 5, offset: 14999},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 514, col: 7, offset: 15001},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 514, col: 15, offset: 15009},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 514, col: 17, offset: 15011},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15044},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 515, col: 5, offset: 15044},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 515, col: 5, offset: 15044},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 7, offset: 15046},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 15, offset: 15054},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 515, col: 17, offset: 15056},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 517, col: 1, offset: 15088},
			expr: &actionExpr{
				pos: position{line: 518, col: 5, offset: 15099},
				run: (*parser).callonPassOp1,
				expr: &litMatcher{
					pos:        position{line: 518, col: 5, offset: 15099},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 524, col: 1, offset: 15293},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 15307},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 15307},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 5, offset: 15307},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 15, offset: 15317},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 17, offset: 15319},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 22, offset: 15324},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 28, offset: 15330},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 32, offset: 15334},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 525, col: 40, offset: 15342},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 525, col: 43, offset: 15345},
								expr: &ruleRefExpr{
									pos:  position{line: 525, col: 43, offset: 15345},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 529, col: 1, offset: 15457},
			expr: &actionExpr{
				pos: position{line: 530, col: 5, offset: 15469},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 530, col: 5, offset: 15469},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 530, col: 5, offset: 15469},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 13, offset: 15477},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 15, offset: 15479},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 20, offset: 15484},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 534, col: 1, offset: 15565},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 15576},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15576},
						run: (*parser).callonOverOp2,
						expr: &seqExpr{
							pos: position{line: 535, col: 5, offset: 15576},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 535, col: 5, offset: 15576},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 12, offset: 15583},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 14, offset: 15585},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 20, offset: 15591},
										name: "Exprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 26, offset: 15597},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 535, col: 28, offset: 15599},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 35, offset: 15606},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 37, offset: 15608},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 44, offset: 15615},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 535, col: 59, offset: 15630},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 535, col: 62, offset: 15633},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 68, offset: 15639},
										name: "Scope",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 15805},
						run: (*parser).callonOverOp16,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 15805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 538, col: 5, offset: 15805},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 12, offset: 15812},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 538, col: 14, offset: 15814},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 20, offset: 15820},
										name: "Exprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 26, offset: 15826},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 538, col: 29, offset: 15829},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 35, offset: 15835},
										name: "Scope",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 15939},
						run: (*parser).callonOverOp25,
						expr: &seqExpr{
							pos: position{line: 541, col: 5, offset: 15939},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 541, col: 5, offset: 15939},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 541, col: 12, offset: 15946},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 541, col: 14, offset: 15948},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 20, offset: 15954},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 545, col: 1, offset: 16053},
			expr: &actionExpr{
				pos: position{line: 545, col: 9, offset: 16061},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 545, col: 9, offset: 16061},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 9, offset: 16061},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 14, offset: 16066},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 545, col: 17, offset: 16069},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 21, offset: 16073},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 24, offset: 16076},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 28, offset: 16080},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 39, offset: 16091},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 545, col: 42, offset: 16094},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 547, col: 1, offset: 16119},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 16138},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 16138},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 548, col: 5, offset: 16138},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 11, offset: 16144},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 25, offset: 16158},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 548, col: 30, offset: 16163},
								expr: &actionExpr{
									pos: position{line: 548, col: 31, offset: 16164},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 548, col: 31, offset: 16164},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 548, col: 31, offset: 16164},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 548, col: 34, offset: 16167},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 548, col: 38, offset: 16171},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 548, col: 41, offset: 16174},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 548, col: 43, offset: 16176},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 552, col: 1, offset: 16294},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 16312},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 16312},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 553, col: 5, offset: 16312},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 553, col: 5, offset: 16312},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 553, col: 8, offset: 16315},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 553, col: 23, offset: 16330},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 553, col: 26, offset: 16333},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 553, col: 30, offset: 16337},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 553, col: 33, offset: 16340},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 553, col: 38, offset: 16345},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16427},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 556, col: 5, offset: 16427},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 8, offset: 16430},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 560, col: 1, offset: 16560},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 16572},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 16572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 561, col: 5, offset: 16572},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 13, offset: 16580},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 15, offset: 16582},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 21, offset: 16588},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 565, col: 1, offset: 16672},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16684},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16684},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 566, col: 5, offset: 16684},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 7, offset: 16686},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 10, offset: 16689},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 12, offset: 16691},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 16, offset: 16695},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 568, col: 1, offset: 16720},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 16730},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 569, col: 5, offset: 16730},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 569, col: 5, offset: 16730},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 7, offset: 16732},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 10, offset: 16735},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 12, offset: 16737},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 16, offset: 16741},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 573, col: 1, offset: 16792},
			expr: &ruleRefExpr{
				pos:  position{line: 573, col: 8, offset: 16799},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 575, col: 1, offset: 16810},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 16820},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 16820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 16820},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 11, offset: 16826},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 576, col: 16, offset: 16831},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 576, col: 21, offset: 16836},
								expr: &actionExpr{
									pos: position{line: 576, col: 22, offset: 16837},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 576, col: 22, offset: 16837},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 576, col: 22, offset: 16837},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 576, col: 25, offset: 16840},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 576, col: 29, offset: 16844},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 576, col: 32, offset: 16847},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 576, col: 37, offset: 16852},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 580, col: 1, offset: 16964},
			expr: &ruleRefExpr{
				pos:  position{line: 580, col: 13, offset: 16976},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 582, col: 1, offset: 16982},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 16997},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 16997},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 16997},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 17003},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 21, offset: 17013},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 583, col: 26, offset: 17018},
								expr: &seqExpr{
									pos: position{line: 583, col: 27, offset: 17019},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 583, col: 27, offset: 17019},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 583, col: 30, offset: 17022},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 583, col: 34, offset: 17026},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 583, col: 37, offset: 17029},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 593, col: 1, offset: 17228},
			expr: &actionExpr{
				pos: position{line: 594, col: 5, offset: 17244},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 594, col: 5, offset: 17244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 17244},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 11, offset: 17250},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 22, offset: 17261},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 594, col: 27, offset: 17266},
								expr: &actionExpr{
									pos: position{line: 594, col: 28, offset: 17267},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 594, col: 28, offset: 17267},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 594, col: 28, offset: 17267},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 594, col: 31, offset: 17270},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 594, col: 35, offset: 17274},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 594, col: 38, offset: 17277},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 594, col: 40, offset: 17279},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 598, col: 1, offset: 17390},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17405},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17405},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 5, offset: 17405},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 9, offset: 17409},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 14, offset: 17414},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 599, col: 17, offset: 17417},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 22, offset: 17422},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 25, offset: 17425},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 29, offset: 17429},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 601, col: 1, offset: 17520},
			expr: &ruleRefExpr{
				pos:  position{line: 601, col: 8, offset: 17527},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 603, col: 1, offset: 17544},
			expr: &choiceExpr{
				pos: position{line: 604, col: 5, offset: 17564},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 604, col: 5, offset: 17564},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 604, col: 5, offset: 17564},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 604, col: 5, offset: 17564},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 15, offset: 17574},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 29, offset: 17588},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 604, col: 32, offset: 17591},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 36, offset: 17595},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 604, col: 39, offset: 17598},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 50, offset: 17609},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 55, offset: 17614},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 604, col: 58, offset: 17617},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 62, offset: 17621},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 604, col: 65, offset: 17624},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 76, offset: 17635},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 607, col: 5, offset: 17775},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 609, col: 1, offset: 17790},
			expr: &actionExpr{
				pos: position{line: 610, col: 5, offset: 17808},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 610, col: 5, offset: 17808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 17808},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 11, offset: 17814},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 5, offset: 17833},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 611, col: 10, offset: 17838},
								expr: &actionExpr{
									pos: position{line: 611, col: 11, offset: 17839},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 611, col: 11, offset: 17839},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 611, col: 11, offset: 17839},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 611, col: 14, offset: 17842},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 17, offset: 17845},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 611, col: 25, offset: 17853},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 611, col: 28, offset: 17856},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 33, offset: 17861},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 615, col: 1, offset: 17979},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 17998},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 17998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 17998},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 11, offset: 18004},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 18023},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 617, col: 10, offset: 18028},
								expr: &actionExpr{
									pos: position{line: 617, col: 11, offset: 18029},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 617, col: 11, offset: 18029},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 617, col: 11, offset: 18029},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 617, col: 14, offset: 18032},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 617, col: 17, offset: 18035},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 617, col: 26, offset: 18044},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 617, col: 29, offset: 18047},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 617, col: 34, offset: 18052},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 621, col: 1, offset: 18170},
			expr: &choiceExpr{
				pos: position{line: 622, col: 5, offset: 18189},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 18189},
						run: (*parser).callonComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 622, col: 5, offset: 18189},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 622, col: 5, offset: 18189},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 9, offset: 18193},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 22, offset: 18206},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 25, offset: 18209},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 28, offset: 18212},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 622, col: 39, offset: 18223},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 622, col: 42, offset: 18226},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 622, col: 46, offset: 18230},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18354},
						run: (*parser).callonComparisonExpr12,
						expr: &seqExpr{
							pos: position{line: 625, col: 5, offset: 18354},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 625, col: 5, offset: 18354},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 625, col: 9, offset: 18358},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 625, col: 22, offset: 18371},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 625, col: 25, offset: 18374},
									val:        "~",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 625, col: 29, offset: 18378},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 625, col: 32, offset: 18381},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 625, col: 36, offset: 18385},
										name: "Regexp",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 5, offset: 18504},
						name: "AdditiveExpr",
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 630, col: 1, offset: 18518},
			expr: &actionExpr{
				pos: position{line: 631, col: 5, offset: 18535},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 631, col: 5, offset: 18535},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 5, offset: 18535},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 11, offset: 18541},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 632, col: 5, offset: 18564},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 632, col: 10, offset: 18569},
								expr: &actionExpr{
									pos: position{line: 632, col: 11, offset: 18570},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 632, col: 11, offset: 18570},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 632, col: 11, offset: 18570},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 632, col: 14, offset: 18573},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 632, col: 17, offset: 18576},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 632, col: 34, offset: 18593},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 632, col: 37, offset: 18596},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 632, col: 42, offset: 18601},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 636, col: 1, offset: 18723},
			expr: &actionExpr{
				pos: position{line: 636, col: 20, offset: 18742},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 636, col: 21, offset: 18743},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 21, offset: 18743},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 636, col: 27, offset: 18749},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 638, col: 1, offset: 18786},
			expr: &actionExpr{
				pos: position{line: 639, col: 5, offset: 18809},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 639, col: 5, offset: 18809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 18809},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 11, offset: 18815},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18827},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 640, col: 10, offset: 18832},
								expr: &actionExpr{
									pos: position{line: 640, col: 11, offset: 18833},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 640, col: 11, offset: 18833},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 11, offset: 18833},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 14, offset: 18836},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 17, offset: 18839},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 40, offset: 18862},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 43, offset: 18865},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 48, offset: 18870},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 644, col: 1, offset: 18981},
			expr: &actionExpr{
				pos: position{line: 644, col: 26, offset: 19006},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 644, col: 27, offset: 19007},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 644, col: 27, offset: 19007},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 644, col: 33, offset: 19013},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 644, col: 39, offset: 19019},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 646, col: 1, offset: 19056},
			expr: &choiceExpr{
				pos: position{line: 647, col: 5, offset: 19068},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 647, col: 5, offset: 19068},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 647, col: 5, offset: 19068},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 647, col: 5, offset: 19068},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 647, col: 9, offset: 19072},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 647, col: 12, offset: 19075},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 647, col: 14, offset: 19077},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 650, col: 5, offset: 19186},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 652, col: 1, offset: 19200},
			expr: &choiceExpr{
				pos: position{line: 653, col: 5, offset: 19217},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 19217},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 19217},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 653, col: 5, offset: 19217},
									expr: &ruleRefExpr{
										pos:  position{line: 653, col: 6, offset: 19218},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 653, col: 14, offset: 19226},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 653, col: 18, offset: 19230},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 653, col: 21, offset: 19233},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 653, col: 23, offset: 19235},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 656, col: 5, offset: 19345},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 658, col: 1, offset: 19355},
			expr: &choiceExpr{
				pos: position{line: 659, col: 5, offset: 19368},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 659, col: 5, offset: 19368},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 659, col: 5, offset: 19368},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 659, col: 5, offset: 19368},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 659, col: 11, offset: 19374},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 659, col: 16, offset: 19379},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 659, col: 21, offset: 19384},
										expr: &ruleRefExpr{
											pos:  position{line: 659, col: 22, offset: 19385},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19456},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19456},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 662, col: 5, offset: 19456},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 19462},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 662, col: 20, offset: 19471},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 662, col: 25, offset: 19476},
										expr: &ruleRefExpr{
											pos:  position{line: 662, col: 26, offset: 19477},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 665, col: 5, offset: 19548},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 666, col: 5, offset: 19562},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 668, col: 1, offset: 19571},
			expr: &seqExpr{
				pos: position{line: 668, col: 13, offset: 19583},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 668, col: 13, offset: 19583},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 668, col: 22, offset: 19592},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 668, col: 25, offset: 19595},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 670, col: 1, offset: 19600},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 19613},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 671, col: 5, offset: 19613},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 672, col: 5, offset: 19623},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 674, col: 1, offset: 19633},
			expr: &actionExpr{
				pos: position{line: 675, col: 5, offset: 19642},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 675, col: 5, offset: 19642},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 19642},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 9, offset: 19646},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 18, offset: 19655},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 675, col: 21, offset: 19658},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 25, offset: 19662},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 28, offset: 19665},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 33, offset: 19670},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 38, offset: 19675},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 675, col: 41, offset: 19678},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 679, col: 1, offset: 19775},
			expr: &choiceExpr{
				pos: position{line: 680, col: 5, offset: 19788},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 680, col: 5, offset: 19788},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 19797},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 19797},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 681, col: 5, offset: 19797},
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 6, offset: 19798},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 681, col: 16, offset: 19808},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 19, offset: 19811},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 681, col: 34, offset: 19826},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 681, col: 37, offset: 19829},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 681, col: 41, offset: 19833},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 681, col: 44, offset: 19836},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 49, offset: 19841},
										name: "OptionalExprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 681, col: 63, offset: 19855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 681, col: 66, offset: 19858},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 681, col: 70, offset: 19862},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 681, col: 76, offset: 19868},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 76, offset: 19868},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 685, col: 1, offset: 19989},
			expr: &choiceExpr{
				pos: position{line: 686, col: 5, offset: 19998},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 19998},
						run: (*parser).callonGrep2,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 19998},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 686, col: 5, offset: 19998},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 686, col: 12, offset: 20005},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 686, col: 15, offset: 20008},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 686, col: 19, offset: 20012},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 686, col: 22, offset: 20015},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 686, col: 30, offset: 20023},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 686, col: 38, offset: 20031},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 686, col: 41, offset: 20034},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20189},
						run: (*parser).callonGrep12,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20189},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 689, col: 5, offset: 20189},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 12, offset: 20196},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 689, col: 15, offset: 20199},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 19, offset: 20203},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 689, col: 22, offset: 20206},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 30, offset: 20214},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 38, offset: 20222},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 689, col: 42, offset: 20226},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 46, offset: 20230},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 689, col: 49, offset: 20233},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 54, offset: 20238},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 59, offset: 20243},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 689, col: 62, offset: 20246},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 693, col: 1, offset: 20350},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20362},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 694, col: 5, offset: 20362},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 695, col: 5, offset: 20373},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 20382},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 696, col: 5, offset: 20382},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 7, offset: 20384},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 700, col: 1, offset: 20476},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20494},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 701, col: 5, offset: 20494},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 20504},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 702, col: 5, offset: 20504},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 704, col: 1, offset: 20540},
			expr: &actionExpr{
				pos: position{line: 705, col: 5, offset: 20550},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 705, col: 5, offset: 20550},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 705, col: 5, offset: 20550},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 11, offset: 20556},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 16, offset: 20561},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 705, col: 21, offset: 20566},
								expr: &actionExpr{
									pos: position{line: 705, col: 22, offset: 20567},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 705, col: 22, offset: 20567},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 705, col: 22, offset: 20567},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 705, col: 25, offset: 20570},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 705, col: 29, offset: 20574},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 705, col: 32, offset: 20577},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 705, col: 34, offset: 20579},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 709, col: 1, offset: 20688},
			expr: &actionExpr{
				pos: position{line: 710, col: 5, offset: 20702},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 710, col: 5, offset: 20702},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 710, col: 5, offset: 20702},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 6, offset: 20703},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 710, col: 10, offset: 20707},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 16, offset: 20713},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 710, col: 27, offset: 20724},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 710, col: 32, offset: 20729},
								expr: &ruleRefExpr{
									pos:  position{line: 710, col: 33, offset: 20730},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 714, col: 1, offset: 20798},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20808},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 20808},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 715, col: 5, offset: 20808},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 715, col: 9, offset: 20812},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 14, offset: 20817},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 27, offset: 20830},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 715, col: 30, offset: 20833},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 715, col: 34, offset: 20837},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 715, col: 37, offset: 20840},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 40, offset: 20843},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 715, col: 53, offset: 20856},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 21027},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 21027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 721, col: 5, offset: 21027},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 9, offset: 21031},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 721, col: 12, offset: 21034},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 16, offset: 21038},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 19, offset: 21041},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 22, offset: 21044},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 721, col: 35, offset: 21057},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21228},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 21228},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 727, col: 5, offset: 21228},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 727, col: 9, offset: 21232},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 14, offset: 21237},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 27, offset: 21250},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 727, col: 30, offset: 21253},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 34, offset: 21257},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 727, col: 37, offset: 21260},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21433},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 733, col: 5, offset: 21433},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 733, col: 5, offset: 21433},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 733, col: 9, offset: 21437},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 14, offset: 21442},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 733, col: 19, offset: 21447},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 734, col: 5, offset: 21496},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 734, col: 5, offset: 21496},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 734, col: 5, offset: 21496},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 734, col: 9, offset: 21500},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 734, col: 12, offset: 21503},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 736, col: 1, offset: 21554},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 21566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 737, col: 5, offset: 21566},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 738, col: 5, offset: 21577},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 739, col: 5, offset: 21587},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 740, col: 5, offset: 21595},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 5, offset: 21603},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21615},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21615},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 742, col: 5, offset: 21615},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 9, offset: 21619},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 742, col: 12, offset: 21622},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 17, offset: 21627},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 22, offset: 21632},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 25, offset: 21635},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 744, col: 1, offset: 21661},
			expr: &actionExpr{
				pos: position{line: 745, col: 5, offset: 21672},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 745, col: 5, offset: 21672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 745, col: 5, offset: 21672},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 9, offset: 21676},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 745, col: 12, offset: 21679},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 18, offset: 21685},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 30, offset: 21697},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 745, col: 33, offset: 21700},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 749, col: 1, offset: 21790},
			expr: &choiceExpr{
				pos: position{line: 750, col: 5, offset: 21806},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 750, col: 5, offset: 21806},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 750, col: 5, offset: 21806},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 750, col: 5, offset: 21806},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 21812},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 750, col: 22, offset: 21823},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 750, col: 27, offset: 21828},
										expr: &ruleRefExpr{
											pos:  position{line: 750, col: 27, offset: 21828},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 21927},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 753, col: 5, offset: 21927},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 755, col: 1, offset: 21963},
			expr: &actionExpr{
				pos: position{line: 755, col: 18, offset: 21980},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 755, col: 18, offset: 21980},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 755, col: 18, offset: 21980},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 21, offset: 21983},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 25, offset: 21987},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 28, offset: 21990},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 33, offset: 21995},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 757, col: 1, offset: 22028},
			expr: &choiceExpr{
				pos: position{line: 758, col: 5, offset: 22043},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 758, col: 5, offset: 22043},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 759, col: 5, offset: 22054},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 760, col: 5, offset: 22064},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 762, col: 1, offset: 22076},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 22087},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 763, col: 5, offset: 22087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 763, col: 5, offset: 22087},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 11, offset: 22093},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 763, col: 14, offset: 22096},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 19, offset: 22101},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 767, col: 1, offset: 22187},
			expr: &actionExpr{
				pos: position{line: 768, col: 5, offset: 22197},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 768, col: 5, offset: 22197},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 768, col: 5, offset: 22197},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 10, offset: 22202},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 20, offset: 22212},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 768, col: 23, offset: 22215},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 27, offset: 22219},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 30, offset: 22222},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 36, offset: 22228},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 772, col: 1, offset: 22328},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 22338},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 22338},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 773, col: 5, offset: 22338},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 9, offset: 22342},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 12, offset: 22345},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 18, offset: 22351},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 32, offset: 22365},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 773, col: 35, offset: 22368},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 777, col: 1, offset: 22458},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 22466},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 22466},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 778, col: 5, offset: 22466},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 10, offset: 22471},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 778, col: 13, offset: 22474},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 19, offset: 22480},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 33, offset: 22494},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 778, col: 36, offset: 22497},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 782, col: 1, offset: 22586},
			expr: &actionExpr{
				pos: position{line: 783, col: 5, offset: 22594},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 783, col: 5, offset: 22594},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 783, col: 5, offset: 22594},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 10, offset: 22599},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 783, col: 13, offset: 22602},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 19, offset: 22608},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 27, offset: 22616},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 783, col: 30, offset: 22619},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 787, col: 1, offset: 22710},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 22722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22722},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 22722},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 788, col: 5, offset: 22722},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 11, offset: 22728},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 788, col: 17, offset: 22734},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 788, col: 22, offset: 22739},
										expr: &ruleRefExpr{
											pos:  position{line: 788, col: 22, offset: 22739},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 791, col: 5, offset: 22833},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 791, col: 5, offset: 22833},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 794, col: 1, offset: 22870},
			expr: &actionExpr{
				pos: position{line: 794, col: 13, offset: 22882},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 794, col: 13, offset: 22882},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 794, col: 13, offset: 22882},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 794, col: 16, offset: 22885},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 20, offset: 22889},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 23, offset: 22892},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 25, offset: 22894},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 796, col: 1, offset: 22919},
			expr: &actionExpr{
				pos: position{line: 797, col: 5, offset: 22929},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 797, col: 5, offset: 22929},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 797, col: 5, offset: 22929},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 9, offset: 22933},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 797, col: 14, offset: 22938},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 797, col: 17, offset: 22941},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 797, col: 21, offset: 22945},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 797, col: 24, offset: 22948},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 30, offset: 22954},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 803, col: 1, offset: 23061},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 23071},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 23071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 804, col: 5, offset: 23071},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 15, offset: 23081},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 5, offset: 23095},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 805, col: 10, offset: 23100},
								expr: &ruleRefExpr{
									pos:  position{line: 805, col: 10, offset: 23100},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 806, col: 5, offset: 23113},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 806, col: 11, offset: 23119},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 11, offset: 23119},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 807, col: 5, offset: 23133},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 807, col: 11, offset: 23139},
								expr: &ruleRefExpr{
									pos:  position{line: 807, col: 11, offset: 23139},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 808, col: 5, offset: 23153},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 808, col: 13, offset: 23161},
								expr: &ruleRefExpr{
									pos:  position{line: 808, col: 13, offset: 23161},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 809, col: 5, offset: 23177},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 809, col: 12, offset: 23184},
								expr: &ruleRefExpr{
									pos:  position{line: 809, col: 12, offset: 23184},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 5, offset: 23199},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 810, col: 13, offset: 23207},
								expr: &ruleRefExpr{
									pos:  position{line: 810, col: 13, offset: 23207},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 811, col: 5, offset: 23223},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 23229},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 835, col: 1, offset: 23596},
			expr: &choiceExpr{
				pos: position{line: 836, col: 5, offset: 23610},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 23610},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 836, col: 5, offset: 23610},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 836, col: 5, offset: 23610},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 836, col: 12, offset: 23617},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 836, col: 14, offset: 23619},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 837, col: 5, offset: 23647},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 837, col: 5, offset: 23647},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 837, col: 5, offset: 23647},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 837, col: 12, offset: 23654},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 837, col: 14, offset: 23656},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 837, col: 26, offset: 23668},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 839, col: 1, offset: 23712},
			expr: &choiceExpr{
				pos: position{line: 840, col: 5, offset: 23730},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 23730},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 840, col: 5, offset: 23730},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 840, col: 5, offset: 23730},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 9, offset: 23734},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 14, offset: 23739},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 16, offset: 23741},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 19, offset: 23744},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 840, col: 21, offset: 23746},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 25, offset: 23750},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 841, col: 5, offset: 23844},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 841, col: 5, offset: 23844},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 10, offset: 23849},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 843, col: 1, offset: 23941},
			expr: &actionExpr{
				pos: position{line: 844, col: 5, offset: 23960},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 844, col: 5, offset: 23960},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 844, col: 5, offset: 23960},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 11, offset: 23966},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 844, col: 25, offset: 23980},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 844, col: 30, offset: 23985},
								expr: &actionExpr{
									pos: position{line: 844, col: 31, offset: 23986},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 844, col: 31, offset: 23986},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 844, col: 31, offset: 23986},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 844, col: 34, offset: 23989},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 38, offset: 23993},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 844, col: 41, offset: 23996},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 844, col: 46, offset: 24001},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 848, col: 1, offset: 24122},
			expr: &choiceExpr{
				pos: position{line: 849, col: 5, offset: 24134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24134},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 849, col: 5, offset: 24134},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 849, col: 5, offset: 24134},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 7, offset: 24136},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 12, offset: 24141},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 849, col: 14, offset: 24143},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 20, offset: 24149},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 849, col: 29, offset: 24158},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 849, col: 35, offset: 24164},
										expr: &ruleRefExpr{
											pos:  position{line: 849, col: 35, offset: 24164},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 24259},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 852, col: 5, offset: 24259},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 852, col: 5, offset: 24259},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 7, offset: 24261},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 12, offset: 24266},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 852, col: 14, offset: 24268},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 854, col: 1, offset: 24293},
			expr: &choiceExpr{
				pos: position{line: 855, col: 5, offset: 24306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 855, col: 5, offset: 24306},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 855, col: 5, offset: 24306},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 855, col: 5, offset: 24306},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 855, col: 7, offset: 24308},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 855, col: 10, offset: 24311},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 855, col: 12, offset: 24313},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 855, col: 15, offset: 24316},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 24344},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 856, col: 5, offset: 24344},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 856, col: 5, offset: 24344},
									name: "_",
								},
								&notExpr{
									pos: position{line: 856, col: 7, offset: 24346},
									expr: &seqExpr{
										pos: position{line: 856, col: 9, offset: 24348},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 856, col: 9, offset: 24348},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 856, col: 27, offset: 24366},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 856, col: 30, offset: 24369},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 856, col: 33, offset: 24372},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 858, col: 1, offset: 24397},
			expr: &ruleRefExpr{
				pos:  position{line: 859, col: 5, offset: 24410},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 861, col: 1, offset: 24416},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 24429},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 24429},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 24429},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 11, offset: 24435},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 862, col: 19, offset: 24443},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 862, col: 24, offset: 24448},
								expr: &actionExpr{
									pos: position{line: 862, col: 25, offset: 24449},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 862, col: 25, offset: 24449},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 862, col: 30, offset: 24454},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 866, col: 1, offset: 24569},
			expr: &actionExpr{
				pos: position{line: 867, col: 5, offset: 24581},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 867, col: 5, offset: 24581},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 24581},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 11, offset: 24587},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 24, offset: 24600},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 26, offset: 24602},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 31, offset: 24607},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 33, offset: 24609},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 39, offset: 24615},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 48, offset: 24624},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 867, col: 54, offset: 24630},
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 54, offset: 24630},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 64, offset: 24640},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 66, offset: 24642},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 69, offset: 24645},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 71, offset: 24647},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 79, offset: 24655},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 87, offset: 24663},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 867, col: 90, offset: 24666},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 94, offset: 24670},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 97, offset: 24673},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 106, offset: 24682},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 886, col: 1, offset: 24917},
			expr: &choiceExpr{
				pos: position{line: 887, col: 5, offset: 24934},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 887, col: 5, offset: 24934},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 887, col: 5, offset: 24934},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 887, col: 5, offset: 24934},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 7, offset: 24936},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 887, col: 14, offset: 24943},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 887, col: 14, offset: 24943},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 21, offset: 24950},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 29, offset: 24958},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 36, offset: 24965},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 24998},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 888, col: 5, offset: 24998},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 890, col: 1, offset: 25026},
			expr: &actionExpr{
				pos: position{line: 891, col: 5, offset: 25039},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 891, col: 5, offset: 25039},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 891, col: 5, offset: 25039},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 7, offset: 25041},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 891, col: 13, offset: 25047},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 891, col: 15, offset: 25049},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 20, offset: 25054},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 893, col: 1, offset: 25090},
			expr: &actionExpr{
				pos: position{line: 894, col: 5, offset: 25105},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 894, col: 5, offset: 25105},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 894, col: 5, offset: 25105},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 7, offset: 25107},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 13, offset: 25113},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 15, offset: 25115},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 894, col: 18, offset: 25118},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 894, col: 20, offset: 25120},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 28, offset: 25128},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 896, col: 1, offset: 25164},
			expr: &actionExpr{
				pos: position{line: 897, col: 5, offset: 25178},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 897, col: 5, offset: 25178},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 897, col: 5, offset: 25178},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 897, col: 7, offset: 25180},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 897, col: 14, offset: 25187},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 897, col: 16, offset: 25189},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 21, offset: 25194},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 899, col: 1, offset: 25230},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 25245},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 25245},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 900, col: 5, offset: 25245},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 7, offset: 25247},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 13, offset: 25253},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 15, offset: 25255},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 18, offset: 25258},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 900, col: 20, offset: 25260},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 25, offset: 25265},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 31, offset: 25271},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 37, offset: 25277},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 904, col: 1, offset: 25387},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 25400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 905, col: 5, offset: 25400},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 905, col: 5, offset: 25400},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 905, col: 5, offset: 25400},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 905, col: 7, offset: 25402},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 905, col: 12, offset: 25407},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 905, col: 12, offset: 25407},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 905, col: 18, offset: 25413},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 906, col: 5, offset: 25443},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 906, col: 5, offset: 25443},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 908, col: 1, offset: 25469},
			expr: &choiceExpr{
				pos: position{line: 909, col: 5, offset: 25482},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 909, col: 5, offset: 25482},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 909, col: 5, offset: 25482},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 909, col: 5, offset: 25482},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 909, col: 7, offset: 25484},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 909, col: 13, offset: 25490},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 909, col: 15, offset: 25492},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 21, offset: 25498},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 910, col: 5, offset: 25529},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 910, col: 5, offset: 25529},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 912, col: 1, offset: 25551},
			expr: &actionExpr{
				pos: position{line: 912, col: 10, offset: 25560},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 912, col: 10, offset: 25560},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 913, col: 1, offset: 25595},
			expr: &actionExpr{
				pos: position{line: 913, col: 6, offset: 25600},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 913, col: 6, offset: 25600},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 914, col: 1, offset: 25627},
			expr: &actionExpr{
				pos: position{line: 914, col: 8, offset: 25634},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 914, col: 8, offset: 25634},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 915, col: 1, offset: 25665},
			expr: &actionExpr{
				pos: position{line: 915, col: 8, offset: 25672},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 915, col: 8, offset: 25672},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 916, col: 1, offset: 25703},
			expr: &actionExpr{
				pos: position{line: 916, col: 9, offset: 25711},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 916, col: 9, offset: 25711},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 917, col: 1, offset: 25744},
			expr: &actionExpr{
				pos: position{line: 917, col: 9, offset: 25752},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 917, col: 9, offset: 25752},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 918, col: 1, offset: 25785},
			expr: &actionExpr{
				pos: position{line: 918, col: 6, offset: 25790},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 918, col: 6, offset: 25790},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 919, col: 1, offset: 25817},
			expr: &actionExpr{
				pos: position{line: 919, col: 10, offset: 25826},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 919, col: 10, offset: 25826},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 920, col: 1, offset: 25861},
			expr: &actionExpr{
				pos: position{line: 920, col: 9, offset: 25869},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 920, col: 9, offset: 25869},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 921, col: 1, offset: 25902},
			expr: &actionExpr{
				pos: position{line: 921, col: 6, offset: 25907},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 921, col: 6, offset: 25907},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 922, col: 1, offset: 25934},
			expr: &actionExpr{
				pos: position{line: 922, col: 9, offset: 25942},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 922, col: 9, offset: 25942},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 923, col: 1, offset: 25975},
			expr: &actionExpr{
				pos: position{line: 923, col: 7, offset: 25981},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 923, col: 7, offset: 25981},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 924, col: 1, offset: 26010},
			expr: &actionExpr{
				pos: position{line: 924, col: 8, offset: 26017},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 924, col: 8, offset: 26017},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 925, col: 1, offset: 26048},
			expr: &actionExpr{
				pos: position{line: 925, col: 8, offset: 26055},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 8, offset: 26055},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 926, col: 1, offset: 26086},
			expr: &actionExpr{
				pos: position{line: 926, col: 8, offset: 26093},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 8, offset: 26093},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 927, col: 1, offset: 26124},
			expr: &actionExpr{
				pos: position{line: 927, col: 9, offset: 26132},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 9, offset: 26132},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 928, col: 1, offset: 26165},
			expr: &actionExpr{
				pos: position{line: 928, col: 9, offset: 26173},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 9, offset: 26173},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 930, col: 1, offset: 26207},
			expr: &choiceExpr{
				pos: position{line: 931, col: 5, offset: 26229},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 931, col: 5, offset: 26229},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 14, offset: 26238},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 19, offset: 26243},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 27, offset: 26251},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 34, offset: 26258},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 42, offset: 26266},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 50, offset: 26274},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 59, offset: 26283},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 67, offset: 26291},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 75, offset: 26299},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 935, col: 1, offset: 26325},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 26337},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 936, col: 5, offset: 26337},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 937, col: 5, offset: 26353},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 5, offset: 26373},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 939, col: 5, offset: 26391},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 5, offset: 26410},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 5, offset: 26427},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 942, col: 5, offset: 26440},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 5, offset: 26449},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 5, offset: 26466},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 5, offset: 26485},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 5, offset: 26504},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 948, col: 1, offset: 26517},
			expr: &choiceExpr{
				pos: position{line: 949, col: 5, offset: 26535},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 949, col: 5, offset: 26535},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 949, col: 5, offset: 26535},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 949, col: 5, offset: 26535},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 7, offset: 26537},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 949, col: 14, offset: 26544},
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 15, offset: 26545},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 26660},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 952, col: 5, offset: 26660},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 7, offset: 26662},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 956, col: 1, offset: 26766},
			expr: &choiceExpr{
				pos: position{line: 957, col: 5, offset: 26785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 26785},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 957, col: 5, offset: 26785},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 957, col: 5, offset: 26785},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 7, offset: 26787},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 957, col: 11, offset: 26791},
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 12, offset: 26792},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 960, col: 5, offset: 26906},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 960, col: 5, offset: 26906},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 7, offset: 26908},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 964, col: 1, offset: 27007},
			expr: &actionExpr{
				pos: position{line: 965, col: 5, offset: 27024},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 965, col: 5, offset: 27024},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 965, col: 7, offset: 27026},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 969, col: 1, offset: 27139},
			expr: &actionExpr{
				pos: position{line: 970, col: 5, offset: 27158},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 970, col: 5, offset: 27158},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 27160},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 974, col: 1, offset: 27269},
			expr: &choiceExpr{
				pos: position{line: 975, col: 5, offset: 27288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 975, col: 5, offset: 27288},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 975, col: 5, offset: 27288},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 27401},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 976, col: 5, offset: 27401},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 978, col: 1, offset: 27512},
			expr: &actionExpr{
				pos: position{line: 979, col: 5, offset: 27528},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 979, col: 5, offset: 27528},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 981, col: 1, offset: 27634},
			expr: &actionExpr{
				pos: position{line: 982, col: 5, offset: 27651},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 982, col: 5, offset: 27651},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 982, col: 5, offset: 27651},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 982, col: 10, offset: 27656},
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 10, offset: 27656},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 986, col: 1, offset: 27771},
			expr: &actionExpr{
				pos: position{line: 987, col: 5, offset: 27787},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 987, col: 5, offset: 27787},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 987, col: 5, offset: 27787},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 987, col: 9, offset: 27791},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 13, offset: 27795},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 987, col: 18, offset: 27800},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 991, col: 1, offset: 27889},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 27902},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 27902},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 27918},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 993, col: 5, offset: 27918},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 9, offset: 27922},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 997, col: 1, offset: 28021},
			expr: &choiceExpr{
				pos: position{line: 998, col: 5, offset: 28030},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 28030},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 28046},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 5, offset: 28064},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1002, col: 1, offset: 28077},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 28095},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28095},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 28095},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1003, col: 5, offset: 28095},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 10, offset: 28100},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1003, col: 24, offset: 28114},
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 25, offset: 28115},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28155},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1004, col: 5, offset: 28155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1004, col: 5, offset: 28155},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 10, offset: 28160},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 25, offset: 28175},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1004, col: 28, offset: 28178},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 32, offset: 28182},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 35, offset: 28185},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 39, offset: 28189},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 28291},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1007, col: 5, offset: 28291},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1007, col: 10, offset: 28296},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 28398},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1010, col: 5, offset: 28398},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1010, col: 5, offset: 28398},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1010, col: 9, offset: 28402},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 12, offset: 28405},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 14, offset: 28407},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 25, offset: 28418},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1012, col: 1, offset: 28441},
			expr: &actionExpr{
				pos: position{line: 1013, col: 5, offset: 28455},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1013, col: 5, offset: 28455},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1013, col: 11, offset: 28461},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1017, col: 1, offset: 28557},
			expr: &actionExpr{
				pos: position{line: 1018, col: 5, offset: 28570},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1018, col: 5, offset: 28570},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1018, col: 5, offset: 28570},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1018, col: 11, offset: 28576},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1018, col: 16, offset: 28581},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1018, col: 21, offset: 28586},
								expr: &ruleRefExpr{
									pos:  position{line: 1018, col: 21, offset: 28586},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1022, col: 1, offset: 28680},
			expr: &actionExpr{
				pos: position{line: 1022, col: 16, offset: 28695},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1022, col: 16, offset: 28695},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1022, col: 16, offset: 28695},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1022, col: 19, offset: 28698},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1022, col: 23, offset: 28702},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1022, col: 26, offset: 28705},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1022, col: 30, offset: 28709},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1024, col: 1, offset: 28735},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 28751},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28751},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 28751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 28751},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 9, offset: 28755},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 12, offset: 28758},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 19, offset: 28765},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 33, offset: 28779},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1025, col: 36, offset: 28782},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 28877},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 28877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1028, col: 5, offset: 28877},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 9, offset: 28881},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 12, offset: 28884},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 16, offset: 28888},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 21, offset: 28893},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1028, col: 24, offset: 28896},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 28985},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1031, col: 5, offset: 28985},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1031, col: 5, offset: 28985},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 10, offset: 28990},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 14, offset: 28994},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 18, offset: 28998},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 23, offset: 29003},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1031, col: 26, offset: 29006},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29094},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1034, col: 5, offset: 29094},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1034, col: 5, offset: 29094},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 10, offset: 29099},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 13, offset: 29102},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 21, offset: 29110},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 26, offset: 29115},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1034, col: 29, offset: 29118},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 33, offset: 29122},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 36, offset: 29125},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 44, offset: 29133},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 49, offset: 29138},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1034, col: 52, offset: 29141},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1038, col: 1, offset: 29255},
			expr: &actionExpr{
				pos: position{line: 1039, col: 5, offset: 29275},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1039, col: 5, offset: 29275},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1039, col: 7, offset: 29277},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1046, col: 1, offset: 29493},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 5, offset: 29518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1047, col: 5, offset: 29518},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1047, col: 5, offset: 29518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1047, col: 5, offset: 29518},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1047, col: 9, offset: 29522},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1047, col: 11, offset: 29524},
										expr: &ruleRefExpr{
											pos:  position{line: 1047, col: 11, offset: 29524},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1047, col: 37, offset: 29550},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1048, col: 5, offset: 29576},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1048, col: 5, offset: 29576},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1048, col: 5, offset: 29576},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 9, offset: 29580},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1048, col: 11, offset: 29582},
										expr: &ruleRefExpr{
											pos:  position{line: 1048, col: 11, offset: 29582},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 37, offset: 29608},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1050, col: 1, offset: 29631},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 5, offset: 29660},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29660},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29677},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1052, col: 5, offset: 29677},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1052, col: 7, offset: 29679},
								expr: &ruleRefExpr{
									pos:  position{line: 1052, col: 7, offset: 29679},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1056, col: 1, offset: 29816},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 5, offset: 29845},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 29845},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1057, col: 5, offset: 29845},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1057, col: 5, offset: 29845},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1057, col: 10, offset: 29850},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1057, col: 12, offset: 29852},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 29879},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1058, col: 5, offset: 29879},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1058, col: 5, offset: 29879},
									expr: &litMatcher{
										pos:        position{line: 1058, col: 8, offset: 29882},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 15, offset: 29889},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 17, offset: 29891},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1060, col: 1, offset: 29927},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 5, offset: 29956},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1061, col: 5, offset: 29956},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 29973},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1062, col: 5, offset: 29973},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1062, col: 7, offset: 29975},
								expr: &ruleRefExpr{
									pos:  position{line: 1062, col: 7, offset: 29975},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1066, col: 1, offset: 30112},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 5, offset: 30141},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 30141},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1067, col: 5, offset: 30141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1067, col: 5, offset: 30141},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1067, col: 10, offset: 30146},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1067, col: 12, offset: 30148},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 30175},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1068, col: 5, offset: 30175},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1068, col: 5, offset: 30175},
									expr: &litMatcher{
										pos:        position{line: 1068, col: 8, offset: 30178},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 15, offset: 30185},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1068, col: 17, offset: 30187},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1070, col: 1, offset: 30223},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 30240},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1071, col: 5, offset: 30240},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1071, col: 5, offset: 30240},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1071, col: 10, offset: 30245},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1071, col: 13, offset: 30248},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1071, col: 15, offset: 30250},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1071, col: 20, offset: 30255},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1071, col: 23, offset: 30258},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1090, col: 1, offset: 30558},
			expr: &actionExpr{
				pos: position{line: 1091, col: 5, offset: 30576},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1091, col: 9, offset: 30580},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1091, col: 9, offset: 30580},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 19, offset: 30590},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 30, offset: 30601},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 41, offset: 30612},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 9, offset: 30629},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 18, offset: 30638},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 28, offset: 30648},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 38, offset: 30658},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 9, offset: 30674},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 21, offset: 30686},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1094, col: 9, offset: 30704},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1094, col: 18, offset: 30713},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1095, col: 9, offset: 30730},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1095, col: 22, offset: 30743},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1096, col: 9, offset: 30758},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1097, col: 9, offset: 30774},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1097, col: 16, offset: 30781},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1098, col: 9, offset: 30795},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1098, col: 18, offset: 30804},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1102, col: 1, offset: 30920},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 30938},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 30938},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 30938},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1103, col: 5, offset: 30938},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 30944},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 21, offset: 30954},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1103, col: 26, offset: 30959},
										expr: &ruleRefExpr{
											pos:  position{line: 1103, col: 26, offset: 30959},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 5, offset: 31061},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1106, col: 5, offset: 31061},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1108, col: 1, offset: 31085},
			expr: &actionExpr{
				pos: position{line: 1108, col: 21, offset: 31105},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 21, offset: 31105},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1108, col: 21, offset: 31105},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1108, col: 24, offset: 31108},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1108, col: 28, offset: 31112},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 31, offset: 31115},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 35, offset: 31119},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1110, col: 1, offset: 31150},
			expr: &actionExpr{
				pos: position{line: 1111, col: 5, offset: 31164},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 5, offset: 31164},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1111, col: 5, offset: 31164},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 10, offset: 31169},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 20, offset: 31179},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1111, col: 23, offset: 31182},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 27, offset: 31186},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 30, offset: 31189},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 34, offset: 31193},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1115, col: 1, offset: 31275},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 5, offset: 31289},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1116, col: 5, offset: 31289},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 5, offset: 31308},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1119, col: 1, offset: 31322},
			expr: &actionExpr{
				pos: position{line: 1119, col: 12, offset: 31333},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 12, offset: 31333},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1119, col: 13, offset: 31334},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1119, col: 13, offset: 31334},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1119, col: 21, offset: 31342},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1119, col: 28, offset: 31349},
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 29, offset: 31350},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1120, col: 1, offset: 31387},
			expr: &actionExpr{
				pos: position{line: 1120, col: 11, offset: 31397},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 11, offset: 31397},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1120, col: 12, offset: 31398},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 12, offset: 31398},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1120, col: 19, offset: 31405},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1120, col: 25, offset: 31411},
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 26, offset: 31412},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1121, col: 1, offset: 31448},
			expr: &actionExpr{
				pos: position{line: 1121, col: 11, offset: 31458},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 11, offset: 31458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1121, col: 11, offset: 31458},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1121, col: 16, offset: 31463},
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 17, offset: 31464},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1122, col: 1, offset: 31500},
			expr: &actionExpr{
				pos: position{line: 1122, col: 12, offset: 31511},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 12, offset: 31511},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1122, col: 13, offset: 31512},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1122, col: 13, offset: 31512},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1122, col: 21, offset: 31520},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1122, col: 28, offset: 31527},
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 29, offset: 31528},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1123, col: 1, offset: 31565},
			expr: &actionExpr{
				pos: position{line: 1123, col: 11, offset: 31575},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 11, offset: 31575},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1123, col: 11, offset: 31575},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1123, col: 16, offset: 31580},
							expr: &ruleRefExpr{
								pos:  position{line: 1123, col: 17, offset: 31581},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1125, col: 1, offset: 31618},
			expr: &charClassMatcher{
				pos:        position{line: 1125, col: 19, offset: 31636},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1127, col: 1, offset: 31648},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 18, offset: 31665},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 18, offset: 31665},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1127, col: 36, offset: 31683},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1129, col: 1, offset: 31690},
			expr: &actionExpr{
				pos: position{line: 1130, col: 5, offset: 31705},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1130, col: 5, offset: 31705},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1130, col: 8, offset: 31708},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1132, col: 1, offset: 31789},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 5, offset: 31808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 31808},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1133, col: 5, offset: 31808},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1133, col: 5, offset: 31808},
									expr: &seqExpr{
										pos: position{line: 1133, col: 7, offset: 31810},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1133, col: 7, offset: 31810},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1133, col: 15, offset: 31818},
												expr: &ruleRefExpr{
													pos:  position{line: 1133, col: 16, offset: 31819},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 32, offset: 31835},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1133, col: 48, offset: 31851},
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 48, offset: 31851},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 31903},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1134, col: 5, offset: 31903},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 31942},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1135, col: 5, offset: 31942},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1135, col: 5, offset: 31942},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 10, offset: 31947},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1135, col: 13, offset: 31950},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 32041},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1137, col: 5, offset: 32041},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 32083},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1138, col: 5, offset: 32083},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1138, col: 5, offset: 32083},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 8, offset: 32086},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1138, col: 26, offset: 32104},
									expr: &seqExpr{
										pos: position{line: 1138, col: 28, offset: 32106},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1138, col: 28, offset: 32106},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1138, col: 31, offset: 32109},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1140, col: 1, offset: 32134},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 32146},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1141, col: 5, offset: 32146},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 5, offset: 32165},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 5, offset: 32181},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 5, offset: 32189},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1146, col: 1, offset: 32199},
			expr: &actionExpr{
				pos: position{line: 1147, col: 5, offset: 32208},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1147, col: 5, offset: 32208},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1147, col: 5, offset: 32208},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1147, col: 14, offset: 32217},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1147, col: 18, offset: 32221},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1151, col: 1, offset: 32341},
			expr: &seqExpr{
				pos: position{line: 1151, col: 12, offset: 32352},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1151, col: 12, offset: 32352},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1151, col: 15, offset: 32355},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 19, offset: 32359},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1151, col: 22, offset: 32362},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 26, offset: 32366},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1153, col: 1, offset: 32370},
			expr: &seqExpr{
				pos: position{line: 1153, col: 6, offset: 32375},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1153, col: 6, offset: 32375},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1153, col: 11, offset: 32380},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1153, col: 16, offset: 32385},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1153, col: 21, offset: 32390},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1154, col: 1, offset: 32396},
			expr: &seqExpr{
				pos: position{line: 1154, col: 6, offset: 32401},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1154, col: 6, offset: 32401},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1154, col: 11, offset: 32406},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1156, col: 1, offset: 32413},
			expr: &seqExpr{
				pos: position{line: 1156, col: 12, offset: 32424},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1156, col: 12, offset: 32424},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 24, offset: 32436},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1158, col: 1, offset: 32448},
			expr: &seqExpr{
				pos: position{line: 1158, col: 15, offset: 32462},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 15, offset: 32462},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1158, col: 18, offset: 32465},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 22, offset: 32469},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1158, col: 25, offset: 32472},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 29, offset: 32476},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1158, col: 32, offset: 32479},
						expr: &seqExpr{
							pos: position{line: 1158, col: 33, offset: 32480},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 33, offset: 32480},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1158, col: 37, offset: 32484},
									expr: &charClassMatcher{
										pos:        position{line: 1158, col: 37, offset: 32484},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1160, col: 1, offset: 32494},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 32509},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1161, col: 5, offset: 32509},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1162, col: 5, offset: 32517},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1162, col: 6, offset: 32518},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1162, col: 6, offset: 32518},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1162, col: 12, offset: 32524},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 17, offset: 32529},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1162, col: 20, offset: 32532},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 24, offset: 32536},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1162, col: 27, offset: 32539},
								expr: &seqExpr{
									pos: position{line: 1162, col: 28, offset: 32540},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1162, col: 28, offset: 32540},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1162, col: 32, offset: 32544},
											expr: &charClassMatcher{
												pos:        position{line: 1162, col: 32, offset: 32544},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1164, col: 1, offset: 32554},
			expr: &actionExpr{
				pos: position{line: 1165, col: 5, offset: 32567},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 5, offset: 32567},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1165, col: 5, offset: 32567},
							expr: &litMatcher{
								pos:        position{line: 1165, col: 5, offset: 32567},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1165, col: 10, offset: 32572},
							expr: &seqExpr{
								pos: position{line: 1165, col: 11, offset: 32573},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1165, col: 11, offset: 32573},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1165, col: 19, offset: 32581},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1169, col: 1, offset: 32707},
			expr: &seqExpr{
				pos: position{line: 1169, col: 11, offset: 32717},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1169, col: 11, offset: 32717},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1169, col: 16, offset: 32722},
						expr: &seqExpr{
							pos: position{line: 1169, col: 17, offset: 32723},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1169, col: 17, offset: 32723},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1169, col: 21, offset: 32727},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1171, col: 1, offset: 32735},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 5, offset: 32748},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1172, col: 5, offset: 32748},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1173, col: 5, offset: 32757},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1174, col: 5, offset: 32766},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1175, col: 5, offset: 32775},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1176, col: 5, offset: 32783},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1177, col: 5, offset: 32791},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1178, col: 5, offset: 32799},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1179, col: 5, offset: 32807},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1180, col: 5, offset: 32815},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1182, col: 1, offset: 32820},
			expr: &actionExpr{
				pos: position{line: 1183, col: 5, offset: 32827},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 5, offset: 32827},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1183, col: 5, offset: 32827},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1183, col: 10, offset: 32832},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 14, offset: 32836},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1183, col: 19, offset: 32841},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 23, offset: 32845},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1183, col: 28, offset: 32850},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1183, col: 32, offset: 32854},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1185, col: 1, offset: 32891},
			expr: &actionExpr{
				pos: position{line: 1186, col: 5, offset: 32899},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1186, col: 5, offset: 32899},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1186, col: 5, offset: 32899},
							expr: &seqExpr{
								pos: position{line: 1186, col: 8, offset: 32902},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1186, col: 8, offset: 32902},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1186, col: 12, offset: 32906},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1186, col: 16, offset: 32910},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1186, col: 20, offset: 32914},
										expr: &choiceExpr{
											pos: position{line: 1186, col: 22, offset: 32916},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1186, col: 22, offset: 32916},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1186, col: 33, offset: 32927},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 39, offset: 32933},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 41, offset: 32935},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1190, col: 1, offset: 33099},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 5, offset: 33117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 33117},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1191, col: 5, offset: 33117},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1191, col: 5, offset: 33117},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 7, offset: 33119},
										expr: &ruleRefExpr{
											pos:  position{line: 1191, col: 7, offset: 33119},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1191, col: 17, offset: 33129},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1191, col: 19, offset: 33131},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1194, col: 5, offset: 33195},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1194, col: 5, offset: 33195},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1194, col: 5, offset: 33195},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 7, offset: 33197},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 11, offset: 33201},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1194, col: 13, offset: 33203},
										expr: &ruleRefExpr{
											pos:  position{line: 1194, col: 13, offset: 33203},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1194, col: 23, offset: 33213},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 28, offset: 33218},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1194, col: 30, offset: 33220},
										expr: &ruleRefExpr{
											pos:  position{line: 1194, col: 30, offset: 33220},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 40, offset: 33230},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 42, offset: 33232},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 33331},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 33331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1197, col: 5, offset: 33331},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 10, offset: 33336},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1197, col: 12, offset: 33338},
										expr: &ruleRefExpr{
											pos:  position{line: 1197, col: 12, offset: 33338},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 22, offset: 33348},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 24, offset: 33350},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1200, col: 5, offset: 33421},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1200, col: 5, offset: 33421},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1200, col: 5, offset: 33421},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 7, offset: 33423},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 11, offset: 33427},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1200, col: 13, offset: 33429},
										expr: &ruleRefExpr{
											pos:  position{line: 1200, col: 13, offset: 33429},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1200, col: 23, offset: 33439},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1203, col: 5, offset: 33507},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1203, col: 5, offset: 33507},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1207, col: 1, offset: 33544},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 5, offset: 33556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1208, col: 5, offset: 33556},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 5, offset: 33563},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1211, col: 1, offset: 33568},
			expr: &actionExpr{
				pos: position{line: 1211, col: 12, offset: 33579},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 12, offset: 33579},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1211, col: 12, offset: 33579},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 16, offset: 33583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 18, offset: 33585},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1213, col: 1, offset: 33623},
			expr: &actionExpr{
				pos: position{line: 1213, col: 12, offset: 33634},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 12, offset: 33634},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1213, col: 12, offset: 33634},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 14, offset: 33636},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1213, col: 18, offset: 33640},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1215, col: 1, offset: 33678},
			expr: &actionExpr{
				pos: position{line: 1216, col: 5, offset: 33689},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 5, offset: 33689},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1216, col: 5, offset: 33689},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 7, offset: 33691},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1216, col: 10, offset: 33694},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1216, col: 14, offset: 33698},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 16, offset: 33700},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1220, col: 1, offset: 33773},
			expr: &actionExpr{
				pos: position{line: 1221, col: 5, offset: 33784},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 5, offset: 33784},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1221, col: 5, offset: 33784},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 7, offset: 33786},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1221, col: 11, offset: 33790},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 15, offset: 33794},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 17, offset: 33796},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1225, col: 1, offset: 33859},
			expr: &actionExpr{
				pos: position{line: 1226, col: 4, offset: 33867},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1226, col: 4, offset: 33867},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1226, col: 6, offset: 33869},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1228, col: 1, offset: 33909},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 33923},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1229, col: 5, offset: 33923},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 5, offset: 33938},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1232, col: 1, offset: 33954},
			expr: &actionExpr{
				pos: position{line: 1232, col: 14, offset: 33967},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1232, col: 14, offset: 33967},
					expr: &charClassMatcher{
						pos:        position{line: 1232, col: 14, offset: 33967},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1234, col: 1, offset: 34006},
			expr: &actionExpr{
				pos: position{line: 1235, col: 5, offset: 34025},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 5, offset: 34025},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 5, offset: 34025},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1235, col: 9, offset: 34029},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1237, col: 1, offset: 34072},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 34088},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1238, col: 5, offset: 34088},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1238, col: 5, offset: 34088},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1238, col: 5, offset: 34088},
									expr: &litMatcher{
										pos:        position{line: 1238, col: 5, offset: 34088},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1238, col: 10, offset: 34093},
									expr: &charClassMatcher{
										pos:        position{line: 1238, col: 10, offset: 34093},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1238, col: 17, offset: 34100},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1238, col: 21, offset: 34104},
									expr: &charClassMatcher{
										pos:        position{line: 1238, col: 21, offset: 34104},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1238, col: 28, offset: 34111},
									expr: &ruleRefExpr{
										pos:  position{line: 1238, col: 28, offset: 34111},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 34170},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1241, col: 5, offset: 34170},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1241, col: 5, offset: 34170},
									expr: &litMatcher{
										pos:        position{line: 1241, col: 5, offset: 34170},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 10, offset: 34175},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1241, col: 14, offset: 34179},
									expr: &charClassMatcher{
										pos:        position{line: 1241, col: 14, offset: 34179},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1241, col: 21, offset: 34186},
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 21, offset: 34186},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1244, col: 5, offset: 34245},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1244, col: 7, offset: 34247},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1244, col: 7, offset: 34247},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1244, col: 13, offset: 34253},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1247, col: 1, offset: 34297},
			expr: &seqExpr{
				pos: position{line: 1247, col: 16, offset: 34312},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1247, col: 16, offset: 34312},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1247, col: 21, offset: 34317},
						expr: &charClassMatcher{
							pos:        position{line: 1247, col: 21, offset: 34317},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 27, offset: 34323},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1249, col: 1, offset: 34335},
			expr: &litMatcher{
				pos:        position{line: 1249, col: 7, offset: 34341},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1251, col: 1, offset: 34348},
			expr: &seqExpr{
				pos: position{line: 1251, col: 12, offset: 34359},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1251, col: 12, offset: 34359},
						expr: &choiceExpr{
							pos: position{line: 1251, col: 13, offset: 34360},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1251, col: 13, offset: 34360},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1251, col: 19, offset: 34366},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1251, col: 25, offset: 34372},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1253, col: 1, offset: 34379},
			expr: &actionExpr{
				pos: position{line: 1253, col: 7, offset: 34385},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1253, col: 7, offset: 34385},
					expr: &ruleRefExpr{
						pos:  position{line: 1253, col: 7, offset: 34385},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1255, col: 1, offset: 34427},
			expr: &charClassMatcher{
				pos:        position{line: 1255, col: 12, offset: 34438},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1257, col: 1, offset: 34451},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 5, offset: 34468},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 34468},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1258, col: 5, offset: 34468},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1258, col: 5, offset: 34468},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 9, offset: 34472},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1258, col: 11, offset: 34474},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 11, offset: 34474},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 29, offset: 34492},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1259, col: 5, offset: 34529},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1259, col: 5, offset: 34529},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1259, col: 5, offset: 34529},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 9, offset: 34533},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1259, col: 11, offset: 34535},
										expr: &ruleRefExpr{
											pos:  position{line: 1259, col: 11, offset: 34535},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 29, offset: 34553},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1261, col: 1, offset: 34587},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 34608},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1262, col: 5, offset: 34608},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1262, col: 5, offset: 34608},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1262, col: 5, offset: 34608},
									expr: &choiceExpr{
										pos: position{line: 1262, col: 7, offset: 34610},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1262, col: 7, offset: 34610},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1262, col: 13, offset: 34616},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1262, col: 26, offset: 34629,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1263, col: 5, offset: 34666},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1263, col: 5, offset: 34666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1263, col: 5, offset: 34666},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1263, col: 10, offset: 34671},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1263, col: 12, offset: 34673},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1265, col: 1, offset: 34707},
			expr: &actionExpr{
				pos: position{line: 1266, col: 5, offset: 34719},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 5, offset: 34719},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1266, col: 5, offset: 34719},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 10, offset: 34724},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 23, offset: 34737},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1266, col: 28, offset: 34742},
								expr: &ruleRefExpr{
									pos:  position{line: 1266, col: 28, offset: 34742},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1268, col: 1, offset: 34804},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 5, offset: 34821},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1269, col: 5, offset: 34821},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 5, offset: 34838},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1272, col: 1, offset: 34850},
			expr: &actionExpr{
				pos: position{line: 1272, col: 16, offset: 34865},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1272, col: 16, offset: 34865},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1274, col: 1, offset: 34914},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 5, offset: 34930},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1275, col: 5, offset: 34930},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1276, col: 5, offset: 34947},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1278, col: 1, offset: 34954},
			expr: &actionExpr{
				pos: position{line: 1278, col: 14, offset: 34967},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 14, offset: 34967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1278, col: 14, offset: 34967},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 19, offset: 34972},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1278, col: 22, offset: 34975},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1278, col: 22, offset: 34975},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 38, offset: 34991},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1280, col: 1, offset: 35027},
			expr: &actionExpr{
				pos: position{line: 1281, col: 5, offset: 35043},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 5, offset: 35043},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1281, col: 5, offset: 35043},
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 6, offset: 35044},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1281, col: 22, offset: 35060},
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 23, offset: 35061},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 35, offset: 35073},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 40, offset: 35078},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 50, offset: 35088},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1281, col: 55, offset: 35093},
								expr: &ruleRefExpr{
									pos:  position{line: 1281, col: 55, offset: 35093},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1285, col: 1, offset: 35162},
			expr: &seqExpr{
				pos: position{line: 1285, col: 19, offset: 35180},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1285, col: 19, offset: 35180},
						expr: &litMatcher{
							pos:        position{line: 1285, col: 19, offset: 35180},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 24, offset: 35185},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1286, col: 1, offset: 35198},
			expr: &seqExpr{
				pos: position{line: 1286, col: 15, offset: 35212},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1286, col: 15, offset: 35212},
						expr: &ruleRefExpr{
							pos:  position{line: 1286, col: 15, offset: 35212},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1286, col: 28, offset: 35225},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1288, col: 1, offset: 35230},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 5, offset: 35244},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 5, offset: 35244},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 5, offset: 35261},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 35273},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1291, col: 5, offset: 35273},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1293, col: 1, offset: 35297},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 35310},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 35310},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1295, col: 5, offset: 35324},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1297, col: 1, offset: 35331},
			expr: &actionExpr{
				pos: position{line: 1297, col: 11, offset: 35341},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1297, col: 11, offset: 35341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1297, col: 11, offset: 35341},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1297, col: 16, offset: 35346},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1297, col: 19, offset: 35349},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1297, col: 19, offset: 35349},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1297, col: 32, offset: 35362},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1299, col: 1, offset: 35398},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 35413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35413},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1300, col: 5, offset: 35413},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 35441},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 35441},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1302, col: 5, offset: 35471},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1305, col: 1, offset: 35478},
			expr: &choiceExpr{
				pos: position{line: 1306, col: 5, offset: 35499},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 35499},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1306, col: 5, offset: 35499},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1306, col: 5, offset: 35499},
									expr: &choiceExpr{
										pos: position{line: 1306, col: 7, offset: 35501},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1306, col: 7, offset: 35501},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1306, col: 13, offset: 35507},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1306, col: 26, offset: 35520,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1307, col: 5, offset: 35557},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1307, col: 5, offset: 35557},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1307, col: 5, offset: 35557},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1307, col: 10, offset: 35562},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 12, offset: 35564},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1309, col: 1, offset: 35598},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 35617},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1310, col: 5, offset: 35617},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 5, offset: 35638},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1313, col: 1, offset: 35653},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 5, offset: 35674},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1314, col: 5, offset: 35674},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 35682},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1315, col: 5, offset: 35682},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1316, col: 5, offset: 35722},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 35731},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1317, col: 5, offset: 35731},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1318, col: 5, offset: 35760},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1318, col: 5, offset: 35760},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 35789},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1319, col: 5, offset: 35789},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 35818},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1320, col: 5, offset: 35818},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1321, col: 5, offset: 35847},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1321, col: 5, offset: 35847},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 35876},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1322, col: 5, offset: 35876},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1324, col: 1, offset: 35902},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 5, offset: 35920},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1325, col: 5, offset: 35920},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1325, col: 5, offset: 35920},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 35948},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1326, col: 5, offset: 35948},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1327, col: 5, offset: 35976},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1329, col: 1, offset: 35982},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 5, offset: 36000},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1330, col: 5, offset: 36000},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1330, col: 5, offset: 36000},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1330, col: 5, offset: 36000},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1330, col: 9, offset: 36004},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1330, col: 16, offset: 36011},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1330, col: 16, offset: 36011},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1330, col: 25, offset: 36020},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1330, col: 34, offset: 36029},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1330, col: 43, offset: 36038},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1333, col: 5, offset: 36101},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1333, col: 5, offset: 36101},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1333, col: 5, offset: 36101},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1333, col: 9, offset: 36105},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1333, col: 13, offset: 36109},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1333, col: 20, offset: 36116},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1333, col: 20, offset: 36116},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 29, offset: 36125},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 29, offset: 36125},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 39, offset: 36135},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 39, offset: 36135},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 49, offset: 36145},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 49, offset: 36145},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 59, offset: 36155},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 59, offset: 36155},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1333, col: 69, offset: 36165},
												expr: &ruleRefExpr{
													pos:  position{line: 1333, col: 69, offset: 36165},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1333, col: 80, offset: 36176},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1337, col: 1, offset: 36230},
			expr: &actionExpr{
				pos: position{line: 1338, col: 5, offset: 36248},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 5, offset: 36248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1338, col: 5, offset: 36248},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 9, offset: 36252},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 14, offset: 36257},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1338, col: 25, offset: 36268},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1338, col: 29, offset: 36272},
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 30, offset: 36273},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1340, col: 1, offset: 36308},
			expr: &actionExpr{
				pos: position{line: 1341, col: 5, offset: 36323},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1341, col: 5, offset: 36323},
					expr: &choiceExpr{
						pos: position{line: 1341, col: 6, offset: 36324},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1341, col: 6, offset: 36324},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1341, col: 15, offset: 36333},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1341, col: 15, offset: 36333},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1341, col: 20, offset: 36338,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1343, col: 1, offset: 36374},
			expr: &charClassMatcher{
				pos:        position{line: 1344, col: 5, offset: 36390},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1346, col: 1, offset: 36405},
			expr: &oneOrMoreExpr{
				pos: position{line: 1346, col: 6, offset: 36410},
				expr: &ruleRefExpr{
					pos:  position{line: 1346, col: 6, offset: 36410},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1348, col: 1, offset: 36421},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1348, col: 6, offset: 36426},
				expr: &ruleRefExpr{
					pos:  position{line: 1348, col: 6, offset: 36426},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1350, col: 1, offset: 36437},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 5, offset: 36450},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1351, col: 5, offset: 36450},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 5, offset: 36465},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 5, offset: 36484},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1355, col: 1, offset: 36493},
			expr: &anyMatcher{
				line: 1356, col: 5, offset: 36513,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1358, col: 1, offset: 36516},
			expr: &choiceExpr{
				pos: position{line: 1359, col: 5, offset: 36544},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1359, col: 5, offset: 36544},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1360, col: 5, offset: 36553},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1361, col: 5, offset: 36562},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1362, col: 5, offset: 36571},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1363, col: 5, offset: 36579},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1364, col: 5, offset: 36592},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1366, col: 1, offset: 36602},
			expr: &charClassMatcher{
				pos:        position{line: 1367, col: 5, offset: 36621},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1373, col: 1, offset: 36951},
			expr: &ruleRefExpr{
				pos:  position{line: 1376, col: 5, offset: 37022},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1378, col: 1, offset: 37041},
			expr: &seqExpr{
				pos: position{line: 1379, col: 5, offset: 37062},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1379, col: 5, offset: 37062},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1379, col: 10, offset: 37067},
						expr: &seqExpr{
							pos: position{line: 1379, col: 11, offset: 37068},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1379, col: 11, offset: 37068},
									expr: &litMatcher{
										pos:        position{line: 1379, col: 12, offset: 37069},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1379, col: 17, offset: 37074},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1379, col: 35, offset: 37092},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1381, col: 1, offset: 37098},
			expr: &seqExpr{
				pos: position{line: 1382, col: 5, offset: 37120},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1382, col: 5, offset: 37120},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1382, col: 10, offset: 37125},
						expr: &seqExpr{
							pos: position{line: 1382, col: 11, offset: 37126},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1382, col: 11, offset: 37126},
									expr: &ruleRefExpr{
										pos:  position{line: 1382, col: 12, offset: 37127},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1382, col: 27, offset: 37142},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1384, col: 1, offset: 37161},
			expr: &seqExpr{
				pos: position{line: 1384, col: 7, offset: 37167},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1384, col: 7, offset: 37167},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 7, offset: 37167},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 19, offset: 37179},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1386, col: 1, offset: 37195},
			expr: &choiceExpr{
				pos: position{line: 1386, col: 7, offset: 37201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1386, col: 7, offset: 37201},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 37205},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1388, col: 1, offset: 37210},
			expr: &notExpr{
				pos: position{line: 1388, col: 7, offset: 37216},
				expr: &anyMatcher{
					line: 1388, col: 8, offset: 37217,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, op interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": op}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["op"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr12(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr12(stack["v"])
}

func (c *current) onSearchExpr18() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr18()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortOp8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp8(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp6(stack["n"])
}

func (c *current) onTopOp18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp18(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp8()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp8()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		op["args"] = columns.([]interface{})[1]
	}
	return op, nil

}

func (p *parser) callonJoinOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinOp22(style, key, columns interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		op["args"] = columns.([]interface{})[1]
	}
	return op, nil

}

func (p *parser) callonJoinOp22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp2(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}}, nil

}

func (p *parser) callonOverOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp2(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onOverOp16(exprs, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverOp16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp16(stack["exprs"], stack["scope"])
}

func (c *current) onOverOp25(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil}, nil

}

func (p *parser) callonOverOp25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp25(stack["exprs"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onComparisonExpr12(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "~", "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr12(stack["lhs"], stack["rhs"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onGrep2(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}, nil

}

func (p *parser) callonGrep2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep2(stack["pattern"])
}

func (c *current) onGrep12(pattern, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": expr}, nil

}

func (p *parser) callonGrep12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep12(stack["pattern"], stack["expr"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
