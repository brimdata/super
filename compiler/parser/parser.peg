#ifdef GO
{
    package parser
}
#define APPEND(arr, value) arr = append(arr, value)
#define ARRAY(...) []interface{}{__VA_ARGS__}
#define ARRAY_LEN(a) len(a.([]interface{}))
#define ASSERT_ARRAY(a) a.([]interface{})
#define ASSERT_INT(i) i.(int)
#define ASSERT_MAP(m) m.(map[string]interface{})
#define ASSERT_STRING(s) s.(string)
#define FOREACH(arr, var) for _, var := range arr
#define HAS(m, k) _, ok := m[k]; ok
#define ISNOTNULL(n) n != nil
#define ISNULL(n) n == nil
#define MAP(...) map[string]interface{}{__VA_ARGS__}
#define NULL nil
#define PREPEND(value, arr) append([]interface{}{value}, (arr.([]interface{}))...)
#define PRINT(...) fmt.Println(__VA_ARGS__)
#define RETURN(x) return x, nil
#define TEXT string(c.text)
#define TOSTRING(s) fmt.Sprintf("%v", s)
#define VAR(x) var x
#else
{
#include "support.js"
}
#define APPEND(arr, value) arr.push(value)
#define ARRAY(...) [__VA_ARGS__]
#define ARRAY_LEN(a) a.length
#define ASSERT_ARRAY(a) a
#define ASSERT_INT(i) i
#define ASSERT_MAP(m) m
#define ASSERT_STRING(s) s
#define FOREACH(arr, var) for(let var of arr)
#define HAS(m, k) (k in m)
#define ISNOTNULL(n) (n)
#define ISNULL(n) (!n)
#define MAP(...) {__VA_ARGS__}
#define NULL null
#define PREPEND(value, arr) [value, ...arr]
#define PRINT(...) console.log(__VAR_ARGS__)
#define RETURN(x) return x
#define TEXT text()
#define TOSTRING(s) s.toString()
#define VAR(x) let x
#endif

start = __ ast:Sequential __ EOF { RETURN(ast) }

Sequential
  = consts:Consts __ first:Operation rest:SequentialTail* {
      RETURN(MAP("kind": "Sequential", "ops": PREPEND(first, rest), "consts":consts))
    }

SequentialTail = __ Pipe __ p:Operation { RETURN(p) }

Consts
  = Const+
  / __ { RETURN(ARRAY()) }

Const = __ v:ConstDef { RETURN(v) }

ConstDef
  = "const" _ id:IdentifierName __ "=" __ expr:Expr {
      RETURN(MAP("name":id, "expr":expr))
    }
  / "type" _ id:IdentifierName __ "=" __ typ:Type {
      RETURN(MAP(
        "name":id,
        "expr":MAP("kind":"TypeValue","value":MAP("kind":"TypeDef","name":id,"type":typ))))
    }

Operation
  = "fork" __ "(" ops:Leg+ __ ")" {
      RETURN(MAP("kind": "Parallel", "ops": ops))
    }
  / "switch" _ expr:Expr _ "(" cases:SwitchLeg+ __ ")" {
      RETURN(MAP("kind": "Switch", "expr": expr, "cases": cases))
    }
  / "switch" __ "(" cases:SwitchLeg+ __ ")" {
      RETURN(MAP("kind": "Switch", "expr": NULL, "cases": cases))
    }
  / "from" __ "(" trunks:FromLeg+ __ ")" {
      RETURN(MAP("kind": "From", "trunks": trunks))
    }
  / op:Operator
  / a:OpAssignment &EndOfOp { RETURN(a) }
  / !(Function EndOfOp) a:Aggregation &EndOfOp  { RETURN(a) }
  / "search" _ expr:SearchBoolean {
      RETURN(MAP("kind": "Search", "expr": expr))
    }
  / expr:SearchBoolean {
      RETURN(MAP("kind": "OpExpr", "expr": expr))
    }
  / expr:Cast {
      RETURN(MAP("kind": "OpExpr", "expr": expr))
  }
  / expr:Expr {
      RETURN(MAP("kind": "OpExpr", "expr": expr))
    }

EndOfOp = __ (Pipe / SearchKeywordGuard / "=>" / ")" / EOF)
Pipe = "|" !("{" / "[")

Leg
  = __ "=>" __ s:Sequential { RETURN(s) }

SwitchLeg
  = __ expr:Case __ "=>" __ op:Sequential {
      RETURN(MAP("expr": expr, "op": op))
    }

Case
  = "case" _ expr:Expr { RETURN(expr) }
  / "default" { RETURN(NULL) }

FromLeg
  = __ source:FromSource opt:(__ "=>" __  Sequential)? {
      VAR(m) = MAP("kind": "Trunk", "source": source, "seq": NULL)
      if ISNOTNULL(opt) {
        m["seq"] = ASSERT_ARRAY(opt)[3]
      }
      RETURN(m)
    }

FromSource
  = File
  / Get
  / Pool
  / PassOp

ExprGuard = __ ((!"=>" Comparator) / AdditiveOperator / MultiplicativeOperator / ":" / "(" / "[" / "~")

Comparator = ("==" / "!=" / ("in" !IdentifierRest) / "<=" / "<" / ">=" / ">") { RETURN(TEXT) }

SearchBoolean
  = first:SearchAnd rest:SearchOrTerm* {
      RETURN(makeBinaryExprChain(first, rest))
    }

SearchOrTerm = _ OrToken _ t:SearchAnd { RETURN(ARRAY("or", t)) }

SearchAnd
  = first:SearchFactor
    rest:((_ AndToken)? _ !(OrToken / SearchKeywordGuard) expr:SearchFactor{ RETURN(ARRAY("and", expr)) })* {
      RETURN(makeBinaryExprChain(first,rest))
    }

SearchKeywordGuard
  = FromSource __ "=>" __
  / Case __

SearchFactor
  = (NotToken _ / "!" __) e:SearchFactor {
      RETURN(MAP("kind": "UnaryExpr", "op": "!", "operand": e))
    }
  / "(" __ expr:SearchBoolean __ ")" { RETURN(expr) }
  / SearchExpr

SearchExpr
  = Glob
  / Regexp
  / v:SearchValue (!ExprGuard / &(_ Glob)) {
      RETURN(MAP("kind": "Term", "text": TEXT, "value": v))
    }
  / "*" !ExprGuard {
      RETURN(MAP("kind": "Primitive", "type": "bool", "text": "true"))
    }
  / SearchPredicate

SearchPredicate
  = lhs:AdditiveExpr __ op:Comparator __ rhs:AdditiveExpr {
      RETURN(MAP("kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs))
    }
   / first:Function rest:(Deref)* {
         RETURN(makeBinaryExprChain(first, rest))
     }

SearchValue
  = Literal
  / !RegexpPattern v:KeyWord {
      RETURN(MAP("kind": "Primitive", "type": "string", "text": v))
    }

Glob
  = pattern:GlobPattern {
      RETURN(MAP("kind": "Glob", "pattern": pattern))
  }

Regexp
  = pattern:RegexpPattern {
      RETURN(MAP("kind": "Regexp", "pattern": pattern))
  }

/// === Aggregations ===

Aggregation
  = Summarize? keys:GroupByKeys limit:LimitArg {
      RETURN(MAP("kind": "Summarize", "keys": keys, "aggs": NULL, "limit": limit))
    }
  / Summarize? aggs:AggAssignments keys:(_ GroupByKeys)? limit:LimitArg {
      VAR(p) = MAP("kind": "Summarize", "keys": NULL, "aggs": aggs, "limit": limit)
      if ISNOTNULL(keys) {
        p["keys"] = ASSERT_ARRAY(keys)[1]
      }
      RETURN(p)
    }

Summarize = "summarize" _

GroupByKeys
  = ByToken _ columns:FlexAssignments { RETURN(columns) }

LimitArg
  = _ "with" _ "-limit" _ limit:UInt { RETURN(limit) }
  / "" { RETURN(0) }

// A FlexAssignment is like an Assignment but it can optionally omit the lhs,
// in which case the semantic pass will infer a name from the rhs, e.g., for
// an expression like "count() by foo", the rhs is Field "foo" and the lhs is nil.
FlexAssignment
  = Assignment
  / expr:Expr { RETURN(MAP("kind": "Assignment", "lhs": NULL, "rhs": expr)) }

FlexAssignments
  = first:FlexAssignment rest:(__ "," __ expr:FlexAssignment { RETURN(expr) })* {
      RETURN(PREPEND(first, rest))
    }

AggAssignment
  = lval:Lval __ ":=" __ agg:Agg {
      RETURN(MAP("kind": "Assignment", "lhs": lval, "rhs": agg))
    }
  / agg:Agg {
      RETURN(MAP("kind": "Assignment", "lhs": NULL, "rhs": agg))
    }

Agg
  = !FuncGuard op:AggName __ "(" __ expr:(OverExpr / Expr)?  __ ")" !(__ ".") where:WhereClause? {
      VAR(r) = MAP("kind": "Agg", "name": op, "expr": NULL, "where":where)
      if ISNOTNULL(expr) {
        r["expr"] = expr
      }
      RETURN(r)
    }

AggName
  = IdentifierName
  / AndToken
  / OrToken

WhereClause = _ "where" _ expr:LogicalOrExpr { RETURN(expr) }

AggAssignments
  = first:AggAssignment rest:(__ "," __ AggAssignment)* {
      VAR(result) = ARRAY(first)
      FOREACH(ASSERT_ARRAY(rest), r) {
        APPEND(result, ASSERT_ARRAY(r)[3])
      }
      RETURN(result)
    }

/// === Operators ===

Operator
  = AssertOp
  / SortOp
  / TopOp
  / CutOp
  / DropOp
  / HeadOp
  / TailOp
  / WhereOp
  / UniqOp
  / PutOp
  / RenameOp
  / FuseOp
  / ShapeOp
  / JoinOp
  / SampleOp
  / SQLOp
  / FromOp
  / PassOp
  / ExplodeOp
  / MergeOp
  / OverOp
  / YieldOp

AssertOp
  = "assert" _ expr:(e:Expr { RETURN(ARRAY(e, TEXT)) }) {
      // 'assert EXPR' is equivalent to
      // 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
      // where EXPR_text is the literal text of EXPR.
      RETURN(MAP("kind": "Yield", "exprs": ARRAY(MAP(
        "kind": "Conditional",
        "cond": ASSERT_ARRAY(expr)[0],
        "then": MAP("kind": "ID", "name": "this"),
        "else": MAP(
          "kind": "Call",
          "name": "error",
          "args": ARRAY(MAP("kind": "RecordExpr", "elems": ARRAY(
            MAP("kind": "Field", "name": "message", "value": MAP(
              "kind": "Primitive", "text": "assertion failed", "type": "string")),
            MAP("kind": "Field", "name": "expr", "value": MAP(
              "kind": "Primitive", "text": ASSERT_ARRAY(expr)[1], "type": "string")),
            MAP("kind": "Field", "name": "on", "value": MAP(
              "kind": "ID", "name": "this"))))),
          "where": NULL)))))
    }

SortOp
  = "sort" &EOKW args:SortArgs list:(_ l:Exprs { RETURN(l) })? {
      VAR(argm) = ASSERT_MAP(args)
      VAR(op) = MAP("kind": "Sort", "args": list, "order": "asc", "nullsfirst": false)
      if HAS(argm, "r") {
        op["order"] = "desc"
      }
      if HAS(argm, "nulls") {
        if (argm["nulls"] == "first") {
          op["nullsfirst"] = true
        }
      }
      RETURN(op)
    }

SortArgs = args:(_ a:SortArg{ RETURN(a) })* { return makeArgMap(args) }

SortArg
  = "-r" { RETURN(MAP("name": "r", "value": NULL)) }
  / "-nulls" _ where:(("first" / "last") { RETURN(TEXT) } ) { RETURN(MAP("name": "nulls", "value": where)) }

TopOp
  = "top" &EOKW limit:(_ n:UInt { RETURN(n)})? flush:(_ "-flush")? fields:(_ f:FieldExprs { RETURN(f) })? {
      VAR(op) = MAP("kind": "Top", "limit": 0, "args": NULL, "flush": false)
      if ISNOTNULL(limit) {
        op["limit"] = limit
      }
      if ISNOTNULL(fields) {
        op["args"] = fields
      }
      if ISNOTNULL(flush) {
        op["flush"] = true
      }
      RETURN(op)
    }

CutOp
  = "cut" _ args:FlexAssignments {
      RETURN(MAP("kind": "Cut", "args": args))
    }

DropOp
  = "drop" _ args:FieldExprs {
      RETURN(MAP("kind": "Drop", "args": args))
    }

HeadOp
  = "head" _ count:UInt { RETURN(MAP("kind": "Head", "count": count)) }
  / "head" { RETURN(MAP("kind": "Head", "count": 1)) }

TailOp
  = "tail" _ count:UInt { RETURN(MAP("kind": "Tail", "count": count)) }
  / "tail" { RETURN(MAP("kind": "Tail", "count": 1)) }

WhereOp
  = "where" _ expr:Expr {
      RETURN(MAP("kind": "Where", "expr": expr))
    }

UniqOp
  = "uniq" _ "-c" {
      RETURN(MAP("kind": "Uniq", "cflag": true))
    }
  / "uniq" {
      RETURN(MAP("kind": "Uniq", "cflag": false))
    }

PutOp
  = "put" _ args:Assignments {
      RETURN(MAP("kind": "Put", "args": args))
    }

RenameOp
  = "rename" _ first:Assignment rest:(__ "," __ cl:Assignment { RETURN(cl) })* {
      RETURN(MAP("kind": "Rename", "args": PREPEND(first, rest)))
    }

// The paren guard is to allow parsing fuse() as an aggregator. This
// is temporary pending finalizing the names
// (https://github.com/brimdata/zed/issues/2114) for the fuse op and
// aggregator, at which point we may no longer need this.
FuseOp
  = "fuse" !(__ "(") &EOKW {
      RETURN(MAP("kind": "Fuse"))
    }

ShapeOp
  = "shape" !(__ "(") &EOKW {
      RETURN(MAP("kind": "Shape"))
    }

JoinOp
  = style:JoinStyle "join" _ ON _ key:JoinKey optKey:(__ "=" __ JoinKey)? optArgs:(_ FlexAssignments)? {
      VAR(m) = MAP("kind": "Join", "style": style, "left_key": key, "right_key": key, "args": NULL)
      if ISNOTNULL(optKey) {
        m["right_key"] = ASSERT_ARRAY(optKey)[3]
      }
      if ISNOTNULL(optArgs) {
        m["args"] = ASSERT_ARRAY(optArgs)[1]
      }
      RETURN(m)
    }

JoinStyle
  = "anti" _  { RETURN("anti") }
  / "inner" _ { RETURN("inner") }
  / "left"  _ { RETURN("left") }
  / "right" _ { RETURN("right") }
  / ""         { RETURN("inner") }

JoinKey
  = Lval
  / "(" expr:Expr ")" { RETURN(expr) }

SampleOp
  = "sample" &EOKW e:SampleExpr {
      RETURN(MAP("kind": "Sequential", "consts": ARRAY(), "ops": ARRAY(
        MAP("kind": "Summarize",
          "keys": ARRAY(MAP("kind": "Assignment",
                   "lhs": MAP("kind": "ID", "name": "shape"),
                   "rhs": MAP("kind": "Call", "name": "typeof",
                              "args": ARRAY(e),
                              "where": NULL))),
          "aggs": ARRAY(MAP("kind": "Assignment",
                              "lhs": MAP("kind": "ID", "name": "sample"),
                              "rhs": MAP("kind": "Agg",
                                         "name": "any",
                                         "expr": e,
                                         "where": NULL))),
          "limit": 0),
        MAP("kind": "Yield",
          "exprs": ARRAY(
            MAP("kind": "ID", "name": "sample"))))))
    }

// OpAssignment is a top level operator that contains a list of assignment
// expressions. It is in an ambiguous state and could either be:
//   1) A summarize operator.
//   2) A put operator.
//  The semantic pass is responsible for converting it to one of the two.
OpAssignment
  = a:Assignments {
    RETURN(MAP("kind": "OpAssignment", "assignments": a))
  }

SampleExpr
  = _ lval:Lval { RETURN(lval)}
  / "" { RETURN(MAP("kind":"ID", "name":"this")) }

FromOp
  = source:FromAny {
      RETURN(MAP("kind":"From", "trunks": ARRAY(MAP("kind": "Trunk","source": source))))
    }

FromAny
  = File
  / Get
  / From

File
  = "file" _ path:Path format:FormatArg? layout:LayoutArg?  {
      RETURN(MAP("kind": "File", "path": path, "format": format, "layout": layout ))
    }

From
  = "from" _ body:PoolBody { RETURN(body) }

Pool
  = "pool" _ body:PoolBody { RETURN(body) }

PoolBody
  = spec:PoolSpec at:PoolAt? over:PoolRange? order:OrderArg? {
      RETURN(MAP("kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order))
    }

Get
  = "get" _ url:URL format:FormatArg? layout:LayoutArg? {
      RETURN(MAP("kind": "HTTP", "url": url, "format": format, "layout": layout ))
    }

URL = ("http:" / "https:") Path { RETURN(TEXT) }

Path
  = v:QuotedString { RETURN(v) }
  / [0-9a-zA-Z!@$%^&*()_=<>,./?:[\]{}~|+-]+ { RETURN(TEXT) }

//XXX this should be a timestamp
PoolAt
  = _ "at" _ id:KSUID { RETURN(id) }

//XXX this should allow 0x bytes format
KSUID = ([0-9a-zA-Z])+ { RETURN(TEXT) }

PoolRange
  = _ "range" _ lower:Literal _ "to" _ upper:Literal {
      RETURN(MAP("kind":"Range","lower": lower, "upper": upper))
    }

PoolSpec
  = pool:PoolName commit:PoolCommit? meta:PoolMeta? {
      RETURN(MAP("pool": pool, "commit": commit, "meta": meta))
    }
  / meta:PoolMeta {
      RETURN(MAP("pool": NULL, "commit": NULL, "meta": meta))
    }

PoolCommit
  = "@" commit:PoolName { RETURN(commit) }

PoolMeta
  = ":" meta:PoolIdentifier { RETURN(meta) }

PoolName
  = PoolIdentifier
  / KSUID
  / QuotedString

PoolIdentifier
  = (IdentifierStart / ".") (IdentifierRest / ".")* {  RETURN(TEXT) }

LayoutArg
  = _ "order" _ keys:FieldExprs order:OrderSuffix {
      RETURN(MAP("kind": "Layout", "keys": keys, "order": order))
    }

FormatArg
  = _ "format" _ val:IdentifierName { RETURN(val) }

OrderSuffix
  = ":asc"  { RETURN("asc") }
  / ":desc"  { RETURN("desc") }
  / "" { RETURN("asc") }

OrderArg
  = _ "order" _ "asc"  { RETURN("asc") }
  / _ "order" _ "desc"  { RETURN("desc") }

PassOp
  = "pass" &EOKW {
      RETURN(MAP("kind":"Pass"))
    }

// Currently we support only "explode by type" but this will be generalized
// to explode arbitrary arrays, records, etc.
ExplodeOp
  = "explode" _ args:Exprs typ:TypeArg as:AsArg? {
      RETURN(MAP("kind":"Explode", "args": args, "as": as, "type": typ))
    }

MergeOp
  = "merge" _ expr:Expr {
	  RETURN(MAP("kind":"Merge", "expr":expr))
    }

OverOp
  = "over" _ exprs:Exprs locals:Locals? scope:Scope? {
      VAR(over) = MAP("kind": "Over", "exprs": exprs, "scope": scope)
      if ISNOTNULL(locals) {
        RETURN(MAP("kind": "Let", "locals": locals, "over": over))
      }
      RETURN(over)
    }

Scope
  = __ "=>" __ "(" __ seq:Sequential __ ")" { RETURN(seq) }

Locals
  = _ "with" _ first:LocalsAssignment rest:(__ "," __ a:LocalsAssignment { RETURN(a) })* {
      RETURN(PREPEND(first, rest))
    }

LocalsAssignment
  = name:IdentifierName opt:(__ "=" __ Expr)? {
      VAR(m) = MAP("name": name, "expr": MAP("kind": "ID", "name": name))
      if ISNOTNULL(opt) {
         m["expr"] = ASSERT_ARRAY(opt)[3]
      }
      RETURN(m)
    }

YieldOp
  = "yield" _ exprs:Exprs {
	  RETURN(MAP("kind":"Yield", "exprs":exprs))
    }

TypeArg
  = _ BY _ typ:Type { RETURN(typ)}

AsArg
  = _ AS _ lhs:Lval { RETURN(lhs) }

/// === Expressions ===

Lval = DerefExpr

Lvals
  = first:Lval rest:(__ "," __ lval:Lval { RETURN(lval) })* {
      RETURN(PREPEND(first, rest))
    }

FieldExpr = Lval

FieldExprs
  = first:FieldExpr rest:(__ "," __ FieldExpr)* {
      VAR(result) = ARRAY(first)

      FOREACH(ASSERT_ARRAY(rest), r) {
        APPEND(result, ASSERT_ARRAY(r)[3])
      }

      RETURN(result)
    }

Assignments
  = first:Assignment rest:(__ "," __ a:Assignment { RETURN(a) })* {
    RETURN(PREPEND(first, rest))
  }

Assignment
  = lhs:Lval __ ":=" __ rhs:Expr { RETURN(MAP("kind": "Assignment", "lhs": lhs, "rhs": rhs)) }

Expr = ConditionalExpr

ConditionalExpr
  = cond:LogicalOrExpr opt:(__ "?" __ Expr __ ":" __ Expr)? {
      if ISNOTNULL(opt) {
        VAR(Then) = ASSERT_ARRAY(opt)[3]
        VAR(Else) = ASSERT_ARRAY(opt)[7]
        RETURN(MAP("kind": "Conditional", "cond": cond, "then": Then, "else": Else))
      }
      RETURN(cond)
    }

LogicalOrExpr
  = first:LogicalAndExpr
    rest:(__ op:OrToken __ expr:LogicalAndExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

LogicalAndExpr
  = first:ComparisonExpr
    rest:(__ op:AndToken __ expr:ComparisonExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

ComparisonExpr
  = lhs:AdditiveExpr opAndRHS:(__ Comparator __ AdditiveExpr / __ ("~" { RETURN(TEXT) }) __ Regexp)? {
      if ISNULL(opAndRHS) {
        RETURN(lhs)
      }
      VAR(op) = ASSERT_ARRAY(opAndRHS)[1]
      VAR(rhs) = ASSERT_ARRAY(opAndRHS)[3]
      RETURN(MAP("kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs))
    }

AdditiveExpr
  = first:MultiplicativeExpr
    rest:(__ op:AdditiveOperator __ expr:MultiplicativeExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

AdditiveOperator = ("+" / "-") { RETURN(TEXT) }

MultiplicativeExpr
  = first:NotExpr
    rest:(__ op:MultiplicativeOperator __ expr:NotExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

MultiplicativeOperator = ("*" / "/" / "%") { RETURN(TEXT) }

NotExpr
  = "!" __ e:NotExpr {
        RETURN(MAP("kind": "UnaryExpr", "op": "!", "operand": e))
    }
  / NegationExpr

NegationExpr
  = !Literal "-" __ e:FuncExpr {
        RETURN(MAP("kind": "UnaryExpr", "op": "-", "operand": e))
    }
  / FuncExpr

FuncExpr
  = first:Cast rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }
  / first:Function rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }
  / DerefExpr
  / Primary

FuncGuard = NotFuncs __ "("

NotFuncs
  = "not"
  / "select"

Cast
  = typ:CastType __ "(" __ expr:(OverExpr / Expr) __ ")" {
      RETURN(MAP("kind": "Cast", "expr": expr, "type": typ))
    }

Function
  = Grep
  / !FuncGuard fn:IdentifierName __ "(" __ args:FunctionArgs __ ")" where:WhereClause? {
      RETURN(MAP("kind": "Call", "name": fn, "args": args, "where": where))
    }

FunctionArgs
  = o:OverExpr { RETURN(ARRAY(o)) }
  / OptionalExprs

Grep
  = "grep" __ "(" __ pattern:Pattern __  opt:("," __ ( OverExpr / Expr) __)? ")" {
      VAR(m) = MAP("kind": "Grep", "pattern": pattern, "expr": MAP("kind": "ID", "name": "this"))
      if ISNOTNULL(opt) {
        m["expr"] = ASSERT_ARRAY(opt)[2]
      }
      RETURN(m)
    }

Pattern
  = Regexp
  / Glob
  / s:QuotedString {
      RETURN(MAP("kind": "String", "text": s))
    }

OptionalExprs
  = Exprs
  / __ { RETURN(ARRAY()) }

Exprs
  = first:Expr rest:(__ "," __ e:Expr { RETURN(e) })* {
      RETURN(PREPEND(first, rest))
    }

DerefExpr
  = !IP6 first:Identifier rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }

Deref
  = "[" from:AdditiveExpr __ ":" __ to:AdditiveExpr? "]" {
      RETURN(ARRAY("[", MAP("kind": "BinaryExpr", "op":":",
                            "lhs":from, "rhs":to)))
    }
  / "[" __ ":" __ to:AdditiveExpr "]" {
      RETURN(ARRAY("[", MAP("kind": "BinaryExpr", "op":":",
                            "lhs": NULL, "rhs":to)))
    }
  / "[" expr:Expr "]" { RETURN(ARRAY("[", expr)) }
  / "." id:Identifier { RETURN(ARRAY(".", id)) }

Primary
  = Record
  / Array
  / Set
  / Map
  / Literal
  / "(" __ expr:OverExpr __ ")"  { RETURN(expr) }
  / "(" __ expr:Expr __ ")" { RETURN(expr) }

OverExpr
  = "over" _ exprs:Exprs locals:Locals? __ "|" __ scope:Sequential {
      RETURN(MAP("kind": "OverExpr", "locals": locals, "exprs": exprs, "scope": scope))
    }

Record
  = "{" __ elems:RecordElems __ "}" {
      RETURN(MAP("kind":"RecordExpr", "elems":elems))
    }

RecordElems
  = first:RecordElem rest:RecordElemTail* {
    RETURN(PREPEND(first, rest))
  }
  / __ { RETURN(ARRAY()) }

RecordElemTail = __ "," __ elem:RecordElem { RETURN(elem) }

RecordElem
  = Spread
  / Field
  / Identifier

Spread
  = "..." __ expr:Expr {
      RETURN(MAP("kind":"Spread", "expr": expr))
    }

Field
  = name:FieldName __ ":" __ value:Expr {
      RETURN(MAP("kind":"Field","name": name, "value": value))
    }

Array
  = "[" __ exprs:OptionalExprs __ "]" {
      RETURN(MAP("kind":"ArrayExpr", "exprs":exprs ))
    }

Set
  = "|[" __ exprs:OptionalExprs __ "]|" {
      RETURN(MAP("kind":"SetExpr", "exprs":exprs ))
    }

Map
  = "|{" __ exprs:Entries __ "}|" {
      RETURN(MAP("kind":"MapExpr", "entries":exprs ))
    }

Entries
  = first:Entry rest:EntryTail* {
    RETURN(PREPEND(first, rest))
  }
  / __ { RETURN(ARRAY()) }


EntryTail = __ "," __ e:Entry { RETURN(e) }

Entry
  = key:Expr __ ":" __ value:Expr {
      RETURN(MAP("key": key, "value": value))
    }

/// === SQL Compat ===

SQLOp
  = selection:SQLSelect
    from:SQLFrom?
    joins:SQLJoins?
    where:SQLWhere?
    groupby:SQLGroupBy?
    having:SQLHaving?
    orderby:SQLOrderBy?
    limit:SQLLimit
    {
      RETURN(MAP(
        "kind": "SQLExpr",
        "select": selection,
        "from": from,
        "joins": joins,
        "where": where,
        "group_by": groupby,
        "having": having,
        "order_by": orderby,
        "limit": limit ))
    }

SQLSelect
  = SELECT _ "*" { RETURN(NULL) }
  / SELECT _ assignments:SQLAssignments { RETURN(assignments) }

SQLAssignment
  = rhs:Expr opt:(_ AS _ Lval)? {
      VAR(m) = MAP("kind": "Assignment", "lhs": NULL, "rhs": rhs)
      if ISNOTNULL(opt) {
        m["lhs"] = ASSERT_ARRAY(opt)[3]
      }
      RETURN(m)
    }

SQLAssignments
  = first:SQLAssignment rest:(__ "," __ expr:SQLAssignment { RETURN(expr) })* {
      RETURN(PREPEND(first, rest))
    }

SQLFrom
  = _ FROM _ table:SQLTable alias:SQLAlias? {
      RETURN(MAP("table": table, "alias": alias))
    }
  / _ FROM _ "*" { RETURN(NULL) }

SQLAlias
  = _ AS _ id:Lval { RETURN(id) }
  / _ !(SQLTokenSentinels _) id:Lval { RETURN(id) }

SQLTable
  = Expr

SQLJoins
  = first:SQLJoin rest:(join:SQLJoin { RETURN(join) })* {
      RETURN(PREPEND(first, rest))
    }

SQLJoin
  = style:SQLJoinStyle _ JOIN _ table:SQLTable alias:SQLAlias? _ ON _ leftKey:JoinKey __ "=" __ rightKey:JoinKey {
      RETURN(MAP(
        "table": table,
        "style": style,
        "left_key": leftKey,
        "right_key": rightKey,
        "alias": alias))
    }

SQLJoinStyle
  = _ style:(ANTI / INNER / LEFT / RIGHT) { RETURN(style) }
  / "" { RETURN("inner") }

SQLWhere
  = _ WHERE _ expr:LogicalOrExpr { RETURN(expr) }

SQLGroupBy
  = _ GROUP _ BY _ columns:FieldExprs { RETURN(columns) }

SQLHaving
  = _ HAVING _ expr:LogicalOrExpr { RETURN(expr) }

SQLOrderBy
  = _ ORDER _ BY _ keys:Exprs order:SQLOrder {
      RETURN(MAP("kind": "SQLOrderBy", "keys": keys, "order":order))
    }

SQLOrder
  = _ dir:(ASC / DESC) { RETURN(dir) }
  / "" { RETURN("asc") }

SQLLimit
  = _ LIMIT _ count:UInt { RETURN(count) }
  / "" { RETURN(0) }

SELECT = "select"i { RETURN("select") }
AS = "as"i { RETURN("as") }
FROM = "from"i { RETURN("from") }
JOIN = "join"i { RETURN("join") }
WHERE = "where"i { RETURN("where") }
GROUP = "group"i { RETURN("group") }
BY = "by"i { RETURN("by") }
HAVING = "having"i { RETURN("having") }
ORDER = "order"i { RETURN("order") }
ON = "on"i { RETURN("on") }
LIMIT = "limit"i { RETURN("limit") }
ASC = "asc"i { RETURN("asc") }
DESC = "desc"i { RETURN("desc") }
ANTI = "anti"i { RETURN("anti") }
LEFT = "left"i { RETURN("left") }
RIGHT = "right"i { RETURN("right") }
INNER = "inner"i { RETURN("inner") }

SQLTokenSentinels
  = SELECT / AS / FROM /  JOIN / WHERE / GROUP / HAVING / ORDER / LIMIT / ON

/// === Literals ===

Literal
  = TypeLiteral
  / TemplateLiteral
  / SubnetLiteral
  / AddressLiteral
  / BytesLiteral
  / Duration
  / Time
  / FloatLiteral
  / IntegerLiteral
  / BooleanLiteral
  / NullLiteral

SubnetLiteral
  = v:IP6Net !IdentifierRest {
      RETURN(MAP("kind": "Primitive", "type": "net", "text": v))
    }
  / v:IP4Net {
      RETURN(MAP("kind": "Primitive", "type": "net", "text": v))
    }

AddressLiteral
  = v:IP6 !IdentifierRest {
      RETURN(MAP("kind": "Primitive", "type": "ip", "text": v))
    }
  / v:IP {
      RETURN(MAP("kind": "Primitive", "type": "ip", "text": v))
    }

FloatLiteral
  = v:FloatString {
      RETURN(MAP("kind": "Primitive", "type": "float64", "text": v))
    }

IntegerLiteral
  = v:IntString {
      RETURN(MAP("kind": "Primitive", "type": "int64", "text": v))
    }

BooleanLiteral
  = "true"           { RETURN(MAP("kind": "Primitive", "type": "bool", "text": "true")) }
  / "false"          { RETURN(MAP("kind": "Primitive", "type": "bool", "text": "false")) }

NullLiteral
  = "null"           { RETURN(MAP("kind": "Primitive", "type": "null", "text": "")) }

BytesLiteral
  = "0x" HexDigit* {
	RETURN(MAP("kind": "Primitive", "type": "bytes", "text": TEXT))
  }

TypeLiteral
  = "<" typ:Type ">" {
      RETURN(MAP("kind": "TypeValue", "value": typ))
    }

CastType
  = TypeLiteral
  / typ:PrimitiveType {
      RETURN(MAP("kind": "TypeValue", "value": typ))
    }

Type
  = TypeLiteral
  / AmbiguousType
  / ComplexType

AmbiguousType
  = name:PrimitiveType !IdentifierRest { RETURN(name) }
  / name:IdentifierName opt:(__ '=' __ Type)? {
      if ISNOTNULL(opt) {
        RETURN(MAP("kind": "TypeDef", "name": name, "type": ASSERT_ARRAY(opt)[3]))
      }
      RETURN(MAP("kind": "TypeName", "name": name))
    }
  / "(" __ u:TypeUnion  ")" { RETURN(u) }

TypeUnion
  = types:TypeList {
      RETURN(MAP("kind": "TypeUnion", "types": types))
    }

TypeList
  = first:Type rest:TypeListTail+ {
    RETURN(PREPEND(first, rest))
  }

TypeListTail = __ "," __ typ:Type { RETURN(typ) }

ComplexType
  = "{" __ fields:TypeFieldList __ "}" {
      RETURN(MAP("kind":"TypeRecord", "fields":fields))
    }
  / "[" __ typ:Type __ "]" {
      RETURN(MAP("kind":"TypeArray", "type":typ))
    }
  / "|[" __  typ:Type __ "]|" {
      RETURN(MAP("kind":"TypeSet", "type":typ))
    }
  / "|{" __ keyType:Type __ ":" __ valType:Type __ "}|" {
      RETURN(MAP("kind":"TypeMap", "key_type":keyType, "val_type": valType))
    }

TemplateLiteral
  = v:TemplateLiteralParts {
      if (ARRAY_LEN(v) == 0) {
        RETURN(MAP("kind": "Primitive", "type": "string", "text": ""))
      }
      RETURN(makeTemplateExprChain(v))
    }

TemplateLiteralParts
  = '"' v:TemplateDoubleQuotedPart* '"' { RETURN(v) }
  / "'" v:TemplateSingleQuotedPart* "'" { RETURN(v) }

TemplateDoubleQuotedPart
  = TemplateExpr
  / v:TemplateDoubleQuotedChar+ {
      RETURN(MAP("kind": "Primitive", "type": "string", "text": joinChars(v)))
    }

TemplateDoubleQuotedChar
  = "\\" v:"${" { RETURN(v) }
  / !( "${" ) v:DoubleQuotedChar { RETURN(v) }

TemplateSingleQuotedPart
  = TemplateExpr
  / v:TemplateSingleQuotedChar+ {
      RETURN(MAP("kind": "Primitive", "type": "string", "text": joinChars(v)))
    }

TemplateSingleQuotedChar
  = "\\" v:"${" { RETURN(v) }
  / !( "${" ) v:SingleQuotedChar { RETURN(v) }

TemplateExpr
  = "${" __ e:Expr __ "}" {
      RETURN(MAP(
        "kind": "Cast",
        "expr": e,
        "type": MAP(
          "kind": "TypeValue",
          "value": MAP("kind": "TypePrimitive", "name": "string"))))
    }

PrimitiveType
  = (   "uint8" / "uint16" / "uint32" / "uint64"
      / "int8" / "int16" / "int32" / "int64"
      / "float32" / "float64"
      / "bool" / "string"
      / "duration" / "time"
      / "bytes"
      / "ip" / "net"
      / "type" / "null" ) {
          RETURN(MAP("kind": "TypePrimitive", "name": TEXT))
        }

TypeFieldList
  = first:TypeField rest:TypeFieldListTail* {
    RETURN(PREPEND(first, rest))
  }
  / "" { RETURN(NULL) }

TypeFieldListTail = __ "," __ typ:TypeField { RETURN(typ) }

TypeField
  = name:FieldName __ ":" __ typ:Type {
      RETURN(MAP("name": name, "type": typ))
    }

FieldName
  = IdentifierName
  / QuotedString

AndToken = ("and" / "AND") !IdentifierRest { RETURN("and") }
OrToken = ("or" / "OR") !IdentifierRest { RETURN("or") }
InToken = "in" !IdentifierRest { RETURN("in") }
NotToken = ("not" / "NOT") !IdentifierRest { RETURN("not") }
ByToken = "by" !IdentifierRest { RETURN("by") }

IdentifierStart = [A-Za-z_$]

IdentifierRest = IdentifierStart / [0-9]

Identifier
  = id:IdentifierName { RETURN(MAP("kind": "ID", "name": id)) }

IdentifierName
  = !(IDGuard !IdentifierRest) IdentifierStart IdentifierRest* {  RETURN(TEXT) }
  / "$" { RETURN(TEXT) }
  / "\\" id:IDGuard { RETURN(id) }
  // "type" is a search guard but should not be an id guard
  / "type" { RETURN(TEXT) }
  / id:SQLTokenSentinels &(__ "(") { RETURN(id) }

IDGuard
  = BooleanLiteral
  / NullLiteral
  / NaN
  / Infinity

Time
  = FullDate "T" FullTime {
      RETURN(MAP("kind": "Primitive", "type": "time", "text": TEXT))
    }

FullDate = D4 "-" D2 "-" D2

D4 = [0-9][0-9][0-9][0-9]
D2 = [0-9][0-9]

FullTime = PartialTime TimeOffset

PartialTime = D2 ":" D2 ":" D2 ("." [0-9]+)?

TimeOffset
  = "Z"
  / ("+" / "-") D2 ":" D2 ("." [0-9]+)?

Duration
  = "-"? (Decimal TimeUnit)+ {
      RETURN(MAP("kind": "Primitive", "type": "duration", "text": TEXT))
    }

Decimal = UInt ("." UInt)?

TimeUnit
  = "ns"
  / "us"
  / "ms"
  / "s"
  / "m"
  / "h"
  / "d"
  / "w"
  / "y"

IP
  = UInt "." UInt "." UInt "." UInt { RETURN(TEXT) }

IP6
  = !( Hex ":" Hex !(HexDigit / ":")) v:IP6Variations { RETURN(v) }

// this matches a superset of legal syntax for ip6 addresses but the compiler
// will catch any errors when translating the filter
IP6Variations
  = a:HexColon+ b:IP6Tail {
      RETURN(joinChars(a) + ASSERT_STRING(b))
    }
  / a:Hex b:ColonHex* "::" d:HexColon* e:IP6Tail {
      RETURN(ASSERT_STRING(a) + joinChars(b) + "::" + joinChars(d) + ASSERT_STRING(e))
    }
  / "::" a:HexColon* b:IP6Tail {
      RETURN("::" + joinChars(a) + ASSERT_STRING(b))
    }
  / a:Hex b:ColonHex* "::" {
      RETURN(ASSERT_STRING(a) + joinChars(b) + "::")
    }
  / "::" {
      RETURN("::")
    }

IP6Tail
  = IP
  / Hex

ColonHex = ":" v:Hex { RETURN(":" + ASSERT_STRING(v)) }

HexColon = v:Hex ":" { RETURN(ASSERT_STRING(v) + ":") }

IP4Net
  = a:IP '/' m:UInt {
      RETURN(ASSERT_STRING(a) + "/" + TOSTRING(m));
    }

IP6Net
  = a:IP6 '/' m:UInt {
      RETURN(ASSERT_STRING(a) + "/" + ASSERT_STRING(m));
    }

UInt
 = s:UIntString { RETURN(parseInt(s)) }

IntString
  = UIntString
  / MinusIntString

UIntString = [0-9]+ { RETURN(TEXT) }

MinusIntString
  = "-" UIntString { RETURN(TEXT) }

FloatString
  = "-"? [0-9]+ "." [0-9]* ExponentPart? {
      RETURN(TEXT)
    }
  / "-"? "." [0-9]+ ExponentPart? {
      RETURN(TEXT)
    }
  / ( NaN / Infinity ) { RETURN(TEXT) }


ExponentPart = "e"i [+-]? UIntString

NaN = "NaN"

Infinity = ("-" / "+")? "Inf"

Hex = HexDigit+ { RETURN(TEXT) }

HexDigit = [0-9a-fA-F]

QuotedString
  = '"' v:DoubleQuotedChar* '"' { RETURN(joinChars(v)) }
  / "'" v:SingleQuotedChar* "'" { RETURN(joinChars(v)) }

DoubleQuotedChar
  = !('"' / EscapedChar) . { RETURN(TEXT) }
  / "\\" s:EscapeSequence { RETURN(s) }

KeyWord
  = head:KeyWordStart tail:KeyWordRest* { RETURN(ASSERT_STRING(head) + joinChars(tail)) }

KeyWordStart
  = KeyWordChars
  / KeyWordEsc

KeyWordChars = [a-zA-Z_.:/%#@~] { RETURN(TEXT) }

KeyWordRest
  = KeyWordStart
  / [0-9]

KeyWordEsc = "\\" s:(KeywordEscape / EscapeSequence)  { RETURN(s) }

GlobPattern
  = &GlobProperStart &GlobHasStar head:GlobStart tail:GlobRest* {
      RETURN(ASSERT_STRING(head) + joinChars(tail))
    }

GlobProperStart = "*"* KeyWordStart
GlobHasStar = KeyWordRest* "*"

GlobStart
  = KeyWordChars
  / GlobEsc
  / "*" { RETURN("*")}

GlobRest
  = GlobStart
  / [0-9]

GlobEsc = "\\" s:(GlobEscape / EscapeSequence)  { RETURN(s) }

GlobEscape
  = "=" { RETURN("=") }
  / "*" { RETURN("\\*") }
  / [+-]


SingleQuotedChar
  = !("'" / EscapedChar) . { RETURN(TEXT) }
  / "\\" s:EscapeSequence { RETURN(s) }

EscapeSequence
  = SingleCharEscape
  / UnicodeEscape

SingleCharEscape
  = "'"
  / "\"" { RETURN(TEXT) }
  / "\\"
  / "b" { RETURN("\b") }
  / "f" { RETURN("\f") }
  / "n" { RETURN("\n") }
  / "r" { RETURN("\r") }
  / "t" { RETURN("\t") }
  / "v" { RETURN("\v") }

KeywordEscape
  = "=" { RETURN("=") }
  / "*" { RETURN("*") }
  / [+-]

UnicodeEscape
  = "u" chars:(HexDigit HexDigit HexDigit HexDigit) {
      RETURN(makeUnicodeChar(chars))
    }
  / "u" "{" chars:(HexDigit HexDigit? HexDigit? HexDigit? HexDigit? HexDigit?) "}" {
      RETURN(makeUnicodeChar(chars))
    }

RegexpPattern
  = "/" body:RegexpBody "/" !KeyWordStart { RETURN(body) }

RegexpBody
  = ([^/\\] / "\\" .)+ { RETURN(TEXT) }

EscapedChar
  = [\x00-\x1f\\]

_  = AnySpace+

__ = AnySpace*

AnySpace
  = WhiteSpace
  / LineTerminator
  / Comment

SourceCharacter
  = .

WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"

LineTerminator
  = [\n\r\u2028\u2029]

// XXX We will leave multi-line comments out for now since there is some work
// that needs to be done disambiguating among KeyWord, Regexp, and "/*".
// We will tackle this in the search-expr branch that is changing the grammar
// to better mix together ad hoc keyword search with formal boolean expressions.
Comment "comment"
  // = MultiLineComment
  // / SingleLineComment
  = SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)*

EOL = WhiteSpace* LineTerminator

EOT = _ / EOF

EOF = !.

EOKW = !KeyWordChars
