#ifdef GO
{
    package parser
}
#define APPEND(arr, value) arr = append(arr, value)
#define ARRAY(...) []interface{}{__VA_ARGS__}
#define ARRAY_LEN(a) len(a.([]interface{}))
#define ASSERT_ARRAY(a) a.([]interface{})
#define ASSERT_INT(i) i.(int)
#define ASSERT_MAP(m) m.(map[string]interface{})
#define ASSERT_STRING(s) s.(string)
#define FOREACH(arr, var) for _, var := range arr
#define HAS(m, k) _, ok := m[k]; ok
#define ISNOTNULL(n) n != nil
#define MAP(...) map[string]interface{}{__VA_ARGS__}
#define NULL nil
#define PREPEND(value, arr) append([]interface{}{value}, (arr.([]interface{}))...)
#define PRINT(...) fmt.Println(__VA_ARGS__)
#define RETURN(x) return x, nil
#define TEXT string(c.text)
#define TOSTRING(s) fmt.Sprintf("%v", s)
#define VAR(x) var x
#else
{
#include "support.js"
}
#define APPEND(arr, value) arr.push(value)
#define ARRAY(...) [__VA_ARGS__]
#define ARRAY_LEN(a) a.length
#define ASSERT_ARRAY(a) a
#define ASSERT_INT(i) i
#define ASSERT_MAP(m) m
#define ASSERT_STRING(s) s
#define FOREACH(arr, var) for(let var of arr)
#define HAS(m, k) (k in m)
#define ISNOTNULL(n) (n)
#define MAP(...) {__VA_ARGS__}
#define NULL null
#define PREPEND(value, arr) [value, ...arr]
#define PRINT(...) console.log(__VAR_ARGS__)
#define RETURN(x) return x
#define TEXT text()
#define TOSTRING(s) s.toString()
#define VAR(x) let x
#endif

start = __ ast:Z __ EOF { RETURN(ast) }

// A Zed script can be either a single operation or a chain of operations.
// For a single operation, we do not need to wrap operator in a SequentialProc,
// but we do for everything but FilterProc because the zed runtime is fragile
// to this difference right now.  See issue #1809.
Z // = !(Operator / Aggregation / "(") op:Operation &EOF { RETURN(op) }
  = decls:Decl+ __ first:Operation rest:SequentialTail* {
      VAR(procs) = ASSERT_ARRAY(decls)
      APPEND(procs, first)
      FOREACH(ASSERT_ARRAY(rest), p) {
        APPEND(procs, p)
      }
      RETURN(MAP("kind": "Sequential", "procs": procs))
    }
  / Sequential

Decl = __ v:AnyDecl { RETURN(v) }

AnyDecl
  = "const" _ id:IdentifierName __ "=" __ expr:Expr ( __ ";" / EOL ) {
      RETURN(MAP("kind":"Const","name":id, "expr":expr))
    }
  / "type" _ id:IdentifierName __ "=" __ typ:Type ( __ ";" / EOL ) {
      RETURN(MAP("kind":"TypeProc","name":id, "type":typ))
    }

Sequential
  = first:Operation rest:SequentialTail+ {
      RETURN(MAP("kind": "Sequential", "procs": PREPEND(first, rest)))
    }
  / op:Operation {
      RETURN(MAP("kind": "Sequential", "procs": ARRAY(op)))
    }

SequentialTail = __ Pipe __ p:Operation { RETURN(p) }

Parallel
  = __ "=>" __ s:Sequential __ ";" { RETURN(s) }

FromTrunk
  = __ source:FromSource  seq:FromTrunkSeq? __ ";" {
      RETURN(MAP("kind": "Trunk", "source": source, "seq": seq))
    }

FromTrunkSeq
  = __ "=>" __ seq:Sequential { RETURN(seq) }
  / "" { RETURN(NULL)}

FromSource
  = FileProc
  / HTTPProc
  / PassProc
  / PoolBody

Operation
  = "split" __ "(" procArray:Parallel+ __ ")" {
      RETURN(MAP("kind": "Parallel", "procs": procArray))
    }
  / "switch" _ expr:Expr _ "(" cases:SwitchLiteralClause+ __ ")" {
      RETURN(MAP("kind": "Switch", "expr": expr, "cases": cases))
    }
  / "switch" __ "(" cases:SwitchSearchBooleanClause+ __ ")" {
      RETURN(MAP("kind": "Switch", "expr": NULL, "cases": cases))
    }
  / "from" __ "(" trunks:FromTrunk+ __ ")" {
      RETURN(MAP("kind": "From", "trunks": trunks))
    }
  / Operator
  / f:Function &EndOfOp { RETURN(f) }
  / a:Aggregation &EndOfOp  { RETURN(a) }
  / expr:SearchBoolean !AggGuard {
      RETURN(MAP("kind": "Filter", "expr": expr))
    }

SwitchLiteralClause
  = __ expr:(DefaultToken / Literal) __ "=>" __ proc:Sequential __ ";" {
      RETURN(MAP("expr": expr, "proc": proc))
    }

SwitchSearchBooleanClause
  = __ expr:(DefaultToken / SearchBoolean) __ "=>" __ proc:Sequential __ ";" {
      RETURN(MAP("expr": expr, "proc": proc))
    }

DefaultToken = "default"i { RETURN(NULL) }

EndOfOp = __ (Pipe / "=>" / [);] / EOF)
Pipe = "|" !("{" / "[")

ExprGuard = __ ((!"=>" Comparator) / AdditiveOperator / MultiplicativeOperator / ":" / "(" / "[" / "matches")

Comparator = ("==" / "!=" / "in" / "<=" / "<" / ">=" / ">") { RETURN(TEXT) }

AggGuard = (_ (ByToken / "-with") EOT) / (__ ",")

SearchBoolean
  = first:SearchAnd rest:SearchOrTerm* {
      RETURN(makeBinaryExprChain(first, rest))
    }

SearchOrTerm = _ OrToken _ t:SearchAnd { RETURN(ARRAY("or", t)) }

SearchAnd
  = first:SearchFactor
    rest:((_ AndToken)? _ expr:SearchFactor{ RETURN(ARRAY("and", expr)) })* {
      RETURN(makeBinaryExprChain(first,rest))
    }

SearchFactor
  = (NotToken _ / "!" __) e:SearchFactor {
      RETURN(MAP("kind": "UnaryExpr", "op": "!", "operand": e))
    }
  / SearchExpr
  / "(" __ expr:SearchBoolean __ ")" { RETURN(expr) }


TBD
  = "*" __ compareOp:EqualityToken __ v:Expr {
      RETURN(MAP("kind": "Call", "name": "or",
        "args": ARRAY(
          MAP("kind": "SelectExpr",
              "selectors": ARRAY(MAP("kind": "Root")),
              "methods": ARRAY(
                MAP("kind": "Call", "name": "map",
                    "args": ARRAY(MAP("kind": "BinaryExpr", "op": "=",
                                      "lhs": MAP("kind": "ID", "name": "$"),
                                      "rhs": v))))))))
    }
  / match:PatternMatch !ExprGuard { RETURN(match) }
  / v:SearchValue _ InToken _ "*" {
      RETURN(MAP("kind": "Call", "name": "or",
        "args": ARRAY(
          MAP("kind": "SelectExpr",
              "selectors": ARRAY(MAP("kind": "Root")),
              "methods": ARRAY(
                MAP("kind": "Call", "name": "map",
                    "args": ARRAY(MAP("kind": "BinaryExpr", "op": "in",
                                      "rhs": MAP("kind": "ID", "name": "$"),
                                      "lhs": v))))))))
    }

SearchExpr
  = !(SearchGuard EOT) search:PatternSearch { RETURN(search) }
  / !(SearchGuard EOT) v:SearchValue !ExprGuard {
      RETURN(MAP("kind": "Search", "text": TEXT, "value": v))
    }
  / "*" !ExprGuard {
      RETURN(MAP("kind": "Primitive", "type": "bool", "text": "true"))
    }
  / EqualityCompareExpr

SearchValue
  = Literal
  / !Regexp v:KeyWord {
      RETURN(MAP("kind": "Primitive", "type": "string", "text": v))
    }

PatternSearch
  = pattern:Pattern {
      RETURN(MAP("kind": "RegexpSearch", "pattern": pattern))
    }

PatternMatch
  = f:Lval _ "matches"i _  pattern:Pattern {
      RETURN(MAP("kind": "RegexpMatch", "pattern": pattern, "expr": f))
    }

Pattern = Regexp / Glob

SearchGuard
  = SQLTokenSentinels
  / AndToken
  / OrToken
  / NotToken
  / InToken
  / ByToken
  / DefaultToken
  / "type("
  / "matches"i

/// === Aggregations ===

Aggregation
  = Summarize every:EveryDur keys:GroupByKeys limit:LimitArg {
      RETURN(MAP("kind": "Summarize", "keys": keys, "aggs": NULL, "duration": every, "limit": limit))
    }
  / Summarize every:EveryDur aggs:AggAssignments keys:(_ GroupByKeys)? limit:LimitArg {
      VAR(p) = MAP("kind": "Summarize", "keys": NULL, "aggs": aggs, "duration": every, "limit": limit)
      if ISNOTNULL(keys) {
        p["keys"] = ASSERT_ARRAY(keys)[1]
      }
      RETURN(p)
    }

Summarize = "summarize" _ / ""

EveryDur
  = "every"i _ dur:Duration _ { RETURN(dur) }
  / ""  { RETURN(NULL) }

GroupByKeys
  = ByToken _ columns:FlexAssignments { RETURN(columns) }

LimitArg
  = _ "with" _ "-limit" _ limit:UInt { RETURN(limit) }
  / "" { RETURN(0) }

// A FlexAssignment is like an Assignment but it can optionally omit the lhs,
// in which case the semantic pass will infer a name from the rhs, e.g., for
// an expression like "count() by foo", the rhs is Field "foo" and the lhs is nil.
FlexAssignment
  = Assignment
  / expr:Expr { RETURN(MAP("kind": "Assignment", "lhs": NULL, "rhs": expr)) }

FlexAssignments
  = first:FlexAssignment rest:(__ "," __ expr:FlexAssignment { RETURN(expr) })* {
      RETURN(PREPEND(first, rest))
    }

AggAssignment
  = lval:Lval __ ":=" __ agg:Agg {
      RETURN(MAP("kind": "Assignment", "lhs": lval, "rhs": agg))
    }
  / agg:Agg {
      RETURN(MAP("kind": "Assignment", "lhs": NULL, "rhs": agg))
    }

Agg
  = !FuncGuard op:AggName __ "(" __ expr:Expr?  __ ")" !(__ ".") where:WhereClause? {
      VAR(r) = MAP("kind": "Agg", "name": op, "expr": NULL, "where":where)
      if ISNOTNULL(expr) {
        r["expr"] = expr
      }
      RETURN(r)
    }

AggName
  = IdentifierName
  / AndToken
  / OrToken

WhereClause = _ "where" _ expr:SearchBoolean { RETURN(expr) }

AggAssignments
  = first:AggAssignment rest:(__ "," __ AggAssignment)* {
      VAR(result) = ARRAY(first)
      FOREACH(ASSERT_ARRAY(rest), r) {
        APPEND(result, ASSERT_ARRAY(r)[3])
      }
      RETURN(result)
    }

/// === Operators (aka Procs) ===

Operator
  = SortProc
  / TopProc
  / CutProc
  / PickProc
  / DropProc
  / HeadProc
  / TailProc
  / FilterProc
  / UniqProc
  / PutProc
  / RenameProc
  / FuseProc
  / ShapeProc
  / JoinProc
  / SampleProc
  / SQLProc
  / FromProc
  / PassProc
  / ExplodeProc

SortProc
  = "sort"i args:SortArgs list:(_ l:Exprs { RETURN(l) })? {
      VAR(argm) = ASSERT_MAP(args)
      VAR(proc) = MAP("kind": "Sort", "args": list, "order": "asc", "nullsfirst": false)
      if HAS(argm, "r") {
        proc["order"] = "desc"
      }
      if HAS(argm, "nulls") {
        if (argm["nulls"] == "first") {
          proc["nullsfirst"] = true
        }
      }
      RETURN(proc)
    }

SortArgs = args:(_ a:SortArg{ RETURN(a) })* { return makeArgMap(args) }

SortArg
  = "-r" { RETURN(MAP("name": "r", "value": NULL)) }
  / "-nulls" _ where:(("first" / "last") { RETURN(TEXT) } ) { RETURN(MAP("name": "nulls", "value": where)) }

TopProc
  = "top"i limit:(_ n:UInt { RETURN(n)})? flush:(_ "-flush")? fields:(_ f:FieldExprs { RETURN(f) })? {
      VAR(proc) = MAP("kind": "Top", "limit": 0, "args": NULL, "flush": false)
      if ISNOTNULL(limit) {
        proc["limit"] = limit
      }
      if ISNOTNULL(fields) {
        proc["args"] = fields
      }
      if ISNOTNULL(flush) {
        proc["flush"] = true
      }
      RETURN(proc)
    }

CutProc
  = "cut"i _ args:FlexAssignments {
      RETURN(MAP("kind": "Cut", "args": args))
    }

PickProc
  = "pick"i _ args:FlexAssignments {
      RETURN(MAP("kind": "Pick", "args": args))
    }

DropProc
  = "drop"i _ args:FieldExprs {
      RETURN(MAP("kind": "Drop", "args": args))
    }

HeadProc
  = "head"i _ count:UInt { RETURN(MAP("kind": "Head", "count": count)) }
  / "head"i { RETURN(MAP("kind": "Head", "count": 1)) }

TailProc
  = "tail"i _ count:UInt { RETURN(MAP("kind": "Tail", "count": count)) }
  / "tail"i { RETURN(MAP("kind": "Tail", "count": 1)) }

FilterProc
  = "filter"i _ op:Filter {
      RETURN(op)
    }

Filter
  = expr:SearchBoolean {
      RETURN(MAP("kind": "Filter", "expr": expr))
    }

UniqProc
  = "uniq"i _ "-c" {
      RETURN(MAP("kind": "Uniq", "cflag": true))
    }
  / "uniq"i {
      RETURN(MAP("kind": "Uniq", "cflag": false))
    }

PutProc
  = "put"i _ args:FlexAssignments {
      RETURN(MAP("kind": "Put", "args": args))
    }

RenameProc
  = "rename"i _ first:Assignment rest:(__ "," __ cl:Assignment { RETURN(cl) })* {
      RETURN(MAP("kind": "Rename", "args": PREPEND(first, rest)))
    }

// The paren guard is to allow parsing fuse() as an aggregator. This
// is temporary pending finalizing the names
// (https://github.com/brimdata/zed/issues/2114) for the fuse proc and
// aggregator, at which point we may no longer need this.
FuseProc
  = "fuse"i !(__ "(") {
      RETURN(MAP("kind": "Fuse"))
    }

ShapeProc
  = "shape"i {
      RETURN(MAP("kind": "Shape"))
    }

JoinProc
  = style:JoinStyle "join"i _ ON _ leftKey:JoinKey __ "=" __ rightKey:JoinKey columns:(_ FlexAssignments)? {
      VAR(proc) = MAP("kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": NULL)
      if ISNOTNULL(columns) {
        proc["args"] = ASSERT_ARRAY(columns)[1]
      }
      RETURN(proc)
    }
  / style:JoinStyle  "join"i _ ON _ key:JoinKey columns:(_ FlexAssignments)? {
      VAR(proc) = MAP("kind": "Join", "style": style, "left_key": key, "right_key": key, "args": NULL)
      if ISNOTNULL(columns) {
        proc["args"] = ASSERT_ARRAY(columns)[1]
      }
      RETURN(proc)
    }

JoinStyle
  = "inner"i _ { RETURN("inner") }
  / "left"i  _ { RETURN("left") }
  / "right"i _ { RETURN("right") }
  / ""         { RETURN("inner") }

JoinKey
  = Lval
  / "(" expr:Expr ")" { RETURN(expr) }

SampleProc
  = "sample"i e:SampleExpr {
      RETURN(MAP("kind": "Sequential", "procs": ARRAY(
        MAP("kind": "Summarize",
          "keys": ARRAY(MAP("kind": "Assignment",
                   "lhs": MAP("kind": "ID", "name": "shape"),
                   "rhs": MAP("kind": "Call", "name": "typeof",
                              "args": ARRAY(e)))),
          "aggs": ARRAY(MAP("kind": "Assignment",
                              "lhs": MAP("kind": "ID", "name": "sample"),
                              "rhs": MAP("kind": "Agg",
                                         "name": "any",
                                         "expr": e,
                                         "where": NULL))),
          "duration": NULL, "limit": 0),
        MAP("kind": "Cut",
            "args": ARRAY(MAP("kind": "Assignment",
                                "lhs": NULL,
                                "rhs": MAP("kind": "ID", "name": "sample")))))))
    }

SampleExpr
  = _ lval:Lval { RETURN(lval)}
  / "" { RETURN(MAP("kind":"Root")) }

FromProc
  = source:FromAny {
      RETURN(MAP("kind":"From", "trunks": ARRAY(MAP("kind": "Trunk","source": source))))
    }

FromAny
  = FileProc
  / HTTPProc
  / PoolProc

FileProc
  = "file"i _ path:Path format:FormatArg layout:LayoutArg  {
      RETURN(MAP("kind": "File", "path": path, "format": format, "layout": layout ))
    }

PoolProc
  = "from"i _ body:PoolBody { RETURN(body) }

PoolBody
  = name:PoolName at:PoolAt over:PoolRange order:OrderArg {
      RETURN(MAP("kind": "Pool", "name": name, "at": at, "range": over, "scan_order": order))
    }

HTTPProc
  = "get"i _ url:URL format:FormatArg layout:LayoutArg {
      RETURN(MAP("kind": "HTTP", "url": url, "format": format, "layout": layout ))
    }

URL = ("http:" / "https:") Path { RETURN(TEXT) }

Path
  = v:QuotedString { RETURN(v) }
  / [0-9a-zA-Z!@$%^&*()_=<>,./?:[\]{}~|+-]+ { RETURN(TEXT) }

PoolAt
  = _ "at"i _ id:KSUID { RETURN(id) }
  / "" { RETURN(NULL) }

KSUID = ([0-9a-zA-Z])+ { RETURN(TEXT) }

PoolRange
  = _ "over"i _ lower:Literal _ "to"i _ upper:Literal {
      RETURN(MAP("kind":"Range","lower": lower, "upper": upper))
    }
  / "" { RETURN(NULL) }

PoolTo
  = _ "to"i _ val:Literal { RETURN(val) }
  / "" { RETURN(NULL) }

PoolName
  = name:IdentifierName { RETURN(name) }
  / id:KSUID { RETURN(id) }
  / s:QuotedString { RETURN(s) }

LayoutArg
  = _ "order"i _ keys:FieldExprs order:OrderSuffix {
      RETURN(MAP("kind": "Layout", "keys": keys, "order": order))
    }
  / "" { RETURN(NULL) }

FormatArg
  = _ "format"i _ val:IdentifierName { RETURN(val) }
  / "" { RETURN("") }

OrderSuffix
  = ":asc"i  { RETURN("asc") }
  / ":desc"i  { RETURN("desc") }
  / "" { RETURN("asc") }

OrderArg
  = _ "order"i _ "asc"i  { RETURN("asc") }
  / _ "order"i _ "desc"i  { RETURN("desc") }
  / "" { RETURN("") }

PassProc
  = "pass"i {
      RETURN(MAP("kind":"Pass"))
    }

// Currently we support only "explode by type" but this will be generalized
// to explode arbitrary arrays, records, etc.
ExplodeProc
  = "explode"i _ args:Exprs typ:TypeArg as:AsArg {
      RETURN(MAP("kind":"Explode", "args": args, "as": as, "type": typ))
    }

TypeArg
  = _ BY _ typ:Type { RETURN(typ)}

AsArg
  = _ AS _ lhs:Lval { RETURN(lhs) }
  / "" { RETURN(NULL)}

/// === Expressions ===

Lval = DerefExpr

Lvals
  = first:Lval rest:(__ "," __ lval:Lval { RETURN(lval) })* {
      RETURN(PREPEND(first, rest))
    }

FieldExpr = Lval

FieldExprs
  = first:FieldExpr rest:(__ "," __ FieldExpr)* {
      VAR(result) = ARRAY(first)

      FOREACH(ASSERT_ARRAY(rest), r) {
        APPEND(result, ASSERT_ARRAY(r)[3])
      }

      RETURN(result)
    }

Assignment
  = lhs:Lval __ ":=" __ rhs:Expr { RETURN(MAP("kind": "Assignment", "lhs": lhs, "rhs": rhs)) }

Expr = ConditionalExpr

ConditionalExpr
  = condition:LogicalOrExpr __ "?" __ thenClause:Expr __ ":" __ elseClause:Expr {
      RETURN(MAP("kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause))
    }
  / LogicalOrExpr

LogicalOrExpr
  = first:LogicalAndExpr
    rest:(__ op:OrToken __ expr:LogicalAndExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

LogicalAndExpr
  = first:EqualityCompareExpr
    rest:(__ op:AndToken __ expr:EqualityCompareExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

EqualityCompareExpr
  = PatternMatch
  / first:RelativeExpr
    rest:(__ comp:EqualityComparator __ expr:RelativeExpr{ RETURN(ARRAY(comp, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

EqualityOperator
  = "=="  { RETURN("=")}
  / "!=" { RETURN(TEXT) }

EqualityComparator
  = EqualityOperator
  / "in" { RETURN(TEXT) }

RelativeExpr
  = first:AdditiveExpr
    rest:(__ op:RelativeOperator __ expr:AdditiveExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

RelativeOperator = ("<=" / "<" / ">=" / ">") { RETURN(TEXT) }

AdditiveExpr
  = first:MultiplicativeExpr
    rest:(__ op:AdditiveOperator __ expr:MultiplicativeExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

AdditiveOperator = ("+" / "-") { RETURN(TEXT) }

MultiplicativeExpr
  = first:NotExpr
    rest:(__ op:MultiplicativeOperator __ expr:NotExpr{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

MultiplicativeOperator = ("*" / "/") { RETURN(TEXT) }

NotExpr
  = "!" __ e:NotExpr {
        RETURN(MAP("kind": "UnaryExpr", "op": "!", "operand": e))
    }
  / FuncExpr

FuncExpr
  = SelectExpr
  / MatchExpr
  / typ:TypeLiteral !(__ "(") { RETURN(typ) }
  / first:Cast rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }
  / first:Function rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }
  / DerefExpr
  / Primary

FuncGuard = NotFuncs __ "("

NotFuncs
  = "not"
  / "match"
  / "select"
  / "type"

MatchExpr
  = "match" __ "(" expr:SearchBoolean ")" { RETURN(expr) }

SelectExpr
  = "select" __ "(" __ args:Exprs __ ")" methods:Methods {
      RETURN(MAP("kind":"SelectExpr", "selectors":args, "methods": methods))
    }

// Note that this is written this way instead of using Method* above since
// pegjs and pigeon treat these cases differently (empty slice vs null) and
// it matters for test consistency since methods is an embedded array rather
// than a stand-alone AST node with its own Op code.
Methods
  = methods:Method+ { RETURN(methods) }
  / "" { RETURN(NULL) }

Method
  = __ "." __ f:Function { RETURN(f) }

Cast
  = typ:CastType __ "(" __ expr:Expr __ ")" {
      RETURN(MAP("kind": "Cast", "expr": expr, "type": typ))
    }

Function
  = !FuncGuard fn:IdentifierName __ "(" __ args:OptionalExprs __ ")" {
      RETURN(MAP("kind": "Call", "name": fn, "args": args))
    }

OptionalExprs
  = Exprs
  / __ { RETURN(ARRAY()) }

Exprs
  = first:Expr rest:(__ "," __ e:Expr { RETURN(e) })* {
      RETURN(PREPEND(first, rest))
    }

DerefExpr = !IP6 e:DerefExprPattern { RETURN(e) }

DerefExprPattern
  = first:DotID rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }
  / first:RootRecord rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }
  / first:Identifier rest:(Deref)* {
      RETURN(makeBinaryExprChain(first, rest))
    }
  / "." {
      RETURN(MAP("kind":"Root"))
    }

RootRecord = "this" { RETURN(MAP("kind":"Root")) }

DotID
  = "." field:Identifier {
      RETURN(MAP("kind": "BinaryExpr", "op":".",
                     "lhs":MAP("kind":"Root"),
                     "rhs":field))
    }
  / "." "[" expr:Expr "]" {
      RETURN(MAP("kind": "BinaryExpr", "op":"[",
                     "lhs":MAP("kind":"Root"),
                     "rhs":expr))
    }

Deref
  = "[" from:AdditiveExpr __ ":" __ to:AdditiveExpr "]" {
      RETURN(ARRAY("[", MAP("kind": "BinaryExpr", "op":":",
                            "lhs":from, "rhs":to)))
    }
  / "[" __ ":" __ to:AdditiveExpr "]" {
      RETURN(ARRAY("[", MAP("kind": "BinaryExpr", "op":":",
                            "lhs": NULL, "rhs":to)))
    }
  / "[" from:AdditiveExpr __ ":" __ "]" {
      RETURN(ARRAY("[", MAP("kind": "BinaryExpr", "op":":",
                            "lhs":from, "rhs": NULL)))
    }
  / "[" expr:Expr "]" { RETURN(ARRAY("[", expr)) }
  / "." !(".") id:Identifier { RETURN(ARRAY(".", id)) }

Primary
  = Literal
  / Record
  / Array
  / Set
  / Map
  / "(" __ expr:Expr __ ")" { RETURN(expr) }

Record
  = "{" __ fields:Fields __ "}" {
      RETURN(MAP("kind":"RecordExpr", "fields":fields ))
    }

Fields
  = first:Field rest:FieldTail* {
    RETURN(PREPEND(first, rest))
  }

FieldTail = __ "," __ f:Field { RETURN(f) }

Field
  = name:FieldName __ ":" __ value:Expr {
      RETURN(MAP("name": name, "value": value))
    }

Array
  = "[" __ exprs:OptionalExprs __ "]" {
      RETURN(MAP("kind":"ArrayExpr", "exprs":exprs ))
    }

Set
  = "|[" __ exprs:OptionalExprs __ "]|" {
      RETURN(MAP("kind":"SetExpr", "exprs":exprs ))
    }

Map
  = "|{" __ exprs:Entries __ "}|" {
      RETURN(MAP("kind":"MapExpr", "entries":exprs ))
    }

Entries
  = first:Entry rest:EntryTail* {
    RETURN(PREPEND(first, rest))
  }
  / __ { RETURN(ARRAY()) }


EntryTail = __ "," __ e:Entry { RETURN(e) }

Entry
  = key:Expr __ ":" __ value:Expr {
      RETURN(MAP("key": key, "value": value))
    }

/// === SQL Compat ===

SQLProc
  = selection:SQLSelect
    from:SQLFrom
    joins:SQLJoins
    where:SQLWhere
    groupby:SQLGroupBy
    having:SQLHaving
    orderby:SQLOrderBy
    limit:SQLLimit
    {
      RETURN(MAP(
        "kind": "SQLExpr",
        "select": selection,
        "from": from,
        "joins": joins,
        "where": where,
        "group_by": groupby,
        "having": having,
        "order_by": orderby,
        "limit": limit ))
    }

SQLSelect
  = SELECT _ "*" { RETURN(NULL) }
  / SELECT _ assignments:SQLAssignments { RETURN(assignments) }

SQLAssignment
  = rhs:Expr _ AS _ lhs:Lval { RETURN(MAP("kind": "Assignment", "lhs": lhs, "rhs": rhs)) }
  / expr:Expr { RETURN(MAP("kind": "Assignment", "lhs": NULL, "rhs": expr)) }

SQLAssignments
  = first:SQLAssignment rest:(__ "," __ expr:SQLAssignment { RETURN(expr) })* {
      RETURN(PREPEND(first, rest))
    }

SQLFrom
  = _ FROM _ table:SQLTable alias:SQLAlias {
      RETURN(MAP("table": table, "alias": alias))
    }
  / _ FROM _ "*" { RETURN(NULL) }
  / "" { RETURN(NULL) }

SQLAlias
  = _ AS _ id:Lval { RETURN(id) }
  / _ id:Lval { RETURN(id) }
  / "" { RETURN(NULL) }

SQLTable
  = Expr

SQLJoins
  = first:SQLJoin rest:(join:SQLJoin { RETURN(join) })* {
      RETURN(PREPEND(first, rest))
    }
  / "" { RETURN(NULL) }

SQLJoin
  = style:SQLJoinStyle _ JOIN _ table:SQLTable alias:SQLAlias _ ON _ leftKey:JoinKey __ "=" __ rightKey:JoinKey {
      RETURN(MAP(
        "table": table,
        "style": style,
        "left_key": leftKey,
        "right_key": rightKey,
        "alias": alias))
    }

SQLJoinStyle
  = _ style:(LEFT / RIGHT / INNER) { RETURN(style) }
  / ""         { RETURN("inner") }

SQLWhere
  = _ WHERE _ expr:SearchBoolean { RETURN(expr) }
  / "" { RETURN(NULL) }

SQLGroupBy
  = _ GROUP _ BY _ columns:FieldExprs { RETURN(columns) }
  / "" { RETURN(NULL) }

SQLHaving
  = _ HAVING _ expr:SearchBoolean { RETURN(expr) }
  / "" { RETURN(NULL) }

SQLOrderBy
  = _ ORDER _ BY _ keys:Exprs order:SQLOrder {
      RETURN(MAP("kind": "SQLOrderBy", "keys": keys, "order":order))
    }
  / "" { RETURN(NULL) }

SQLOrder
  = _ dir:(ASC / DESC) { RETURN(dir) }
  / "" { RETURN("asc") }

SQLLimit
  = _ LIMIT _ count:UInt { RETURN(count) }
  / "" { RETURN(0) }

SELECT = "select"i { RETURN("select") }
AS = "as"i { RETURN("as") }
FROM = "from"i { RETURN("from") }
JOIN = "join"i { RETURN("join") }
WHERE = "where"i { RETURN("where") }
GROUP = "group"i { RETURN("group") }
BY = ByToken
HAVING = "having"i { RETURN("having") }
ORDER = "order"i { RETURN("order") }
ON = "on"i { RETURN("on") }
LIMIT = "limit"i { RETURN("limit") }
ASC = "asc"i { RETURN("asc") }
DESC = "desc"i { RETURN("desc") }
LEFT = "left"i { RETURN("left") }
RIGHT = "right"i { RETURN("right") }
INNER = "inner"i { RETURN("inner") }

SQLTokenSentinels
  = SELECT / AS / FROM /  JOIN / WHERE / GROUP / HAVING / ORDER / LIMIT / ON

/// === Literals ===

Literal
  = TypeLiteral
  / StringLiteral
  / SubnetLiteral
  / AddressLiteral
  / Duration
  / Time
  / FloatLiteral
  / IntegerLiteral
  / BooleanLiteral
  / NullLiteral

StringLiteral
  = v:QuotedString {
      RETURN(MAP("kind": "Primitive", "type": "string", "text": v))
    }

SubnetLiteral
  = v:IP6Net !IdentifierRest {
      RETURN(MAP("kind": "Primitive", "type": "net", "text": v))
    }
  / v:IP4Net {
      RETURN(MAP("kind": "Primitive", "type": "net", "text": v))
    }

AddressLiteral
  = v:IP6 !IdentifierRest {
      RETURN(MAP("kind": "Primitive", "type": "ip", "text": v))
    }
  / v:IP {
      RETURN(MAP("kind": "Primitive", "type": "ip", "text": v))
    }

FloatLiteral
  = v:FloatString {
      RETURN(MAP("kind": "Primitive", "type": "float64", "text": v))
    }

IntegerLiteral
  = v:IntString {
      RETURN(MAP("kind": "Primitive", "type": "int64", "text": v))
    }

BooleanLiteral
  = "true"           { RETURN(MAP("kind": "Primitive", "type": "bool", "text": "true")) }
  / "false"          { RETURN(MAP("kind": "Primitive", "type": "bool", "text": "false")) }

NullLiteral
  = "null"           { RETURN(MAP("kind": "Primitive", "type": "null", "text": "")) }

TypeLiteral
  = !(SQLTokenSentinels EOT) typ:TypeExternal {
      RETURN(MAP("kind": "TypeValue", "value": typ))
    }

CastType
  = TypeExternal
  / PrimitiveType

TypeExternal
  = ExplicitType
  / ComplexTypeExternal
  / typ:PrimitiveTypeExternal !IdentifierRest { RETURN(typ) }

Type
  = ExplicitType
  / AmbiguousType
  / ComplexType

ExplicitType
  = "type" __ "(" __ typ:Type __ ")" { RETURN(typ)}
  / "type" __ "(" __ typ:TypeUnion __ ")" { RETURN(typ) }

AmbiguousType
  = name:PrimitiveType !IdentifierRest { RETURN(name) }
  / name:IdentifierName __ '=' __ "(" __ typ:Type __ ")" {
      RETURN(MAP("kind": "TypeDef", "name": name, "type": typ))
  }
  / name:IdentifierName {
      RETURN(MAP("kind": "TypeName", "name": name))
    }
  / "(" __ u:TypeUnion  ")" { RETURN(u) }

TypeUnion
  = types:TypeList {
      RETURN(MAP("kind": "TypeUnion", "types": types))
    }

TypeList
  = first:Type rest:TypeListTail+ {
    RETURN(PREPEND(first, rest))
  }

TypeListTail = __ "," __ typ:Type { RETURN(typ) }

ComplexType
  = "{" __ fields:TypeFieldList __ "}" {
      RETURN(MAP("kind":"TypeRecord", "fields":fields))
    }
  / "[" __ typ:Type __ "]" {
      RETURN(MAP("kind":"TypeArray", "type":typ))
    }
  / "|[" __  typ:Type __ "]|" {
      RETURN(MAP("kind":"TypeSet", "type":typ))
    }
  / "|{" __ keyType:Type __ "," __ valType:Type __ "}|" {
      RETURN(MAP("kind":"TypeMap", "key_type":keyType, "val_type": valType))
    }

ComplexTypeExternal
  = "{" __ fields:TypeFieldList __ "}" {
      RETURN(MAP("kind":"TypeRecord", "fields":fields))
    }
  / "[" __ typ:TypeExternal __ "]" {
      RETURN(MAP("kind":"TypeArray", "type":typ))
    }
  / "|[" __ typ:TypeExternal __ "]|" {
      RETURN(MAP("kind":"TypeSet", "type":typ))
    }
  / "|{" __ keyType:TypeExternal __ "," __ valType:TypeExternal __ "}|" {
      RETURN(MAP("kind":"TypeMap", "key_type":keyType, "val_type": valType))
    }

PrimitiveType
  = PrimitiveTypeExternal
  / PrimitiveTypeInternal

// External types can be appear in expressions without using the type()
// operator.  Unlike internal type names, these names would not confuse
// someone that they cannot be used as field names.  For example, you can
// say is(int32).
PrimitiveTypeExternal
  = (   "uint8" / "uint16" / "uint32" / "uint64"
      / "int8" / "int16" / "int32" / "int64"
      / "float64"
      / "bool" / "string" ) {
          RETURN(MAP("kind": "TypePrimitive", "name": TEXT))
        }

// Internal types must be enclosed in a type() operator when appearing in an
// expression.  Unlike external type names, these names could surprise
// someone that they cannot be used as field names.  For example, you cannot
// say is(net) but instead must is(type(net)).  Of course you can still say,
// {x:int32,n:net} as the use of net here is not an expression.  We include
// null here as well so null outside of an explicit type expression is
// the null value (and can be changed into a null type using type(null)).
PrimitiveTypeInternal
  = (   "duration" / "time"
      / "bytes"
      / "bstring"
      / "ip" / "net"
      / "type" / "error" / "null" ) {
          RETURN(MAP("kind": "TypePrimitive", "name": TEXT))
        }

TypeFieldList
  = first:TypeField rest:TypeFieldListTail* {
    RETURN(PREPEND(first, rest))
  }

TypeFieldListTail = __ "," __ typ:TypeField { RETURN(typ) }

TypeField
  = name:FieldName __ ":" __ typ:Type {
      RETURN(MAP("name": name, "type": typ))
    }

TypeFieldListExternal
  = first:TypeField rest:TypeFieldListTailExternal* {
    RETURN(PREPEND(first, rest))
  }

TypeFieldListTailExternal = __ "," __ typ:TypeFieldExternal { RETURN(typ) }

TypeFieldExternal
  = name:FieldName __ ":" __ typ:TypeExternal {
      RETURN(MAP("name": name, "type": typ))
    }

FieldName
  = IdentifierName
  / QuotedString

EqualityToken
  = EqualityOperator / RelativeOperator

AndToken = "and"i !IdentifierRest { RETURN("and") }
OrToken = "or"i !IdentifierRest { RETURN("or") }
InToken = "in"i !IdentifierRest { RETURN("in") }
NotToken = "not"i !IdentifierRest { RETURN("not") }
ByToken = "by"i !IdentifierRest { RETURN("by") }

IdentifierStart = [A-Za-z_$]

IdentifierRest = IdentifierStart / [0-9]

Identifier
  = id:IdentifierName { RETURN(MAP("kind": "ID", "name": id)) }

IdentifierName
  = !(IDGuard !IdentifierRest) IdentifierStart IdentifierRest* {  RETURN(TEXT) }
  / "$" { RETURN(TEXT) }
  / "\\" id:IDGuard { RETURN(id) }
  // "type" is a search guard but should not be an id guard
  / "type" { RETURN(TEXT) }
  / id:SQLTokenSentinels &(__ "(") { RETURN(id) }

IDGuard
  = BooleanLiteral
  / NullLiteral
  / TypeExternal
  / SearchGuard

Time
  = FullDate "T" FullTime {
      RETURN(MAP("kind": "Primitive", "type": "time", "text": TEXT))
    }

FullDate = D4 "-" D2 "-" D2

D4 = [0-9][0-9][0-9][0-9]
D2 = [0-9][0-9]

FullTime = PartialTime TimeOffset

PartialTime = D2 ":" D2 ":" D2 ("." [0-9]+)?

TimeOffset
  = "Z"
  / ("+" / "-") D2 ":" D2 ("." [0-9]+)?

Duration
  = "-"? (Decimal TimeUnit)+ {
      RETURN(MAP("kind": "Primitive", "type": "duration", "text": TEXT))
    }

Decimal = UInt ("." UInt)?

TimeUnit
  = "ns"i
  / "us"i
  / "ms"i
  / "s"i
  / "m"i
  / "h"i
  / "d"i
  / "w"i
  / "y"i

IP
  = UInt "." UInt "." UInt "." UInt { RETURN(TEXT) }

IP6
  = !( Hex ":" Hex !(HexDigit / ":")) v:IP6Variations { RETURN(v) }

// this matches a superset of legal syntax for ip6 addresses but the compiler
// will catch any errors when translating the filter
IP6Variations
  = a:HexColon+ b:IP6Tail {
      RETURN(joinChars(a) + ASSERT_STRING(b))
    }
  / a:Hex b:ColonHex* "::" d:HexColon* e:IP6Tail {
      RETURN(ASSERT_STRING(a) + joinChars(b) + "::" + joinChars(d) + ASSERT_STRING(e))
    }
  / "::" a:HexColon* b:IP6Tail {
      RETURN("::" + joinChars(a) + ASSERT_STRING(b))
    }
  / a:Hex b:ColonHex* "::" {
      RETURN(ASSERT_STRING(a) + joinChars(b) + "::")
    }
  / "::" {
      RETURN("::")
    }

IP6Tail
  = IP
  / Hex

ColonHex = ":" v:Hex { RETURN(":" + ASSERT_STRING(v)) }

HexColon = v:Hex ":" { RETURN(ASSERT_STRING(v) + ":") }

IP4Net
  = a:IP '/' m:UInt {
      RETURN(ASSERT_STRING(a) + "/" + TOSTRING(m));
    }

IP6Net
  = a:IP6 '/' m:UInt {
      RETURN(ASSERT_STRING(a) + "/" + ASSERT_STRING(m));
    }

UInt
 = s:UIntString { RETURN(parseInt(s)) }

IntString
  = UIntString
  / MinusIntString

UIntString = [0-9]+ { RETURN(TEXT) }

MinusIntString
  = "-" UIntString { RETURN(TEXT) }

FloatString
  = "-"? [0-9]+ "." [0-9]+ ExponentPart? {
      RETURN(TEXT)
    }
  / "-"? "." [0-9]+ ExponentPart? {
      RETURN(TEXT)
    }

ExponentPart = "e"i [+-]? UIntString

Hex = HexDigit+ { RETURN(TEXT) }

HexDigit = [0-9a-fA-F]


QuotedString
  = '"' v:DoubleQuotedChar* '"' { RETURN(joinChars(v)) }
  / "'" v:SingleQuotedChar* "'" { RETURN(joinChars(v)) }

DoubleQuotedChar
  = !('"' / EscapedChar) . { RETURN(TEXT) }
  / "\\" s:EscapeSequence { RETURN(s) }

KeyWord
  = head:KeyWordStart tail:KeyWordRest* { RETURN(ASSERT_STRING(head) + joinChars(tail)) }

KeyWordStart
  = KeyWordChars
  / KeyWordEsc

KeyWordChars = [a-zA-Z_.:/%#@~] { RETURN(TEXT) }

KeyWordRest
  = KeyWordStart
  / [0-9]

KeyWordEsc = "\\" s:(KeywordEscape / EscapeSequence)  { RETURN(s) }

Glob
  = &GlobProperStart &GlobHasStar head:GlobStart tail:GlobRest* {
      RETURN(reglob.Reglob(ASSERT_STRING(head) + joinChars(tail)))
    }

GlobProperStart = "*"* KeyWordStart
GlobHasStar = KeyWordRest* "*"

GlobStart
  = KeyWordChars
  / GlobEsc
  / "*" { RETURN("*")}

GlobRest
  = GlobStart
  / [0-9]

GlobEsc = "\\" s:(GlobEscape / EscapeSequence)  { RETURN(s) }

GlobEscape
  = "=" { RETURN("=") }
  / "*" { RETURN("\\*") }
  / [+-]


SingleQuotedChar
  = !("'" / EscapedChar) . { RETURN(TEXT) }
  / "\\" s:EscapeSequence { RETURN(s) }

EscapeSequence
  = "x" HexDigit HexDigit { RETURN("\\" + TEXT) }
  / SingleCharEscape
  / UnicodeEscape

SingleCharEscape
  = "'"
  / "\"" { RETURN(TEXT) }
  / "\\"
  / "b" { RETURN("\b") }
  / "f" { RETURN("\f") }
  / "n" { RETURN("\n") }
  / "r" { RETURN("\r") }
  / "t" { RETURN("\t") }
  / "v" { RETURN("\v") }

KeywordEscape
  = "=" { RETURN("=") }
  / "*" { RETURN("*") }
  / [+-]

UnicodeEscape
  = "u" chars:(HexDigit HexDigit HexDigit HexDigit) {
      RETURN(makeUnicodeChar(chars))
    }
  / "u" "{" chars:(HexDigit HexDigit? HexDigit? HexDigit? HexDigit? HexDigit?) "}" {
      RETURN(makeUnicodeChar(chars))
    }

Regexp
  = "/" body:RegexpBody "/" !KeyWordStart { RETURN(body) }

RegexpBody
  = ([^/\\]/"\\/")+ { RETURN(TEXT) }

EscapedChar
  = [\x00-\x1f\\]

_  = AnySpace+

__ = AnySpace*

AnySpace
  = WhiteSpace
  / LineTerminator
  / Comment

SourceCharacter
  = .

WhiteSpace "whitespace"
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"

LineTerminator
  = [\n\r\u2028\u2029]

// XXX We will leave multi-line comments out for now since there is some work
// that needs to be done disambiguating among KeyWord, Regexp, and "/*".
// We will tackle this in the search-expr branch that is changing the grammar
// to better mix together ad hoc keyword search with formal boolean expressions.
Comment "comment"
  // = MultiLineComment
  // / SingleLineComment
  = SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)*

EOL = WhiteSpace* LineTerminator

EOT = _ / EOF

EOF = !.
