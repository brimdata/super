script: |
  echo === cast function
  super compile -C 'select cast(a as b)'
  echo === select
  super compile -C 'select a from b where c group by d having e order by f limit g offset h'
  echo === ornate select
  super compile -C 'select distinct value a, b as c from d as e (f) where g group by h, i having j order by k, l limit m offset n'
  echo === substring function
  super compile -C 'select substring(a from b for c)'
  echo === union
  super compile -C 'select a union all select b union distinct select c'
  echo === values
  super compile -C 'values (a), (b, c)'
  echo === with
  super compile -C 'with a as (select b) select c'
  echo === ornate with
  super compile -C 'with recursive a as (select b from c), d as (select e) select f'

outputs:
  - name: stdout
    data: |
      === cast function
      select CAST(a AS b)
      === select
      select a
      from b
      where c
      group by d
      having e
      order by f
      limit g
      offset h
      === ornate select
      select distinct value a, b as c
      from d as e (f)
      where g
      group by h, i
      having j
      order by k, l
      limit m
      offset n
      === substring function
      select SUBSTRING(a FROM b FOR c)
      === union
      select a
      union all
      select b
      union distinct
      select c
      === values
      values (a), (b, c)
      === with
      with a as (
        select b
      )
      select c
      === ornate with
      with recursive a as (
        select b
        from c
      ), d as (
        select e
      )
      select f
