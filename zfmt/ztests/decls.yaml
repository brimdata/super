script: |
  zc -C -I test.zed
  echo "==="
  zc -s -C -I test.zed

inputs:
  - name: test.zed
    data: |
      func fib(n): (n <= 1 ? n : fib(n-1) + fib(n-2))
      const foo = "bar"
      func add(a,b): (a+b)
      const bar = "baz"
      op stamp(assignee): ( yield {...this, assignee, ts: now()} )
      op nop(foo): ( pass )
      op joinTest(left_file, right_file, left_key, right_key, left_dest, right_source): (
        file left_file | sort left_key
        | inner join (
          file right_file | sort right_key
        ) on left_key = right_key left_dest := right_source
      )
      joinTest("fruit.ndjson", "people.ndjson", flavor, likes, eater, name)
      | stamp("bob")

outputs:
  - name: stdout
    data: |
      func fib(n): (
        (n<=1) ? n : fib(n-1)+fib(n-2)
      )
      const foo = "bar"
      func add(a, b): (
        a+b
      )
      const bar = "baz"
      op stamp(assignee): (
        yield {...this,assignee,ts:now()}
      )
      op nop(foo): (
        pass
      )
      op joinTest(left_file, right_file, left_key, right_key, left_dest, right_source): (
        from (
          file left_file
        )
        | sort left_key
        | join (
          from (
            file right_file
          )
          | sort right_key
        ) on left_key=right_key left_dest:=right_source
      )
      joinTest("fruit.ndjson", "people.ndjson", flavor, likes, eater, name)
      | stamp("bob")
      ===
      (
        const foo = "bar"
        const bar = "baz"
        func fib(n): (
          (n<=1) ? n : fib(n-1)+fib(n-2)
        )
        func add(a, b): (
          a+b
        )
        
        file fruit.ndjson
        | sort flavor
        | fork (
          =>
            pass
          =>
            file people.ndjson
            | sort likes
        )
        | join on flavor=likes eater:=name
        | yield {...this,assignee:"bob",ts:now()}
      )
