zed: |
  type string_named=string
  type union=(int64,string,string_named)
  yield cast(<{a:union}>)

input: |
  {a:null}
  {a:null(int64)}
  {a:null(string)}
  {a:1}
  {a:"hello"}
  {a:"goodbye"(=string_named)}

output: |
  {a:null(union=(int64,string,string_named=string))}
  {a:null(union=(int64,string,string_named=string))}
  {a:null(union=(int64,string,string_named=string))}
  {a:1(union=(int64,string,string_named=string))}
  {a:"hello"(union=(int64,string,string_named=string))}
  {a:"goodbye"(=string_named)(union=(int64,string,string_named))}
