zed: yield {val:this, kind:kind(this)}

input: |
  null
  null(bytes)
  0x1234
  error(null)
  error("foo")
  {}
  [1,2,3]
  [1,2,3](array=[int8])
  80(port=uint16)
  "foo"((int64,string))
  1((int64,string))
  <int64>
  <{s:string}>
  |[1,2,3]|
  |{1:1,2:2}|
  %heads(enum(heads,tails))

output: |
  {val:null,kind:"primitive"}
  {val:null(bytes),kind:"primitive"}
  {val:0x1234,kind:"primitive"}
  {val:null(error(null)),kind:"error"}
  {val:error("foo"),kind:"error"}
  {val:{},kind:"record"}
  {val:[1,2,3],kind:"array"}
  {val:[1(int8),2(int8),3(int8)](=array),kind:"array"}
  {val:80(port=uint16),kind:"primitive"}
  {val:"foo"((int64,string)),kind:"union"}
  {val:1((int64,string)),kind:"union"}
  {val:<int64>,kind:"primitive"}
  {val:<{s:string}>,kind:"record"}
  {val:|[1,2,3]|,kind:"set"}
  {val:|{1:1,2:2}|,kind:"map"}
  {val:%heads(enum(heads,tails)),kind:"enum"}
