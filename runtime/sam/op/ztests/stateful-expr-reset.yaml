script: |
  echo // yield
  super -s -c 'yield null, null | over this ( yield count() )'
  echo // filter
  super -s -c 'yield [1,2,3,4], [5,6,7] | over this ( where count() % 3 == 0 )'
  echo // switch
  super -s -c 'yield [1], [1] | over this (
    switch sum(this)
       case 1 ( yield "sum is 1" )
  )'
  echo // exprswitch
  super -s -c 'yield [1], [1] | over this (
    switch
      case sum(this) == 1 ( yield "sum is 1" )
  )'
  echo // over
  super -s -c 'yield null, null | over this ( over count() )'
  echo // over with
  super -s -c 'yield [1], [1] | over this (
    over this with count = count() ( yield count )
  )'
  echo // aggregate
  super -s -c 'yield [1], [1] | over this ( sum(this) by c := count() )'

outputs:
  - name: stdout
    data: |
      // yield
      1(uint64)
      1(uint64)
      // filter
      3
      7
      // switch
      "sum is 1"
      "sum is 1"
      // exprswitch
      "sum is 1"
      "sum is 1"
      // over
      1(uint64)
      1(uint64)
      // over with
      1(uint64)
      1(uint64)
      // aggregate
      {c:1(uint64),sum:1}
      {c:1(uint64),sum:1}
