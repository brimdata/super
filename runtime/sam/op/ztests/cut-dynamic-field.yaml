script: |
  echo '{a:"hi",b:"hello"}' | super -z -c 'cut this[a][b] := "world"' -
  echo "// ==="
  echo '{a:{b:"hello"}}' | super -z -c 'cut this[a.b]:="world"' -
  echo "// ==="
  echo '{a:"hello"}' | super -z -c 'cut this[this["a"]] := "world"' -
  echo "// ==="
  echo '{a:{},b:"hello"}' | super -z -c 'cut a[b] := "world"' -
  echo "// ==="
  echo '{a:"foo"}' | super -z -c 'cut this[a]["bar"] := "baz"' -
  echo "// ==="
  echo '{key:"foo",v1:1,v2:2} {key:"bar",v1:2,v2:3}' | super -z -c 'cut this[key] := [v1,v2]' -
  echo "// ==="
  # runtime error cases
  echo '{a:"hello",b:"hello"}' | super -z -c 'cut this[a] := "world1", this[b] := "world2"' -
  echo "// ==="
  echo '{a:"foo",b:"bar"}' | super -z -c 'cut this[a][b] := "world", this[a] := "world"' -
  echo "// ==="
  echo {} | super -z -c 'cut this[doesnotexist] := "world"' - 
  # semantic error cases
  ! super compile -dag 'op foo(): ( yield "error" ) cut this[foo] := "hello world"'

outputs:
  - name: stdout
    data: |
      {hi:{hello:"world"}}
      // ===
      {hello:"world"}
      // ===
      {hello:"world"}
      // ===
      {a:{hello:"world"}}
      // ===
      {foo:{bar:"baz"}}
      // ===
      {foo:[1,2]}
      {bar:[2,3]}
      // ===
      error({message:"cut: duplicate field: \"hello\"",on:{a:"hello",b:"hello"}})
      // ===
      error({message:"cut: duplicate field: \"foo\"",on:{a:"foo",b:"bar"}})
      // ===
      error({message:"cut: missing",on:{}})
  - name: stderr
    data: |
      symbol "foo" is not bound to an expression at line 1, column 38:
      op foo(): ( yield "error" ) cut this[foo] := "hello world"
                                           ~~~
