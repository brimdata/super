# This test makes sure the type context from metadata processing doesn't 
# leak into the flowgraph, except for metaqueries, where it should.
script: |
  export SUPER_DB_LAKE=test
  super db init -q
  super db create -q -orderby k:asc tmp
  super db use -q tmp
  seq 10 15 | super -c '{k:this}' - | super db load -q -
  seq 8 12 | super -c '{k:this}' - | super db load -q -
  seq 20 25 | super -c '{k:this}' - | super db load -q -
  seq 14 16 | super -c '{k:this}' - | super db load -q -
  super db query "from tmp:objects tap |> k > 18" | super -z -c "drop id" -
  echo ===
  super db query "from tmp:objects tap |> k <= 10" | super -z -c "drop id" -
  echo ===
  super db query "from tmp:objects tap |> k >= 15 and k < 20" | super -z -c "drop id" -
  echo ===
  super db query "from tmp:objects tap |> k <= 9 or k > 24" | super -z -c "drop id" -
  echo ===
  super db query 'from tmp:objects tap |> a[k] == "foo" or k >= 20' | super -z -c "drop id" -
  echo ===
  super db query 'from tmp:objects tap |> a[k] == "foo" and k >= 20' | super -z -c "drop id" -

outputs:
  - name: stdout
    data: |
      {min:20,max:25,count:6(uint64),size:34}
      ===
      {min:8,max:12,count:5(uint64),size:30}
      {min:10,max:15,count:6(uint64),size:34}
      ===
      {min:10,max:15,count:6(uint64),size:34}
      {min:14,max:16,count:3(uint64),size:22}
      ===
      {min:8,max:12,count:5(uint64),size:30}
      {min:20,max:25,count:6(uint64),size:34}
      ===
      {min:8,max:12,count:5(uint64),size:30}
      {min:10,max:15,count:6(uint64),size:34}
      {min:14,max:16,count:3(uint64),size:22}
      {min:20,max:25,count:6(uint64),size:34}
      ===
      {min:20,max:25,count:6(uint64),size:34}
