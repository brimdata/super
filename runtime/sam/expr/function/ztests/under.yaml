zed: yield {val:this, under:under(this)}

input: |
  null
  null(bytes)
  0x1234
  error(null)
  error("foo")
  {}
  [1,2,3]
  [1,2,3](array=[int8])
  80(port=uint16)
  "foo"((int64,string))
  1((int64,string))

output: |
  {val:null,under:null}
  {val:null(bytes),under:null(bytes)}
  {val:0x1234,under:0x1234}
  {val:null(error(null)),under:null}
  {val:error("foo"),under:"foo"}
  {val:{},under:{}}
  {val:[1,2,3],under:[1,2,3]}
  {val:[1(int8),2(int8),3(int8)](=array),under:[1(int8),2(int8),3(int8)]}
  {val:80(port=uint16),under:80(uint16)}
  {val:"foo"((int64,string)),under:"foo"}
  {val:1((int64,string)),under:1}
