// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 11, col: 1, offset: 27},
			expr: &actionExpr{
				pos: position{line: 11, col: 9, offset: 35},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 11, col: 9, offset: 35},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 11, col: 9, offset: 35},
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 9, offset: 35},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 11, col: 12, offset: 38},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 16, offset: 42},
								name: "query",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 11, col: 22, offset: 48},
							expr: &ruleRefExpr{
								pos:  position{line: 11, col: 22, offset: 48},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 25, offset: 51},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "query",
			pos:  position{line: 13, col: 1, offset: 76},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 86},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 86},
						run: (*parser).callonquery2,
						expr: &labeledExpr{
							pos:   position{line: 14, col: 5, offset: 86},
							label: "procs",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 11, offset: 92},
								name: "procChain",
							},
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 255},
						run: (*parser).callonquery5,
						expr: &seqExpr{
							pos: position{line: 18, col: 5, offset: 255},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 18, col: 5, offset: 255},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 7, offset: 257},
										name: "search",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 18, col: 14, offset: 264},
									expr: &ruleRefExpr{
										pos:  position{line: 18, col: 14, offset: 264},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 18, col: 17, offset: 267},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 18, col: 22, offset: 272},
										expr: &ruleRefExpr{
											pos:  position{line: 18, col: 22, offset: 272},
											name: "chainedProc",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 25, col: 5, offset: 482},
						run: (*parser).callonquery14,
						expr: &labeledExpr{
							pos:   position{line: 25, col: 5, offset: 482},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 7, offset: 484},
								name: "search",
							},
						},
					},
				},
			},
		},
		{
			name: "procChain",
			pos:  position{line: 29, col: 1, offset: 555},
			expr: &actionExpr{
				pos: position{line: 30, col: 5, offset: 569},
				run: (*parser).callonprocChain1,
				expr: &seqExpr{
					pos: position{line: 30, col: 5, offset: 569},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 30, col: 5, offset: 569},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 30, col: 11, offset: 575},
								name: "proc",
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 16, offset: 580},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 30, col: 21, offset: 585},
								expr: &ruleRefExpr{
									pos:  position{line: 30, col: 21, offset: 585},
									name: "chainedProc",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "chainedProc",
			pos:  position{line: 38, col: 1, offset: 771},
			expr: &actionExpr{
				pos: position{line: 38, col: 15, offset: 785},
				run: (*parser).callonchainedProc1,
				expr: &seqExpr{
					pos: position{line: 38, col: 15, offset: 785},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 38, col: 15, offset: 785},
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 15, offset: 785},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 38, col: 18, offset: 788},
							val:        "|",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 38, col: 22, offset: 792},
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 22, offset: 792},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 25, offset: 795},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 27, offset: 797},
								name: "proc",
							},
						},
					},
				},
			},
		},
		{
			name: "search",
			pos:  position{line: 40, col: 1, offset: 821},
			expr: &actionExpr{
				pos: position{line: 41, col: 5, offset: 832},
				run: (*parser).callonsearch1,
				expr: &labeledExpr{
					pos:   position{line: 41, col: 5, offset: 832},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 41, col: 10, offset: 837},
						name: "searchExpr",
					},
				},
			},
		},
		{
			name: "searchExpr",
			pos:  position{line: 45, col: 1, offset: 896},
			expr: &actionExpr{
				pos: position{line: 46, col: 5, offset: 911},
				run: (*parser).callonsearchExpr1,
				expr: &seqExpr{
					pos: position{line: 46, col: 5, offset: 911},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 46, col: 5, offset: 911},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 11, offset: 917},
								name: "searchTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 46, col: 22, offset: 928},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 46, col: 27, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 27, offset: 933},
									name: "oredSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "oredSearchTerm",
			pos:  position{line: 50, col: 1, offset: 1001},
			expr: &actionExpr{
				pos: position{line: 50, col: 18, offset: 1018},
				run: (*parser).callonoredSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 50, col: 18, offset: 1018},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 50, col: 18, offset: 1018},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 20, offset: 1020},
							name: "orToken",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 28, offset: 1028},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 50, col: 30, offset: 1030},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 32, offset: 1032},
								name: "searchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "searchTerm",
			pos:  position{line: 52, col: 1, offset: 1062},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1077},
				run: (*parser).callonsearchTerm1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 53, col: 5, offset: 1077},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 11, offset: 1083},
								name: "searchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 53, col: 24, offset: 1096},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 53, col: 29, offset: 1101},
								expr: &ruleRefExpr{
									pos:  position{line: 53, col: 29, offset: 1101},
									name: "andedSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "andedSearchTerm",
			pos:  position{line: 57, col: 1, offset: 1171},
			expr: &actionExpr{
				pos: position{line: 57, col: 19, offset: 1189},
				run: (*parser).callonandedSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 57, col: 19, offset: 1189},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 57, col: 19, offset: 1189},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 57, col: 21, offset: 1191},
							expr: &seqExpr{
								pos: position{line: 57, col: 22, offset: 1192},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 57, col: 22, offset: 1192},
										name: "andToken",
									},
									&ruleRefExpr{
										pos:  position{line: 57, col: 31, offset: 1201},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 57, col: 35, offset: 1205},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 37, offset: 1207},
								name: "searchFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "searchFactor",
			pos:  position{line: 59, col: 1, offset: 1239},
			expr: &choiceExpr{
				pos: position{line: 60, col: 5, offset: 1256},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1256},
						run: (*parser).callonsearchFactor2,
						expr: &seqExpr{
							pos: position{line: 60, col: 5, offset: 1256},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 60, col: 6, offset: 1257},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 60, col: 6, offset: 1257},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 60, col: 6, offset: 1257},
													name: "notToken",
												},
												&ruleRefExpr{
													pos:  position{line: 60, col: 15, offset: 1266},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 60, col: 19, offset: 1270},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 60, col: 19, offset: 1270},
													val:        "!",
													ignoreCase: false,
												},
												&zeroOrOneExpr{
													pos: position{line: 60, col: 23, offset: 1274},
													expr: &ruleRefExpr{
														pos:  position{line: 60, col: 23, offset: 1274},
														name: "_",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 60, col: 27, offset: 1278},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 60, col: 29, offset: 1280},
										name: "searchExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1339},
						run: (*parser).callonsearchFactor14,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1339},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 63, col: 5, offset: 1339},
									expr: &litMatcher{
										pos:        position{line: 63, col: 7, offset: 1341},
										val:        "-",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 63, col: 12, offset: 1346},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 63, col: 14, offset: 1348},
										name: "searchPred",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 1381},
						run: (*parser).callonsearchFactor20,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 1381},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 64, col: 5, offset: 1381},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 64, col: 9, offset: 1385},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 9, offset: 1385},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 12, offset: 1388},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 17, offset: 1393},
										name: "searchExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 64, col: 28, offset: 1404},
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 28, offset: 1404},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 64, col: 31, offset: 1407},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchPred",
			pos:  position{line: 66, col: 1, offset: 1433},
			expr: &choiceExpr{
				pos: position{line: 67, col: 5, offset: 1448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1448},
						run: (*parser).callonsearchPred2,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1448},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 67, col: 5, offset: 1448},
									val:        "*",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 67, col: 9, offset: 1452},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 9, offset: 1452},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 12, offset: 1455},
									label: "fieldComparator",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 28, offset: 1471},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 67, col: 42, offset: 1485},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 42, offset: 1485},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 45, offset: 1488},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 47, offset: 1490},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1574},
						run: (*parser).callonsearchPred13,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1574},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 70, col: 5, offset: 1574},
									val:        "**",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 70, col: 10, offset: 1579},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 10, offset: 1579},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 70, col: 13, offset: 1582},
									label: "fieldComparator",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 29, offset: 1598},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 70, col: 43, offset: 1612},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 43, offset: 1612},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 70, col: 46, offset: 1615},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 48, offset: 1617},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 1700},
						run: (*parser).callonsearchPred24,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 1700},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 73, col: 5, offset: 1700},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 7, offset: 1702},
										name: "fieldExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 73, col: 17, offset: 1712},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 17, offset: 1712},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 73, col: 20, offset: 1715},
									label: "fieldComparator",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 36, offset: 1731},
										name: "equalityToken",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 73, col: 50, offset: 1745},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 50, offset: 1745},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 73, col: 53, offset: 1748},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 55, offset: 1750},
										name: "searchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1832},
						run: (*parser).callonsearchPred36,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 1832},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 1832},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 7, offset: 1834},
										name: "searchValue",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 76, col: 19, offset: 1846},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 19, offset: 1846},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 22, offset: 1849},
									name: "inToken",
								},
								&zeroOrOneExpr{
									pos: position{line: 76, col: 30, offset: 1857},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 30, offset: 1857},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 76, col: 33, offset: 1860},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 1925},
						run: (*parser).callonsearchPred46,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 1925},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 79, col: 5, offset: 1925},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 7, offset: 1927},
										name: "searchValue",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 79, col: 19, offset: 1939},
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 19, offset: 1939},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 22, offset: 1942},
									name: "inToken",
								},
								&zeroOrOneExpr{
									pos: position{line: 79, col: 30, offset: 1950},
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 30, offset: 1950},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 79, col: 33, offset: 1953},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 35, offset: 1955},
										name: "fieldReference",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2029},
						run: (*parser).callonsearchPred57,
						expr: &labeledExpr{
							pos:   position{line: 82, col: 5, offset: 2029},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 82, col: 7, offset: 2031},
								name: "searchLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2112},
						run: (*parser).callonsearchPred60,
						expr: &seqExpr{
							pos: position{line: 85, col: 5, offset: 2112},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 85, col: 5, offset: 2112},
									expr: &seqExpr{
										pos: position{line: 85, col: 7, offset: 2114},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 85, col: 8, offset: 2115},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 85, col: 24, offset: 2131},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 85, col: 28, offset: 2135},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 30, offset: 2137},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchLiteral",
			pos:  position{line: 89, col: 1, offset: 2234},
			expr: &choiceExpr{
				pos: position{line: 90, col: 5, offset: 2252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2252},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 5, offset: 2270},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2288},
						name: "PortLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 5, offset: 2304},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 94, col: 5, offset: 2322},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2341},
						name: "FloatLiteral",
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2508},
						run: (*parser).callonsearchLiteral8,
						expr: &seqExpr{
							pos: position{line: 99, col: 5, offset: 2508},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 99, col: 5, offset: 2508},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 7, offset: 2510},
										name: "IntegerLiteral",
									},
								},
								&notExpr{
									pos: position{line: 99, col: 22, offset: 2525},
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 23, offset: 2526},
										name: "searchWord",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 101, col: 5, offset: 2560},
						run: (*parser).callonsearchLiteral14,
						expr: &seqExpr{
							pos: position{line: 101, col: 5, offset: 2560},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 5, offset: 2560},
									expr: &seqExpr{
										pos: position{line: 101, col: 7, offset: 2562},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 101, col: 7, offset: 2562},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 101, col: 22, offset: 2577},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 101, col: 25, offset: 2580},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 27, offset: 2582},
										name: "BooleanLiteral",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 2619},
						run: (*parser).callonsearchLiteral22,
						expr: &seqExpr{
							pos: position{line: 102, col: 5, offset: 2619},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 102, col: 5, offset: 2619},
									expr: &seqExpr{
										pos: position{line: 102, col: 7, offset: 2621},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 102, col: 7, offset: 2621},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 102, col: 22, offset: 2636},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 102, col: 25, offset: 2639},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 27, offset: 2641},
										name: "NullLiteral",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "searchValue",
			pos:  position{line: 105, col: 1, offset: 2673},
			expr: &choiceExpr{
				pos: position{line: 106, col: 5, offset: 2689},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 2689},
						name: "searchLiteral",
					},
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 2707},
						run: (*parser).callonsearchValue3,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 2707},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 107, col: 5, offset: 2707},
									expr: &seqExpr{
										pos: position{line: 107, col: 7, offset: 2709},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 107, col: 8, offset: 2710},
												name: "searchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 24, offset: 2726},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 107, col: 27, offset: 2729},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 29, offset: 2731},
										name: "searchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 111, col: 1, offset: 2794},
			expr: &actionExpr{
				pos: position{line: 112, col: 5, offset: 2812},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 112, col: 5, offset: 2812},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 112, col: 7, offset: 2814},
						name: "quotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 116, col: 1, offset: 2879},
			expr: &actionExpr{
				pos: position{line: 117, col: 5, offset: 2897},
				run: (*parser).callonRegexpLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 117, col: 5, offset: 2897},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 117, col: 7, offset: 2899},
						name: "reString",
					},
				},
			},
		},
		{
			name: "PortLiteral",
			pos:  position{line: 121, col: 1, offset: 2960},
			expr: &actionExpr{
				pos: position{line: 122, col: 5, offset: 2976},
				run: (*parser).callonPortLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 122, col: 5, offset: 2976},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 122, col: 7, offset: 2978},
						name: "port",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 126, col: 1, offset: 3033},
			expr: &choiceExpr{
				pos: position{line: 127, col: 5, offset: 3051},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3051},
						run: (*parser).callonSubnetLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 127, col: 5, offset: 3051},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 7, offset: 3053},
								name: "ip6subnet",
							},
						},
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 3115},
						run: (*parser).callonSubnetLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 130, col: 5, offset: 3115},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 7, offset: 3117},
								name: "subnet",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 134, col: 1, offset: 3173},
			expr: &choiceExpr{
				pos: position{line: 135, col: 5, offset: 3192},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 5, offset: 3192},
						run: (*parser).callonAddressLiteral2,
						expr: &labeledExpr{
							pos:   position{line: 135, col: 5, offset: 3192},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 7, offset: 3194},
								name: "ip6addr",
							},
						},
					},
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 3253},
						run: (*parser).callonAddressLiteral5,
						expr: &labeledExpr{
							pos:   position{line: 138, col: 5, offset: 3253},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 7, offset: 3255},
								name: "addr",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 142, col: 1, offset: 3308},
			expr: &actionExpr{
				pos: position{line: 143, col: 5, offset: 3325},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 143, col: 5, offset: 3325},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 143, col: 7, offset: 3327},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 147, col: 1, offset: 3388},
			expr: &actionExpr{
				pos: position{line: 148, col: 5, offset: 3407},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 148, col: 5, offset: 3407},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 148, col: 7, offset: 3409},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 152, col: 1, offset: 3469},
			expr: &choiceExpr{
				pos: position{line: 153, col: 5, offset: 3488},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 3488},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 153, col: 5, offset: 3488},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 3553},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 154, col: 5, offset: 3553},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 156, col: 1, offset: 3616},
			expr: &actionExpr{
				pos: position{line: 157, col: 5, offset: 3632},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 157, col: 5, offset: 3632},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "searchKeywords",
			pos:  position{line: 159, col: 1, offset: 3690},
			expr: &choiceExpr{
				pos: position{line: 160, col: 5, offset: 3709},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 160, col: 5, offset: 3709},
						name: "andToken",
					},
					&ruleRefExpr{
						pos:  position{line: 161, col: 5, offset: 3722},
						name: "orToken",
					},
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 3734},
						name: "inToken",
					},
				},
			},
		},
		{
			name: "procList",
			pos:  position{line: 164, col: 1, offset: 3743},
			expr: &actionExpr{
				pos: position{line: 165, col: 5, offset: 3756},
				run: (*parser).callonprocList1,
				expr: &seqExpr{
					pos: position{line: 165, col: 5, offset: 3756},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 165, col: 5, offset: 3756},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 165, col: 11, offset: 3762},
								name: "procChain",
							},
						},
						&labeledExpr{
							pos:   position{line: 165, col: 21, offset: 3772},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 165, col: 26, offset: 3777},
								expr: &ruleRefExpr{
									pos:  position{line: 165, col: 26, offset: 3777},
									name: "parallelChain",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parallelChain",
			pos:  position{line: 174, col: 1, offset: 4001},
			expr: &actionExpr{
				pos: position{line: 175, col: 5, offset: 4019},
				run: (*parser).callonparallelChain1,
				expr: &seqExpr{
					pos: position{line: 175, col: 5, offset: 4019},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 175, col: 5, offset: 4019},
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 5, offset: 4019},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 175, col: 8, offset: 4022},
							val:        ";",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 175, col: 12, offset: 4026},
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 12, offset: 4026},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 175, col: 15, offset: 4029},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 18, offset: 4032},
								name: "procChain",
							},
						},
					},
				},
			},
		},
		{
			name: "proc",
			pos:  position{line: 177, col: 1, offset: 4082},
			expr: &choiceExpr{
				pos: position{line: 178, col: 5, offset: 4091},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 178, col: 5, offset: 4091},
						name: "simpleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 5, offset: 4106},
						name: "reducerProc",
					},
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 4122},
						run: (*parser).callonproc4,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 4122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 180, col: 5, offset: 4122},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 180, col: 9, offset: 4126},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 9, offset: 4126},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 12, offset: 4129},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 17, offset: 4134},
										name: "procList",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 180, col: 26, offset: 4143},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 26, offset: 4143},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 180, col: 29, offset: 4146},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "groupBy",
			pos:  position{line: 184, col: 1, offset: 4182},
			expr: &actionExpr{
				pos: position{line: 185, col: 5, offset: 4194},
				run: (*parser).callongroupBy1,
				expr: &seqExpr{
					pos: position{line: 185, col: 5, offset: 4194},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 5, offset: 4194},
							val:        "by",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 11, offset: 4200},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 185, col: 13, offset: 4202},
							label: "list",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 18, offset: 4207},
								name: "fieldExprList",
							},
						},
					},
				},
			},
		},
		{
			name: "everyDur",
			pos:  position{line: 187, col: 1, offset: 4243},
			expr: &actionExpr{
				pos: position{line: 188, col: 5, offset: 4256},
				run: (*parser).calloneveryDur1,
				expr: &seqExpr{
					pos: position{line: 188, col: 5, offset: 4256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 188, col: 5, offset: 4256},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 14, offset: 4265},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 16, offset: 4267},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 20, offset: 4271},
								name: "duration",
							},
						},
					},
				},
			},
		},
		{
			name: "equalityToken",
			pos:  position{line: 190, col: 1, offset: 4301},
			expr: &choiceExpr{
				pos: position{line: 191, col: 5, offset: 4319},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 4319},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 24, offset: 4338},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "andToken",
			pos:  position{line: 193, col: 1, offset: 4356},
			expr: &actionExpr{
				pos: position{line: 193, col: 12, offset: 4367},
				run: (*parser).callonandToken1,
				expr: &litMatcher{
					pos:        position{line: 193, col: 12, offset: 4367},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "orToken",
			pos:  position{line: 194, col: 1, offset: 4405},
			expr: &actionExpr{
				pos: position{line: 194, col: 11, offset: 4415},
				run: (*parser).callonorToken1,
				expr: &litMatcher{
					pos:        position{line: 194, col: 11, offset: 4415},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "inToken",
			pos:  position{line: 195, col: 1, offset: 4452},
			expr: &actionExpr{
				pos: position{line: 195, col: 11, offset: 4462},
				run: (*parser).calloninToken1,
				expr: &litMatcher{
					pos:        position{line: 195, col: 11, offset: 4462},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "notToken",
			pos:  position{line: 196, col: 1, offset: 4499},
			expr: &actionExpr{
				pos: position{line: 196, col: 12, offset: 4510},
				run: (*parser).callonnotToken1,
				expr: &litMatcher{
					pos:        position{line: 196, col: 12, offset: 4510},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldName",
			pos:  position{line: 198, col: 1, offset: 4549},
			expr: &actionExpr{
				pos: position{line: 198, col: 13, offset: 4561},
				run: (*parser).callonfieldName1,
				expr: &seqExpr{
					pos: position{line: 198, col: 13, offset: 4561},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 198, col: 13, offset: 4561},
							name: "fieldNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 198, col: 28, offset: 4576},
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 28, offset: 4576},
								name: "fieldNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "fieldNameStart",
			pos:  position{line: 200, col: 1, offset: 4623},
			expr: &charClassMatcher{
				pos:        position{line: 200, col: 18, offset: 4640},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "fieldNameRest",
			pos:  position{line: 201, col: 1, offset: 4651},
			expr: &choiceExpr{
				pos: position{line: 201, col: 17, offset: 4667},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 201, col: 17, offset: 4667},
						name: "fieldNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 201, col: 34, offset: 4684},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "fieldReference",
			pos:  position{line: 203, col: 1, offset: 4691},
			expr: &actionExpr{
				pos: position{line: 204, col: 4, offset: 4709},
				run: (*parser).callonfieldReference1,
				expr: &seqExpr{
					pos: position{line: 204, col: 4, offset: 4709},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 204, col: 4, offset: 4709},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 9, offset: 4714},
								name: "fieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 19, offset: 4724},
							label: "derefs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 26, offset: 4731},
								expr: &choiceExpr{
									pos: position{line: 205, col: 8, offset: 4740},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 205, col: 8, offset: 4740},
											run: (*parser).callonfieldReference8,
											expr: &seqExpr{
												pos: position{line: 205, col: 8, offset: 4740},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 205, col: 8, offset: 4740},
														val:        ".",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 205, col: 12, offset: 4744},
														label: "field",
														expr: &ruleRefExpr{
															pos:  position{line: 205, col: 18, offset: 4750},
															name: "fieldName",
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 206, col: 8, offset: 4831},
											run: (*parser).callonfieldReference13,
											expr: &seqExpr{
												pos: position{line: 206, col: 8, offset: 4831},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 206, col: 8, offset: 4831},
														val:        "[",
														ignoreCase: false,
													},
													&labeledExpr{
														pos:   position{line: 206, col: 12, offset: 4835},
														label: "index",
														expr: &ruleRefExpr{
															pos:  position{line: 206, col: 18, offset: 4841},
															name: "suint",
														},
													},
													&litMatcher{
														pos:        position{line: 206, col: 24, offset: 4847},
														val:        "]",
														ignoreCase: false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fieldExpr",
			pos:  position{line: 211, col: 1, offset: 4963},
			expr: &choiceExpr{
				pos: position{line: 212, col: 5, offset: 4977},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 212, col: 5, offset: 4977},
						run: (*parser).callonfieldExpr2,
						expr: &seqExpr{
							pos: position{line: 212, col: 5, offset: 4977},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 212, col: 5, offset: 4977},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 8, offset: 4980},
										name: "fieldOp",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 212, col: 16, offset: 4988},
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 16, offset: 4988},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 212, col: 19, offset: 4991},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 212, col: 23, offset: 4995},
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 23, offset: 4995},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 212, col: 26, offset: 4998},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 32, offset: 5004},
										name: "fieldReference",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 212, col: 47, offset: 5019},
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 47, offset: 5019},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 212, col: 50, offset: 5022},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 5086},
						name: "fieldReference",
					},
				},
			},
		},
		{
			name: "fieldOp",
			pos:  position{line: 217, col: 1, offset: 5102},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 5114},
				run: (*parser).callonfieldOp1,
				expr: &litMatcher{
					pos:        position{line: 218, col: 5, offset: 5114},
					val:        "len",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldExprList",
			pos:  position{line: 220, col: 1, offset: 5144},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 5162},
				run: (*parser).callonfieldExprList1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 5162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 221, col: 5, offset: 5162},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 11, offset: 5168},
								name: "fieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 21, offset: 5178},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 221, col: 26, offset: 5183},
								expr: &seqExpr{
									pos: position{line: 221, col: 27, offset: 5184},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 221, col: 27, offset: 5184},
											expr: &ruleRefExpr{
												pos:  position{line: 221, col: 27, offset: 5184},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 221, col: 30, offset: 5187},
											val:        ",",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 221, col: 34, offset: 5191},
											expr: &ruleRefExpr{
												pos:  position{line: 221, col: 34, offset: 5191},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 221, col: 37, offset: 5194},
											name: "fieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fieldRefDotOnly",
			pos:  position{line: 231, col: 1, offset: 5389},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 5409},
				run: (*parser).callonfieldRefDotOnly1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 5409},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 5409},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 10, offset: 5414},
								name: "fieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 20, offset: 5424},
							label: "refs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 25, offset: 5429},
								expr: &actionExpr{
									pos: position{line: 232, col: 26, offset: 5430},
									run: (*parser).callonfieldRefDotOnly7,
									expr: &seqExpr{
										pos: position{line: 232, col: 26, offset: 5430},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 232, col: 26, offset: 5430},
												val:        ".",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 232, col: 30, offset: 5434},
												label: "field",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 36, offset: 5440},
													name: "fieldName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fieldRefDotOnlyList",
			pos:  position{line: 236, col: 1, offset: 5565},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 5589},
				run: (*parser).callonfieldRefDotOnlyList1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 5589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 5589},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 11, offset: 5595},
								name: "fieldRefDotOnly",
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 27, offset: 5611},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 32, offset: 5616},
								expr: &actionExpr{
									pos: position{line: 237, col: 33, offset: 5617},
									run: (*parser).callonfieldRefDotOnlyList7,
									expr: &seqExpr{
										pos: position{line: 237, col: 33, offset: 5617},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 237, col: 33, offset: 5617},
												expr: &ruleRefExpr{
													pos:  position{line: 237, col: 33, offset: 5617},
													name: "_",
												},
											},
											&litMatcher{
												pos:        position{line: 237, col: 36, offset: 5620},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrOneExpr{
												pos: position{line: 237, col: 40, offset: 5624},
												expr: &ruleRefExpr{
													pos:  position{line: 237, col: 40, offset: 5624},
													name: "_",
												},
											},
											&labeledExpr{
												pos:   position{line: 237, col: 43, offset: 5627},
												label: "ref",
												expr: &ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 5631},
													name: "fieldRefDotOnly",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "fieldNameList",
			pos:  position{line: 245, col: 1, offset: 5811},
			expr: &actionExpr{
				pos: position{line: 246, col: 5, offset: 5829},
				run: (*parser).callonfieldNameList1,
				expr: &seqExpr{
					pos: position{line: 246, col: 5, offset: 5829},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 246, col: 5, offset: 5829},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 11, offset: 5835},
								name: "fieldName",
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 21, offset: 5845},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 246, col: 26, offset: 5850},
								expr: &seqExpr{
									pos: position{line: 246, col: 27, offset: 5851},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 246, col: 27, offset: 5851},
											expr: &ruleRefExpr{
												pos:  position{line: 246, col: 27, offset: 5851},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 246, col: 30, offset: 5854},
											val:        ",",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 246, col: 34, offset: 5858},
											expr: &ruleRefExpr{
												pos:  position{line: 246, col: 34, offset: 5858},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 246, col: 37, offset: 5861},
											name: "fieldName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "countOp",
			pos:  position{line: 254, col: 1, offset: 6054},
			expr: &actionExpr{
				pos: position{line: 255, col: 5, offset: 6066},
				run: (*parser).calloncountOp1,
				expr: &litMatcher{
					pos:        position{line: 255, col: 5, offset: 6066},
					val:        "count",
					ignoreCase: true,
				},
			},
		},
		{
			name: "fieldReducerOp",
			pos:  position{line: 257, col: 1, offset: 6100},
			expr: &choiceExpr{
				pos: position{line: 258, col: 5, offset: 6119},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 258, col: 5, offset: 6119},
						run: (*parser).callonfieldReducerOp2,
						expr: &litMatcher{
							pos:        position{line: 258, col: 5, offset: 6119},
							val:        "sum",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 6153},
						run: (*parser).callonfieldReducerOp4,
						expr: &litMatcher{
							pos:        position{line: 259, col: 5, offset: 6153},
							val:        "avg",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 6187},
						run: (*parser).callonfieldReducerOp6,
						expr: &litMatcher{
							pos:        position{line: 260, col: 5, offset: 6187},
							val:        "stdev",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 6224},
						run: (*parser).callonfieldReducerOp8,
						expr: &litMatcher{
							pos:        position{line: 261, col: 5, offset: 6224},
							val:        "sd",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 6260},
						run: (*parser).callonfieldReducerOp10,
						expr: &litMatcher{
							pos:        position{line: 262, col: 5, offset: 6260},
							val:        "var",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 6294},
						run: (*parser).callonfieldReducerOp12,
						expr: &litMatcher{
							pos:        position{line: 263, col: 5, offset: 6294},
							val:        "entropy",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 6335},
						run: (*parser).callonfieldReducerOp14,
						expr: &litMatcher{
							pos:        position{line: 264, col: 5, offset: 6335},
							val:        "min",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 6369},
						run: (*parser).callonfieldReducerOp16,
						expr: &litMatcher{
							pos:        position{line: 265, col: 5, offset: 6369},
							val:        "max",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 6403},
						run: (*parser).callonfieldReducerOp18,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 6403},
							val:        "first",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 5, offset: 6441},
						run: (*parser).callonfieldReducerOp20,
						expr: &litMatcher{
							pos:        position{line: 267, col: 5, offset: 6441},
							val:        "last",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 268, col: 5, offset: 6477},
						run: (*parser).callonfieldReducerOp22,
						expr: &litMatcher{
							pos:        position{line: 268, col: 5, offset: 6477},
							val:        "countdistinct",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "paddedFieldExpr",
			pos:  position{line: 270, col: 1, offset: 6527},
			expr: &actionExpr{
				pos: position{line: 270, col: 19, offset: 6545},
				run: (*parser).callonpaddedFieldExpr1,
				expr: &seqExpr{
					pos: position{line: 270, col: 19, offset: 6545},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 270, col: 19, offset: 6545},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 19, offset: 6545},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 22, offset: 6548},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 28, offset: 6554},
								name: "fieldExpr",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 270, col: 38, offset: 6564},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 38, offset: 6564},
								name: "_",
							},
						},
					},
				},
			},
		},
		{
			name: "countReducer",
			pos:  position{line: 272, col: 1, offset: 6590},
			expr: &actionExpr{
				pos: position{line: 273, col: 5, offset: 6607},
				run: (*parser).calloncountReducer1,
				expr: &seqExpr{
					pos: position{line: 273, col: 5, offset: 6607},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 273, col: 5, offset: 6607},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 8, offset: 6610},
								name: "countOp",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 16, offset: 6618},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 16, offset: 6618},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 19, offset: 6621},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 273, col: 23, offset: 6625},
							label: "field",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 29, offset: 6631},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 29, offset: 6631},
									name: "paddedFieldExpr",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 47, offset: 6649},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 47, offset: 6649},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 50, offset: 6652},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "fieldReducer",
			pos:  position{line: 277, col: 1, offset: 6711},
			expr: &actionExpr{
				pos: position{line: 278, col: 5, offset: 6728},
				run: (*parser).callonfieldReducer1,
				expr: &seqExpr{
					pos: position{line: 278, col: 5, offset: 6728},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 278, col: 5, offset: 6728},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 8, offset: 6731},
								name: "fieldReducerOp",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 278, col: 23, offset: 6746},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 23, offset: 6746},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 26, offset: 6749},
							val:        "(",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 278, col: 30, offset: 6753},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 30, offset: 6753},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 33, offset: 6756},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 39, offset: 6762},
								name: "fieldExpr",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 278, col: 50, offset: 6773},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 50, offset: 6773},
								name: "_",
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 53, offset: 6776},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reducerProc",
			pos:  position{line: 282, col: 1, offset: 6843},
			expr: &actionExpr{
				pos: position{line: 283, col: 5, offset: 6859},
				run: (*parser).callonreducerProc1,
				expr: &seqExpr{
					pos: position{line: 283, col: 5, offset: 6859},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 5, offset: 6859},
							label: "every",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 11, offset: 6865},
								expr: &seqExpr{
									pos: position{line: 283, col: 12, offset: 6866},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 283, col: 12, offset: 6866},
											name: "everyDur",
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 21, offset: 6875},
											name: "_",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 25, offset: 6879},
							label: "reducers",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 34, offset: 6888},
								name: "reducerList",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 46, offset: 6900},
							label: "keys",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 51, offset: 6905},
								expr: &seqExpr{
									pos: position{line: 283, col: 52, offset: 6906},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 283, col: 52, offset: 6906},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 54, offset: 6908},
											name: "groupBy",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 64, offset: 6918},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 70, offset: 6924},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 70, offset: 6924},
									name: "procLimitArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "asClause",
			pos:  position{line: 301, col: 1, offset: 7281},
			expr: &actionExpr{
				pos: position{line: 302, col: 5, offset: 7294},
				run: (*parser).callonasClause1,
				expr: &seqExpr{
					pos: position{line: 302, col: 5, offset: 7294},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 7294},
							val:        "as",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 11, offset: 7300},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 13, offset: 7302},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 15, offset: 7304},
								name: "fieldName",
							},
						},
					},
				},
			},
		},
		{
			name: "reducerExpr",
			pos:  position{line: 304, col: 1, offset: 7333},
			expr: &choiceExpr{
				pos: position{line: 305, col: 5, offset: 7349},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 305, col: 5, offset: 7349},
						run: (*parser).callonreducerExpr2,
						expr: &seqExpr{
							pos: position{line: 305, col: 5, offset: 7349},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 305, col: 5, offset: 7349},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 305, col: 11, offset: 7355},
										name: "fieldExpr",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 305, col: 21, offset: 7365},
									expr: &ruleRefExpr{
										pos:  position{line: 305, col: 21, offset: 7365},
										name: "_",
									},
								},
								&litMatcher{
									pos:        position{line: 305, col: 24, offset: 7368},
									val:        "=",
									ignoreCase: false,
								},
								&zeroOrOneExpr{
									pos: position{line: 305, col: 28, offset: 7372},
									expr: &ruleRefExpr{
										pos:  position{line: 305, col: 28, offset: 7372},
										name: "_",
									},
								},
								&labeledExpr{
									pos:   position{line: 305, col: 31, offset: 7375},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 305, col: 33, offset: 7377},
										name: "reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 7440},
						run: (*parser).callonreducerExpr13,
						expr: &seqExpr{
							pos: position{line: 308, col: 5, offset: 7440},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 308, col: 5, offset: 7440},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 308, col: 7, offset: 7442},
										name: "reducer",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 308, col: 15, offset: 7450},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 308, col: 17, offset: 7452},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 308, col: 23, offset: 7458},
										name: "asClause",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 311, col: 5, offset: 7522},
						name: "reducer",
					},
				},
			},
		},
		{
			name: "reducer",
			pos:  position{line: 313, col: 1, offset: 7531},
			expr: &choiceExpr{
				pos: position{line: 314, col: 5, offset: 7543},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 314, col: 5, offset: 7543},
						name: "countReducer",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 7560},
						name: "fieldReducer",
					},
				},
			},
		},
		{
			name: "reducerList",
			pos:  position{line: 317, col: 1, offset: 7574},
			expr: &actionExpr{
				pos: position{line: 318, col: 5, offset: 7590},
				run: (*parser).callonreducerList1,
				expr: &seqExpr{
					pos: position{line: 318, col: 5, offset: 7590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 318, col: 5, offset: 7590},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 7596},
								name: "reducerExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 23, offset: 7608},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 318, col: 28, offset: 7613},
								expr: &seqExpr{
									pos: position{line: 318, col: 29, offset: 7614},
									exprs: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 318, col: 29, offset: 7614},
											expr: &ruleRefExpr{
												pos:  position{line: 318, col: 29, offset: 7614},
												name: "_",
											},
										},
										&litMatcher{
											pos:        position{line: 318, col: 32, offset: 7617},
											val:        ",",
											ignoreCase: false,
										},
										&zeroOrOneExpr{
											pos: position{line: 318, col: 36, offset: 7621},
											expr: &ruleRefExpr{
												pos:  position{line: 318, col: 36, offset: 7621},
												name: "_",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 318, col: 39, offset: 7624},
											name: "reducerExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "simpleProc",
			pos:  position{line: 326, col: 1, offset: 7821},
			expr: &choiceExpr{
				pos: position{line: 327, col: 5, offset: 7836},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 327, col: 5, offset: 7836},
						name: "sort",
					},
					&ruleRefExpr{
						pos:  position{line: 328, col: 5, offset: 7845},
						name: "top",
					},
					&ruleRefExpr{
						pos:  position{line: 329, col: 5, offset: 7853},
						name: "cut",
					},
					&ruleRefExpr{
						pos:  position{line: 330, col: 5, offset: 7861},
						name: "head",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 5, offset: 7870},
						name: "tail",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 7879},
						name: "filter",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 7890},
						name: "uniq",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 7899},
						name: "put",
					},
				},
			},
		},
		{
			name: "sort",
			pos:  position{line: 336, col: 1, offset: 7904},
			expr: &actionExpr{
				pos: position{line: 337, col: 5, offset: 7913},
				run: (*parser).callonsort1,
				expr: &seqExpr{
					pos: position{line: 337, col: 5, offset: 7913},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 337, col: 5, offset: 7913},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 337, col: 13, offset: 7921},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 18, offset: 7926},
								name: "sortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 27, offset: 7935},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 337, col: 32, offset: 7940},
								expr: &actionExpr{
									pos: position{line: 337, col: 33, offset: 7941},
									run: (*parser).callonsort8,
									expr: &seqExpr{
										pos: position{line: 337, col: 33, offset: 7941},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 337, col: 33, offset: 7941},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 337, col: 35, offset: 7943},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 337, col: 37, offset: 7945},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArgs",
			pos:  position{line: 341, col: 1, offset: 8022},
			expr: &zeroOrMoreExpr{
				pos: position{line: 341, col: 12, offset: 8033},
				expr: &actionExpr{
					pos: position{line: 341, col: 13, offset: 8034},
					run: (*parser).callonsortArgs2,
					expr: &seqExpr{
						pos: position{line: 341, col: 13, offset: 8034},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 341, col: 13, offset: 8034},
								name: "_",
							},
							&labeledExpr{
								pos:   position{line: 341, col: 15, offset: 8036},
								label: "a",
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 17, offset: 8038},
									name: "sortArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "sortArg",
			pos:  position{line: 343, col: 1, offset: 8067},
			expr: &choiceExpr{
				pos: position{line: 344, col: 5, offset: 8079},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 344, col: 5, offset: 8079},
						run: (*parser).callonsortArg2,
						expr: &seqExpr{
							pos: position{line: 344, col: 5, offset: 8079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 344, col: 5, offset: 8079},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 14, offset: 8088},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 16, offset: 8090},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 22, offset: 8096},
										name: "suint",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 345, col: 5, offset: 8146},
						run: (*parser).callonsortArg8,
						expr: &litMatcher{
							pos:        position{line: 345, col: 5, offset: 8146},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 346, col: 5, offset: 8189},
						run: (*parser).callonsortArg10,
						expr: &seqExpr{
							pos: position{line: 346, col: 5, offset: 8189},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 346, col: 5, offset: 8189},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 346, col: 14, offset: 8198},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 346, col: 16, offset: 8200},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 346, col: 23, offset: 8207},
										run: (*parser).callonsortArg15,
										expr: &choiceExpr{
											pos: position{line: 346, col: 24, offset: 8208},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 346, col: 24, offset: 8208},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 346, col: 34, offset: 8218},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "top",
			pos:  position{line: 348, col: 1, offset: 8300},
			expr: &actionExpr{
				pos: position{line: 349, col: 5, offset: 8308},
				run: (*parser).callontop1,
				expr: &seqExpr{
					pos: position{line: 349, col: 5, offset: 8308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 5, offset: 8308},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 349, col: 12, offset: 8315},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 18, offset: 8321},
								expr: &actionExpr{
									pos: position{line: 349, col: 19, offset: 8322},
									run: (*parser).callontop6,
									expr: &seqExpr{
										pos: position{line: 349, col: 19, offset: 8322},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 349, col: 19, offset: 8322},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 349, col: 21, offset: 8324},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 349, col: 23, offset: 8326},
													name: "unsignedInteger",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 58, offset: 8361},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 64, offset: 8367},
								expr: &seqExpr{
									pos: position{line: 349, col: 65, offset: 8368},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 349, col: 65, offset: 8368},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 349, col: 67, offset: 8370},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 78, offset: 8381},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 83, offset: 8386},
								expr: &actionExpr{
									pos: position{line: 349, col: 84, offset: 8387},
									run: (*parser).callontop18,
									expr: &seqExpr{
										pos: position{line: 349, col: 84, offset: 8387},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 349, col: 84, offset: 8387},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 349, col: 86, offset: 8389},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 349, col: 88, offset: 8391},
													name: "fieldExprList",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "procLimitArg",
			pos:  position{line: 353, col: 1, offset: 8480},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 8497},
				run: (*parser).callonprocLimitArg1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 8497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 354, col: 5, offset: 8497},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 354, col: 7, offset: 8499},
							val:        "-limit",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 16, offset: 8508},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 354, col: 18, offset: 8510},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 24, offset: 8516},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "cut",
			pos:  position{line: 356, col: 1, offset: 8555},
			expr: &actionExpr{
				pos: position{line: 357, col: 5, offset: 8563},
				run: (*parser).calloncut1,
				expr: &seqExpr{
					pos: position{line: 357, col: 5, offset: 8563},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 5, offset: 8563},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 12, offset: 8570},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 14, offset: 8572},
							label: "list",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 19, offset: 8577},
								name: "fieldRefDotOnlyList",
							},
						},
					},
				},
			},
		},
		{
			name: "head",
			pos:  position{line: 358, col: 1, offset: 8631},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 8640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 8640},
						run: (*parser).callonhead2,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 8640},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 8640},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 13, offset: 8648},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 359, col: 15, offset: 8650},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 21, offset: 8656},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 8712},
						run: (*parser).callonhead8,
						expr: &litMatcher{
							pos:        position{line: 360, col: 5, offset: 8712},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "tail",
			pos:  position{line: 361, col: 1, offset: 8752},
			expr: &choiceExpr{
				pos: position{line: 362, col: 5, offset: 8761},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 8761},
						run: (*parser).callontail2,
						expr: &seqExpr{
							pos: position{line: 362, col: 5, offset: 8761},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 362, col: 5, offset: 8761},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 362, col: 13, offset: 8769},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 362, col: 15, offset: 8771},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 362, col: 21, offset: 8777},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 8833},
						run: (*parser).callontail8,
						expr: &litMatcher{
							pos:        position{line: 363, col: 5, offset: 8833},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "filter",
			pos:  position{line: 365, col: 1, offset: 8874},
			expr: &actionExpr{
				pos: position{line: 366, col: 5, offset: 8885},
				run: (*parser).callonfilter1,
				expr: &seqExpr{
					pos: position{line: 366, col: 5, offset: 8885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 366, col: 5, offset: 8885},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 15, offset: 8895},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 17, offset: 8897},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 22, offset: 8902},
								name: "searchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "uniq",
			pos:  position{line: 369, col: 1, offset: 8960},
			expr: &choiceExpr{
				pos: position{line: 370, col: 5, offset: 8969},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 8969},
						run: (*parser).callonuniq2,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 8969},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 8969},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 13, offset: 8977},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 370, col: 15, offset: 8979},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 373, col: 5, offset: 9033},
						run: (*parser).callonuniq7,
						expr: &litMatcher{
							pos:        position{line: 373, col: 5, offset: 9033},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "put",
			pos:  position{line: 377, col: 1, offset: 9088},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 9096},
				run: (*parser).callonput1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 9096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 9096},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 12, offset: 9103},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 14, offset: 9105},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 16, offset: 9107},
								name: "fieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 26, offset: 9117},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 378, col: 29, offset: 9120},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 33, offset: 9124},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 36, offset: 9127},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 38, offset: 9129},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "PrimaryExpression",
			pos:  position{line: 382, col: 1, offset: 9185},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 9207},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 383, col: 5, offset: 9207},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 384, col: 5, offset: 9225},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 385, col: 5, offset: 9243},
						name: "PortLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 386, col: 5, offset: 9259},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 387, col: 5, offset: 9277},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 5, offset: 9296},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 389, col: 5, offset: 9313},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 390, col: 5, offset: 9332},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 5, offset: 9351},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 5, offset: 9367},
						name: "FieldReference",
					},
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 9386},
						run: (*parser).callonPrimaryExpression12,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 9386},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 393, col: 5, offset: 9386},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 9, offset: 9390},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 393, col: 12, offset: 9393},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 393, col: 17, offset: 9398},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 28, offset: 9409},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 393, col: 31, offset: 9412},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldReference",
			pos:  position{line: 395, col: 1, offset: 9438},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 9457},
				run: (*parser).callonFieldReference1,
				expr: &labeledExpr{
					pos:   position{line: 396, col: 5, offset: 9457},
					label: "f",
					expr: &ruleRefExpr{
						pos:  position{line: 396, col: 7, offset: 9459},
						name: "fieldName",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 406, col: 1, offset: 9708},
			expr: &ruleRefExpr{
				pos:  position{line: 406, col: 14, offset: 9721},
				name: "ConditionalExpression",
			},
		},
		{
			name: "ConditionalExpression",
			pos:  position{line: 408, col: 1, offset: 9744},
			expr: &choiceExpr{
				pos: position{line: 409, col: 5, offset: 9770},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 9770},
						run: (*parser).callonConditionalExpression2,
						expr: &seqExpr{
							pos: position{line: 409, col: 5, offset: 9770},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 409, col: 5, offset: 9770},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 15, offset: 9780},
										name: "LogicalORExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 409, col: 35, offset: 9800},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 409, col: 38, offset: 9803},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 409, col: 42, offset: 9807},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 409, col: 45, offset: 9810},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 56, offset: 9821},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 409, col: 67, offset: 9832},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 409, col: 70, offset: 9835},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 409, col: 74, offset: 9839},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 409, col: 77, offset: 9842},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 88, offset: 9853},
										name: "Expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 5, offset: 9945},
						name: "LogicalORExpression",
					},
				},
			},
		},
		{
			name: "LogicalORExpression",
			pos:  position{line: 414, col: 1, offset: 9966},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 9990},
				run: (*parser).callonLogicalORExpression1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 9990},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 415, col: 5, offset: 9990},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 11, offset: 9996},
								name: "LogicalANDExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 416, col: 5, offset: 10021},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 416, col: 10, offset: 10026},
								expr: &seqExpr{
									pos: position{line: 416, col: 11, offset: 10027},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 416, col: 11, offset: 10027},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 416, col: 14, offset: 10030},
											name: "orToken",
										},
										&ruleRefExpr{
											pos:  position{line: 416, col: 22, offset: 10038},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 416, col: 25, offset: 10041},
											name: "LogicalANDExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalANDExpression",
			pos:  position{line: 420, col: 1, offset: 10126},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 10151},
				run: (*parser).callonLogicalANDExpression1,
				expr: &seqExpr{
					pos: position{line: 421, col: 5, offset: 10151},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 421, col: 5, offset: 10151},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 11, offset: 10157},
								name: "EqualityCompareExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 422, col: 5, offset: 10187},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 422, col: 10, offset: 10192},
								expr: &seqExpr{
									pos: position{line: 422, col: 11, offset: 10193},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 422, col: 11, offset: 10193},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 422, col: 14, offset: 10196},
											name: "andToken",
										},
										&ruleRefExpr{
											pos:  position{line: 422, col: 23, offset: 10205},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 422, col: 26, offset: 10208},
											name: "EqualityCompareExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpression",
			pos:  position{line: 426, col: 1, offset: 10298},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 10328},
				run: (*parser).callonEqualityCompareExpression1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 10328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 5, offset: 10328},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 10334},
								name: "RelativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 10357},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 10, offset: 10362},
								expr: &seqExpr{
									pos: position{line: 428, col: 11, offset: 10363},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 428, col: 11, offset: 10363},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 428, col: 14, offset: 10366},
											name: "EqualityComparator",
										},
										&ruleRefExpr{
											pos:  position{line: 428, col: 33, offset: 10385},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 428, col: 36, offset: 10388},
											name: "RelativeExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 432, col: 1, offset: 10471},
			expr: &actionExpr{
				pos: position{line: 432, col: 20, offset: 10490},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 432, col: 21, offset: 10491},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 432, col: 21, offset: 10491},
							val:        "=~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 432, col: 28, offset: 10498},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 432, col: 34, offset: 10504},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 434, col: 1, offset: 10542},
			expr: &choiceExpr{
				pos: position{line: 435, col: 5, offset: 10565},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 435, col: 5, offset: 10565},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 10586},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 436, col: 5, offset: 10586},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpression",
			pos:  position{line: 438, col: 1, offset: 10623},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 10646},
				run: (*parser).callonRelativeExpression1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 10646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 10646},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 11, offset: 10652},
								name: "AdditiveExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 5, offset: 10675},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 440, col: 10, offset: 10680},
								expr: &seqExpr{
									pos: position{line: 440, col: 11, offset: 10681},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 440, col: 11, offset: 10681},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 440, col: 14, offset: 10684},
											name: "RelativeOperator",
										},
										&ruleRefExpr{
											pos:  position{line: 440, col: 31, offset: 10701},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 440, col: 34, offset: 10704},
											name: "AdditiveExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 444, col: 1, offset: 10787},
			expr: &actionExpr{
				pos: position{line: 444, col: 20, offset: 10806},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 444, col: 21, offset: 10807},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 444, col: 21, offset: 10807},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 444, col: 28, offset: 10814},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 444, col: 34, offset: 10820},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 444, col: 41, offset: 10827},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpression",
			pos:  position{line: 446, col: 1, offset: 10864},
			expr: &actionExpr{
				pos: position{line: 447, col: 5, offset: 10887},
				run: (*parser).callonAdditiveExpression1,
				expr: &seqExpr{
					pos: position{line: 447, col: 5, offset: 10887},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 5, offset: 10887},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 11, offset: 10893},
								name: "MultiplicativeExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 5, offset: 10922},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 448, col: 10, offset: 10927},
								expr: &seqExpr{
									pos: position{line: 448, col: 11, offset: 10928},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 448, col: 11, offset: 10928},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 14, offset: 10931},
											name: "AdditiveOperator",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 31, offset: 10948},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 34, offset: 10951},
											name: "MultiplicativeExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 452, col: 1, offset: 11040},
			expr: &actionExpr{
				pos: position{line: 452, col: 20, offset: 11059},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 452, col: 21, offset: 11060},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 452, col: 21, offset: 11060},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 452, col: 27, offset: 11066},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpression",
			pos:  position{line: 454, col: 1, offset: 11103},
			expr: &actionExpr{
				pos: position{line: 455, col: 5, offset: 11132},
				run: (*parser).callonMultiplicativeExpression1,
				expr: &seqExpr{
					pos: position{line: 455, col: 5, offset: 11132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 455, col: 5, offset: 11132},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 455, col: 11, offset: 11138},
								name: "NotExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 5, offset: 11156},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 456, col: 10, offset: 11161},
								expr: &seqExpr{
									pos: position{line: 456, col: 11, offset: 11162},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 456, col: 11, offset: 11162},
											name: "__",
										},
										&labeledExpr{
											pos:   position{line: 456, col: 14, offset: 11165},
											label: "op",
											expr: &ruleRefExpr{
												pos:  position{line: 456, col: 17, offset: 11168},
												name: "MultiplicativeOperator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 40, offset: 11191},
											name: "__",
										},
										&labeledExpr{
											pos:   position{line: 456, col: 43, offset: 11194},
											label: "operand",
											expr: &ruleRefExpr{
												pos:  position{line: 456, col: 51, offset: 11202},
												name: "NotExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 460, col: 1, offset: 11280},
			expr: &actionExpr{
				pos: position{line: 460, col: 26, offset: 11305},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 460, col: 27, offset: 11306},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 460, col: 27, offset: 11306},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 460, col: 33, offset: 11312},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpression",
			pos:  position{line: 462, col: 1, offset: 11349},
			expr: &choiceExpr{
				pos: position{line: 463, col: 5, offset: 11367},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 11367},
						run: (*parser).callonNotExpression2,
						expr: &seqExpr{
							pos: position{line: 463, col: 5, offset: 11367},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 463, col: 5, offset: 11367},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 463, col: 9, offset: 11371},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 463, col: 12, offset: 11374},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 463, col: 14, offset: 11376},
										name: "NotExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 466, col: 5, offset: 11444},
						name: "CallExpression",
					},
				},
			},
		},
		{
			name: "CallExpression",
			pos:  position{line: 469, col: 1, offset: 11461},
			expr: &choiceExpr{
				pos: position{line: 470, col: 5, offset: 11480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 470, col: 5, offset: 11480},
						run: (*parser).callonCallExpression2,
						expr: &seqExpr{
							pos: position{line: 470, col: 5, offset: 11480},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 470, col: 5, offset: 11480},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 470, col: 8, offset: 11483},
										name: "FunctionName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 470, col: 21, offset: 11496},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 470, col: 24, offset: 11499},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 470, col: 28, offset: 11503},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 470, col: 33, offset: 11508},
										name: "ArgumentList",
									},
								},
								&litMatcher{
									pos:        position{line: 470, col: 46, offset: 11521},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 5, offset: 11584},
						name: "DereferenceExpression",
					},
				},
			},
		},
		{
			name: "FunctionName",
			pos:  position{line: 475, col: 1, offset: 11607},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 11624},
				run: (*parser).callonFunctionName1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 11624},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 476, col: 5, offset: 11624},
							name: "FunctionNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 476, col: 23, offset: 11642},
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 23, offset: 11642},
								name: "FunctionNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionNameStart",
			pos:  position{line: 478, col: 1, offset: 11692},
			expr: &charClassMatcher{
				pos:        position{line: 478, col: 21, offset: 11712},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "FunctionNameRest",
			pos:  position{line: 479, col: 1, offset: 11721},
			expr: &choiceExpr{
				pos: position{line: 479, col: 20, offset: 11740},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 479, col: 20, offset: 11740},
						name: "FunctionNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 479, col: 40, offset: 11760},
						val:        "[.0-9]",
						chars:      []rune{'.'},
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 481, col: 1, offset: 11768},
			expr: &choiceExpr{
				pos: position{line: 482, col: 5, offset: 11785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 482, col: 5, offset: 11785},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 482, col: 5, offset: 11785},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 482, col: 5, offset: 11785},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 482, col: 11, offset: 11791},
										name: "Expression",
									},
								},
								&labeledExpr{
									pos:   position{line: 482, col: 22, offset: 11802},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 482, col: 27, offset: 11807},
										expr: &actionExpr{
											pos: position{line: 482, col: 28, offset: 11808},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 482, col: 28, offset: 11808},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 482, col: 28, offset: 11808},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 482, col: 31, offset: 11811},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 482, col: 35, offset: 11815},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 482, col: 38, offset: 11818},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 482, col: 40, offset: 11820},
															name: "Expression",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 485, col: 5, offset: 11936},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 485, col: 5, offset: 11936},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DereferenceExpression",
			pos:  position{line: 487, col: 1, offset: 11972},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 11998},
				run: (*parser).callonDereferenceExpression1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 11998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 488, col: 5, offset: 11998},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 10, offset: 12003},
								name: "PrimaryExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 12025},
							label: "derefs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 489, col: 12, offset: 12032},
								expr: &choiceExpr{
									pos: position{line: 490, col: 9, offset: 12042},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 490, col: 9, offset: 12042},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 490, col: 9, offset: 12042},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 490, col: 12, offset: 12045},
													val:        "[",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 490, col: 16, offset: 12049},
													name: "__",
												},
												&labeledExpr{
													pos:   position{line: 490, col: 19, offset: 12052},
													label: "index",
													expr: &ruleRefExpr{
														pos:  position{line: 490, col: 25, offset: 12058},
														name: "Expression",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 490, col: 36, offset: 12069},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 490, col: 39, offset: 12072},
													val:        "]",
													ignoreCase: false,
												},
											},
										},
										&seqExpr{
											pos: position{line: 491, col: 9, offset: 12084},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 491, col: 9, offset: 12084},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 491, col: 12, offset: 12087},
													val:        ".",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 491, col: 16, offset: 12091},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 491, col: 20, offset: 12095},
													run: (*parser).callonDereferenceExpression20,
													expr: &labeledExpr{
														pos:   position{line: 491, col: 20, offset: 12095},
														label: "field",
														expr: &ruleRefExpr{
															pos:  position{line: 491, col: 26, offset: 12101},
															name: "fieldName",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "duration",
			pos:  position{line: 496, col: 1, offset: 12236},
			expr: &choiceExpr{
				pos: position{line: 497, col: 5, offset: 12249},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 497, col: 5, offset: 12249},
						name: "seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 498, col: 5, offset: 12261},
						name: "minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 499, col: 5, offset: 12273},
						name: "hours",
					},
					&seqExpr{
						pos: position{line: 500, col: 5, offset: 12283},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 500, col: 5, offset: 12283},
								name: "hours",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 12289},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 500, col: 13, offset: 12291},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 19, offset: 12297},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 21, offset: 12299},
								name: "minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 501, col: 5, offset: 12311},
						name: "days",
					},
					&ruleRefExpr{
						pos:  position{line: 502, col: 5, offset: 12320},
						name: "weeks",
					},
				},
			},
		},
		{
			name: "sec_abbrev",
			pos:  position{line: 504, col: 1, offset: 12327},
			expr: &choiceExpr{
				pos: position{line: 505, col: 5, offset: 12342},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 505, col: 5, offset: 12342},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 506, col: 5, offset: 12356},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 507, col: 5, offset: 12369},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 508, col: 5, offset: 12380},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 509, col: 5, offset: 12390},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "min_abbrev",
			pos:  position{line: 511, col: 1, offset: 12395},
			expr: &choiceExpr{
				pos: position{line: 512, col: 5, offset: 12410},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 512, col: 5, offset: 12410},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 513, col: 5, offset: 12424},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 514, col: 5, offset: 12437},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 515, col: 5, offset: 12448},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 516, col: 5, offset: 12458},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "hour_abbrev",
			pos:  position{line: 518, col: 1, offset: 12463},
			expr: &choiceExpr{
				pos: position{line: 519, col: 5, offset: 12479},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 519, col: 5, offset: 12479},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 520, col: 5, offset: 12491},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 521, col: 5, offset: 12501},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 522, col: 5, offset: 12510},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 523, col: 5, offset: 12518},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "day_abbrev",
			pos:  position{line: 525, col: 1, offset: 12526},
			expr: &choiceExpr{
				pos: position{line: 525, col: 14, offset: 12539},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 525, col: 14, offset: 12539},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 525, col: 21, offset: 12546},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 525, col: 27, offset: 12552},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "week_abbrev",
			pos:  position{line: 526, col: 1, offset: 12556},
			expr: &choiceExpr{
				pos: position{line: 526, col: 15, offset: 12570},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 526, col: 15, offset: 12570},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 526, col: 23, offset: 12578},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 526, col: 30, offset: 12585},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 526, col: 36, offset: 12591},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 526, col: 41, offset: 12596},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "seconds",
			pos:  position{line: 528, col: 1, offset: 12601},
			expr: &choiceExpr{
				pos: position{line: 529, col: 5, offset: 12613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 529, col: 5, offset: 12613},
						run: (*parser).callonseconds2,
						expr: &litMatcher{
							pos:        position{line: 529, col: 5, offset: 12613},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 12658},
						run: (*parser).callonseconds4,
						expr: &seqExpr{
							pos: position{line: 530, col: 5, offset: 12658},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 530, col: 5, offset: 12658},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 9, offset: 12662},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 530, col: 16, offset: 12669},
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 16, offset: 12669},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 19, offset: 12672},
									name: "sec_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "minutes",
			pos:  position{line: 532, col: 1, offset: 12718},
			expr: &choiceExpr{
				pos: position{line: 533, col: 5, offset: 12730},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 12730},
						run: (*parser).callonminutes2,
						expr: &litMatcher{
							pos:        position{line: 533, col: 5, offset: 12730},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 534, col: 5, offset: 12776},
						run: (*parser).callonminutes4,
						expr: &seqExpr{
							pos: position{line: 534, col: 5, offset: 12776},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 534, col: 5, offset: 12776},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 9, offset: 12780},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 534, col: 16, offset: 12787},
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 16, offset: 12787},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 19, offset: 12790},
									name: "min_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hours",
			pos:  position{line: 536, col: 1, offset: 12845},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 12855},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 537, col: 5, offset: 12855},
						run: (*parser).callonhours2,
						expr: &litMatcher{
							pos:        position{line: 537, col: 5, offset: 12855},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 538, col: 5, offset: 12901},
						run: (*parser).callonhours4,
						expr: &seqExpr{
							pos: position{line: 538, col: 5, offset: 12901},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 538, col: 5, offset: 12901},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 9, offset: 12905},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 538, col: 16, offset: 12912},
									expr: &ruleRefExpr{
										pos:  position{line: 538, col: 16, offset: 12912},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 538, col: 19, offset: 12915},
									name: "hour_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "days",
			pos:  position{line: 540, col: 1, offset: 12973},
			expr: &choiceExpr{
				pos: position{line: 541, col: 5, offset: 12982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 12982},
						run: (*parser).callondays2,
						expr: &litMatcher{
							pos:        position{line: 541, col: 5, offset: 12982},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 13030},
						run: (*parser).callondays4,
						expr: &seqExpr{
							pos: position{line: 542, col: 5, offset: 13030},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 542, col: 5, offset: 13030},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 542, col: 9, offset: 13034},
										name: "number",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 542, col: 16, offset: 13041},
									expr: &ruleRefExpr{
										pos:  position{line: 542, col: 16, offset: 13041},
										name: "_",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 542, col: 19, offset: 13044},
									name: "day_abbrev",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "weeks",
			pos:  position{line: 544, col: 1, offset: 13104},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 13114},
				run: (*parser).callonweeks1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 13114},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 5, offset: 13114},
							label: "num",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 9, offset: 13118},
								name: "number",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 545, col: 16, offset: 13125},
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 16, offset: 13125},
								name: "_",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 19, offset: 13128},
							name: "week_abbrev",
						},
					},
				},
			},
		},
		{
			name: "number",
			pos:  position{line: 547, col: 1, offset: 13191},
			expr: &ruleRefExpr{
				pos:  position{line: 547, col: 10, offset: 13200},
				name: "unsignedInteger",
			},
		},
		{
			name: "addr",
			pos:  position{line: 551, col: 1, offset: 13246},
			expr: &actionExpr{
				pos: position{line: 552, col: 5, offset: 13255},
				run: (*parser).callonaddr1,
				expr: &labeledExpr{
					pos:   position{line: 552, col: 5, offset: 13255},
					label: "a",
					expr: &seqExpr{
						pos: position{line: 552, col: 8, offset: 13258},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 552, col: 8, offset: 13258},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 552, col: 24, offset: 13274},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 552, col: 28, offset: 13278},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 552, col: 44, offset: 13294},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 552, col: 48, offset: 13298},
								name: "unsignedInteger",
							},
							&litMatcher{
								pos:        position{line: 552, col: 64, offset: 13314},
								val:        ".",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 552, col: 68, offset: 13318},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "port",
			pos:  position{line: 554, col: 1, offset: 13367},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 13376},
				run: (*parser).callonport1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 13376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 555, col: 5, offset: 13376},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 555, col: 9, offset: 13380},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 11, offset: 13382},
								name: "suint",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6addr",
			pos:  position{line: 559, col: 1, offset: 13538},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 13550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 560, col: 5, offset: 13550},
						run: (*parser).callonip6addr2,
						expr: &seqExpr{
							pos: position{line: 560, col: 5, offset: 13550},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 560, col: 5, offset: 13550},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 560, col: 7, offset: 13552},
										expr: &ruleRefExpr{
											pos:  position{line: 560, col: 8, offset: 13553},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 560, col: 20, offset: 13565},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 560, col: 22, offset: 13567},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 13631},
						run: (*parser).callonip6addr9,
						expr: &seqExpr{
							pos: position{line: 563, col: 5, offset: 13631},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 563, col: 5, offset: 13631},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 563, col: 7, offset: 13633},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 563, col: 11, offset: 13637},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 563, col: 13, offset: 13639},
										expr: &ruleRefExpr{
											pos:  position{line: 563, col: 14, offset: 13640},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 563, col: 25, offset: 13651},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 563, col: 30, offset: 13656},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 563, col: 32, offset: 13658},
										expr: &ruleRefExpr{
											pos:  position{line: 563, col: 33, offset: 13659},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 563, col: 45, offset: 13671},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 563, col: 47, offset: 13673},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 13772},
						run: (*parser).callonip6addr22,
						expr: &seqExpr{
							pos: position{line: 566, col: 5, offset: 13772},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 566, col: 5, offset: 13772},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 566, col: 10, offset: 13777},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 566, col: 12, offset: 13779},
										expr: &ruleRefExpr{
											pos:  position{line: 566, col: 13, offset: 13780},
											name: "h_prepend",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 566, col: 25, offset: 13792},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 566, col: 27, offset: 13794},
										name: "ip6tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 569, col: 5, offset: 13865},
						run: (*parser).callonip6addr30,
						expr: &seqExpr{
							pos: position{line: 569, col: 5, offset: 13865},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 569, col: 5, offset: 13865},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 569, col: 7, offset: 13867},
										name: "h16",
									},
								},
								&labeledExpr{
									pos:   position{line: 569, col: 11, offset: 13871},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 569, col: 13, offset: 13873},
										expr: &ruleRefExpr{
											pos:  position{line: 569, col: 14, offset: 13874},
											name: "h_append",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 569, col: 25, offset: 13885},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 572, col: 5, offset: 13953},
						run: (*parser).callonip6addr38,
						expr: &litMatcher{
							pos:        position{line: 572, col: 5, offset: 13953},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ip6tail",
			pos:  position{line: 576, col: 1, offset: 13990},
			expr: &choiceExpr{
				pos: position{line: 577, col: 5, offset: 14002},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 577, col: 5, offset: 14002},
						name: "addr",
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 5, offset: 14011},
						name: "h16",
					},
				},
			},
		},
		{
			name: "h_append",
			pos:  position{line: 580, col: 1, offset: 14016},
			expr: &actionExpr{
				pos: position{line: 580, col: 12, offset: 14027},
				run: (*parser).callonh_append1,
				expr: &seqExpr{
					pos: position{line: 580, col: 12, offset: 14027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 580, col: 12, offset: 14027},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 580, col: 16, offset: 14031},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 18, offset: 14033},
								name: "h16",
							},
						},
					},
				},
			},
		},
		{
			name: "h_prepend",
			pos:  position{line: 581, col: 1, offset: 14070},
			expr: &actionExpr{
				pos: position{line: 581, col: 13, offset: 14082},
				run: (*parser).callonh_prepend1,
				expr: &seqExpr{
					pos: position{line: 581, col: 13, offset: 14082},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 13, offset: 14082},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 15, offset: 14084},
								name: "h16",
							},
						},
						&litMatcher{
							pos:        position{line: 581, col: 19, offset: 14088},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "sub_addr",
			pos:  position{line: 583, col: 1, offset: 14126},
			expr: &choiceExpr{
				pos: position{line: 584, col: 5, offset: 14139},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 584, col: 5, offset: 14139},
						name: "addr",
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 14148},
						run: (*parser).callonsub_addr3,
						expr: &labeledExpr{
							pos:   position{line: 585, col: 5, offset: 14148},
							label: "a",
							expr: &seqExpr{
								pos: position{line: 585, col: 8, offset: 14151},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 585, col: 8, offset: 14151},
										name: "unsignedInteger",
									},
									&litMatcher{
										pos:        position{line: 585, col: 24, offset: 14167},
										val:        ".",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 585, col: 28, offset: 14171},
										name: "unsignedInteger",
									},
									&litMatcher{
										pos:        position{line: 585, col: 44, offset: 14187},
										val:        ".",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 585, col: 48, offset: 14191},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 14251},
						run: (*parser).callonsub_addr11,
						expr: &labeledExpr{
							pos:   position{line: 586, col: 5, offset: 14251},
							label: "a",
							expr: &seqExpr{
								pos: position{line: 586, col: 8, offset: 14254},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 586, col: 8, offset: 14254},
										name: "unsignedInteger",
									},
									&litMatcher{
										pos:        position{line: 586, col: 24, offset: 14270},
										val:        ".",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 28, offset: 14274},
										name: "unsignedInteger",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 587, col: 5, offset: 14336},
						run: (*parser).callonsub_addr17,
						expr: &labeledExpr{
							pos:   position{line: 587, col: 5, offset: 14336},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 7, offset: 14338},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "subnet",
			pos:  position{line: 589, col: 1, offset: 14397},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 14408},
				run: (*parser).callonsubnet1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 14408},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 14408},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 7, offset: 14410},
								name: "sub_addr",
							},
						},
						&litMatcher{
							pos:        position{line: 590, col: 16, offset: 14419},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 590, col: 20, offset: 14423},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 22, offset: 14425},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "ip6subnet",
			pos:  position{line: 594, col: 1, offset: 14509},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 14523},
				run: (*parser).callonip6subnet1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 14523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 14523},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 7, offset: 14525},
								name: "ip6addr",
							},
						},
						&litMatcher{
							pos:        position{line: 595, col: 15, offset: 14533},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 595, col: 19, offset: 14537},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 21, offset: 14539},
								name: "unsignedInteger",
							},
						},
					},
				},
			},
		},
		{
			name: "unsignedInteger",
			pos:  position{line: 599, col: 1, offset: 14613},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 14633},
				run: (*parser).callonunsignedInteger1,
				expr: &labeledExpr{
					pos:   position{line: 600, col: 5, offset: 14633},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 600, col: 7, offset: 14635},
						name: "suint",
					},
				},
			},
		},
		{
			name: "suint",
			pos:  position{line: 602, col: 1, offset: 14670},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 14680},
				run: (*parser).callonsuint1,
				expr: &oneOrMoreExpr{
					pos: position{line: 603, col: 5, offset: 14680},
					expr: &charClassMatcher{
						pos:        position{line: 603, col: 5, offset: 14680},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "integer",
			pos:  position{line: 605, col: 1, offset: 14719},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 14731},
				run: (*parser).calloninteger1,
				expr: &labeledExpr{
					pos:   position{line: 606, col: 5, offset: 14731},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 606, col: 7, offset: 14733},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "sinteger",
			pos:  position{line: 608, col: 1, offset: 14771},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 14784},
				run: (*parser).callonsinteger1,
				expr: &seqExpr{
					pos: position{line: 609, col: 5, offset: 14784},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 609, col: 5, offset: 14784},
							expr: &charClassMatcher{
								pos:        position{line: 609, col: 5, offset: 14784},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 11, offset: 14790},
							name: "suint",
						},
					},
				},
			},
		},
		{
			name: "double",
			pos:  position{line: 611, col: 1, offset: 14828},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 14839},
				run: (*parser).callondouble1,
				expr: &labeledExpr{
					pos:   position{line: 612, col: 5, offset: 14839},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 612, col: 7, offset: 14841},
						name: "sdouble",
					},
				},
			},
		},
		{
			name: "sdouble",
			pos:  position{line: 616, col: 1, offset: 14888},
			expr: &choiceExpr{
				pos: position{line: 617, col: 5, offset: 14900},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 617, col: 5, offset: 14900},
						run: (*parser).callonsdouble2,
						expr: &seqExpr{
							pos: position{line: 617, col: 5, offset: 14900},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 617, col: 5, offset: 14900},
									expr: &litMatcher{
										pos:        position{line: 617, col: 5, offset: 14900},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 617, col: 10, offset: 14905},
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 10, offset: 14905},
										name: "doubleInteger",
									},
								},
								&litMatcher{
									pos:        position{line: 617, col: 25, offset: 14920},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 617, col: 29, offset: 14924},
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 29, offset: 14924},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 617, col: 42, offset: 14937},
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 42, offset: 14937},
										name: "exponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 620, col: 5, offset: 14996},
						run: (*parser).callonsdouble13,
						expr: &seqExpr{
							pos: position{line: 620, col: 5, offset: 14996},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 620, col: 5, offset: 14996},
									expr: &litMatcher{
										pos:        position{line: 620, col: 5, offset: 14996},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 620, col: 10, offset: 15001},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 620, col: 14, offset: 15005},
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 14, offset: 15005},
										name: "doubleDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 620, col: 27, offset: 15018},
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 27, offset: 15018},
										name: "exponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleInteger",
			pos:  position{line: 624, col: 1, offset: 15074},
			expr: &choiceExpr{
				pos: position{line: 625, col: 5, offset: 15092},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 625, col: 5, offset: 15092},
						val:        "0",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 626, col: 5, offset: 15100},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 626, col: 5, offset: 15100},
								val:        "[1-9]",
								ranges:     []rune{'1', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 626, col: 11, offset: 15106},
								expr: &charClassMatcher{
									pos:        position{line: 626, col: 11, offset: 15106},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleDigit",
			pos:  position{line: 628, col: 1, offset: 15114},
			expr: &charClassMatcher{
				pos:        position{line: 628, col: 15, offset: 15128},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "exponentPart",
			pos:  position{line: 630, col: 1, offset: 15135},
			expr: &seqExpr{
				pos: position{line: 630, col: 16, offset: 15150},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 630, col: 16, offset: 15150},
						val:        "e",
						ignoreCase: true,
					},
					&ruleRefExpr{
						pos:  position{line: 630, col: 21, offset: 15155},
						name: "sinteger",
					},
				},
			},
		},
		{
			name: "h16",
			pos:  position{line: 632, col: 1, offset: 15165},
			expr: &actionExpr{
				pos: position{line: 632, col: 7, offset: 15171},
				run: (*parser).callonh161,
				expr: &labeledExpr{
					pos:   position{line: 632, col: 7, offset: 15171},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 632, col: 13, offset: 15177},
						expr: &ruleRefExpr{
							pos:  position{line: 632, col: 13, offset: 15177},
							name: "hexdigit",
						},
					},
				},
			},
		},
		{
			name: "hexdigit",
			pos:  position{line: 634, col: 1, offset: 15219},
			expr: &charClassMatcher{
				pos:        position{line: 634, col: 12, offset: 15230},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "searchWord",
			pos:  position{line: 636, col: 1, offset: 15243},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 15258},
				run: (*parser).callonsearchWord1,
				expr: &labeledExpr{
					pos:   position{line: 637, col: 5, offset: 15258},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 637, col: 11, offset: 15264},
						expr: &ruleRefExpr{
							pos:  position{line: 637, col: 11, offset: 15264},
							name: "searchWordPart",
						},
					},
				},
			},
		},
		{
			name: "searchWordPart",
			pos:  position{line: 639, col: 1, offset: 15314},
			expr: &choiceExpr{
				pos: position{line: 640, col: 5, offset: 15333},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 15333},
						run: (*parser).callonsearchWordPart2,
						expr: &seqExpr{
							pos: position{line: 640, col: 5, offset: 15333},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 640, col: 5, offset: 15333},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 640, col: 10, offset: 15338},
									label: "s",
									expr: &choiceExpr{
										pos: position{line: 640, col: 13, offset: 15341},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 13, offset: 15341},
												name: "escapeSequence",
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 30, offset: 15358},
												name: "searchEscape",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 15395},
						run: (*parser).callonsearchWordPart9,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 15395},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 641, col: 5, offset: 15395},
									expr: &choiceExpr{
										pos: position{line: 641, col: 7, offset: 15397},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 641, col: 7, offset: 15397},
												val:        "[\\x00-\\x1F\\x5C(),!><=\\x22|\\x27;]",
												chars:      []rune{'\\', '(', ')', ',', '!', '>', '<', '=', '"', '|', '\'', ';'},
												ranges:     []rune{'\x00', '\x1f'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 641, col: 42, offset: 15432},
												name: "ws",
											},
										},
									},
								},
								&anyMatcher{
									line: 641, col: 46, offset: 15436,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "quotedString",
			pos:  position{line: 643, col: 1, offset: 15470},
			expr: &choiceExpr{
				pos: position{line: 644, col: 5, offset: 15487},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 15487},
						run: (*parser).callonquotedString2,
						expr: &seqExpr{
							pos: position{line: 644, col: 5, offset: 15487},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 644, col: 5, offset: 15487},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 644, col: 9, offset: 15491},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 644, col: 11, offset: 15493},
										expr: &ruleRefExpr{
											pos:  position{line: 644, col: 11, offset: 15493},
											name: "doubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 644, col: 29, offset: 15511},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 15548},
						run: (*parser).callonquotedString9,
						expr: &seqExpr{
							pos: position{line: 645, col: 5, offset: 15548},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 645, col: 5, offset: 15548},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 645, col: 9, offset: 15552},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 645, col: 11, offset: 15554},
										expr: &ruleRefExpr{
											pos:  position{line: 645, col: 11, offset: 15554},
											name: "singleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 645, col: 29, offset: 15572},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "doubleQuotedChar",
			pos:  position{line: 647, col: 1, offset: 15606},
			expr: &choiceExpr{
				pos: position{line: 648, col: 5, offset: 15627},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 15627},
						run: (*parser).callondoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 648, col: 5, offset: 15627},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 648, col: 5, offset: 15627},
									expr: &choiceExpr{
										pos: position{line: 648, col: 7, offset: 15629},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 648, col: 7, offset: 15629},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 648, col: 13, offset: 15635},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 648, col: 26, offset: 15648,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 15685},
						run: (*parser).callondoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 15685},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 649, col: 5, offset: 15685},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 649, col: 10, offset: 15690},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 12, offset: 15692},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "singleQuotedChar",
			pos:  position{line: 651, col: 1, offset: 15726},
			expr: &choiceExpr{
				pos: position{line: 652, col: 5, offset: 15747},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 652, col: 5, offset: 15747},
						run: (*parser).callonsingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 652, col: 5, offset: 15747},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 652, col: 5, offset: 15747},
									expr: &choiceExpr{
										pos: position{line: 652, col: 7, offset: 15749},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 652, col: 7, offset: 15749},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 652, col: 13, offset: 15755},
												name: "escapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 652, col: 26, offset: 15768,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 15805},
						run: (*parser).callonsingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 15805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 653, col: 5, offset: 15805},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 653, col: 10, offset: 15810},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 653, col: 12, offset: 15812},
										name: "escapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "escapeSequence",
			pos:  position{line: 655, col: 1, offset: 15846},
			expr: &choiceExpr{
				pos: position{line: 656, col: 5, offset: 15865},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 15865},
						run: (*parser).callonescapeSequence2,
						expr: &seqExpr{
							pos: position{line: 656, col: 5, offset: 15865},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 656, col: 5, offset: 15865},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 656, col: 9, offset: 15869},
									name: "hexdigit",
								},
								&ruleRefExpr{
									pos:  position{line: 656, col: 18, offset: 15878},
									name: "hexdigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 657, col: 5, offset: 15929},
						name: "singleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 658, col: 5, offset: 15950},
						name: "unicodeEscape",
					},
				},
			},
		},
		{
			name: "singleCharEscape",
			pos:  position{line: 660, col: 1, offset: 15965},
			expr: &choiceExpr{
				pos: position{line: 661, col: 5, offset: 15986},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 661, col: 5, offset: 15986},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 662, col: 5, offset: 15994},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 663, col: 5, offset: 16002},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 16011},
						run: (*parser).callonsingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 664, col: 5, offset: 16011},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 665, col: 5, offset: 16040},
						run: (*parser).callonsingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 665, col: 5, offset: 16040},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 16069},
						run: (*parser).callonsingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 666, col: 5, offset: 16069},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 667, col: 5, offset: 16098},
						run: (*parser).callonsingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 667, col: 5, offset: 16098},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 16127},
						run: (*parser).callonsingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 668, col: 5, offset: 16127},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 16156},
						run: (*parser).callonsingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 669, col: 5, offset: 16156},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "searchEscape",
			pos:  position{line: 671, col: 1, offset: 16182},
			expr: &choiceExpr{
				pos: position{line: 672, col: 5, offset: 16199},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 16199},
						run: (*parser).callonsearchEscape2,
						expr: &litMatcher{
							pos:        position{line: 672, col: 5, offset: 16199},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 16227},
						run: (*parser).callonsearchEscape4,
						expr: &litMatcher{
							pos:        position{line: 673, col: 5, offset: 16227},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "unicodeEscape",
			pos:  position{line: 675, col: 1, offset: 16254},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 16272},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 16272},
						run: (*parser).callonunicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 16272},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 676, col: 5, offset: 16272},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 676, col: 9, offset: 16276},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 676, col: 16, offset: 16283},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 676, col: 16, offset: 16283},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 676, col: 25, offset: 16292},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 676, col: 34, offset: 16301},
												name: "hexdigit",
											},
											&ruleRefExpr{
												pos:  position{line: 676, col: 43, offset: 16310},
												name: "hexdigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 679, col: 5, offset: 16373},
						run: (*parser).callonunicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 679, col: 5, offset: 16373},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 679, col: 5, offset: 16373},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 679, col: 9, offset: 16377},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 679, col: 13, offset: 16381},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 679, col: 20, offset: 16388},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 679, col: 20, offset: 16388},
												name: "hexdigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 679, col: 29, offset: 16397},
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 29, offset: 16397},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 679, col: 39, offset: 16407},
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 39, offset: 16407},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 679, col: 49, offset: 16417},
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 49, offset: 16417},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 679, col: 59, offset: 16427},
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 59, offset: 16427},
													name: "hexdigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 679, col: 69, offset: 16437},
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 69, offset: 16437},
													name: "hexdigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 679, col: 80, offset: 16448},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "reString",
			pos:  position{line: 683, col: 1, offset: 16502},
			expr: &actionExpr{
				pos: position{line: 684, col: 5, offset: 16515},
				run: (*parser).callonreString1,
				expr: &seqExpr{
					pos: position{line: 684, col: 5, offset: 16515},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 684, col: 5, offset: 16515},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 684, col: 9, offset: 16519},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 11, offset: 16521},
								name: "reBody",
							},
						},
						&litMatcher{
							pos:        position{line: 684, col: 18, offset: 16528},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "reBody",
			pos:  position{line: 686, col: 1, offset: 16551},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 16562},
				run: (*parser).callonreBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 687, col: 5, offset: 16562},
					expr: &choiceExpr{
						pos: position{line: 687, col: 6, offset: 16563},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 687, col: 6, offset: 16563},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 687, col: 13, offset: 16570},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "escapedChar",
			pos:  position{line: 689, col: 1, offset: 16610},
			expr: &charClassMatcher{
				pos:        position{line: 690, col: 5, offset: 16626},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "ws",
			pos:  position{line: 692, col: 1, offset: 16641},
			expr: &choiceExpr{
				pos: position{line: 693, col: 5, offset: 16648},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 693, col: 5, offset: 16648},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 694, col: 5, offset: 16657},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 695, col: 5, offset: 16666},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 696, col: 5, offset: 16675},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 697, col: 5, offset: 16683},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 698, col: 5, offset: 16696},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 700, col: 1, offset: 16706},
			expr: &oneOrMoreExpr{
				pos: position{line: 700, col: 18, offset: 16723},
				expr: &ruleRefExpr{
					pos:  position{line: 700, col: 18, offset: 16723},
					name: "ws",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 701, col: 1, offset: 16727},
			expr: &zeroOrMoreExpr{
				pos: position{line: 701, col: 6, offset: 16732},
				expr: &ruleRefExpr{
					pos:  position{line: 701, col: 6, offset: 16732},
					name: "ws",
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 703, col: 1, offset: 16737},
			expr: &notExpr{
				pos: position{line: 703, col: 7, offset: 16743},
				expr: &anyMatcher{
					line: 703, col: 8, offset: 16744,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onquery2(procs interface{}) (interface{}, error) {
	filt := makeFilterProc(makeMatchAll())
	return makeSequentialProc(append([]interface{}{filt}, (procs.([]interface{}))...)), nil

}

func (p *parser) callonquery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery2(stack["procs"])
}

func (c *current) onquery5(s, rest interface{}) (interface{}, error) {
	if len(rest.([]interface{})) == 0 {
		return s, nil
	} else {
		return makeSequentialProc(append([]interface{}{s}, (rest.([]interface{}))...)), nil
	}

}

func (p *parser) callonquery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery5(stack["s"], stack["rest"])
}

func (c *current) onquery14(s interface{}) (interface{}, error) {
	return makeSequentialProc([]interface{}{s}), nil

}

func (p *parser) callonquery14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquery14(stack["s"])
}

func (c *current) onprocChain1(first, rest interface{}) (interface{}, error) {
	if rest != nil {
		return append([]interface{}{first}, (rest.([]interface{}))...), nil
	} else {
		return []interface{}{first}, nil
	}

}

func (p *parser) callonprocChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocChain1(stack["first"], stack["rest"])
}

func (c *current) onchainedProc1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonchainedProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onchainedProc1(stack["p"])
}

func (c *current) onsearch1(expr interface{}) (interface{}, error) {
	return makeFilterProc(expr), nil

}

func (p *parser) callonsearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearch1(stack["expr"])
}

func (c *current) onsearchExpr1(first, rest interface{}) (interface{}, error) {
	return makeOrChain(first, rest), nil

}

func (p *parser) callonsearchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchExpr1(stack["first"], stack["rest"])
}

func (c *current) onoredSearchTerm1(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonoredSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onoredSearchTerm1(stack["t"])
}

func (c *current) onsearchTerm1(first, rest interface{}) (interface{}, error) {
	return makeAndChain(first, rest), nil

}

func (p *parser) callonsearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchTerm1(stack["first"], stack["rest"])
}

func (c *current) onandedSearchTerm1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonandedSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandedSearchTerm1(stack["f"])
}

func (c *current) onsearchFactor2(e interface{}) (interface{}, error) {
	return makeLogicalNot(e), nil

}

func (p *parser) callonsearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor2(stack["e"])
}

func (c *current) onsearchFactor14(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchFactor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor14(stack["s"])
}

func (c *current) onsearchFactor20(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonsearchFactor20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchFactor20(stack["expr"])
}

func (c *current) onsearchPred2(fieldComparator, v interface{}) (interface{}, error) {
	return makeCompareAny(fieldComparator, false, v), nil

}

func (p *parser) callonsearchPred2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred2(stack["fieldComparator"], stack["v"])
}

func (c *current) onsearchPred13(fieldComparator, v interface{}) (interface{}, error) {
	return makeCompareAny(fieldComparator, true, v), nil

}

func (p *parser) callonsearchPred13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred13(stack["fieldComparator"], stack["v"])
}

func (c *current) onsearchPred24(f, fieldComparator, v interface{}) (interface{}, error) {
	return makeCompareField(fieldComparator, f, v), nil

}

func (p *parser) callonsearchPred24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred24(stack["f"], stack["fieldComparator"], stack["v"])
}

func (c *current) onsearchPred36(v interface{}) (interface{}, error) {
	return makeCompareAny("in", false, v), nil

}

func (p *parser) callonsearchPred36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred36(stack["v"])
}

func (c *current) onsearchPred46(v, f interface{}) (interface{}, error) {
	return makeCompareField("in", f, v), nil

}

func (p *parser) callonsearchPred46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred46(stack["v"], stack["f"])
}

func (c *current) onsearchPred57(v interface{}) (interface{}, error) {
	return makeSearch(string(c.text), v, false), nil

}

func (p *parser) callonsearchPred57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred57(stack["v"])
}

func (c *current) onsearchPred60(v interface{}) (interface{}, error) {
	return makeSearch(string(c.text), makeLiteral("string", v), true), nil

}

func (p *parser) callonsearchPred60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchPred60(stack["v"])
}

func (c *current) onsearchLiteral8(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonsearchLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral8(stack["i"])
}

func (c *current) onsearchLiteral14(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral14(stack["v"])
}

func (c *current) onsearchLiteral22(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonsearchLiteral22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchLiteral22(stack["v"])
}

func (c *current) onsearchValue3(v interface{}) (interface{}, error) {
	return makeLiteral("string", v), nil

}

func (p *parser) callonsearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchValue3(stack["v"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("string", v), nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("regexp", v), nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onPortLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("port", v), nil

}

func (p *parser) callonPortLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPortLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return makeLiteral("net", v), nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral5(v interface{}) (interface{}, error) {
	return makeLiteral("net", v), nil

}

func (p *parser) callonSubnetLiteral5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral5(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return makeLiteral("ip", v), nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral5(v interface{}) (interface{}, error) {
	return makeLiteral("ip", v), nil

}

func (p *parser) callonAddressLiteral5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral5(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("float64", v), nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return makeLiteral("int64", v), nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return makeLiteral("bool", "true"), nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return makeLiteral("bool", "false"), nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return makeLiteral("null", ""), nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onprocList1(first, rest interface{}) (interface{}, error) {
	fp := makeSequentialProc(first)
	if rest != nil {
		return makeParallelProc(append([]interface{}{fp}, (rest.([]interface{}))...)), nil
	} else {
		return fp, nil
	}

}

func (p *parser) callonprocList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocList1(stack["first"], stack["rest"])
}

func (c *current) onparallelChain1(ch interface{}) (interface{}, error) {
	return makeSequentialProc(ch), nil
}

func (p *parser) callonparallelChain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparallelChain1(stack["ch"])
}

func (c *current) onproc4(proc interface{}) (interface{}, error) {
	return proc, nil

}

func (p *parser) callonproc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onproc4(stack["proc"])
}

func (c *current) ongroupBy1(list interface{}) (interface{}, error) {
	return list, nil
}

func (p *parser) callongroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ongroupBy1(stack["list"])
}

func (c *current) oneveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) calloneveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneveryDur1(stack["dur"])
}

func (c *current) onandToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonandToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onandToken1()
}

func (c *current) onorToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonorToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onorToken1()
}

func (c *current) oninToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) calloninToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninToken1()
}

func (c *current) onnotToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonnotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotToken1()
}

func (c *current) onfieldName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonfieldName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldName1()
}

func (c *current) onfieldReference8(field interface{}) (interface{}, error) {
	return makeFieldCall("RecordFieldRead", nil, field), nil
}

func (p *parser) callonfieldReference8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReference8(stack["field"])
}

func (c *current) onfieldReference13(index interface{}) (interface{}, error) {
	return makeFieldCall("Index", nil, index), nil
}

func (p *parser) callonfieldReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReference13(stack["index"])
}

func (c *current) onfieldReference1(base, derefs interface{}) (interface{}, error) {
	return chainFieldCalls(base, derefs), nil

}

func (p *parser) callonfieldReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReference1(stack["base"], stack["derefs"])
}

func (c *current) onfieldExpr2(op, field interface{}) (interface{}, error) {
	return makeFieldCall(op, field, nil), nil

}

func (p *parser) callonfieldExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExpr2(stack["op"], stack["field"])
}

func (c *current) onfieldOp1() (interface{}, error) {
	return "Len", nil
}

func (p *parser) callonfieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldOp1()
}

func (c *current) onfieldExprList1(first, rest interface{}) (interface{}, error) {
	result := []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonfieldExprList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldExprList1(stack["first"], stack["rest"])
}

func (c *current) onfieldRefDotOnly7(field interface{}) (interface{}, error) {
	return makeFieldCall("RecordFieldRead", nil, field), nil
}

func (p *parser) callonfieldRefDotOnly7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldRefDotOnly7(stack["field"])
}

func (c *current) onfieldRefDotOnly1(base, refs interface{}) (interface{}, error) {
	return chainFieldCalls(base, refs), nil

}

func (p *parser) callonfieldRefDotOnly1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldRefDotOnly1(stack["base"], stack["refs"])
}

func (c *current) onfieldRefDotOnlyList7(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonfieldRefDotOnlyList7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldRefDotOnlyList7(stack["ref"])
}

func (c *current) onfieldRefDotOnlyList1(first, rest interface{}) (interface{}, error) {
	result := []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r)
	}
	return result, nil

}

func (p *parser) callonfieldRefDotOnlyList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldRefDotOnlyList1(stack["first"], stack["rest"])
}

func (c *current) onfieldNameList1(first, rest interface{}) (interface{}, error) {
	result := []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonfieldNameList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldNameList1(stack["first"], stack["rest"])
}

func (c *current) oncountOp1() (interface{}, error) {
	return "Count", nil
}

func (p *parser) calloncountOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountOp1()
}

func (c *current) onfieldReducerOp2() (interface{}, error) {
	return "Sum", nil
}

func (p *parser) callonfieldReducerOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp2()
}

func (c *current) onfieldReducerOp4() (interface{}, error) {
	return "Avg", nil
}

func (p *parser) callonfieldReducerOp4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp4()
}

func (c *current) onfieldReducerOp6() (interface{}, error) {
	return "Stdev", nil
}

func (p *parser) callonfieldReducerOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp6()
}

func (c *current) onfieldReducerOp8() (interface{}, error) {
	return "Stdev", nil
}

func (p *parser) callonfieldReducerOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp8()
}

func (c *current) onfieldReducerOp10() (interface{}, error) {
	return "Var", nil
}

func (p *parser) callonfieldReducerOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp10()
}

func (c *current) onfieldReducerOp12() (interface{}, error) {
	return "Entropy", nil
}

func (p *parser) callonfieldReducerOp12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp12()
}

func (c *current) onfieldReducerOp14() (interface{}, error) {
	return "Min", nil
}

func (p *parser) callonfieldReducerOp14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp14()
}

func (c *current) onfieldReducerOp16() (interface{}, error) {
	return "Max", nil
}

func (p *parser) callonfieldReducerOp16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp16()
}

func (c *current) onfieldReducerOp18() (interface{}, error) {
	return "First", nil
}

func (p *parser) callonfieldReducerOp18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp18()
}

func (c *current) onfieldReducerOp20() (interface{}, error) {
	return "Last", nil
}

func (p *parser) callonfieldReducerOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp20()
}

func (c *current) onfieldReducerOp22() (interface{}, error) {
	return "CountDistinct", nil
}

func (p *parser) callonfieldReducerOp22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducerOp22()
}

func (c *current) onpaddedFieldExpr1(field interface{}) (interface{}, error) {
	return field, nil
}

func (p *parser) callonpaddedFieldExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpaddedFieldExpr1(stack["field"])
}

func (c *current) oncountReducer1(op, field interface{}) (interface{}, error) {
	return makeReducer(op, "count", field), nil

}

func (p *parser) calloncountReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncountReducer1(stack["op"], stack["field"])
}

func (c *current) onfieldReducer1(op, field interface{}) (interface{}, error) {
	return makeReducer(op, toLowerCase(op), field), nil

}

func (p *parser) callonfieldReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfieldReducer1(stack["op"], stack["field"])
}

func (c *current) onreducerProc1(every, reducers, keys, limit interface{}) (interface{}, error) {
	if OR(keys, every) != nil {
		if keys != nil {
			keys = keys.([]interface{})[1]
		} else {
			keys = []interface{}{}
		}

		if every != nil {
			every = every.([]interface{})[0]
		}

		return makeGroupByProc(every, limit, keys, reducers), nil
	}

	return makeReducerProc(reducers), nil

}

func (p *parser) callonreducerProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerProc1(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onasClause1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonasClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onasClause1(stack["v"])
}

func (c *current) onreducerExpr2(field, f interface{}) (interface{}, error) {
	return overrideReducerVar(f, field), nil

}

func (p *parser) callonreducerExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerExpr2(stack["field"], stack["f"])
}

func (c *current) onreducerExpr13(f, field interface{}) (interface{}, error) {
	return overrideReducerVar(f, field), nil

}

func (p *parser) callonreducerExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerExpr13(stack["f"], stack["field"])
}

func (c *current) onreducerList1(first, rest interface{}) (interface{}, error) {
	result := []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonreducerList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreducerList1(stack["first"], stack["rest"])
}

func (c *current) onsort8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonsort8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort8(stack["l"])
}

func (c *current) onsort1(args, list interface{}) (interface{}, error) {
	return makeSortProc(args, list)

}

func (p *parser) callonsort1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsort1(stack["args"], stack["list"])
}

func (c *current) onsortArgs2(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonsortArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArgs2(stack["a"])
}

func (c *current) onsortArg2(limit interface{}) (interface{}, error) {
	return makeArg("limit", limit), nil
}

func (p *parser) callonsortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg2(stack["limit"])
}

func (c *current) onsortArg8() (interface{}, error) {
	return makeArg("r", nil), nil
}

func (p *parser) callonsortArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg8()
}

func (c *current) onsortArg15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsortArg15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg15()
}

func (c *current) onsortArg10(where interface{}) (interface{}, error) {
	return makeArg("nulls", where), nil
}

func (p *parser) callonsortArg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsortArg10(stack["where"])
}

func (c *current) ontop6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callontop6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop6(stack["n"])
}

func (c *current) ontop18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callontop18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop18(stack["f"])
}

func (c *current) ontop1(limit, flush, list interface{}) (interface{}, error) {
	return makeTopProc(list, limit, flush), nil

}

func (p *parser) callontop1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontop1(stack["limit"], stack["flush"], stack["list"])
}

func (c *current) onprocLimitArg1(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonprocLimitArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onprocLimitArg1(stack["limit"])
}

func (c *current) oncut1(list interface{}) (interface{}, error) {
	return makeCutProc(list), nil
}

func (p *parser) calloncut1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncut1(stack["list"])
}

func (c *current) onhead2(count interface{}) (interface{}, error) {
	return makeHeadProc(count), nil
}

func (p *parser) callonhead2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead2(stack["count"])
}

func (c *current) onhead8() (interface{}, error) {
	return makeHeadProc(1), nil
}

func (p *parser) callonhead8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhead8()
}

func (c *current) ontail2(count interface{}) (interface{}, error) {
	return makeTailProc(count), nil
}

func (p *parser) callontail2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail2(stack["count"])
}

func (c *current) ontail8() (interface{}, error) {
	return makeTailProc(1), nil
}

func (p *parser) callontail8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontail8()
}

func (c *current) onfilter1(expr interface{}) (interface{}, error) {
	return makeFilterProc(expr), nil

}

func (p *parser) callonfilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfilter1(stack["expr"])
}

func (c *current) onuniq2() (interface{}, error) {
	return makeUniqProc(true), nil

}

func (p *parser) callonuniq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq2()
}

func (c *current) onuniq7() (interface{}, error) {
	return makeUniqProc(false), nil

}

func (p *parser) callonuniq7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuniq7()
}

func (c *current) onput1(f, e interface{}) (interface{}, error) {
	return makePutProc(f, e), nil

}

func (p *parser) callonput1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onput1(stack["f"], stack["e"])
}

func (c *current) onPrimaryExpression12(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimaryExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryExpression12(stack["expr"])
}

func (c *current) onFieldReference1(f interface{}) (interface{}, error) {
	return chainFieldCalls(f, []interface{}{}), nil

}

func (p *parser) callonFieldReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldReference1(stack["f"])
}

func (c *current) onConditionalExpression2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return makeConditionalExpr(condition, thenClause, elseClause), nil

}

func (p *parser) callonConditionalExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpression2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalORExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalORExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpression1(stack["first"], stack["rest"])
}

func (c *current) onLogicalANDExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalANDExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpression1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpression1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpression1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpression2(e interface{}) (interface{}, error) {
	return makeUnaryExpr("!", e), nil

}

func (p *parser) callonNotExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpression2(stack["e"])
}

func (c *current) onCallExpression2(fn, args interface{}) (interface{}, error) {
	return makeFunctionCall(fn, args), nil

}

func (p *parser) callonCallExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallExpression2(stack["fn"], stack["args"])
}

func (c *current) onFunctionName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFunctionName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionName1()
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDereferenceExpression20(field interface{}) (interface{}, error) {
	return makeLiteral("string", string(c.text)), nil
}

func (p *parser) callonDereferenceExpression20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDereferenceExpression20(stack["field"])
}

func (c *current) onDereferenceExpression1(base, derefs interface{}) (interface{}, error) {
	return makeBinaryExprChain(base, derefs), nil

}

func (p *parser) callonDereferenceExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDereferenceExpression1(stack["base"], stack["derefs"])
}

func (c *current) onseconds2() (interface{}, error) {
	return makeDuration(1), nil
}

func (p *parser) callonseconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds2()
}

func (c *current) onseconds4(num interface{}) (interface{}, error) {
	return makeDuration(num), nil
}

func (p *parser) callonseconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onseconds4(stack["num"])
}

func (c *current) onminutes2() (interface{}, error) {
	return makeDuration(60), nil
}

func (p *parser) callonminutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes2()
}

func (c *current) onminutes4(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 60), nil
}

func (p *parser) callonminutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onminutes4(stack["num"])
}

func (c *current) onhours2() (interface{}, error) {
	return makeDuration(3600), nil
}

func (p *parser) callonhours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours2()
}

func (c *current) onhours4(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 3600), nil
}

func (p *parser) callonhours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhours4(stack["num"])
}

func (c *current) ondays2() (interface{}, error) {
	return makeDuration(3600 * 24), nil
}

func (p *parser) callondays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays2()
}

func (c *current) ondays4(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 3600 * 24), nil
}

func (p *parser) callondays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondays4(stack["num"])
}

func (c *current) onweeks1(num interface{}) (interface{}, error) {
	return makeDuration(num.(int) * 3600 * 24 * 7), nil
}

func (p *parser) callonweeks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onweeks1(stack["num"])
}

func (c *current) onaddr1(a interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonaddr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onaddr1(stack["a"])
}

func (c *current) onport1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonport1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onport1(stack["v"])
}

func (c *current) onip6addr2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr2(stack["a"], stack["b"])
}

func (c *current) onip6addr9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonip6addr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onip6addr22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonip6addr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr22(stack["a"], stack["b"])
}

func (c *current) onip6addr30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonip6addr30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr30(stack["a"], stack["b"])
}

func (c *current) onip6addr38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonip6addr38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6addr38()
}

func (c *current) onh_append1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonh_append1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_append1(stack["v"])
}

func (c *current) onh_prepend1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonh_prepend1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh_prepend1(stack["v"])
}

func (c *current) onsub_addr3(a interface{}) (interface{}, error) {
	return string(c.text) + ".0", nil
}

func (p *parser) callonsub_addr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsub_addr3(stack["a"])
}

func (c *current) onsub_addr11(a interface{}) (interface{}, error) {
	return string(c.text) + ".0.0", nil
}

func (p *parser) callonsub_addr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsub_addr11(stack["a"])
}

func (c *current) onsub_addr17(a interface{}) (interface{}, error) {
	return string(c.text) + ".0.0.0", nil
}

func (p *parser) callonsub_addr17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsub_addr17(stack["a"])
}

func (c *current) onsubnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonsubnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsubnet1(stack["a"], stack["m"])
}

func (c *current) onip6subnet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonip6subnet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onip6subnet1(stack["a"], stack["m"])
}

func (c *current) onunsignedInteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonunsignedInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunsignedInteger1(stack["s"])
}

func (c *current) onsuint1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsuint1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuint1()
}

func (c *current) oninteger1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) calloninteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninteger1(stack["s"])
}

func (c *current) onsinteger1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsinteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsinteger1()
}

func (c *current) ondouble1(s interface{}) (interface{}, error) {
	return parseFloat(s), nil

}

func (p *parser) callondouble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondouble1(stack["s"])
}

func (c *current) onsdouble2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble2()
}

func (c *current) onsdouble13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonsdouble13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsdouble13()
}

func (c *current) onh161(chars interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonh161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onh161(stack["chars"])
}

func (c *current) onsearchWord1(chars interface{}) (interface{}, error) {
	return joinChars(chars), nil
}

func (p *parser) callonsearchWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWord1(stack["chars"])
}

func (c *current) onsearchWordPart2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsearchWordPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart2(stack["s"])
}

func (c *current) onsearchWordPart9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsearchWordPart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchWordPart9()
}

func (c *current) onquotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString2(stack["v"])
}

func (c *current) onquotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonquotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString9(stack["v"])
}

func (c *current) ondoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callondoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar2()
}

func (c *current) ondoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callondoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedChar9(stack["s"])
}

func (c *current) onsingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonsingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar2()
}

func (c *current) onsingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonsingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedChar9(stack["s"])
}

func (c *current) onescapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonescapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onescapeSequence2()
}

func (c *current) onsingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonsingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape5()
}

func (c *current) onsingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonsingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape7()
}

func (c *current) onsingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonsingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape9()
}

func (c *current) onsingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonsingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape11()
}

func (c *current) onsingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonsingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape13()
}

func (c *current) onsingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonsingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleCharEscape15()
}

func (c *current) onsearchEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonsearchEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape2()
}

func (c *current) onsearchEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonsearchEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsearchEscape4()
}

func (c *current) onunicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape2(stack["chars"])
}

func (c *current) onunicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonunicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onunicodeEscape11(stack["chars"])
}

func (c *current) onreString1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonreString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreString1(stack["v"])
}

func (c *current) onreBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonreBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
