// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 31},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 31},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 31},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 34},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 38},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 40},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 43},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 349},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 429},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 429},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 429},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 12, offset: 436},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 12, offset: 436},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 19, offset: 443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 22, offset: 446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 28, offset: 452},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 38, offset: 462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 43, offset: 467},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 43, offset: 467},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 741},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 24, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 24, col: 9, offset: 761},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 24, col: 9, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 9, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 14, offset: 766},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 26, col: 1, offset: 794},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 21, offset: 1445},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 25, offset: 1449},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 28, offset: 1452},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 30, offset: 1454},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1483},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1496},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1496},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1502},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1513},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1518},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1518},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1619},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1619},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1625},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1684},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1701},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1701},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1701},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1704},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1709},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1712},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1715},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1746},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1763},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1763},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1763},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1763},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1766},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1776},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1778},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1780},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1794},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1797},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1802},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1805},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1810},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1899},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1899},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1899},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1902},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1915},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1918},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1923},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1926},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1931},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2091},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2102},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2102},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2102},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2102},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2108},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2121},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2126},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2126},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2227},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2227},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2233},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2294},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2306},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2314},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2329},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 74, col: 1, offset: 2341},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2355},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2355},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2355},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 2363},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 16, offset: 2366},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 20, offset: 2370},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 23, offset: 2373},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 28, offset: 2378},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 31, offset: 2381},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2391},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 50, offset: 2400},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 53, offset: 2403},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2500},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2500},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2500},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 14, offset: 2509},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 17, offset: 2512},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 21, offset: 2516},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 24, offset: 2519},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 34, offset: 2529},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 41, offset: 2536},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 44, offset: 2539},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 2634},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2647},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2647},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2647},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2649},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 82, col: 16, offset: 2658},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 17, offset: 2659},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2689},
						run: (*parser).callonOperation31,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2689},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 83, col: 5, offset: 2689},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 7, offset: 2691},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 83, col: 19, offset: 2703},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 20, offset: 2704},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2735},
						run: (*parser).callonOperation37,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2735},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 10, offset: 2740},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 84, col: 24, offset: 2754},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 25, offset: 2755},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 88, col: 1, offset: 2846},
			expr: &seqExpr{
				pos: position{line: 88, col: 11, offset: 2856},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 11, offset: 2856},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 15, offset: 2860},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 88, col: 15, offset: 2860},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 21, offset: 2866},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 28, offset: 2873},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 34, offset: 2879},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 90, col: 1, offset: 2885},
			expr: &seqExpr{
				pos: position{line: 90, col: 13, offset: 2897},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 13, offset: 2897},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 90, col: 17, offset: 2901},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 90, col: 18, offset: 2902},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 90, col: 18, offset: 2902},
										expr: &litMatcher{
											pos:        position{line: 90, col: 19, offset: 2903},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2908},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 38, offset: 2922},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 57, offset: 2941},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 90, col: 82, offset: 2966},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 90, col: 88, offset: 2972},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 92, col: 1, offset: 2978},
			expr: &choiceExpr{
				pos: position{line: 92, col: 12, offset: 2989},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 92, col: 13, offset: 2990},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 13, offset: 2990},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 92, col: 16, offset: 2993},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 92, col: 16, offset: 2993},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 92, col: 26, offset: 3003},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 35, offset: 3012},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 92, col: 43, offset: 3020},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 43, offset: 3020},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 92, col: 46, offset: 3023},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 94, col: 1, offset: 3029},
			expr: &actionExpr{
				pos: position{line: 95, col: 5, offset: 3047},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 95, col: 5, offset: 3047},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 95, col: 5, offset: 3047},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 11, offset: 3053},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 21, offset: 3063},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 26, offset: 3068},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 26, offset: 3068},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 99, col: 1, offset: 3142},
			expr: &actionExpr{
				pos: position{line: 99, col: 16, offset: 3157},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 99, col: 16, offset: 3157},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 16, offset: 3157},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 18, offset: 3159},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 26, offset: 3167},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 28, offset: 3169},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 30, offset: 3171},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 101, col: 1, offset: 3221},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 3235},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 3235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 3235},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 3241},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3258},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 10, offset: 3263},
								expr: &actionExpr{
									pos: position{line: 103, col: 11, offset: 3264},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 103, col: 11, offset: 3264},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 103, col: 11, offset: 3264},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 103, col: 14, offset: 3267},
												expr: &seqExpr{
													pos: position{line: 103, col: 15, offset: 3268},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 103, col: 15, offset: 3268},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 103, col: 24, offset: 3277},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 103, col: 28, offset: 3281},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 103, col: 31, offset: 3284},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 103, col: 36, offset: 3289},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 107, col: 1, offset: 3405},
			expr: &choiceExpr{
				pos: position{line: 108, col: 5, offset: 3422},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3422},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3422},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 108, col: 6, offset: 3423},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 108, col: 6, offset: 3423},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 108, col: 6, offset: 3423},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 15, offset: 3432},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 108, col: 19, offset: 3436},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 19, offset: 3436},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 23, offset: 3440},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 27, offset: 3444},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 29, offset: 3446},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3558},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3571},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3586},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3586},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 113, col: 5, offset: 3586},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 9, offset: 3590},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 12, offset: 3593},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 17, offset: 3598},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 31, offset: 3612},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 113, col: 34, offset: 3615},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 115, col: 1, offset: 3641},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3654},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3654},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 5, offset: 3654},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 9, offset: 3658},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 12, offset: 3661},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 22, offset: 3671},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 36, offset: 3685},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 39, offset: 3688},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 41, offset: 3690},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4379},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4379},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4379},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 7, offset: 4381},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 12, offset: 4386},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 15, offset: 4389},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 20, offset: 4394},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 34, offset: 4408},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 37, offset: 4411},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 39, offset: 4413},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 143, col: 57, offset: 4431},
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 58, offset: 4432},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4546},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4546},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 5, offset: 4546},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 7, offset: 4548},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 19, offset: 4560},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 21, offset: 4562},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 29, offset: 4570},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 146, col: 31, offset: 4572},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5254},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5254},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 173, col: 5, offset: 5254},
									expr: &seqExpr{
										pos: position{line: 173, col: 7, offset: 5256},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 173, col: 7, offset: 5256},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 173, col: 19, offset: 5268},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 173, col: 24, offset: 5273},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 26, offset: 5275},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 173, col: 44, offset: 5293},
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 45, offset: 5294},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5411},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 5411},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 176, col: 5, offset: 5411},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 176, col: 9, offset: 5415},
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 10, offset: 5416},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 180, col: 1, offset: 5529},
			expr: &choiceExpr{
				pos: position{line: 181, col: 5, offset: 5545},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 181, col: 5, offset: 5545},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5557},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 182, col: 5, offset: 5557},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 7, offset: 5559},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 186, col: 1, offset: 5667},
			expr: &choiceExpr{
				pos: position{line: 187, col: 5, offset: 5689},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 5689},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 5701},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 188, col: 5, offset: 5701},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 7, offset: 5703},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 198, col: 1, offset: 5991},
			expr: &actionExpr{
				pos: position{line: 199, col: 5, offset: 6006},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 199, col: 5, offset: 6006},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 5, offset: 6006},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 10, offset: 6011},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 10, offset: 6011},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 20, offset: 6021},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 199, col: 25, offset: 6026},
								expr: &litMatcher{
									pos:        position{line: 199, col: 26, offset: 6027},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 203, col: 1, offset: 6094},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 6107},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6107},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 6107},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 204, col: 5, offset: 6107},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 7, offset: 6109},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 13, offset: 6115},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 15, offset: 6117},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6167},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 207, col: 1, offset: 6176},
			expr: &actionExpr{
				pos: position{line: 207, col: 9, offset: 6184},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 207, col: 9, offset: 6184},
					expr: &litMatcher{
						pos:        position{line: 207, col: 9, offset: 6184},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 209, col: 1, offset: 6221},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6237},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6237},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6250},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6262},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6275},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6287},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6299},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 5, offset: 6313},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 217, col: 5, offset: 6330},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 221, col: 1, offset: 6387},
			expr: &ruleRefExpr{
				pos:  position{line: 221, col: 14, offset: 6400},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 223, col: 1, offset: 6420},
			expr: &actionExpr{
				pos: position{line: 223, col: 14, offset: 6433},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 223, col: 15, offset: 6434},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 15, offset: 6434},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 21, offset: 6440},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 28, offset: 6447},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 35, offset: 6454},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 42, offset: 6461},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 48, offset: 6467},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 55, offset: 6474},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 225, col: 1, offset: 6511},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 6534},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 6534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6534},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 11, offset: 6540},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6558},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 10, offset: 6563},
								expr: &actionExpr{
									pos: position{line: 227, col: 11, offset: 6564},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 227, col: 11, offset: 6564},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 227, col: 11, offset: 6564},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 227, col: 14, offset: 6567},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 227, col: 17, offset: 6570},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 227, col: 28, offset: 6581},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 227, col: 31, offset: 6584},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 227, col: 36, offset: 6589},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 231, col: 1, offset: 6706},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 6724},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 6724},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6724},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 11, offset: 6730},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 6748},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 233, col: 10, offset: 6753},
								expr: &actionExpr{
									pos: position{line: 233, col: 11, offset: 6754},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 233, col: 11, offset: 6754},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 11, offset: 6754},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 14, offset: 6757},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 17, offset: 6760},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 233, col: 34, offset: 6777},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 37, offset: 6780},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 42, offset: 6785},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 237, col: 1, offset: 6902},
			expr: &actionExpr{
				pos: position{line: 238, col: 5, offset: 6920},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 238, col: 5, offset: 6920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 238, col: 5, offset: 6920},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 11, offset: 6926},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 5, offset: 6945},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 239, col: 10, offset: 6950},
								expr: &actionExpr{
									pos: position{line: 239, col: 11, offset: 6951},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 239, col: 11, offset: 6951},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 239, col: 11, offset: 6951},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 14, offset: 6954},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 17, offset: 6957},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 239, col: 40, offset: 6980},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 43, offset: 6983},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 48, offset: 6988},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 243, col: 1, offset: 7106},
			expr: &choiceExpr{
				pos: position{line: 244, col: 5, offset: 7125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 7125},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 244, col: 5, offset: 7125},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 244, col: 5, offset: 7125},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 7, offset: 7127},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 22, offset: 7142},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 244, col: 25, offset: 7145},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 29, offset: 7149},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 244, col: 32, offset: 7152},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 36, offset: 7156},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7258},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 249, col: 1, offset: 7274},
			expr: &choiceExpr{
				pos: position{line: 250, col: 5, offset: 7293},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7293},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7307},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 7323},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 252, col: 5, offset: 7323},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 252, col: 5, offset: 7323},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 252, col: 11, offset: 7329},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 252, col: 20, offset: 7338},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 252, col: 25, offset: 7343},
										expr: &ruleRefExpr{
											pos:  position{line: 252, col: 26, offset: 7344},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7416},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7428},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 260, col: 1, offset: 7465},
			expr: &choiceExpr{
				pos: position{line: 261, col: 5, offset: 7481},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7481},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 261, col: 5, offset: 7481},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 261, col: 5, offset: 7481},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 261, col: 15, offset: 7491},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 21, offset: 7497},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 261, col: 30, offset: 7506},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 35, offset: 7511},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 261, col: 47, offset: 7523},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 53, offset: 7529},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7674},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 7674},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 264, col: 5, offset: 7674},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 264, col: 15, offset: 7684},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 21, offset: 7690},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 30, offset: 7699},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 35, offset: 7704},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 50, offset: 7719},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 264, col: 55, offset: 7724},
										expr: &seqExpr{
											pos: position{line: 264, col: 56, offset: 7725},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 264, col: 56, offset: 7725},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 264, col: 58, offset: 7727},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 72, offset: 7741},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 78, offset: 7747},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 272, col: 1, offset: 7980},
			expr: &choiceExpr{
				pos: position{line: 272, col: 13, offset: 7992},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 272, col: 13, offset: 7992},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 272, col: 13, offset: 7992},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 272, col: 25, offset: 8004},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 272, col: 29, offset: 8008},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 274, col: 1, offset: 8012},
			expr: &choiceExpr{
				pos: position{line: 275, col: 5, offset: 8025},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 275, col: 5, offset: 8025},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 275, col: 5, offset: 8025},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 275, col: 5, offset: 8025},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 14, offset: 8034},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 275, col: 16, offset: 8036},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 275, col: 20, offset: 8040},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 29, offset: 8049},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 8075},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 276, col: 5, offset: 8075},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 278, col: 1, offset: 8100},
			expr: &actionExpr{
				pos: position{line: 279, col: 5, offset: 8116},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 279, col: 5, offset: 8116},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 279, col: 5, offset: 8116},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 13, offset: 8124},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 15, offset: 8126},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 23, offset: 8134},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 281, col: 1, offset: 8175},
			expr: &choiceExpr{
				pos: position{line: 282, col: 5, offset: 8188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 282, col: 5, offset: 8188},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 282, col: 5, offset: 8188},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 282, col: 5, offset: 8188},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 282, col: 7, offset: 8190},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 282, col: 14, offset: 8197},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 282, col: 16, offset: 8199},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 282, col: 25, offset: 8208},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 282, col: 27, offset: 8210},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 282, col: 33, offset: 8216},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 283, col: 5, offset: 8247},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 283, col: 5, offset: 8247},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 288, col: 1, offset: 8507},
			expr: &choiceExpr{
				pos: position{line: 289, col: 5, offset: 8526},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 8526},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 8541},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 290, col: 5, offset: 8541},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 10, offset: 8546},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 292, col: 1, offset: 8638},
			expr: &actionExpr{
				pos: position{line: 293, col: 5, offset: 8658},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 293, col: 5, offset: 8658},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 5, offset: 8658},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 11, offset: 8664},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 26, offset: 8679},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 293, col: 31, offset: 8684},
								expr: &actionExpr{
									pos: position{line: 293, col: 32, offset: 8685},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 293, col: 32, offset: 8685},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 293, col: 32, offset: 8685},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 293, col: 35, offset: 8688},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 293, col: 39, offset: 8692},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 293, col: 42, offset: 8695},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 293, col: 47, offset: 8700},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 297, col: 1, offset: 8822},
			expr: &choiceExpr{
				pos: position{line: 298, col: 5, offset: 8840},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 8840},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 8840},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 298, col: 5, offset: 8840},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 10, offset: 8845},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 15, offset: 8850},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 298, col: 18, offset: 8853},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 22, offset: 8857},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 298, col: 25, offset: 8860},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 29, offset: 8864},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 8968},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 301, col: 5, offset: 8968},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 9, offset: 8972},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 305, col: 1, offset: 9072},
			expr: &actionExpr{
				pos: position{line: 306, col: 5, offset: 9080},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 306, col: 5, offset: 9080},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 306, col: 5, offset: 9080},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 6, offset: 9081},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 16, offset: 9091},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 19, offset: 9094},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 27, offset: 9102},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 306, col: 30, offset: 9105},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 34, offset: 9109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 37, offset: 9112},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 42, offset: 9117},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 42, offset: 9117},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 49, offset: 9124},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 306, col: 52, offset: 9127},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 306, col: 56, offset: 9131},
							expr: &seqExpr{
								pos: position{line: 306, col: 58, offset: 9133},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 306, col: 58, offset: 9133},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 306, col: 61, offset: 9136},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 66, offset: 9141},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 72, offset: 9147},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 72, offset: 9147},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 314, col: 1, offset: 9337},
			expr: &choiceExpr{
				pos: position{line: 315, col: 5, offset: 9349},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 9349},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 9368},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 5, offset: 9381},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 319, col: 1, offset: 9390},
			expr: &actionExpr{
				pos: position{line: 319, col: 15, offset: 9404},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 319, col: 15, offset: 9404},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 319, col: 15, offset: 9404},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 319, col: 17, offset: 9406},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 25, offset: 9414},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 27, offset: 9416},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 32, offset: 9421},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 321, col: 1, offset: 9457},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 9476},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 9476},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 9476},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 9482},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 25, offset: 9496},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 30, offset: 9501},
								expr: &seqExpr{
									pos: position{line: 322, col: 31, offset: 9502},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 322, col: 31, offset: 9502},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 322, col: 34, offset: 9505},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 38, offset: 9509},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 41, offset: 9512},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 330, col: 1, offset: 9713},
			expr: &choiceExpr{
				pos: position{line: 331, col: 5, offset: 9726},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 5, offset: 9726},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 9739},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9751},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 9763},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 9776},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9789},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9802},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9815},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 9830},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 9843},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 9855},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 9870},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 9883},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 9897},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 9910},
						name: "TasteProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 347, col: 1, offset: 9921},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 9934},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 9934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 9934},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 348, col: 13, offset: 9942},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 18, offset: 9947},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 27, offset: 9956},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 348, col: 32, offset: 9961},
								expr: &actionExpr{
									pos: position{line: 348, col: 33, offset: 9962},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 348, col: 33, offset: 9962},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 348, col: 33, offset: 9962},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 348, col: 35, offset: 9964},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 348, col: 37, offset: 9966},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 362, col: 1, offset: 10381},
			expr: &actionExpr{
				pos: position{line: 362, col: 12, offset: 10392},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 362, col: 12, offset: 10392},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 362, col: 17, offset: 10397},
						expr: &actionExpr{
							pos: position{line: 362, col: 18, offset: 10398},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 362, col: 18, offset: 10398},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 362, col: 18, offset: 10398},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 362, col: 20, offset: 10400},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 362, col: 22, offset: 10402},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 364, col: 1, offset: 10458},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10470},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 365, col: 5, offset: 10470},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 10545},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 366, col: 5, offset: 10545},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 366, col: 5, offset: 10545},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 366, col: 14, offset: 10554},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 366, col: 16, offset: 10556},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 366, col: 23, offset: 10563},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 366, col: 24, offset: 10564},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 366, col: 24, offset: 10564},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 366, col: 34, offset: 10574},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 368, col: 1, offset: 10688},
			expr: &actionExpr{
				pos: position{line: 369, col: 5, offset: 10700},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 369, col: 5, offset: 10700},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 5, offset: 10700},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 369, col: 12, offset: 10707},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 18, offset: 10713},
								expr: &actionExpr{
									pos: position{line: 369, col: 19, offset: 10714},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 369, col: 19, offset: 10714},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 369, col: 19, offset: 10714},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 369, col: 21, offset: 10716},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 369, col: 23, offset: 10718},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 47, offset: 10742},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 53, offset: 10748},
								expr: &seqExpr{
									pos: position{line: 369, col: 54, offset: 10749},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 369, col: 54, offset: 10749},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 369, col: 56, offset: 10751},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 67, offset: 10762},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 74, offset: 10769},
								expr: &actionExpr{
									pos: position{line: 369, col: 75, offset: 10770},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 369, col: 75, offset: 10770},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 369, col: 75, offset: 10770},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 369, col: 77, offset: 10772},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 369, col: 79, offset: 10774},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 383, col: 1, offset: 11119},
			expr: &actionExpr{
				pos: position{line: 384, col: 5, offset: 11131},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 384, col: 5, offset: 11131},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 5, offset: 11131},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 384, col: 12, offset: 11138},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 14, offset: 11140},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 19, offset: 11145},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 388, col: 1, offset: 11240},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 11253},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 11253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 11253},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 13, offset: 11261},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 15, offset: 11263},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 20, offset: 11268},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 393, col: 1, offset: 11364},
			expr: &actionExpr{
				pos: position{line: 394, col: 5, offset: 11377},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 394, col: 5, offset: 11377},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 5, offset: 11377},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 13, offset: 11385},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 15, offset: 11387},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 20, offset: 11392},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 398, col: 1, offset: 11483},
			expr: &choiceExpr{
				pos: position{line: 399, col: 5, offset: 11496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 399, col: 5, offset: 11496},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 399, col: 5, offset: 11496},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 399, col: 5, offset: 11496},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 399, col: 13, offset: 11504},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 399, col: 15, offset: 11506},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 21, offset: 11512},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 11592},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 400, col: 5, offset: 11592},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 402, col: 1, offset: 11668},
			expr: &choiceExpr{
				pos: position{line: 403, col: 5, offset: 11681},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11681},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 403, col: 5, offset: 11681},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 403, col: 5, offset: 11681},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 403, col: 13, offset: 11689},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 403, col: 15, offset: 11691},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 21, offset: 11697},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 11777},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 404, col: 5, offset: 11777},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 406, col: 1, offset: 11853},
			expr: &actionExpr{
				pos: position{line: 407, col: 5, offset: 11868},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 407, col: 5, offset: 11868},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 407, col: 5, offset: 11868},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 407, col: 15, offset: 11878},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 407, col: 17, offset: 11880},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 20, offset: 11883},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 411, col: 1, offset: 11920},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 11931},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 412, col: 5, offset: 11931},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 412, col: 10, offset: 11936},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 416, col: 1, offset: 12032},
			expr: &choiceExpr{
				pos: position{line: 417, col: 5, offset: 12045},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12045},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 12045},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 417, col: 5, offset: 12045},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 13, offset: 12053},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 417, col: 15, offset: 12055},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 12144},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 420, col: 5, offset: 12144},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 424, col: 1, offset: 12234},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12246},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 425, col: 5, offset: 12246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 425, col: 5, offset: 12246},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 12, offset: 12253},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 14, offset: 12255},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 19, offset: 12260},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 429, col: 1, offset: 12355},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12370},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 430, col: 5, offset: 12370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 5, offset: 12370},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 15, offset: 12380},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 17, offset: 12382},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 23, offset: 12388},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 34, offset: 12399},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 39, offset: 12404},
								expr: &actionExpr{
									pos: position{line: 430, col: 40, offset: 12405},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 430, col: 40, offset: 12405},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 430, col: 40, offset: 12405},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 430, col: 43, offset: 12408},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 430, col: 47, offset: 12412},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 430, col: 50, offset: 12415},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 53, offset: 12418},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 438, col: 1, offset: 12825},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 12838},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 12838},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 5, offset: 12838},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 439, col: 13, offset: 12846},
							expr: &seqExpr{
								pos: position{line: 439, col: 15, offset: 12848},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 439, col: 15, offset: 12848},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 439, col: 18, offset: 12851},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 443, col: 1, offset: 12922},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 12936},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 444, col: 5, offset: 12936},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 448, col: 1, offset: 13012},
			expr: &choiceExpr{
				pos: position{line: 449, col: 5, offset: 13025},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 13025},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 13025},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 449, col: 5, offset: 13025},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 11, offset: 13031},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 21, offset: 13041},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 449, col: 29, offset: 13049},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 449, col: 31, offset: 13051},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 39, offset: 13059},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 449, col: 47, offset: 13067},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 449, col: 50, offset: 13070},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 449, col: 54, offset: 13074},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 449, col: 57, offset: 13077},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 66, offset: 13086},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 449, col: 74, offset: 13094},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 449, col: 82, offset: 13102},
										expr: &seqExpr{
											pos: position{line: 449, col: 83, offset: 13103},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 449, col: 83, offset: 13103},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 449, col: 85, offset: 13105},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 13371},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 456, col: 5, offset: 13371},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 456, col: 5, offset: 13371},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 11, offset: 13377},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 456, col: 22, offset: 13388},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 456, col: 30, offset: 13396},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 456, col: 32, offset: 13398},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 36, offset: 13402},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 456, col: 44, offset: 13410},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 456, col: 52, offset: 13418},
										expr: &seqExpr{
											pos: position{line: 456, col: 53, offset: 13419},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 456, col: 53, offset: 13419},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 456, col: 55, offset: 13421},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 464, col: 1, offset: 13675},
			expr: &choiceExpr{
				pos: position{line: 465, col: 5, offset: 13689},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13689},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 465, col: 5, offset: 13689},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 465, col: 5, offset: 13689},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 465, col: 14, offset: 13698},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 13728},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 466, col: 5, offset: 13728},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 466, col: 5, offset: 13728},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 466, col: 14, offset: 13737},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 13766},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 467, col: 5, offset: 13766},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 467, col: 5, offset: 13766},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 467, col: 14, offset: 13775},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 468, col: 5, offset: 13805},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 468, col: 5, offset: 13805},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 470, col: 1, offset: 13841},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 13853},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 471, col: 5, offset: 13853},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 13862},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 472, col: 5, offset: 13862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 472, col: 5, offset: 13862},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 472, col: 9, offset: 13866},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 472, col: 14, offset: 13871},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 472, col: 19, offset: 13876},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 474, col: 1, offset: 13902},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 13916},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 13916},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 475, col: 5, offset: 13916},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 475, col: 14, offset: 13925},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 16, offset: 13927},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 512, col: 1, offset: 15219},
			expr: &choiceExpr{
				pos: position{line: 513, col: 5, offset: 15233},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 15233},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 513, col: 5, offset: 15233},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 513, col: 5, offset: 15233},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 513, col: 7, offset: 15235},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 513, col: 12, offset: 15240},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 15269},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 514, col: 5, offset: 15269},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 516, col: 1, offset: 15327},
			expr: &ruleRefExpr{
				pos:  position{line: 516, col: 8, offset: 15334},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 518, col: 1, offset: 15345},
			expr: &ruleRefExpr{
				pos:  position{line: 518, col: 13, offset: 15357},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 520, col: 1, offset: 15363},
			expr: &actionExpr{
				pos: position{line: 521, col: 5, offset: 15378},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 521, col: 5, offset: 15378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 521, col: 5, offset: 15378},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 11, offset: 15384},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 21, offset: 15394},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 521, col: 26, offset: 15399},
								expr: &seqExpr{
									pos: position{line: 521, col: 27, offset: 15400},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 521, col: 27, offset: 15400},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 521, col: 30, offset: 15403},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 521, col: 34, offset: 15407},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 521, col: 37, offset: 15410},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 531, col: 1, offset: 15609},
			expr: &actionExpr{
				pos: position{line: 532, col: 5, offset: 15619},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 532, col: 5, offset: 15619},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 5, offset: 15619},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 15625},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 16, offset: 15630},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 532, col: 21, offset: 15635},
								expr: &seqExpr{
									pos: position{line: 532, col: 22, offset: 15636},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 532, col: 22, offset: 15636},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 532, col: 25, offset: 15639},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 532, col: 29, offset: 15643},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 532, col: 32, offset: 15646},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 542, col: 1, offset: 15840},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 15855},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 15855},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 5, offset: 15855},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 9, offset: 15859},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 14, offset: 15864},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 543, col: 17, offset: 15867},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 21, offset: 15871},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 24, offset: 15874},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 28, offset: 15878},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 545, col: 1, offset: 15969},
			expr: &ruleRefExpr{
				pos:  position{line: 545, col: 8, offset: 15976},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 547, col: 1, offset: 15993},
			expr: &choiceExpr{
				pos: position{line: 548, col: 5, offset: 16013},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 548, col: 5, offset: 16013},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 548, col: 5, offset: 16013},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 548, col: 5, offset: 16013},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 15, offset: 16023},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 29, offset: 16037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 548, col: 32, offset: 16040},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 36, offset: 16044},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 548, col: 39, offset: 16047},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 50, offset: 16058},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 55, offset: 16063},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 548, col: 58, offset: 16066},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 548, col: 62, offset: 16070},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 548, col: 65, offset: 16073},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 548, col: 76, offset: 16084},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 551, col: 5, offset: 16224},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 553, col: 1, offset: 16239},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16257},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 16257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16257},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 11, offset: 16263},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 16282},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 10, offset: 16287},
								expr: &actionExpr{
									pos: position{line: 555, col: 11, offset: 16288},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 555, col: 11, offset: 16288},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 555, col: 11, offset: 16288},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 14, offset: 16291},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 17, offset: 16294},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 555, col: 25, offset: 16302},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 28, offset: 16305},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 33, offset: 16310},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 559, col: 1, offset: 16428},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 16447},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 16447},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 16447},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 11, offset: 16453},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 5, offset: 16477},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 561, col: 10, offset: 16482},
								expr: &actionExpr{
									pos: position{line: 561, col: 11, offset: 16483},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 561, col: 11, offset: 16483},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 561, col: 11, offset: 16483},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 561, col: 14, offset: 16486},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 561, col: 17, offset: 16489},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 561, col: 26, offset: 16498},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 561, col: 29, offset: 16501},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 561, col: 34, offset: 16506},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 565, col: 1, offset: 16629},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16653},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16653},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 566, col: 5, offset: 16653},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 11, offset: 16659},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 567, col: 5, offset: 16676},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 567, col: 10, offset: 16681},
								expr: &actionExpr{
									pos: position{line: 567, col: 11, offset: 16682},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 567, col: 11, offset: 16682},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 567, col: 11, offset: 16682},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 567, col: 14, offset: 16685},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 567, col: 19, offset: 16690},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 567, col: 38, offset: 16709},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 567, col: 41, offset: 16712},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 567, col: 46, offset: 16717},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 571, col: 1, offset: 16835},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16856},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 572, col: 6, offset: 16857},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 572, col: 6, offset: 16857},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 572, col: 12, offset: 16863},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 574, col: 1, offset: 16901},
			expr: &choiceExpr{
				pos: position{line: 575, col: 5, offset: 16924},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 575, col: 5, offset: 16924},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 16945},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 576, col: 5, offset: 16945},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 578, col: 1, offset: 16982},
			expr: &actionExpr{
				pos: position{line: 579, col: 5, offset: 16999},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 579, col: 5, offset: 16999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 5, offset: 16999},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 17005},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 5, offset: 17022},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 580, col: 10, offset: 17027},
								expr: &actionExpr{
									pos: position{line: 580, col: 11, offset: 17028},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 580, col: 11, offset: 17028},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 580, col: 11, offset: 17028},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 580, col: 14, offset: 17031},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 580, col: 17, offset: 17034},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 580, col: 34, offset: 17051},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 580, col: 37, offset: 17054},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 580, col: 42, offset: 17059},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 584, col: 1, offset: 17175},
			expr: &actionExpr{
				pos: position{line: 584, col: 20, offset: 17194},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 584, col: 21, offset: 17195},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 584, col: 21, offset: 17195},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 584, col: 28, offset: 17202},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 584, col: 34, offset: 17208},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 584, col: 41, offset: 17215},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 586, col: 1, offset: 17252},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 17269},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 17269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 587, col: 5, offset: 17269},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 17275},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 17298},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 588, col: 10, offset: 17303},
								expr: &actionExpr{
									pos: position{line: 588, col: 11, offset: 17304},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 588, col: 11, offset: 17304},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 588, col: 11, offset: 17304},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 14, offset: 17307},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 17, offset: 17310},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 588, col: 34, offset: 17327},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 37, offset: 17330},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 42, offset: 17335},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 592, col: 1, offset: 17457},
			expr: &actionExpr{
				pos: position{line: 592, col: 20, offset: 17476},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 592, col: 21, offset: 17477},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 592, col: 21, offset: 17477},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 592, col: 27, offset: 17483},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 594, col: 1, offset: 17520},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 17543},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 17543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 17543},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 11, offset: 17549},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 5, offset: 17561},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 596, col: 10, offset: 17566},
								expr: &actionExpr{
									pos: position{line: 596, col: 11, offset: 17567},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 596, col: 11, offset: 17567},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 596, col: 11, offset: 17567},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 596, col: 14, offset: 17570},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 596, col: 17, offset: 17573},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 596, col: 40, offset: 17596},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 596, col: 43, offset: 17599},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 596, col: 48, offset: 17604},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 600, col: 1, offset: 17715},
			expr: &actionExpr{
				pos: position{line: 600, col: 26, offset: 17740},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 600, col: 27, offset: 17741},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 600, col: 27, offset: 17741},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 600, col: 33, offset: 17747},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 602, col: 1, offset: 17784},
			expr: &choiceExpr{
				pos: position{line: 603, col: 5, offset: 17796},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 603, col: 5, offset: 17796},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 603, col: 5, offset: 17796},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 603, col: 5, offset: 17796},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 603, col: 9, offset: 17800},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 603, col: 12, offset: 17803},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 603, col: 14, offset: 17805},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 606, col: 5, offset: 17914},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 608, col: 1, offset: 17924},
			expr: &choiceExpr{
				pos: position{line: 609, col: 5, offset: 17937},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 609, col: 5, offset: 17937},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 609, col: 5, offset: 17937},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 609, col: 5, offset: 17937},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 7, offset: 17939},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 16, offset: 17948},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 609, col: 19, offset: 17951},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 23, offset: 17955},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 609, col: 26, offset: 17958},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 30, offset: 17962},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 5, offset: 18064},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 614, col: 1, offset: 18074},
			expr: &choiceExpr{
				pos: position{line: 615, col: 5, offset: 18087},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 615, col: 5, offset: 18087},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 5, offset: 18102},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 5, offset: 18116},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 18132},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 618, col: 5, offset: 18132},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 618, col: 5, offset: 18132},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 11, offset: 18138},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 618, col: 20, offset: 18147},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 618, col: 25, offset: 18152},
										expr: &ruleRefExpr{
											pos:  position{line: 618, col: 26, offset: 18153},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 621, col: 5, offset: 18224},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 622, col: 5, offset: 18238},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 624, col: 1, offset: 18247},
			expr: &seqExpr{
				pos: position{line: 624, col: 13, offset: 18259},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 624, col: 13, offset: 18259},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 22, offset: 18268},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 624, col: 25, offset: 18271},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 626, col: 1, offset: 18276},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 18289},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 627, col: 5, offset: 18289},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 628, col: 5, offset: 18299},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 629, col: 5, offset: 18311},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 630, col: 5, offset: 18324},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 632, col: 1, offset: 18332},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18346},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18346},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 5, offset: 18346},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 13, offset: 18354},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 633, col: 16, offset: 18357},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 633, col: 20, offset: 18361},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 25, offset: 18366},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 633, col: 39, offset: 18380},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 635, col: 1, offset: 18406},
			expr: &actionExpr{
				pos: position{line: 636, col: 5, offset: 18421},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 636, col: 5, offset: 18421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 5, offset: 18421},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 14, offset: 18430},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 636, col: 17, offset: 18433},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 21, offset: 18437},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 24, offset: 18440},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 29, offset: 18445},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 42, offset: 18458},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 636, col: 45, offset: 18461},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 636, col: 49, offset: 18465},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 57, offset: 18473},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 644, col: 1, offset: 18871},
			expr: &choiceExpr{
				pos: position{line: 645, col: 5, offset: 18883},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 18883},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 645, col: 5, offset: 18883},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 645, col: 13, offset: 18891},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 13, offset: 18891},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 5, offset: 18927},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 646, col: 5, offset: 18927},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 648, col: 1, offset: 18951},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 18962},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 18962},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 649, col: 5, offset: 18962},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 649, col: 8, offset: 18965},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 12, offset: 18969},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 649, col: 15, offset: 18972},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 17, offset: 18974},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 651, col: 1, offset: 19002},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 19015},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 19015},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 652, col: 5, offset: 19015},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 19016},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 16, offset: 19026},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 19, offset: 19029},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 34, offset: 19044},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 652, col: 37, offset: 19047},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 41, offset: 19051},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 652, col: 44, offset: 19054},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 49, offset: 19059},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 62, offset: 19072},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 652, col: 65, offset: 19075},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 656, col: 1, offset: 19171},
			expr: &choiceExpr{
				pos: position{line: 657, col: 5, offset: 19188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 657, col: 5, offset: 19188},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 657, col: 5, offset: 19188},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 657, col: 5, offset: 19188},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 11, offset: 19194},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 657, col: 16, offset: 19199},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 657, col: 21, offset: 19204},
										expr: &actionExpr{
											pos: position{line: 657, col: 22, offset: 19205},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 657, col: 22, offset: 19205},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 657, col: 22, offset: 19205},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 657, col: 25, offset: 19208},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 657, col: 29, offset: 19212},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 657, col: 32, offset: 19215},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 657, col: 34, offset: 19217},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 660, col: 5, offset: 19329},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 660, col: 5, offset: 19329},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 662, col: 1, offset: 19365},
			expr: &choiceExpr{
				pos: position{line: 663, col: 5, offset: 19379},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 19379},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 663, col: 5, offset: 19379},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 663, col: 5, offset: 19379},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 19385},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 663, col: 17, offset: 19391},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 663, col: 22, offset: 19396},
										expr: &ruleRefExpr{
											pos:  position{line: 663, col: 23, offset: 19397},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 19468},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 666, col: 5, offset: 19468},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 666, col: 5, offset: 19468},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 19474},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 666, col: 22, offset: 19485},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 666, col: 27, offset: 19490},
										expr: &ruleRefExpr{
											pos:  position{line: 666, col: 28, offset: 19491},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 19562},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 669, col: 5, offset: 19562},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 673, col: 1, offset: 19631},
			expr: &choiceExpr{
				pos: position{line: 674, col: 5, offset: 19641},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19641},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 19641},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 674, col: 5, offset: 19641},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 674, col: 9, offset: 19645},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 674, col: 15, offset: 19651},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 19867},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 683, col: 5, offset: 19867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 683, col: 5, offset: 19867},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 683, col: 9, offset: 19871},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 683, col: 13, offset: 19875},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 18, offset: 19880},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 683, col: 23, offset: 19885},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 693, col: 1, offset: 20090},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20100},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 694, col: 5, offset: 20100},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 694, col: 5, offset: 20100},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 694, col: 5, offset: 20100},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 694, col: 9, offset: 20104},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 14, offset: 20109},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 27, offset: 20122},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 694, col: 30, offset: 20125},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 694, col: 34, offset: 20129},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 694, col: 37, offset: 20132},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 40, offset: 20135},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 694, col: 53, offset: 20148},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 20319},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 700, col: 5, offset: 20319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 700, col: 5, offset: 20319},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 700, col: 9, offset: 20323},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 700, col: 12, offset: 20326},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 700, col: 16, offset: 20330},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 700, col: 19, offset: 20333},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 700, col: 22, offset: 20336},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 700, col: 35, offset: 20349},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20520},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20520},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 706, col: 5, offset: 20520},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 706, col: 9, offset: 20524},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 14, offset: 20529},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 27, offset: 20542},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 30, offset: 20545},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 706, col: 34, offset: 20549},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 706, col: 37, offset: 20552},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20725},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20725},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 5, offset: 20725},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 712, col: 9, offset: 20729},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 14, offset: 20734},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 712, col: 19, offset: 20739},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20788},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 20788},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 713, col: 5, offset: 20788},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 713, col: 9, offset: 20792},
									expr: &litMatcher{
										pos:        position{line: 713, col: 11, offset: 20794},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 713, col: 16, offset: 20799},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 19, offset: 20802},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 715, col: 1, offset: 20853},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20865},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 716, col: 5, offset: 20865},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 20877},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 20877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 717, col: 5, offset: 20877},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 9, offset: 20881},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 717, col: 12, offset: 20884},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 17, offset: 20889},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 22, offset: 20894},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 25, offset: 20897},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 719, col: 1, offset: 20923},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 20935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 20935},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 5, offset: 20951},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 20969},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 20987},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 21005},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21024},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 21041},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 21060},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 728, col: 5, offset: 21079},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 730, col: 1, offset: 21092},
			expr: &actionExpr{
				pos: position{line: 731, col: 5, offset: 21110},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 731, col: 5, offset: 21110},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 731, col: 7, offset: 21112},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 737, col: 1, offset: 21264},
			expr: &actionExpr{
				pos: position{line: 738, col: 5, offset: 21282},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 738, col: 5, offset: 21282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 738, col: 5, offset: 21282},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 7, offset: 21284},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 738, col: 14, offset: 21291},
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 15, offset: 21292},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 742, col: 1, offset: 21405},
			expr: &choiceExpr{
				pos: position{line: 743, col: 5, offset: 21423},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21423},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 21423},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 743, col: 5, offset: 21423},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 7, offset: 21425},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 743, col: 14, offset: 21432},
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 15, offset: 21433},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21548},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 746, col: 5, offset: 21548},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 7, offset: 21550},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 750, col: 1, offset: 21654},
			expr: &choiceExpr{
				pos: position{line: 751, col: 5, offset: 21673},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21673},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 21673},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 751, col: 5, offset: 21673},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 7, offset: 21675},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 751, col: 11, offset: 21679},
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 12, offset: 21680},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 21794},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 754, col: 5, offset: 21794},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 7, offset: 21796},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 758, col: 1, offset: 21895},
			expr: &actionExpr{
				pos: position{line: 759, col: 5, offset: 21912},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 759, col: 5, offset: 21912},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 759, col: 7, offset: 21914},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 763, col: 1, offset: 22027},
			expr: &actionExpr{
				pos: position{line: 764, col: 5, offset: 22046},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 764, col: 5, offset: 22046},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 764, col: 7, offset: 22048},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 768, col: 1, offset: 22157},
			expr: &choiceExpr{
				pos: position{line: 769, col: 5, offset: 22176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22176},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 769, col: 5, offset: 22176},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22289},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 770, col: 5, offset: 22289},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 772, col: 1, offset: 22400},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 22416},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 773, col: 5, offset: 22416},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 775, col: 1, offset: 22522},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 22538},
				run: (*parser).callonTypeLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 776, col: 5, offset: 22538},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 776, col: 9, offset: 22542},
						name: "TypeExternal",
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 780, col: 1, offset: 22640},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 22653},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 781, col: 5, offset: 22653},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 782, col: 5, offset: 22670},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 784, col: 1, offset: 22685},
			expr: &choiceExpr{
				pos: position{line: 785, col: 5, offset: 22702},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 22702},
						run: (*parser).callonTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 22702},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 785, col: 5, offset: 22702},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 12, offset: 22709},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 785, col: 15, offset: 22712},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 19, offset: 22716},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 785, col: 22, offset: 22719},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 26, offset: 22723},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 31, offset: 22728},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 785, col: 34, offset: 22731},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 22758},
						run: (*parser).callonTypeExternal12,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 22758},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 786, col: 5, offset: 22758},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 12, offset: 22765},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 786, col: 15, offset: 22768},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 19, offset: 22772},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 786, col: 22, offset: 22775},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 26, offset: 22779},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 36, offset: 22789},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 786, col: 39, offset: 22792},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 787, col: 5, offset: 22820},
						name: "ComplexType",
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22836},
						run: (*parser).callonTypeExternal23,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 22836},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 788, col: 5, offset: 22836},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 9, offset: 22840},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 788, col: 31, offset: 22862},
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 32, offset: 22863},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 790, col: 1, offset: 22899},
			expr: &choiceExpr{
				pos: position{line: 791, col: 5, offset: 22908},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 791, col: 5, offset: 22908},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 792, col: 5, offset: 22926},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 794, col: 1, offset: 22939},
			expr: &choiceExpr{
				pos: position{line: 795, col: 5, offset: 22957},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 22957},
						run: (*parser).callonAmbiguousType2,
						expr: &litMatcher{
							pos:        position{line: 795, col: 5, offset: 22957},
							val:        "null",
							ignoreCase: false,
						},
					},
					&labeledExpr{
						pos:   position{line: 798, col: 5, offset: 23037},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 798, col: 10, offset: 23042},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 799, col: 5, offset: 23060},
						run: (*parser).callonAmbiguousType6,
						expr: &seqExpr{
							pos: position{line: 799, col: 5, offset: 23060},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 799, col: 5, offset: 23060},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 799, col: 10, offset: 23065},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 799, col: 25, offset: 23080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 799, col: 28, offset: 23083},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 799, col: 32, offset: 23087},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 799, col: 35, offset: 23090},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 799, col: 39, offset: 23094},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 799, col: 42, offset: 23097},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 799, col: 46, offset: 23101},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 799, col: 51, offset: 23106},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 799, col: 54, offset: 23109},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 802, col: 5, offset: 23210},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 802, col: 5, offset: 23210},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 10, offset: 23215},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 23317},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 805, col: 5, offset: 23317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 805, col: 5, offset: 23317},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 9, offset: 23321},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 805, col: 12, offset: 23324},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 14, offset: 23326},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 805, col: 25, offset: 23337},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 807, col: 1, offset: 23360},
			expr: &actionExpr{
				pos: position{line: 808, col: 5, offset: 23374},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 808, col: 5, offset: 23374},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 808, col: 11, offset: 23380},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 812, col: 1, offset: 23476},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 23489},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 813, col: 5, offset: 23489},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 813, col: 5, offset: 23489},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 23495},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 16, offset: 23500},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 813, col: 21, offset: 23505},
								expr: &ruleRefExpr{
									pos:  position{line: 813, col: 21, offset: 23505},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 817, col: 1, offset: 23599},
			expr: &actionExpr{
				pos: position{line: 817, col: 16, offset: 23614},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 817, col: 16, offset: 23614},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 817, col: 16, offset: 23614},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 817, col: 19, offset: 23617},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 817, col: 23, offset: 23621},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 817, col: 26, offset: 23624},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 30, offset: 23628},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 819, col: 1, offset: 23654},
			expr: &choiceExpr{
				pos: position{line: 820, col: 5, offset: 23670},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 23670},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 23670},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 820, col: 5, offset: 23670},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 9, offset: 23674},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 820, col: 12, offset: 23677},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 19, offset: 23684},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 33, offset: 23698},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 820, col: 36, offset: 23701},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 23796},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 23796},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 823, col: 5, offset: 23796},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 9, offset: 23800},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 823, col: 12, offset: 23803},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 16, offset: 23807},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 21, offset: 23812},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 823, col: 24, offset: 23815},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 23904},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 826, col: 5, offset: 23904},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 826, col: 5, offset: 23904},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 10, offset: 23909},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 826, col: 13, offset: 23912},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 826, col: 17, offset: 23916},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 22, offset: 23921},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 826, col: 25, offset: 23924},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 24012},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 829, col: 5, offset: 24012},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 829, col: 5, offset: 24012},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 10, offset: 24017},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 829, col: 13, offset: 24020},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 829, col: 21, offset: 24028},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 26, offset: 24033},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 829, col: 29, offset: 24036},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 33, offset: 24040},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 829, col: 36, offset: 24043},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 829, col: 44, offset: 24051},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 49, offset: 24056},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 829, col: 52, offset: 24059},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 833, col: 1, offset: 24173},
			expr: &choiceExpr{
				pos: position{line: 834, col: 5, offset: 24191},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 834, col: 5, offset: 24191},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 835, col: 5, offset: 24217},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 841, col: 1, offset: 24476},
			expr: &actionExpr{
				pos: position{line: 842, col: 5, offset: 24502},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 842, col: 9, offset: 24506},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 842, col: 9, offset: 24506},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 19, offset: 24516},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 30, offset: 24527},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 41, offset: 24538},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 9, offset: 24555},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 18, offset: 24564},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 28, offset: 24574},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 38, offset: 24584},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 9, offset: 24600},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 9, offset: 24618},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 18, offset: 24627},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 854, col: 1, offset: 25111},
			expr: &actionExpr{
				pos: position{line: 855, col: 5, offset: 25137},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 855, col: 9, offset: 25141},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 855, col: 9, offset: 25141},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 855, col: 22, offset: 25154},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 856, col: 9, offset: 25169},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 857, col: 9, offset: 25185},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 858, col: 9, offset: 25203},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 858, col: 16, offset: 25210},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 859, col: 9, offset: 25224},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 859, col: 18, offset: 25233},
							val:        "error",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 863, col: 1, offset: 25350},
			expr: &actionExpr{
				pos: position{line: 864, col: 5, offset: 25368},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 864, col: 5, offset: 25368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 864, col: 5, offset: 25368},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 11, offset: 25374},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 864, col: 21, offset: 25384},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 864, col: 26, offset: 25389},
								expr: &ruleRefExpr{
									pos:  position{line: 864, col: 26, offset: 25389},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 868, col: 1, offset: 25488},
			expr: &actionExpr{
				pos: position{line: 868, col: 21, offset: 25508},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 868, col: 21, offset: 25508},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 868, col: 21, offset: 25508},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 868, col: 24, offset: 25511},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 868, col: 28, offset: 25515},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 868, col: 31, offset: 25518},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 868, col: 35, offset: 25522},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 870, col: 1, offset: 25553},
			expr: &actionExpr{
				pos: position{line: 871, col: 5, offset: 25567},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 871, col: 5, offset: 25567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 871, col: 5, offset: 25567},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 10, offset: 25572},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 871, col: 25, offset: 25587},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 871, col: 28, offset: 25590},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 871, col: 32, offset: 25594},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 871, col: 35, offset: 25597},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 39, offset: 25601},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 875, col: 1, offset: 25683},
			expr: &choiceExpr{
				pos: position{line: 876, col: 5, offset: 25701},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 876, col: 5, offset: 25701},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 876, col: 24, offset: 25720},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 878, col: 1, offset: 25738},
			expr: &actionExpr{
				pos: position{line: 878, col: 12, offset: 25749},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 878, col: 12, offset: 25749},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 880, col: 1, offset: 25779},
			expr: &actionExpr{
				pos: position{line: 880, col: 11, offset: 25789},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 880, col: 11, offset: 25789},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 882, col: 1, offset: 25817},
			expr: &actionExpr{
				pos: position{line: 882, col: 11, offset: 25827},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 882, col: 11, offset: 25827},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 884, col: 1, offset: 25855},
			expr: &actionExpr{
				pos: position{line: 884, col: 12, offset: 25866},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 884, col: 12, offset: 25866},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 886, col: 1, offset: 25896},
			expr: &actionExpr{
				pos: position{line: 886, col: 11, offset: 25906},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 886, col: 11, offset: 25906},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 888, col: 1, offset: 25934},
			expr: &charClassMatcher{
				pos:        position{line: 888, col: 19, offset: 25952},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 890, col: 1, offset: 25964},
			expr: &choiceExpr{
				pos: position{line: 890, col: 18, offset: 25981},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 890, col: 18, offset: 25981},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 890, col: 36, offset: 25999},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 892, col: 1, offset: 26006},
			expr: &actionExpr{
				pos: position{line: 893, col: 5, offset: 26021},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 893, col: 5, offset: 26021},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 893, col: 8, offset: 26024},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 895, col: 1, offset: 26105},
			expr: &choiceExpr{
				pos: position{line: 896, col: 5, offset: 26124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 26124},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 26124},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 896, col: 5, offset: 26124},
									expr: &seqExpr{
										pos: position{line: 896, col: 7, offset: 26126},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 896, col: 7, offset: 26126},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 896, col: 15, offset: 26134},
												expr: &ruleRefExpr{
													pos:  position{line: 896, col: 16, offset: 26135},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 32, offset: 26151},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 896, col: 48, offset: 26167},
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 48, offset: 26167},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 26219},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 897, col: 5, offset: 26219},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 26258},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 898, col: 5, offset: 26258},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 898, col: 5, offset: 26258},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 898, col: 10, offset: 26263},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 898, col: 13, offset: 26266},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 26357},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 900, col: 5, offset: 26357},
							val:        "type",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 903, col: 1, offset: 26397},
			expr: &choiceExpr{
				pos: position{line: 904, col: 5, offset: 26409},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 904, col: 5, offset: 26409},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 5, offset: 26428},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 906, col: 5, offset: 26444},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 907, col: 5, offset: 26461},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 909, col: 1, offset: 26474},
			expr: &actionExpr{
				pos: position{line: 910, col: 5, offset: 26487},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 910, col: 5, offset: 26487},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 910, col: 5, offset: 26487},
							expr: &litMatcher{
								pos:        position{line: 910, col: 5, offset: 26487},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 910, col: 10, offset: 26492},
							expr: &seqExpr{
								pos: position{line: 910, col: 11, offset: 26493},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 910, col: 11, offset: 26493},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 910, col: 19, offset: 26501},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 914, col: 1, offset: 26627},
			expr: &seqExpr{
				pos: position{line: 914, col: 11, offset: 26637},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 914, col: 11, offset: 26637},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 914, col: 16, offset: 26642},
						expr: &seqExpr{
							pos: position{line: 914, col: 17, offset: 26643},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 914, col: 17, offset: 26643},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 914, col: 21, offset: 26647},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 916, col: 1, offset: 26655},
			expr: &choiceExpr{
				pos: position{line: 917, col: 5, offset: 26668},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 917, col: 5, offset: 26668},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 918, col: 5, offset: 26678},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 919, col: 5, offset: 26688},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 920, col: 5, offset: 26698},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 921, col: 5, offset: 26707},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 922, col: 5, offset: 26716},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 923, col: 5, offset: 26725},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 924, col: 5, offset: 26734},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 925, col: 5, offset: 26743},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 927, col: 1, offset: 26749},
			expr: &actionExpr{
				pos: position{line: 928, col: 5, offset: 26756},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 928, col: 5, offset: 26756},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 928, col: 5, offset: 26756},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 928, col: 10, offset: 26761},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 928, col: 14, offset: 26765},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 928, col: 19, offset: 26770},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 928, col: 23, offset: 26774},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 928, col: 28, offset: 26779},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 928, col: 32, offset: 26783},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 930, col: 1, offset: 26820},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 26828},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 26828},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 931, col: 5, offset: 26828},
							expr: &seqExpr{
								pos: position{line: 931, col: 8, offset: 26831},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 931, col: 8, offset: 26831},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 931, col: 12, offset: 26835},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 931, col: 16, offset: 26839},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 931, col: 20, offset: 26843},
										expr: &choiceExpr{
											pos: position{line: 931, col: 22, offset: 26845},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 931, col: 22, offset: 26845},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 931, col: 33, offset: 26856},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 931, col: 39, offset: 26862},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 41, offset: 26864},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 935, col: 1, offset: 27028},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 27046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 27046},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 27046},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 936, col: 5, offset: 27046},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 936, col: 7, offset: 27048},
										expr: &ruleRefExpr{
											pos:  position{line: 936, col: 7, offset: 27048},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 936, col: 17, offset: 27058},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 19, offset: 27060},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 27124},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 27124},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 939, col: 5, offset: 27124},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 7, offset: 27126},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 11, offset: 27130},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 939, col: 13, offset: 27132},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 13, offset: 27132},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 23, offset: 27142},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 939, col: 28, offset: 27147},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 939, col: 30, offset: 27149},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 30, offset: 27149},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 40, offset: 27159},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 42, offset: 27161},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 27260},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 27260},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 942, col: 5, offset: 27260},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 942, col: 10, offset: 27265},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 942, col: 12, offset: 27267},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 12, offset: 27267},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 942, col: 22, offset: 27277},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 24, offset: 27279},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 27350},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 945, col: 5, offset: 27350},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 945, col: 5, offset: 27350},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 7, offset: 27352},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 945, col: 11, offset: 27356},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 945, col: 13, offset: 27358},
										expr: &ruleRefExpr{
											pos:  position{line: 945, col: 13, offset: 27358},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 945, col: 23, offset: 27368},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 27436},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 948, col: 5, offset: 27436},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 952, col: 1, offset: 27473},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 27485},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 953, col: 5, offset: 27485},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 27492},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 956, col: 1, offset: 27497},
			expr: &actionExpr{
				pos: position{line: 956, col: 12, offset: 27508},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 956, col: 12, offset: 27508},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 956, col: 12, offset: 27508},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 956, col: 16, offset: 27512},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 956, col: 18, offset: 27514},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 958, col: 1, offset: 27552},
			expr: &actionExpr{
				pos: position{line: 958, col: 12, offset: 27563},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 958, col: 12, offset: 27563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 958, col: 12, offset: 27563},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 958, col: 14, offset: 27565},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 958, col: 18, offset: 27569},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 960, col: 1, offset: 27607},
			expr: &actionExpr{
				pos: position{line: 961, col: 5, offset: 27618},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 961, col: 5, offset: 27618},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 961, col: 5, offset: 27618},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 7, offset: 27620},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 961, col: 10, offset: 27623},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 961, col: 14, offset: 27627},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 16, offset: 27629},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 965, col: 1, offset: 27702},
			expr: &actionExpr{
				pos: position{line: 966, col: 5, offset: 27713},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 966, col: 5, offset: 27713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 966, col: 5, offset: 27713},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 7, offset: 27715},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 966, col: 11, offset: 27719},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 966, col: 15, offset: 27723},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 966, col: 17, offset: 27725},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 970, col: 1, offset: 27788},
			expr: &actionExpr{
				pos: position{line: 971, col: 4, offset: 27796},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 971, col: 4, offset: 27796},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 971, col: 6, offset: 27798},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 973, col: 1, offset: 27838},
			expr: &choiceExpr{
				pos: position{line: 974, col: 5, offset: 27852},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 974, col: 5, offset: 27852},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 5, offset: 27867},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 977, col: 1, offset: 27883},
			expr: &actionExpr{
				pos: position{line: 977, col: 14, offset: 27896},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 977, col: 14, offset: 27896},
					expr: &charClassMatcher{
						pos:        position{line: 977, col: 14, offset: 27896},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 979, col: 1, offset: 27935},
			expr: &actionExpr{
				pos: position{line: 980, col: 5, offset: 27954},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 980, col: 5, offset: 27954},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 980, col: 5, offset: 27954},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 980, col: 9, offset: 27958},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 982, col: 1, offset: 28001},
			expr: &choiceExpr{
				pos: position{line: 983, col: 5, offset: 28017},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 983, col: 5, offset: 28017},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 983, col: 5, offset: 28017},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 983, col: 5, offset: 28017},
									expr: &litMatcher{
										pos:        position{line: 983, col: 5, offset: 28017},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 983, col: 10, offset: 28022},
									expr: &charClassMatcher{
										pos:        position{line: 983, col: 10, offset: 28022},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 983, col: 17, offset: 28029},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 983, col: 21, offset: 28033},
									expr: &charClassMatcher{
										pos:        position{line: 983, col: 21, offset: 28033},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 983, col: 28, offset: 28040},
									expr: &ruleRefExpr{
										pos:  position{line: 983, col: 28, offset: 28040},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 28099},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 986, col: 5, offset: 28099},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 986, col: 5, offset: 28099},
									expr: &litMatcher{
										pos:        position{line: 986, col: 5, offset: 28099},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 986, col: 10, offset: 28104},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 986, col: 14, offset: 28108},
									expr: &charClassMatcher{
										pos:        position{line: 986, col: 14, offset: 28108},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 986, col: 21, offset: 28115},
									expr: &ruleRefExpr{
										pos:  position{line: 986, col: 21, offset: 28115},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 990, col: 1, offset: 28171},
			expr: &seqExpr{
				pos: position{line: 990, col: 16, offset: 28186},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 990, col: 16, offset: 28186},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 990, col: 21, offset: 28191},
						expr: &charClassMatcher{
							pos:        position{line: 990, col: 21, offset: 28191},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 27, offset: 28197},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 992, col: 1, offset: 28209},
			expr: &actionExpr{
				pos: position{line: 992, col: 7, offset: 28215},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 992, col: 7, offset: 28215},
					expr: &ruleRefExpr{
						pos:  position{line: 992, col: 7, offset: 28215},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 994, col: 1, offset: 28257},
			expr: &charClassMatcher{
				pos:        position{line: 994, col: 12, offset: 28268},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 997, col: 1, offset: 28282},
			expr: &choiceExpr{
				pos: position{line: 998, col: 5, offset: 28299},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 998, col: 5, offset: 28299},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 998, col: 5, offset: 28299},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 998, col: 5, offset: 28299},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 998, col: 9, offset: 28303},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 998, col: 11, offset: 28305},
										expr: &ruleRefExpr{
											pos:  position{line: 998, col: 11, offset: 28305},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 998, col: 29, offset: 28323},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 28360},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 999, col: 5, offset: 28360},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 999, col: 5, offset: 28360},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 999, col: 9, offset: 28364},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 999, col: 11, offset: 28366},
										expr: &ruleRefExpr{
											pos:  position{line: 999, col: 11, offset: 28366},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 999, col: 29, offset: 28384},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1001, col: 1, offset: 28418},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 5, offset: 28439},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 28439},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1002, col: 5, offset: 28439},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1002, col: 5, offset: 28439},
									expr: &choiceExpr{
										pos: position{line: 1002, col: 7, offset: 28441},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1002, col: 7, offset: 28441},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1002, col: 13, offset: 28447},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1002, col: 26, offset: 28460,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28497},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 28497},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1003, col: 5, offset: 28497},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1003, col: 10, offset: 28502},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 12, offset: 28504},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1005, col: 1, offset: 28538},
			expr: &actionExpr{
				pos: position{line: 1006, col: 5, offset: 28550},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1006, col: 5, offset: 28550},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1006, col: 5, offset: 28550},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1006, col: 10, offset: 28555},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1006, col: 23, offset: 28568},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1006, col: 28, offset: 28573},
								expr: &ruleRefExpr{
									pos:  position{line: 1006, col: 28, offset: 28573},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1008, col: 1, offset: 28635},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 5, offset: 28652},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1009, col: 5, offset: 28652},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 1009, col: 5, offset: 28652},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 5, offset: 28704},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1012, col: 1, offset: 28716},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 5, offset: 28732},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1013, col: 5, offset: 28732},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1014, col: 5, offset: 28749},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1016, col: 1, offset: 28756},
			expr: &actionExpr{
				pos: position{line: 1016, col: 14, offset: 28769},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 14, offset: 28769},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1016, col: 14, offset: 28769},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 19, offset: 28774},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1016, col: 22, offset: 28777},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1016, col: 22, offset: 28777},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1016, col: 38, offset: 28793},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1018, col: 1, offset: 28829},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 28850},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28850},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 28850},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1019, col: 5, offset: 28850},
									expr: &choiceExpr{
										pos: position{line: 1019, col: 7, offset: 28852},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1019, col: 7, offset: 28852},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1019, col: 13, offset: 28858},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1019, col: 26, offset: 28871,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 28908},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1020, col: 5, offset: 28908},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1020, col: 5, offset: 28908},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 10, offset: 28913},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 12, offset: 28915},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1022, col: 1, offset: 28949},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 5, offset: 28968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 28968},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1023, col: 5, offset: 28968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 5, offset: 28968},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1023, col: 9, offset: 28972},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1023, col: 18, offset: 28981},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 5, offset: 29032},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 29053},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1027, col: 1, offset: 29068},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 5, offset: 29089},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1028, col: 5, offset: 29089},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1029, col: 5, offset: 29097},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1030, col: 5, offset: 29106},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 29115},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 1031, col: 5, offset: 29115},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1032, col: 5, offset: 29144},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 1032, col: 5, offset: 29144},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1033, col: 5, offset: 29173},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 1033, col: 5, offset: 29173},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29202},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 1034, col: 5, offset: 29202},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 29231},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 1035, col: 5, offset: 29231},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 29260},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 1036, col: 5, offset: 29260},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1038, col: 1, offset: 29286},
			expr: &choiceExpr{
				pos: position{line: 1039, col: 5, offset: 29304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29304},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1039, col: 5, offset: 29304},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1040, col: 5, offset: 29332},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1040, col: 5, offset: 29332},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1041, col: 5, offset: 29362},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1043, col: 1, offset: 29368},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 5, offset: 29386},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1044, col: 5, offset: 29386},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1044, col: 5, offset: 29386},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1044, col: 5, offset: 29386},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1044, col: 9, offset: 29390},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1044, col: 16, offset: 29397},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1044, col: 16, offset: 29397},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1044, col: 25, offset: 29406},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1044, col: 34, offset: 29415},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1044, col: 43, offset: 29424},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1047, col: 5, offset: 29487},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1047, col: 5, offset: 29487},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1047, col: 5, offset: 29487},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1047, col: 9, offset: 29491},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1047, col: 13, offset: 29495},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1047, col: 20, offset: 29502},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1047, col: 20, offset: 29502},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1047, col: 29, offset: 29511},
												expr: &ruleRefExpr{
													pos:  position{line: 1047, col: 29, offset: 29511},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1047, col: 39, offset: 29521},
												expr: &ruleRefExpr{
													pos:  position{line: 1047, col: 39, offset: 29521},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1047, col: 49, offset: 29531},
												expr: &ruleRefExpr{
													pos:  position{line: 1047, col: 49, offset: 29531},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1047, col: 59, offset: 29541},
												expr: &ruleRefExpr{
													pos:  position{line: 1047, col: 59, offset: 29541},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1047, col: 69, offset: 29551},
												expr: &ruleRefExpr{
													pos:  position{line: 1047, col: 69, offset: 29551},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1047, col: 80, offset: 29562},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1051, col: 1, offset: 29616},
			expr: &actionExpr{
				pos: position{line: 1052, col: 5, offset: 29627},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1052, col: 5, offset: 29627},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1052, col: 5, offset: 29627},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 9, offset: 29631},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 14, offset: 29636},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1052, col: 25, offset: 29647},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1054, col: 1, offset: 29673},
			expr: &actionExpr{
				pos: position{line: 1055, col: 5, offset: 29688},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1055, col: 5, offset: 29688},
					expr: &choiceExpr{
						pos: position{line: 1055, col: 6, offset: 29689},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1055, col: 6, offset: 29689},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1055, col: 13, offset: 29696},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1057, col: 1, offset: 29736},
			expr: &charClassMatcher{
				pos:        position{line: 1058, col: 5, offset: 29752},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1060, col: 1, offset: 29767},
			expr: &oneOrMoreExpr{
				pos: position{line: 1060, col: 6, offset: 29772},
				expr: &ruleRefExpr{
					pos:  position{line: 1060, col: 6, offset: 29772},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1062, col: 1, offset: 29783},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1062, col: 6, offset: 29788},
				expr: &ruleRefExpr{
					pos:  position{line: 1062, col: 6, offset: 29788},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1064, col: 1, offset: 29799},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 5, offset: 29812},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1065, col: 5, offset: 29812},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 5, offset: 29827},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 5, offset: 29846},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1069, col: 1, offset: 29855},
			expr: &anyMatcher{
				line: 1070, col: 5, offset: 29875,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1072, col: 1, offset: 29878},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 5, offset: 29906},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1073, col: 5, offset: 29906},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1074, col: 5, offset: 29915},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1075, col: 5, offset: 29924},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1076, col: 5, offset: 29933},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1077, col: 5, offset: 29941},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1078, col: 5, offset: 29954},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1080, col: 1, offset: 29964},
			expr: &charClassMatcher{
				pos:        position{line: 1081, col: 5, offset: 29983},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1087, col: 1, offset: 30313},
			expr: &ruleRefExpr{
				pos:  position{line: 1090, col: 5, offset: 30384},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1092, col: 1, offset: 30403},
			expr: &seqExpr{
				pos: position{line: 1093, col: 5, offset: 30424},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1093, col: 5, offset: 30424},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1093, col: 10, offset: 30429},
						expr: &seqExpr{
							pos: position{line: 1093, col: 11, offset: 30430},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1093, col: 11, offset: 30430},
									expr: &litMatcher{
										pos:        position{line: 1093, col: 12, offset: 30431},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1093, col: 17, offset: 30436},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1093, col: 35, offset: 30454},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1095, col: 1, offset: 30460},
			expr: &seqExpr{
				pos: position{line: 1096, col: 5, offset: 30482},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1096, col: 5, offset: 30482},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1096, col: 10, offset: 30487},
						expr: &seqExpr{
							pos: position{line: 1096, col: 11, offset: 30488},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1096, col: 11, offset: 30488},
									expr: &ruleRefExpr{
										pos:  position{line: 1096, col: 12, offset: 30489},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1096, col: 27, offset: 30504},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1098, col: 1, offset: 30523},
			expr: &seqExpr{
				pos: position{line: 1098, col: 7, offset: 30529},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1098, col: 7, offset: 30529},
						expr: &ruleRefExpr{
							pos:  position{line: 1098, col: 7, offset: 30529},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 19, offset: 30541},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1100, col: 1, offset: 30557},
			expr: &choiceExpr{
				pos: position{line: 1100, col: 7, offset: 30563},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1100, col: 7, offset: 30563},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 30567},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1102, col: 1, offset: 30572},
			expr: &notExpr{
				pos: position{line: 1102, col: 7, offset: 30578},
				expr: &anyMatcher{
					line: 1102, col: 8, offset: 30579,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation25(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["f"])
}

func (c *current) onOperation31(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation31(stack["a"])
}

func (c *current) onOperation37(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation37(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["text"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "taste"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "Id", "name": "taste"}}}}}}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "regexp", "text": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal2(stack["typ"])
}

func (c *current) onTypeExternal12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal12(stack["typ"])
}

func (c *current) onTypeExternal23(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal23(stack["typ"])
}

func (c *current) onAmbiguousType2() (interface{}, error) {
	return map[string]interface{}{"kind": "TypeNull"}, nil

}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2()
}

func (c *current) onAmbiguousType6(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType6(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Id", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
