// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 31},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 31},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 31},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 34},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 38},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 40},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 43},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 349},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 429},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 429},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 429},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 12, offset: 436},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 12, offset: 436},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 19, offset: 443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 22, offset: 446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 28, offset: 452},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 38, offset: 462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 43, offset: 467},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 43, offset: 467},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 741},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 24, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 24, col: 9, offset: 761},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 24, col: 9, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 9, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 14, offset: 766},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 26, col: 1, offset: 794},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 21, offset: 1445},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 25, offset: 1449},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 28, offset: 1452},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 30, offset: 1454},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1483},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1496},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1496},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1502},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1513},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1518},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1518},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1619},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1619},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1625},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1684},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1701},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1701},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1701},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1704},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1709},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1712},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1715},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1746},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1763},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1763},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1763},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1763},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1766},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1776},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1778},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1780},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1794},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1797},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1802},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1805},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1810},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1899},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1899},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1899},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1902},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1915},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1918},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1923},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1926},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1931},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2091},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2102},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2102},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2102},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2102},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2108},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2121},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2126},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2126},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2227},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2227},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2233},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2294},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2306},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2314},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2329},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 74, col: 1, offset: 2341},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2355},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2355},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2355},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 2363},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 16, offset: 2366},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 20, offset: 2370},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 23, offset: 2373},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 28, offset: 2378},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 31, offset: 2381},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2391},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 50, offset: 2400},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 53, offset: 2403},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2500},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2500},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2500},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 14, offset: 2509},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 17, offset: 2512},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 21, offset: 2516},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 24, offset: 2519},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 34, offset: 2529},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 41, offset: 2536},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 44, offset: 2539},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 2634},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2647},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2647},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2647},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2649},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 82, col: 16, offset: 2658},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 17, offset: 2659},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2689},
						run: (*parser).callonOperation31,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2689},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 83, col: 5, offset: 2689},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 7, offset: 2691},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 83, col: 19, offset: 2703},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 20, offset: 2704},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2735},
						run: (*parser).callonOperation37,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2735},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 10, offset: 2740},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 84, col: 24, offset: 2754},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 25, offset: 2755},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 88, col: 1, offset: 2846},
			expr: &seqExpr{
				pos: position{line: 88, col: 11, offset: 2856},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 11, offset: 2856},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 15, offset: 2860},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 88, col: 15, offset: 2860},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 21, offset: 2866},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 28, offset: 2873},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 34, offset: 2879},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 90, col: 1, offset: 2885},
			expr: &seqExpr{
				pos: position{line: 90, col: 13, offset: 2897},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 13, offset: 2897},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 90, col: 17, offset: 2901},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 90, col: 18, offset: 2902},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 90, col: 18, offset: 2902},
										expr: &litMatcher{
											pos:        position{line: 90, col: 19, offset: 2903},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2908},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 38, offset: 2922},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 57, offset: 2941},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 90, col: 82, offset: 2966},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 90, col: 88, offset: 2972},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 92, col: 1, offset: 2978},
			expr: &choiceExpr{
				pos: position{line: 92, col: 12, offset: 2989},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 92, col: 13, offset: 2990},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 13, offset: 2990},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 92, col: 16, offset: 2993},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 92, col: 16, offset: 2993},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 92, col: 26, offset: 3003},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 35, offset: 3012},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 92, col: 43, offset: 3020},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 43, offset: 3020},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 92, col: 46, offset: 3023},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 94, col: 1, offset: 3029},
			expr: &actionExpr{
				pos: position{line: 95, col: 5, offset: 3047},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 95, col: 5, offset: 3047},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 95, col: 5, offset: 3047},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 11, offset: 3053},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 21, offset: 3063},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 26, offset: 3068},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 26, offset: 3068},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 99, col: 1, offset: 3142},
			expr: &actionExpr{
				pos: position{line: 99, col: 16, offset: 3157},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 99, col: 16, offset: 3157},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 16, offset: 3157},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 18, offset: 3159},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 26, offset: 3167},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 28, offset: 3169},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 30, offset: 3171},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 101, col: 1, offset: 3221},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 3235},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 3235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 3235},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 3241},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3258},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 10, offset: 3263},
								expr: &actionExpr{
									pos: position{line: 103, col: 11, offset: 3264},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 103, col: 11, offset: 3264},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 103, col: 11, offset: 3264},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 103, col: 14, offset: 3267},
												expr: &seqExpr{
													pos: position{line: 103, col: 15, offset: 3268},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 103, col: 15, offset: 3268},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 103, col: 24, offset: 3277},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 103, col: 28, offset: 3281},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 103, col: 31, offset: 3284},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 103, col: 36, offset: 3289},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 107, col: 1, offset: 3405},
			expr: &choiceExpr{
				pos: position{line: 108, col: 5, offset: 3422},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3422},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3422},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 108, col: 6, offset: 3423},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 108, col: 6, offset: 3423},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 108, col: 6, offset: 3423},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 15, offset: 3432},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 108, col: 19, offset: 3436},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 19, offset: 3436},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 23, offset: 3440},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 27, offset: 3444},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 29, offset: 3446},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3558},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3571},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3586},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3586},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 113, col: 5, offset: 3586},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 9, offset: 3590},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 12, offset: 3593},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 17, offset: 3598},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 31, offset: 3612},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 113, col: 34, offset: 3615},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 115, col: 1, offset: 3641},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3654},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3654},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 5, offset: 3654},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 9, offset: 3658},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 12, offset: 3661},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 22, offset: 3671},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 36, offset: 3685},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 39, offset: 3688},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 41, offset: 3690},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4379},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4379},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4379},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 11, offset: 4385},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 143, col: 24, offset: 4398},
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 25, offset: 4399},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 4435},
						run: (*parser).callonShortCut17,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 4435},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 144, col: 5, offset: 4435},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 7, offset: 4437},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 144, col: 12, offset: 4442},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 144, col: 15, offset: 4445},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 20, offset: 4450},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 144, col: 34, offset: 4464},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 144, col: 37, offset: 4467},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 39, offset: 4469},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 144, col: 51, offset: 4481},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 52, offset: 4482},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4596},
						run: (*parser).callonShortCut29,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 4596},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 147, col: 5, offset: 4596},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 7, offset: 4598},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 19, offset: 4610},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 21, offset: 4612},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 29, offset: 4620},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 147, col: 31, offset: 4622},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 5304},
						run: (*parser).callonShortCut37,
						expr: &seqExpr{
							pos: position{line: 174, col: 5, offset: 5304},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 174, col: 5, offset: 5304},
									expr: &seqExpr{
										pos: position{line: 174, col: 7, offset: 5306},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 174, col: 7, offset: 5306},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 174, col: 19, offset: 5318},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 174, col: 24, offset: 5323},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 31, offset: 5330},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 175, col: 5, offset: 5371},
						run: (*parser).callonShortCut45,
						expr: &seqExpr{
							pos: position{line: 175, col: 5, offset: 5371},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 175, col: 5, offset: 5371},
									expr: &seqExpr{
										pos: position{line: 175, col: 7, offset: 5373},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 175, col: 7, offset: 5373},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 175, col: 19, offset: 5385},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 175, col: 24, offset: 5390},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 26, offset: 5392},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 175, col: 38, offset: 5404},
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 39, offset: 5405},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5522},
						run: (*parser).callonShortCut55,
						expr: &seqExpr{
							pos: position{line: 178, col: 5, offset: 5522},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 178, col: 5, offset: 5522},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 178, col: 9, offset: 5526},
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 10, offset: 5527},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 182, col: 1, offset: 5640},
			expr: &choiceExpr{
				pos: position{line: 183, col: 5, offset: 5656},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 183, col: 5, offset: 5656},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 184, col: 5, offset: 5668},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 184, col: 5, offset: 5668},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 184, col: 5, offset: 5668},
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 6, offset: 5669},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 184, col: 13, offset: 5676},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 15, offset: 5678},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 188, col: 1, offset: 5786},
			expr: &actionExpr{
				pos: position{line: 189, col: 5, offset: 5804},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 189, col: 5, offset: 5804},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 189, col: 13, offset: 5812},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 193, col: 1, offset: 5914},
			expr: &choiceExpr{
				pos: position{line: 194, col: 5, offset: 5931},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5931},
						run: (*parser).callonPatternMatch2,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 5931},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 194, col: 5, offset: 5931},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 7, offset: 5933},
										name: "Lval",
									},
								},
								&choiceExpr{
									pos: position{line: 194, col: 13, offset: 5939},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 194, col: 14, offset: 5940},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 194, col: 14, offset: 5940},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 194, col: 17, offset: 5943},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 194, col: 21, offset: 5947},
													name: "__",
												},
											},
										},
										&seqExpr{
											pos: position{line: 194, col: 28, offset: 5954},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 194, col: 28, offset: 5954},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 194, col: 30, offset: 5956},
													val:        "in",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 194, col: 35, offset: 5961},
													name: "_",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 40, offset: 5966},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 48, offset: 5974},
										name: "Pattern",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 6089},
						run: (*parser).callonPatternMatch17,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 6089},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 197, col: 5, offset: 6089},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 7, offset: 6091},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 12, offset: 6096},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 197, col: 15, offset: 6099},
									val:        "!=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 20, offset: 6104},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 197, col: 24, offset: 6108},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 32, offset: 6116},
										name: "Pattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 204, col: 1, offset: 6325},
			expr: &choiceExpr{
				pos: position{line: 204, col: 11, offset: 6335},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 204, col: 11, offset: 6335},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 20, offset: 6344},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 206, col: 1, offset: 6350},
			expr: &choiceExpr{
				pos: position{line: 207, col: 5, offset: 6366},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6366},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6388},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 5, offset: 6401},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6413},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6426},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6438},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6450},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6464},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 215, col: 5, offset: 6481},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 219, col: 1, offset: 6538},
			expr: &ruleRefExpr{
				pos:  position{line: 219, col: 14, offset: 6551},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 221, col: 1, offset: 6571},
			expr: &actionExpr{
				pos: position{line: 221, col: 14, offset: 6584},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 221, col: 15, offset: 6585},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 15, offset: 6585},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 221, col: 21, offset: 6591},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 221, col: 28, offset: 6598},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 221, col: 35, offset: 6605},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 221, col: 42, offset: 6612},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 221, col: 48, offset: 6618},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 221, col: 55, offset: 6625},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 223, col: 1, offset: 6662},
			expr: &actionExpr{
				pos: position{line: 224, col: 5, offset: 6685},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 224, col: 5, offset: 6685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 224, col: 5, offset: 6685},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 11, offset: 6691},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 5, offset: 6709},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 225, col: 10, offset: 6714},
								expr: &actionExpr{
									pos: position{line: 225, col: 11, offset: 6715},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 225, col: 11, offset: 6715},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 225, col: 11, offset: 6715},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 225, col: 14, offset: 6718},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 225, col: 17, offset: 6721},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 225, col: 28, offset: 6732},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 225, col: 31, offset: 6735},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 225, col: 36, offset: 6740},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 229, col: 1, offset: 6857},
			expr: &actionExpr{
				pos: position{line: 230, col: 5, offset: 6875},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 230, col: 5, offset: 6875},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 230, col: 5, offset: 6875},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 11, offset: 6881},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 5, offset: 6899},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 231, col: 10, offset: 6904},
								expr: &actionExpr{
									pos: position{line: 231, col: 11, offset: 6905},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 231, col: 11, offset: 6905},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 231, col: 11, offset: 6905},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 231, col: 14, offset: 6908},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 231, col: 17, offset: 6911},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 231, col: 34, offset: 6928},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 231, col: 37, offset: 6931},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 231, col: 42, offset: 6936},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 235, col: 1, offset: 7053},
			expr: &actionExpr{
				pos: position{line: 236, col: 5, offset: 7071},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 236, col: 5, offset: 7071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 236, col: 5, offset: 7071},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 11, offset: 7077},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 7096},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 10, offset: 7101},
								expr: &actionExpr{
									pos: position{line: 237, col: 11, offset: 7102},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 237, col: 11, offset: 7102},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 237, col: 11, offset: 7102},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 237, col: 14, offset: 7105},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 237, col: 17, offset: 7108},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 237, col: 40, offset: 7131},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 237, col: 43, offset: 7134},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 237, col: 48, offset: 7139},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 241, col: 1, offset: 7257},
			expr: &choiceExpr{
				pos: position{line: 242, col: 5, offset: 7276},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 242, col: 5, offset: 7276},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 242, col: 5, offset: 7276},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 242, col: 5, offset: 7276},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 242, col: 7, offset: 7278},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 242, col: 22, offset: 7293},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 242, col: 25, offset: 7296},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 242, col: 29, offset: 7300},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 242, col: 32, offset: 7303},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 242, col: 36, offset: 7307},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7409},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 247, col: 1, offset: 7425},
			expr: &choiceExpr{
				pos: position{line: 248, col: 5, offset: 7444},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7444},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7458},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 7474},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 250, col: 5, offset: 7474},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 250, col: 5, offset: 7474},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 250, col: 11, offset: 7480},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 250, col: 20, offset: 7489},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 250, col: 25, offset: 7494},
										expr: &ruleRefExpr{
											pos:  position{line: 250, col: 26, offset: 7495},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7567},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7579},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 258, col: 1, offset: 7616},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 7632},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 7632},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 259, col: 5, offset: 7632},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 259, col: 5, offset: 7632},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 259, col: 15, offset: 7642},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 21, offset: 7648},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 259, col: 30, offset: 7657},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 35, offset: 7662},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 259, col: 47, offset: 7674},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 53, offset: 7680},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 7825},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 7825},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 262, col: 5, offset: 7825},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 262, col: 15, offset: 7835},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 21, offset: 7841},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 262, col: 30, offset: 7850},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 35, offset: 7855},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 262, col: 50, offset: 7870},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 262, col: 55, offset: 7875},
										expr: &seqExpr{
											pos: position{line: 262, col: 56, offset: 7876},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 262, col: 56, offset: 7876},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 262, col: 58, offset: 7878},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 262, col: 72, offset: 7892},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 78, offset: 7898},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 270, col: 1, offset: 8131},
			expr: &choiceExpr{
				pos: position{line: 270, col: 13, offset: 8143},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 270, col: 13, offset: 8143},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 270, col: 13, offset: 8143},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 270, col: 25, offset: 8155},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 270, col: 29, offset: 8159},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 272, col: 1, offset: 8163},
			expr: &choiceExpr{
				pos: position{line: 273, col: 5, offset: 8176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 273, col: 5, offset: 8176},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 273, col: 5, offset: 8176},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 273, col: 5, offset: 8176},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 273, col: 14, offset: 8185},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 273, col: 16, offset: 8187},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 273, col: 20, offset: 8191},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 273, col: 29, offset: 8200},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 274, col: 5, offset: 8226},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 274, col: 5, offset: 8226},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 276, col: 1, offset: 8251},
			expr: &actionExpr{
				pos: position{line: 277, col: 5, offset: 8267},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 277, col: 5, offset: 8267},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 277, col: 5, offset: 8267},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 277, col: 13, offset: 8275},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 15, offset: 8277},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 23, offset: 8285},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 279, col: 1, offset: 8326},
			expr: &choiceExpr{
				pos: position{line: 280, col: 5, offset: 8339},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 280, col: 5, offset: 8339},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 280, col: 5, offset: 8339},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 280, col: 5, offset: 8339},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 280, col: 7, offset: 8341},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 280, col: 14, offset: 8348},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 280, col: 16, offset: 8350},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 280, col: 25, offset: 8359},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 280, col: 27, offset: 8361},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 280, col: 33, offset: 8367},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 281, col: 5, offset: 8398},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 281, col: 5, offset: 8398},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 286, col: 1, offset: 8658},
			expr: &choiceExpr{
				pos: position{line: 287, col: 5, offset: 8677},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 8677},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 288, col: 5, offset: 8692},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 288, col: 5, offset: 8692},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 10, offset: 8697},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 290, col: 1, offset: 8789},
			expr: &actionExpr{
				pos: position{line: 291, col: 5, offset: 8809},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 291, col: 5, offset: 8809},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 291, col: 5, offset: 8809},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 11, offset: 8815},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 26, offset: 8830},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 291, col: 31, offset: 8835},
								expr: &actionExpr{
									pos: position{line: 291, col: 32, offset: 8836},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 291, col: 32, offset: 8836},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 291, col: 32, offset: 8836},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 291, col: 35, offset: 8839},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 291, col: 39, offset: 8843},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 291, col: 42, offset: 8846},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 291, col: 47, offset: 8851},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 295, col: 1, offset: 8973},
			expr: &choiceExpr{
				pos: position{line: 296, col: 5, offset: 8991},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 8991},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 296, col: 5, offset: 8991},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 296, col: 5, offset: 8991},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 10, offset: 8996},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 296, col: 15, offset: 9001},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 296, col: 18, offset: 9004},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 296, col: 22, offset: 9008},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 296, col: 25, offset: 9011},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 29, offset: 9015},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 9119},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 299, col: 5, offset: 9119},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 9, offset: 9123},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 303, col: 1, offset: 9223},
			expr: &actionExpr{
				pos: position{line: 304, col: 5, offset: 9231},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 304, col: 5, offset: 9231},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 304, col: 5, offset: 9231},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 6, offset: 9232},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 16, offset: 9242},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 19, offset: 9245},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 27, offset: 9253},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 304, col: 30, offset: 9256},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 34, offset: 9260},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 304, col: 37, offset: 9263},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 42, offset: 9268},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 42, offset: 9268},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 49, offset: 9275},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 304, col: 52, offset: 9278},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 304, col: 56, offset: 9282},
							expr: &seqExpr{
								pos: position{line: 304, col: 58, offset: 9284},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 304, col: 58, offset: 9284},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 304, col: 61, offset: 9287},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 66, offset: 9292},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 72, offset: 9298},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 72, offset: 9298},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 312, col: 1, offset: 9488},
			expr: &choiceExpr{
				pos: position{line: 313, col: 5, offset: 9500},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 313, col: 5, offset: 9500},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 314, col: 5, offset: 9519},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 9532},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 317, col: 1, offset: 9541},
			expr: &actionExpr{
				pos: position{line: 317, col: 15, offset: 9555},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 317, col: 15, offset: 9555},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 317, col: 15, offset: 9555},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 317, col: 17, offset: 9557},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 25, offset: 9565},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 27, offset: 9567},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 32, offset: 9572},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 319, col: 1, offset: 9608},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 9627},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 9627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 320, col: 5, offset: 9627},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 9633},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 25, offset: 9647},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 320, col: 30, offset: 9652},
								expr: &seqExpr{
									pos: position{line: 320, col: 31, offset: 9653},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 320, col: 31, offset: 9653},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 320, col: 34, offset: 9656},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 320, col: 38, offset: 9660},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 320, col: 41, offset: 9663},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 330, col: 1, offset: 9899},
			expr: &choiceExpr{
				pos: position{line: 331, col: 5, offset: 9912},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 5, offset: 9912},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 9925},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9937},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 9949},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 9962},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9975},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9988},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 10001},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 10016},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 10029},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 10041},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 10056},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 10069},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 10083},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 10096},
						name: "TasteProc",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 5, offset: 10110},
						name: "SQLProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 348, col: 1, offset: 10119},
			expr: &actionExpr{
				pos: position{line: 349, col: 5, offset: 10132},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 349, col: 5, offset: 10132},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 5, offset: 10132},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 349, col: 13, offset: 10140},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 18, offset: 10145},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 27, offset: 10154},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 32, offset: 10159},
								expr: &actionExpr{
									pos: position{line: 349, col: 33, offset: 10160},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 349, col: 33, offset: 10160},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 349, col: 33, offset: 10160},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 349, col: 35, offset: 10162},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 349, col: 37, offset: 10164},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 363, col: 1, offset: 10579},
			expr: &actionExpr{
				pos: position{line: 363, col: 12, offset: 10590},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 363, col: 12, offset: 10590},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 363, col: 17, offset: 10595},
						expr: &actionExpr{
							pos: position{line: 363, col: 18, offset: 10596},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 363, col: 18, offset: 10596},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 363, col: 18, offset: 10596},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 363, col: 20, offset: 10598},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 363, col: 22, offset: 10600},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 365, col: 1, offset: 10656},
			expr: &choiceExpr{
				pos: position{line: 366, col: 5, offset: 10668},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 10668},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 366, col: 5, offset: 10668},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10743},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 10743},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 367, col: 5, offset: 10743},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 367, col: 14, offset: 10752},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 367, col: 16, offset: 10754},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 367, col: 23, offset: 10761},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 367, col: 24, offset: 10762},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 367, col: 24, offset: 10762},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 367, col: 34, offset: 10772},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 369, col: 1, offset: 10886},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 10898},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 370, col: 5, offset: 10898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 370, col: 5, offset: 10898},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 370, col: 12, offset: 10905},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 370, col: 18, offset: 10911},
								expr: &actionExpr{
									pos: position{line: 370, col: 19, offset: 10912},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 370, col: 19, offset: 10912},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 370, col: 19, offset: 10912},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 370, col: 21, offset: 10914},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 370, col: 23, offset: 10916},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 370, col: 47, offset: 10940},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 370, col: 53, offset: 10946},
								expr: &seqExpr{
									pos: position{line: 370, col: 54, offset: 10947},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 370, col: 54, offset: 10947},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 370, col: 56, offset: 10949},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 370, col: 67, offset: 10960},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 370, col: 74, offset: 10967},
								expr: &actionExpr{
									pos: position{line: 370, col: 75, offset: 10968},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 370, col: 75, offset: 10968},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 370, col: 75, offset: 10968},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 370, col: 77, offset: 10970},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 370, col: 79, offset: 10972},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 384, col: 1, offset: 11317},
			expr: &actionExpr{
				pos: position{line: 385, col: 5, offset: 11329},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 385, col: 5, offset: 11329},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 5, offset: 11329},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 12, offset: 11336},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 14, offset: 11338},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 19, offset: 11343},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 389, col: 1, offset: 11438},
			expr: &actionExpr{
				pos: position{line: 390, col: 5, offset: 11451},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 390, col: 5, offset: 11451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 390, col: 5, offset: 11451},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 13, offset: 11459},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 15, offset: 11461},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 20, offset: 11466},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 394, col: 1, offset: 11562},
			expr: &actionExpr{
				pos: position{line: 395, col: 5, offset: 11575},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 395, col: 5, offset: 11575},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 5, offset: 11575},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 395, col: 13, offset: 11583},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 395, col: 15, offset: 11585},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 20, offset: 11590},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 399, col: 1, offset: 11681},
			expr: &choiceExpr{
				pos: position{line: 400, col: 5, offset: 11694},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 11694},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 400, col: 5, offset: 11694},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 400, col: 5, offset: 11694},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 400, col: 13, offset: 11702},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 400, col: 15, offset: 11704},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 400, col: 21, offset: 11710},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 401, col: 5, offset: 11790},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 401, col: 5, offset: 11790},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 403, col: 1, offset: 11866},
			expr: &choiceExpr{
				pos: position{line: 404, col: 5, offset: 11879},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 11879},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 404, col: 5, offset: 11879},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 404, col: 5, offset: 11879},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 404, col: 13, offset: 11887},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 404, col: 15, offset: 11889},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 404, col: 21, offset: 11895},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 11975},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 405, col: 5, offset: 11975},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 407, col: 1, offset: 12051},
			expr: &actionExpr{
				pos: position{line: 408, col: 5, offset: 12066},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 408, col: 5, offset: 12066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 408, col: 5, offset: 12066},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 15, offset: 12076},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 17, offset: 12078},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 20, offset: 12081},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 412, col: 1, offset: 12118},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12129},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 413, col: 5, offset: 12129},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 413, col: 10, offset: 12134},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 417, col: 1, offset: 12230},
			expr: &choiceExpr{
				pos: position{line: 418, col: 5, offset: 12243},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 12243},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 418, col: 5, offset: 12243},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 418, col: 5, offset: 12243},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 13, offset: 12251},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 418, col: 15, offset: 12253},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 12342},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 421, col: 5, offset: 12342},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 425, col: 1, offset: 12432},
			expr: &actionExpr{
				pos: position{line: 426, col: 5, offset: 12444},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 426, col: 5, offset: 12444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 426, col: 5, offset: 12444},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 426, col: 12, offset: 12451},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 14, offset: 12453},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 19, offset: 12458},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 430, col: 1, offset: 12553},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 12568},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 12568},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 12568},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 15, offset: 12578},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 17, offset: 12580},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 23, offset: 12586},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 34, offset: 12597},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 39, offset: 12602},
								expr: &actionExpr{
									pos: position{line: 431, col: 40, offset: 12603},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 431, col: 40, offset: 12603},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 431, col: 40, offset: 12603},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 431, col: 43, offset: 12606},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 431, col: 47, offset: 12610},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 431, col: 50, offset: 12613},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 431, col: 53, offset: 12616},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 439, col: 1, offset: 13023},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 13036},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 13036},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13036},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 440, col: 13, offset: 13044},
							expr: &seqExpr{
								pos: position{line: 440, col: 15, offset: 13046},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 440, col: 15, offset: 13046},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 440, col: 18, offset: 13049},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 444, col: 1, offset: 13120},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13134},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 445, col: 5, offset: 13134},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 449, col: 1, offset: 13210},
			expr: &choiceExpr{
				pos: position{line: 450, col: 5, offset: 13223},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 450, col: 5, offset: 13223},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 450, col: 5, offset: 13223},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 450, col: 5, offset: 13223},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 450, col: 11, offset: 13229},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 450, col: 21, offset: 13239},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 29, offset: 13247},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 450, col: 31, offset: 13249},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 450, col: 39, offset: 13257},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 47, offset: 13265},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 450, col: 50, offset: 13268},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 54, offset: 13272},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 450, col: 57, offset: 13275},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 450, col: 66, offset: 13284},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 450, col: 74, offset: 13292},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 450, col: 82, offset: 13300},
										expr: &seqExpr{
											pos: position{line: 450, col: 83, offset: 13301},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 450, col: 83, offset: 13301},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 450, col: 85, offset: 13303},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 457, col: 5, offset: 13569},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 457, col: 5, offset: 13569},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 457, col: 5, offset: 13569},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 457, col: 11, offset: 13575},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 457, col: 22, offset: 13586},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 457, col: 30, offset: 13594},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 457, col: 32, offset: 13596},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 457, col: 36, offset: 13600},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 457, col: 44, offset: 13608},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 457, col: 52, offset: 13616},
										expr: &seqExpr{
											pos: position{line: 457, col: 53, offset: 13617},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 457, col: 53, offset: 13617},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 457, col: 55, offset: 13619},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 465, col: 1, offset: 13873},
			expr: &choiceExpr{
				pos: position{line: 466, col: 5, offset: 13887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 13887},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 466, col: 5, offset: 13887},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 466, col: 5, offset: 13887},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 466, col: 14, offset: 13896},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 13926},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 467, col: 5, offset: 13926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 467, col: 5, offset: 13926},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 467, col: 14, offset: 13935},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 468, col: 5, offset: 13964},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 468, col: 5, offset: 13964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 468, col: 5, offset: 13964},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 468, col: 14, offset: 13973},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 14003},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 469, col: 5, offset: 14003},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 471, col: 1, offset: 14039},
			expr: &choiceExpr{
				pos: position{line: 472, col: 5, offset: 14051},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 472, col: 5, offset: 14051},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 473, col: 5, offset: 14060},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 473, col: 5, offset: 14060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 473, col: 5, offset: 14060},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 473, col: 9, offset: 14064},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 473, col: 14, offset: 14069},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 473, col: 19, offset: 14074},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 475, col: 1, offset: 14100},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 14114},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 14114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 476, col: 5, offset: 14114},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 476, col: 14, offset: 14123},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 16, offset: 14125},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 513, col: 1, offset: 15417},
			expr: &choiceExpr{
				pos: position{line: 514, col: 5, offset: 15431},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 15431},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 514, col: 5, offset: 15431},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 514, col: 5, offset: 15431},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 514, col: 7, offset: 15433},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 514, col: 12, offset: 15438},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15467},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 515, col: 5, offset: 15467},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 519, col: 1, offset: 15550},
			expr: &ruleRefExpr{
				pos:  position{line: 519, col: 8, offset: 15557},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 521, col: 1, offset: 15568},
			expr: &ruleRefExpr{
				pos:  position{line: 521, col: 13, offset: 15580},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 523, col: 1, offset: 15586},
			expr: &actionExpr{
				pos: position{line: 524, col: 5, offset: 15601},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 524, col: 5, offset: 15601},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 524, col: 5, offset: 15601},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 11, offset: 15607},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 524, col: 21, offset: 15617},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 524, col: 26, offset: 15622},
								expr: &seqExpr{
									pos: position{line: 524, col: 27, offset: 15623},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 524, col: 27, offset: 15623},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 524, col: 30, offset: 15626},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 524, col: 34, offset: 15630},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 524, col: 37, offset: 15633},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 534, col: 1, offset: 15832},
			expr: &actionExpr{
				pos: position{line: 535, col: 5, offset: 15842},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 535, col: 5, offset: 15842},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 535, col: 5, offset: 15842},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 11, offset: 15848},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 16, offset: 15853},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 535, col: 21, offset: 15858},
								expr: &seqExpr{
									pos: position{line: 535, col: 22, offset: 15859},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 535, col: 22, offset: 15859},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 535, col: 25, offset: 15862},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 535, col: 29, offset: 15866},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 535, col: 32, offset: 15869},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 545, col: 1, offset: 16063},
			expr: &actionExpr{
				pos: position{line: 546, col: 5, offset: 16078},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 546, col: 5, offset: 16078},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 5, offset: 16078},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 9, offset: 16082},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 14, offset: 16087},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 546, col: 17, offset: 16090},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 21, offset: 16094},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 24, offset: 16097},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 28, offset: 16101},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 548, col: 1, offset: 16192},
			expr: &ruleRefExpr{
				pos:  position{line: 548, col: 8, offset: 16199},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 550, col: 1, offset: 16216},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 16236},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16236},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 551, col: 5, offset: 16236},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 551, col: 5, offset: 16236},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 15, offset: 16246},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 551, col: 29, offset: 16260},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 551, col: 32, offset: 16263},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 551, col: 36, offset: 16267},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 551, col: 39, offset: 16270},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 50, offset: 16281},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 551, col: 55, offset: 16286},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 551, col: 58, offset: 16289},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 551, col: 62, offset: 16293},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 551, col: 65, offset: 16296},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 76, offset: 16307},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 554, col: 5, offset: 16447},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 556, col: 1, offset: 16462},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16480},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16480},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 16486},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 16505},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 558, col: 10, offset: 16510},
								expr: &actionExpr{
									pos: position{line: 558, col: 11, offset: 16511},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 558, col: 11, offset: 16511},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 558, col: 11, offset: 16511},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 14, offset: 16514},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 558, col: 17, offset: 16517},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 558, col: 25, offset: 16525},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 28, offset: 16528},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 558, col: 33, offset: 16533},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 562, col: 1, offset: 16651},
			expr: &actionExpr{
				pos: position{line: 563, col: 5, offset: 16670},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 563, col: 5, offset: 16670},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 16670},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 11, offset: 16676},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 5, offset: 16700},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 564, col: 10, offset: 16705},
								expr: &actionExpr{
									pos: position{line: 564, col: 11, offset: 16706},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 564, col: 11, offset: 16706},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 564, col: 11, offset: 16706},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 564, col: 14, offset: 16709},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 564, col: 17, offset: 16712},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 564, col: 26, offset: 16721},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 564, col: 29, offset: 16724},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 564, col: 34, offset: 16729},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 568, col: 1, offset: 16852},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 16876},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 569, col: 5, offset: 16876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 569, col: 5, offset: 16876},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 11, offset: 16882},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 570, col: 5, offset: 16899},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 570, col: 10, offset: 16904},
								expr: &actionExpr{
									pos: position{line: 570, col: 11, offset: 16905},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 570, col: 11, offset: 16905},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 570, col: 11, offset: 16905},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 570, col: 14, offset: 16908},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 570, col: 19, offset: 16913},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 570, col: 38, offset: 16932},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 570, col: 41, offset: 16935},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 570, col: 46, offset: 16940},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 574, col: 1, offset: 17058},
			expr: &actionExpr{
				pos: position{line: 575, col: 5, offset: 17079},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 575, col: 6, offset: 17080},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 575, col: 6, offset: 17080},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 575, col: 12, offset: 17086},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 577, col: 1, offset: 17124},
			expr: &choiceExpr{
				pos: position{line: 578, col: 5, offset: 17147},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 578, col: 5, offset: 17147},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 579, col: 5, offset: 17168},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 579, col: 5, offset: 17168},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 581, col: 1, offset: 17205},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17222},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17222},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 582, col: 5, offset: 17222},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 17228},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 17245},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 583, col: 10, offset: 17250},
								expr: &actionExpr{
									pos: position{line: 583, col: 11, offset: 17251},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 583, col: 11, offset: 17251},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 583, col: 11, offset: 17251},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 14, offset: 17254},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 17, offset: 17257},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 583, col: 34, offset: 17274},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 37, offset: 17277},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 42, offset: 17282},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 587, col: 1, offset: 17398},
			expr: &actionExpr{
				pos: position{line: 587, col: 20, offset: 17417},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 587, col: 21, offset: 17418},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 21, offset: 17418},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 587, col: 28, offset: 17425},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 587, col: 34, offset: 17431},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 587, col: 41, offset: 17438},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 589, col: 1, offset: 17475},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 17492},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 17492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 17492},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 17498},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 5, offset: 17521},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 591, col: 10, offset: 17526},
								expr: &actionExpr{
									pos: position{line: 591, col: 11, offset: 17527},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 591, col: 11, offset: 17527},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 591, col: 11, offset: 17527},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 591, col: 14, offset: 17530},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 591, col: 17, offset: 17533},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 591, col: 34, offset: 17550},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 591, col: 37, offset: 17553},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 591, col: 42, offset: 17558},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 595, col: 1, offset: 17680},
			expr: &actionExpr{
				pos: position{line: 595, col: 20, offset: 17699},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 595, col: 21, offset: 17700},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 595, col: 21, offset: 17700},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 595, col: 27, offset: 17706},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 597, col: 1, offset: 17743},
			expr: &actionExpr{
				pos: position{line: 598, col: 5, offset: 17766},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 598, col: 5, offset: 17766},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 5, offset: 17766},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 11, offset: 17772},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 599, col: 5, offset: 17784},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 599, col: 10, offset: 17789},
								expr: &actionExpr{
									pos: position{line: 599, col: 11, offset: 17790},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 599, col: 11, offset: 17790},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 599, col: 11, offset: 17790},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 599, col: 14, offset: 17793},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 599, col: 17, offset: 17796},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 599, col: 40, offset: 17819},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 599, col: 43, offset: 17822},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 599, col: 48, offset: 17827},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 603, col: 1, offset: 17938},
			expr: &actionExpr{
				pos: position{line: 603, col: 26, offset: 17963},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 603, col: 27, offset: 17964},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 27, offset: 17964},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 603, col: 33, offset: 17970},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 605, col: 1, offset: 18007},
			expr: &choiceExpr{
				pos: position{line: 606, col: 5, offset: 18019},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 18019},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 606, col: 5, offset: 18019},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 606, col: 5, offset: 18019},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 606, col: 9, offset: 18023},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 606, col: 12, offset: 18026},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 14, offset: 18028},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 609, col: 5, offset: 18137},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 611, col: 1, offset: 18147},
			expr: &choiceExpr{
				pos: position{line: 612, col: 5, offset: 18160},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 612, col: 5, offset: 18160},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 612, col: 5, offset: 18160},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 612, col: 5, offset: 18160},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 612, col: 7, offset: 18162},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 612, col: 16, offset: 18171},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 612, col: 19, offset: 18174},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 612, col: 23, offset: 18178},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 612, col: 26, offset: 18181},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 612, col: 30, offset: 18185},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 615, col: 5, offset: 18287},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 617, col: 1, offset: 18297},
			expr: &choiceExpr{
				pos: position{line: 618, col: 5, offset: 18310},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 618, col: 5, offset: 18310},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 619, col: 5, offset: 18325},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 620, col: 5, offset: 18339},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 18355},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 621, col: 5, offset: 18355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 621, col: 5, offset: 18355},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 621, col: 11, offset: 18361},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 621, col: 20, offset: 18370},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 621, col: 25, offset: 18375},
										expr: &ruleRefExpr{
											pos:  position{line: 621, col: 26, offset: 18376},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 624, col: 5, offset: 18447},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 5, offset: 18461},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 627, col: 1, offset: 18470},
			expr: &seqExpr{
				pos: position{line: 627, col: 13, offset: 18482},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 627, col: 13, offset: 18482},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 627, col: 22, offset: 18491},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 627, col: 25, offset: 18494},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 629, col: 1, offset: 18499},
			expr: &choiceExpr{
				pos: position{line: 630, col: 5, offset: 18512},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 630, col: 5, offset: 18512},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 631, col: 5, offset: 18522},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 632, col: 5, offset: 18534},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 633, col: 5, offset: 18547},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 635, col: 1, offset: 18555},
			expr: &actionExpr{
				pos: position{line: 636, col: 5, offset: 18569},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 636, col: 5, offset: 18569},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 5, offset: 18569},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 13, offset: 18577},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 636, col: 16, offset: 18580},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 636, col: 20, offset: 18584},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 25, offset: 18589},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 636, col: 39, offset: 18603},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 638, col: 1, offset: 18629},
			expr: &actionExpr{
				pos: position{line: 639, col: 5, offset: 18644},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 639, col: 5, offset: 18644},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 639, col: 5, offset: 18644},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 14, offset: 18653},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 639, col: 17, offset: 18656},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 21, offset: 18660},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 639, col: 24, offset: 18663},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 29, offset: 18668},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 639, col: 42, offset: 18681},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 639, col: 45, offset: 18684},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 639, col: 49, offset: 18688},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 57, offset: 18696},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 647, col: 1, offset: 19094},
			expr: &choiceExpr{
				pos: position{line: 648, col: 5, offset: 19106},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 19106},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 648, col: 5, offset: 19106},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 648, col: 13, offset: 19114},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 13, offset: 19114},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 19150},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 649, col: 5, offset: 19150},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 651, col: 1, offset: 19174},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 19185},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 19185},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 652, col: 5, offset: 19185},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 652, col: 8, offset: 19188},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 12, offset: 19192},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 652, col: 15, offset: 19195},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 17, offset: 19197},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 654, col: 1, offset: 19225},
			expr: &actionExpr{
				pos: position{line: 655, col: 5, offset: 19238},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 655, col: 5, offset: 19238},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 655, col: 5, offset: 19238},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 6, offset: 19239},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 16, offset: 19249},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 19, offset: 19252},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 34, offset: 19267},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 655, col: 37, offset: 19270},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 41, offset: 19274},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 655, col: 44, offset: 19277},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 49, offset: 19282},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 62, offset: 19295},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 655, col: 65, offset: 19298},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 659, col: 1, offset: 19394},
			expr: &choiceExpr{
				pos: position{line: 660, col: 5, offset: 19411},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 660, col: 5, offset: 19411},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 660, col: 5, offset: 19411},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 660, col: 5, offset: 19411},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 660, col: 11, offset: 19417},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 660, col: 16, offset: 19422},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 660, col: 21, offset: 19427},
										expr: &actionExpr{
											pos: position{line: 660, col: 22, offset: 19428},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 660, col: 22, offset: 19428},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 660, col: 22, offset: 19428},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 660, col: 25, offset: 19431},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 660, col: 29, offset: 19435},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 660, col: 32, offset: 19438},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 660, col: 34, offset: 19440},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 19552},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 663, col: 5, offset: 19552},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 665, col: 1, offset: 19588},
			expr: &choiceExpr{
				pos: position{line: 666, col: 5, offset: 19602},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 19602},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 666, col: 5, offset: 19602},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 666, col: 5, offset: 19602},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 19608},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 666, col: 17, offset: 19614},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 666, col: 22, offset: 19619},
										expr: &ruleRefExpr{
											pos:  position{line: 666, col: 23, offset: 19620},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 19691},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 669, col: 5, offset: 19691},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 669, col: 5, offset: 19691},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 19697},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 669, col: 22, offset: 19708},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 669, col: 27, offset: 19713},
										expr: &ruleRefExpr{
											pos:  position{line: 669, col: 28, offset: 19714},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 19785},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 672, col: 5, offset: 19785},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 676, col: 1, offset: 19854},
			expr: &choiceExpr{
				pos: position{line: 677, col: 5, offset: 19864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 19864},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 19864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 677, col: 5, offset: 19864},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 677, col: 9, offset: 19868},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 677, col: 15, offset: 19874},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 20090},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 20090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 686, col: 5, offset: 20090},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 686, col: 9, offset: 20094},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 686, col: 13, offset: 20098},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 686, col: 18, offset: 20103},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 686, col: 23, offset: 20108},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 696, col: 1, offset: 20313},
			expr: &choiceExpr{
				pos: position{line: 697, col: 5, offset: 20323},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 20323},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 20323},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 697, col: 5, offset: 20323},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 697, col: 9, offset: 20327},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 14, offset: 20332},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 697, col: 27, offset: 20345},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 697, col: 30, offset: 20348},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 697, col: 34, offset: 20352},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 697, col: 37, offset: 20355},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 40, offset: 20358},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 697, col: 53, offset: 20371},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 20542},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 703, col: 5, offset: 20542},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 703, col: 5, offset: 20542},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 9, offset: 20546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 703, col: 12, offset: 20549},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 16, offset: 20553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 703, col: 19, offset: 20556},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 703, col: 22, offset: 20559},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 703, col: 35, offset: 20572},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 709, col: 5, offset: 20743},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 709, col: 5, offset: 20743},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 709, col: 5, offset: 20743},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 709, col: 9, offset: 20747},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 709, col: 14, offset: 20752},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 709, col: 27, offset: 20765},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 709, col: 30, offset: 20768},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 709, col: 34, offset: 20772},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 709, col: 37, offset: 20775},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20948},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 20948},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 715, col: 5, offset: 20948},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 715, col: 9, offset: 20952},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 14, offset: 20957},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 715, col: 19, offset: 20962},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 21011},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 21011},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 716, col: 5, offset: 21011},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 716, col: 9, offset: 21015},
									expr: &litMatcher{
										pos:        position{line: 716, col: 11, offset: 21017},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 716, col: 16, offset: 21022},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 19, offset: 21025},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 718, col: 1, offset: 21076},
			expr: &choiceExpr{
				pos: position{line: 719, col: 5, offset: 21088},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 21088},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 21100},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 21100},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 720, col: 5, offset: 21100},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 9, offset: 21104},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 720, col: 12, offset: 21107},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 17, offset: 21112},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 22, offset: 21117},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 720, col: 25, offset: 21120},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 725, col: 1, offset: 21171},
			expr: &actionExpr{
				pos: position{line: 726, col: 5, offset: 21183},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 726, col: 5, offset: 21183},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 726, col: 5, offset: 21183},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 15, offset: 21193},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 5, offset: 21207},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 10, offset: 21212},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 728, col: 5, offset: 21224},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 11, offset: 21230},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 5, offset: 21243},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 11, offset: 21249},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 5, offset: 21262},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 13, offset: 21270},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 731, col: 5, offset: 21285},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 12, offset: 21292},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 732, col: 5, offset: 21306},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 13, offset: 21314},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 5, offset: 21329},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 11, offset: 21335},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 757, col: 1, offset: 21702},
			expr: &choiceExpr{
				pos: position{line: 758, col: 5, offset: 21716},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 758, col: 5, offset: 21716},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 758, col: 5, offset: 21716},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 758, col: 5, offset: 21716},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 758, col: 12, offset: 21723},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 758, col: 14, offset: 21725},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 21753},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 21753},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 759, col: 5, offset: 21753},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 12, offset: 21760},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 759, col: 14, offset: 21762},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 26, offset: 21774},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 761, col: 1, offset: 21818},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 21836},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 21836},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 21836},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 762, col: 5, offset: 21836},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 9, offset: 21840},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 14, offset: 21845},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 16, offset: 21847},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 19, offset: 21850},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 762, col: 21, offset: 21852},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 25, offset: 21856},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 21950},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 763, col: 5, offset: 21950},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 10, offset: 21955},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 765, col: 1, offset: 22047},
			expr: &actionExpr{
				pos: position{line: 766, col: 5, offset: 22066},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 766, col: 5, offset: 22066},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 766, col: 5, offset: 22066},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 766, col: 11, offset: 22072},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 766, col: 25, offset: 22086},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 766, col: 30, offset: 22091},
								expr: &actionExpr{
									pos: position{line: 766, col: 31, offset: 22092},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 766, col: 31, offset: 22092},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 766, col: 31, offset: 22092},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 766, col: 34, offset: 22095},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 766, col: 38, offset: 22099},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 766, col: 41, offset: 22102},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 766, col: 46, offset: 22107},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 770, col: 1, offset: 22228},
			expr: &choiceExpr{
				pos: position{line: 771, col: 5, offset: 22240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 22240},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 22240},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 771, col: 5, offset: 22240},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 771, col: 7, offset: 22242},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 771, col: 12, offset: 22247},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 771, col: 14, offset: 22249},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 20, offset: 22255},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 771, col: 29, offset: 22264},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 35, offset: 22270},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 774, col: 5, offset: 22364},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 774, col: 5, offset: 22364},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 774, col: 5, offset: 22364},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 774, col: 7, offset: 22366},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 774, col: 12, offset: 22371},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 774, col: 14, offset: 22373},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 22401},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 775, col: 5, offset: 22401},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 777, col: 1, offset: 22425},
			expr: &choiceExpr{
				pos: position{line: 778, col: 5, offset: 22438},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22438},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 778, col: 5, offset: 22438},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 778, col: 5, offset: 22438},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 7, offset: 22440},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 10, offset: 22443},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 778, col: 12, offset: 22445},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 15, offset: 22448},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 22476},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 779, col: 5, offset: 22476},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 779, col: 5, offset: 22476},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 779, col: 7, offset: 22478},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 779, col: 10, offset: 22481},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 780, col: 5, offset: 22509},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 780, col: 5, offset: 22509},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 782, col: 1, offset: 22533},
			expr: &ruleRefExpr{
				pos:  position{line: 783, col: 5, offset: 22546},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 785, col: 1, offset: 22552},
			expr: &choiceExpr{
				pos: position{line: 786, col: 5, offset: 22565},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 22565},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 22565},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 786, col: 5, offset: 22565},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 11, offset: 22571},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 786, col: 19, offset: 22579},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 786, col: 24, offset: 22584},
										expr: &actionExpr{
											pos: position{line: 786, col: 25, offset: 22585},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 786, col: 25, offset: 22585},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 786, col: 30, offset: 22590},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 22708},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 789, col: 5, offset: 22708},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 791, col: 1, offset: 22732},
			expr: &actionExpr{
				pos: position{line: 792, col: 5, offset: 22744},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 792, col: 5, offset: 22744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 792, col: 5, offset: 22744},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 11, offset: 22750},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 24, offset: 22763},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 26, offset: 22765},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 31, offset: 22770},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 792, col: 33, offset: 22772},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 39, offset: 22778},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 48, offset: 22787},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 54, offset: 22793},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 63, offset: 22802},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 65, offset: 22804},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 68, offset: 22807},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 792, col: 70, offset: 22809},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 78, offset: 22817},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 86, offset: 22825},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 792, col: 89, offset: 22828},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 93, offset: 22832},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 792, col: 96, offset: 22835},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 105, offset: 22844},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 811, col: 1, offset: 23079},
			expr: &choiceExpr{
				pos: position{line: 812, col: 5, offset: 23096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 812, col: 5, offset: 23096},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 812, col: 5, offset: 23096},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 812, col: 5, offset: 23096},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 812, col: 7, offset: 23098},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 812, col: 14, offset: 23105},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 812, col: 14, offset: 23105},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 812, col: 21, offset: 23112},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 812, col: 29, offset: 23120},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 813, col: 5, offset: 23153},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 813, col: 5, offset: 23153},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 815, col: 1, offset: 23189},
			expr: &choiceExpr{
				pos: position{line: 816, col: 5, offset: 23202},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 816, col: 5, offset: 23202},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 816, col: 5, offset: 23202},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 816, col: 5, offset: 23202},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 816, col: 7, offset: 23204},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 816, col: 13, offset: 23210},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 816, col: 15, offset: 23212},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 816, col: 20, offset: 23217},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 23256},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 817, col: 5, offset: 23256},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 819, col: 1, offset: 23280},
			expr: &choiceExpr{
				pos: position{line: 820, col: 5, offset: 23295},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 23295},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 23295},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 820, col: 5, offset: 23295},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 7, offset: 23297},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 13, offset: 23303},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 15, offset: 23305},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 18, offset: 23308},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 820, col: 20, offset: 23310},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 28, offset: 23318},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 23357},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 821, col: 5, offset: 23357},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 823, col: 1, offset: 23381},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 23395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 23395},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 824, col: 5, offset: 23395},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 824, col: 5, offset: 23395},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 7, offset: 23397},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 14, offset: 23404},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 824, col: 16, offset: 23406},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 824, col: 21, offset: 23411},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 23450},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 825, col: 5, offset: 23450},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 827, col: 1, offset: 23474},
			expr: &choiceExpr{
				pos: position{line: 828, col: 5, offset: 23489},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 828, col: 5, offset: 23489},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 828, col: 5, offset: 23489},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 828, col: 5, offset: 23489},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 828, col: 7, offset: 23491},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 828, col: 13, offset: 23497},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 828, col: 15, offset: 23499},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 828, col: 18, offset: 23502},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 828, col: 20, offset: 23504},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 828, col: 25, offset: 23509},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 828, col: 31, offset: 23515},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 828, col: 37, offset: 23521},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 23634},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 831, col: 5, offset: 23634},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 833, col: 1, offset: 23658},
			expr: &choiceExpr{
				pos: position{line: 834, col: 5, offset: 23671},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 23671},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 834, col: 5, offset: 23671},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 834, col: 5, offset: 23671},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 834, col: 7, offset: 23673},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 834, col: 12, offset: 23678},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 834, col: 12, offset: 23678},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 834, col: 18, offset: 23684},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 23714},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 835, col: 5, offset: 23714},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 837, col: 1, offset: 23740},
			expr: &choiceExpr{
				pos: position{line: 838, col: 5, offset: 23753},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 23753},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 838, col: 5, offset: 23753},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 838, col: 5, offset: 23753},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 7, offset: 23755},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 13, offset: 23761},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 838, col: 15, offset: 23763},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 838, col: 21, offset: 23769},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 839, col: 5, offset: 23800},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 839, col: 5, offset: 23800},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 841, col: 1, offset: 23822},
			expr: &actionExpr{
				pos: position{line: 841, col: 10, offset: 23831},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 841, col: 10, offset: 23831},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 842, col: 1, offset: 23866},
			expr: &actionExpr{
				pos: position{line: 842, col: 6, offset: 23871},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 842, col: 6, offset: 23871},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 843, col: 1, offset: 23898},
			expr: &actionExpr{
				pos: position{line: 843, col: 8, offset: 23905},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 843, col: 8, offset: 23905},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 844, col: 1, offset: 23936},
			expr: &actionExpr{
				pos: position{line: 844, col: 8, offset: 23943},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 844, col: 8, offset: 23943},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 845, col: 1, offset: 23974},
			expr: &actionExpr{
				pos: position{line: 845, col: 9, offset: 23982},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 845, col: 9, offset: 23982},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 846, col: 1, offset: 24015},
			expr: &actionExpr{
				pos: position{line: 846, col: 9, offset: 24023},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 846, col: 9, offset: 24023},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 847, col: 1, offset: 24056},
			expr: &ruleRefExpr{
				pos:  position{line: 847, col: 6, offset: 24061},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 848, col: 1, offset: 24069},
			expr: &actionExpr{
				pos: position{line: 848, col: 10, offset: 24078},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 848, col: 10, offset: 24078},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 849, col: 1, offset: 24113},
			expr: &actionExpr{
				pos: position{line: 849, col: 9, offset: 24121},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 849, col: 9, offset: 24121},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 850, col: 1, offset: 24154},
			expr: &actionExpr{
				pos: position{line: 850, col: 6, offset: 24159},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 850, col: 6, offset: 24159},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 851, col: 1, offset: 24186},
			expr: &actionExpr{
				pos: position{line: 851, col: 9, offset: 24194},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 851, col: 9, offset: 24194},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 852, col: 1, offset: 24227},
			expr: &actionExpr{
				pos: position{line: 852, col: 7, offset: 24233},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 852, col: 7, offset: 24233},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 853, col: 1, offset: 24262},
			expr: &actionExpr{
				pos: position{line: 853, col: 8, offset: 24269},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 853, col: 8, offset: 24269},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 854, col: 1, offset: 24300},
			expr: &actionExpr{
				pos: position{line: 854, col: 8, offset: 24307},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 854, col: 8, offset: 24307},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 855, col: 1, offset: 24338},
			expr: &actionExpr{
				pos: position{line: 855, col: 9, offset: 24346},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 855, col: 9, offset: 24346},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 856, col: 1, offset: 24379},
			expr: &actionExpr{
				pos: position{line: 856, col: 9, offset: 24387},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 856, col: 9, offset: 24387},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 858, col: 1, offset: 24421},
			expr: &choiceExpr{
				pos: position{line: 859, col: 5, offset: 24443},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 859, col: 5, offset: 24443},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 14, offset: 24452},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 19, offset: 24457},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 27, offset: 24465},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 34, offset: 24472},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 42, offset: 24480},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 50, offset: 24488},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 59, offset: 24497},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 67, offset: 24505},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 859, col: 75, offset: 24513},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 863, col: 1, offset: 24539},
			expr: &choiceExpr{
				pos: position{line: 864, col: 5, offset: 24551},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 864, col: 5, offset: 24551},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 865, col: 5, offset: 24567},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 866, col: 5, offset: 24585},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 867, col: 5, offset: 24603},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 868, col: 5, offset: 24622},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 5, offset: 24635},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 870, col: 5, offset: 24644},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 871, col: 5, offset: 24661},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 872, col: 5, offset: 24680},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 873, col: 5, offset: 24699},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 875, col: 1, offset: 24712},
			expr: &actionExpr{
				pos: position{line: 876, col: 5, offset: 24730},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 876, col: 5, offset: 24730},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 876, col: 7, offset: 24732},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 880, col: 1, offset: 24845},
			expr: &choiceExpr{
				pos: position{line: 881, col: 5, offset: 24863},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 24863},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 24863},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 24863},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 7, offset: 24865},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 881, col: 14, offset: 24872},
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 15, offset: 24873},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 24988},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 884, col: 5, offset: 24988},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 7, offset: 24990},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 888, col: 1, offset: 25094},
			expr: &choiceExpr{
				pos: position{line: 889, col: 5, offset: 25113},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 889, col: 5, offset: 25113},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 889, col: 5, offset: 25113},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 889, col: 5, offset: 25113},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 889, col: 7, offset: 25115},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 889, col: 11, offset: 25119},
									expr: &ruleRefExpr{
										pos:  position{line: 889, col: 12, offset: 25120},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25234},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 892, col: 5, offset: 25234},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 7, offset: 25236},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 896, col: 1, offset: 25335},
			expr: &actionExpr{
				pos: position{line: 897, col: 5, offset: 25352},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 897, col: 5, offset: 25352},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 897, col: 7, offset: 25354},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 901, col: 1, offset: 25467},
			expr: &actionExpr{
				pos: position{line: 902, col: 5, offset: 25486},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 902, col: 5, offset: 25486},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 902, col: 7, offset: 25488},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 906, col: 1, offset: 25597},
			expr: &choiceExpr{
				pos: position{line: 907, col: 5, offset: 25616},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 907, col: 5, offset: 25616},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 907, col: 5, offset: 25616},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 908, col: 5, offset: 25729},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 908, col: 5, offset: 25729},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 910, col: 1, offset: 25840},
			expr: &actionExpr{
				pos: position{line: 911, col: 5, offset: 25856},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 911, col: 5, offset: 25856},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 913, col: 1, offset: 25962},
			expr: &actionExpr{
				pos: position{line: 914, col: 5, offset: 25978},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 914, col: 5, offset: 25978},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 914, col: 5, offset: 25978},
							expr: &seqExpr{
								pos: position{line: 914, col: 7, offset: 25980},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 914, col: 7, offset: 25980},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 914, col: 25, offset: 25998},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 30, offset: 26003},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 34, offset: 26007},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 918, col: 1, offset: 26105},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 26118},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 919, col: 5, offset: 26118},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 5, offset: 26135},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 922, col: 1, offset: 26150},
			expr: &choiceExpr{
				pos: position{line: 923, col: 5, offset: 26167},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 26167},
						run: (*parser).callonTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 923, col: 5, offset: 26167},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 923, col: 5, offset: 26167},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 923, col: 12, offset: 26174},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 923, col: 15, offset: 26177},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 923, col: 19, offset: 26181},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 923, col: 22, offset: 26184},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 26, offset: 26188},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 923, col: 31, offset: 26193},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 923, col: 34, offset: 26196},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 924, col: 5, offset: 26223},
						run: (*parser).callonTypeExternal12,
						expr: &seqExpr{
							pos: position{line: 924, col: 5, offset: 26223},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 924, col: 5, offset: 26223},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 924, col: 12, offset: 26230},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 924, col: 15, offset: 26233},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 924, col: 19, offset: 26237},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 924, col: 22, offset: 26240},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 924, col: 26, offset: 26244},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 924, col: 36, offset: 26254},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 924, col: 39, offset: 26257},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 5, offset: 26285},
						name: "ComplexType",
					},
					&actionExpr{
						pos: position{line: 926, col: 5, offset: 26301},
						run: (*parser).callonTypeExternal23,
						expr: &seqExpr{
							pos: position{line: 926, col: 5, offset: 26301},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 926, col: 5, offset: 26301},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 9, offset: 26305},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 926, col: 31, offset: 26327},
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 32, offset: 26328},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 928, col: 1, offset: 26364},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 26373},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 929, col: 5, offset: 26373},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 930, col: 5, offset: 26391},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 932, col: 1, offset: 26404},
			expr: &choiceExpr{
				pos: position{line: 933, col: 5, offset: 26422},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 933, col: 5, offset: 26422},
						run: (*parser).callonAmbiguousType2,
						expr: &litMatcher{
							pos:        position{line: 933, col: 5, offset: 26422},
							val:        "null",
							ignoreCase: false,
						},
					},
					&labeledExpr{
						pos:   position{line: 936, col: 5, offset: 26502},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 936, col: 10, offset: 26507},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 26525},
						run: (*parser).callonAmbiguousType6,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 26525},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 937, col: 5, offset: 26525},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 10, offset: 26530},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 25, offset: 26545},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 937, col: 28, offset: 26548},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 32, offset: 26552},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 937, col: 35, offset: 26555},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 39, offset: 26559},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 937, col: 42, offset: 26562},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 46, offset: 26566},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 51, offset: 26571},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 937, col: 54, offset: 26574},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 26675},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 940, col: 5, offset: 26675},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 10, offset: 26680},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 26782},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 26782},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 943, col: 5, offset: 26782},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 9, offset: 26786},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 943, col: 12, offset: 26789},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 14, offset: 26791},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 943, col: 25, offset: 26802},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 945, col: 1, offset: 26825},
			expr: &actionExpr{
				pos: position{line: 946, col: 5, offset: 26839},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 946, col: 5, offset: 26839},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 946, col: 11, offset: 26845},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 950, col: 1, offset: 26941},
			expr: &actionExpr{
				pos: position{line: 951, col: 5, offset: 26954},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 951, col: 5, offset: 26954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 951, col: 5, offset: 26954},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 11, offset: 26960},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 951, col: 16, offset: 26965},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 951, col: 21, offset: 26970},
								expr: &ruleRefExpr{
									pos:  position{line: 951, col: 21, offset: 26970},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 955, col: 1, offset: 27064},
			expr: &actionExpr{
				pos: position{line: 955, col: 16, offset: 27079},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 955, col: 16, offset: 27079},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 955, col: 16, offset: 27079},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 955, col: 19, offset: 27082},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 955, col: 23, offset: 27086},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 955, col: 26, offset: 27089},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 30, offset: 27093},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 957, col: 1, offset: 27119},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 27135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 27135},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 27135},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 958, col: 5, offset: 27135},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 9, offset: 27139},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 958, col: 12, offset: 27142},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 19, offset: 27149},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 33, offset: 27163},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 958, col: 36, offset: 27166},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 27261},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 27261},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 961, col: 5, offset: 27261},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 961, col: 9, offset: 27265},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 961, col: 12, offset: 27268},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 16, offset: 27272},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 961, col: 21, offset: 27277},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 961, col: 24, offset: 27280},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 27369},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 964, col: 5, offset: 27369},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 964, col: 5, offset: 27369},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 964, col: 10, offset: 27374},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 964, col: 13, offset: 27377},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 17, offset: 27381},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 964, col: 22, offset: 27386},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 964, col: 25, offset: 27389},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 27477},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 967, col: 5, offset: 27477},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 967, col: 5, offset: 27477},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 967, col: 10, offset: 27482},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 967, col: 13, offset: 27485},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 21, offset: 27493},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 967, col: 26, offset: 27498},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 967, col: 29, offset: 27501},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 967, col: 33, offset: 27505},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 967, col: 36, offset: 27508},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 44, offset: 27516},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 967, col: 49, offset: 27521},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 967, col: 52, offset: 27524},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 971, col: 1, offset: 27638},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 27656},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 972, col: 5, offset: 27656},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 5, offset: 27682},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 979, col: 1, offset: 27941},
			expr: &actionExpr{
				pos: position{line: 980, col: 5, offset: 27967},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 980, col: 9, offset: 27971},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 980, col: 9, offset: 27971},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 980, col: 19, offset: 27981},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 980, col: 30, offset: 27992},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 980, col: 41, offset: 28003},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 981, col: 9, offset: 28020},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 981, col: 18, offset: 28029},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 981, col: 28, offset: 28039},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 981, col: 38, offset: 28049},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 982, col: 9, offset: 28065},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 983, col: 9, offset: 28083},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 983, col: 18, offset: 28092},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 992, col: 1, offset: 28576},
			expr: &actionExpr{
				pos: position{line: 993, col: 5, offset: 28602},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 993, col: 9, offset: 28606},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 993, col: 9, offset: 28606},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 993, col: 22, offset: 28619},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 994, col: 9, offset: 28634},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 995, col: 9, offset: 28650},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 996, col: 9, offset: 28668},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 996, col: 16, offset: 28675},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 997, col: 9, offset: 28689},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 997, col: 18, offset: 28698},
							val:        "error",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1001, col: 1, offset: 28815},
			expr: &actionExpr{
				pos: position{line: 1002, col: 5, offset: 28833},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 5, offset: 28833},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1002, col: 5, offset: 28833},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 11, offset: 28839},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1002, col: 21, offset: 28849},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1002, col: 26, offset: 28854},
								expr: &ruleRefExpr{
									pos:  position{line: 1002, col: 26, offset: 28854},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1006, col: 1, offset: 28953},
			expr: &actionExpr{
				pos: position{line: 1006, col: 21, offset: 28973},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1006, col: 21, offset: 28973},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1006, col: 21, offset: 28973},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1006, col: 24, offset: 28976},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1006, col: 28, offset: 28980},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1006, col: 31, offset: 28983},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1006, col: 35, offset: 28987},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1008, col: 1, offset: 29018},
			expr: &actionExpr{
				pos: position{line: 1009, col: 5, offset: 29032},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1009, col: 5, offset: 29032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1009, col: 5, offset: 29032},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 10, offset: 29037},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1009, col: 20, offset: 29047},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1009, col: 23, offset: 29050},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1009, col: 27, offset: 29054},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 30, offset: 29057},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 34, offset: 29061},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1013, col: 1, offset: 29143},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 5, offset: 29157},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1014, col: 5, offset: 29157},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 5, offset: 29176},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1017, col: 1, offset: 29190},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 5, offset: 29208},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1018, col: 5, offset: 29208},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 24, offset: 29227},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1020, col: 1, offset: 29245},
			expr: &actionExpr{
				pos: position{line: 1020, col: 12, offset: 29256},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 12, offset: 29256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1020, col: 12, offset: 29256},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1020, col: 19, offset: 29263},
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 20, offset: 29264},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1021, col: 1, offset: 29301},
			expr: &actionExpr{
				pos: position{line: 1021, col: 11, offset: 29311},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1021, col: 11, offset: 29311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1021, col: 11, offset: 29311},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1021, col: 17, offset: 29317},
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 18, offset: 29318},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1022, col: 1, offset: 29354},
			expr: &actionExpr{
				pos: position{line: 1022, col: 11, offset: 29364},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1022, col: 11, offset: 29364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1022, col: 11, offset: 29364},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1022, col: 17, offset: 29370},
							expr: &ruleRefExpr{
								pos:  position{line: 1022, col: 18, offset: 29371},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1023, col: 1, offset: 29407},
			expr: &actionExpr{
				pos: position{line: 1023, col: 12, offset: 29418},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 12, offset: 29418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1023, col: 12, offset: 29418},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1023, col: 19, offset: 29425},
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 20, offset: 29426},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1024, col: 1, offset: 29463},
			expr: &actionExpr{
				pos: position{line: 1024, col: 11, offset: 29473},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 11, offset: 29473},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1024, col: 11, offset: 29473},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1024, col: 17, offset: 29479},
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 18, offset: 29480},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1026, col: 1, offset: 29517},
			expr: &charClassMatcher{
				pos:        position{line: 1026, col: 19, offset: 29535},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1028, col: 1, offset: 29547},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 18, offset: 29564},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1028, col: 18, offset: 29564},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1028, col: 36, offset: 29582},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1030, col: 1, offset: 29589},
			expr: &actionExpr{
				pos: position{line: 1031, col: 5, offset: 29604},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1031, col: 5, offset: 29604},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1031, col: 8, offset: 29607},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1033, col: 1, offset: 29688},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 5, offset: 29707},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29707},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1034, col: 5, offset: 29707},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1034, col: 5, offset: 29707},
									expr: &seqExpr{
										pos: position{line: 1034, col: 7, offset: 29709},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1034, col: 7, offset: 29709},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 1034, col: 15, offset: 29717},
												expr: &ruleRefExpr{
													pos:  position{line: 1034, col: 16, offset: 29718},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 32, offset: 29734},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1034, col: 48, offset: 29750},
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 48, offset: 29750},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 29802},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1035, col: 5, offset: 29802},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 29841},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1036, col: 5, offset: 29841},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1036, col: 5, offset: 29841},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1036, col: 10, offset: 29846},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 13, offset: 29849},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1038, col: 5, offset: 29940},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1038, col: 5, offset: 29940},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29982},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1039, col: 5, offset: 29982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1039, col: 5, offset: 29982},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1039, col: 8, offset: 29985},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1039, col: 26, offset: 30003},
									expr: &seqExpr{
										pos: position{line: 1039, col: 28, offset: 30005},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1039, col: 28, offset: 30005},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1039, col: 31, offset: 30008},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 1041, col: 1, offset: 30033},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 5, offset: 30045},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 30045},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 30064},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 30080},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 5, offset: 30097},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1047, col: 1, offset: 30110},
			expr: &actionExpr{
				pos: position{line: 1048, col: 5, offset: 30119},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 5, offset: 30119},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1048, col: 5, offset: 30119},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1048, col: 14, offset: 30128},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1048, col: 18, offset: 30132},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1052, col: 1, offset: 30252},
			expr: &seqExpr{
				pos: position{line: 1052, col: 12, offset: 30263},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 12, offset: 30263},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1052, col: 15, offset: 30266},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 19, offset: 30270},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1052, col: 22, offset: 30273},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 26, offset: 30277},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1054, col: 1, offset: 30281},
			expr: &seqExpr{
				pos: position{line: 1054, col: 6, offset: 30286},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1054, col: 6, offset: 30286},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1054, col: 11, offset: 30291},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1054, col: 16, offset: 30296},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1054, col: 21, offset: 30301},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1055, col: 1, offset: 30307},
			expr: &seqExpr{
				pos: position{line: 1055, col: 6, offset: 30312},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1055, col: 6, offset: 30312},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1055, col: 11, offset: 30317},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1057, col: 1, offset: 30324},
			expr: &seqExpr{
				pos: position{line: 1057, col: 12, offset: 30335},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1057, col: 12, offset: 30335},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 24, offset: 30347},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1059, col: 1, offset: 30359},
			expr: &seqExpr{
				pos: position{line: 1059, col: 15, offset: 30373},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 15, offset: 30373},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1059, col: 18, offset: 30376},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 22, offset: 30380},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1059, col: 25, offset: 30383},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 29, offset: 30387},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1059, col: 32, offset: 30390},
						expr: &seqExpr{
							pos: position{line: 1059, col: 33, offset: 30391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1059, col: 33, offset: 30391},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1059, col: 37, offset: 30395},
									expr: &charClassMatcher{
										pos:        position{line: 1059, col: 37, offset: 30395},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1061, col: 1, offset: 30405},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 30420},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1062, col: 5, offset: 30420},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1063, col: 5, offset: 30428},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1063, col: 6, offset: 30429},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1063, col: 6, offset: 30429},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1063, col: 12, offset: 30435},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1063, col: 17, offset: 30440},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1063, col: 20, offset: 30443},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1063, col: 24, offset: 30447},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1063, col: 27, offset: 30450},
								expr: &seqExpr{
									pos: position{line: 1063, col: 28, offset: 30451},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1063, col: 28, offset: 30451},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1063, col: 32, offset: 30455},
											expr: &charClassMatcher{
												pos:        position{line: 1063, col: 32, offset: 30455},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1065, col: 1, offset: 30465},
			expr: &actionExpr{
				pos: position{line: 1066, col: 5, offset: 30478},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 5, offset: 30478},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1066, col: 5, offset: 30478},
							expr: &litMatcher{
								pos:        position{line: 1066, col: 5, offset: 30478},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1066, col: 10, offset: 30483},
							expr: &seqExpr{
								pos: position{line: 1066, col: 11, offset: 30484},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1066, col: 11, offset: 30484},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1066, col: 19, offset: 30492},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1070, col: 1, offset: 30618},
			expr: &seqExpr{
				pos: position{line: 1070, col: 11, offset: 30628},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 30628},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1070, col: 16, offset: 30633},
						expr: &seqExpr{
							pos: position{line: 1070, col: 17, offset: 30634},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1070, col: 17, offset: 30634},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 21, offset: 30638},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1072, col: 1, offset: 30646},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 5, offset: 30659},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1073, col: 5, offset: 30659},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1074, col: 5, offset: 30669},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1075, col: 5, offset: 30679},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1076, col: 5, offset: 30689},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1077, col: 5, offset: 30698},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1078, col: 5, offset: 30707},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1079, col: 5, offset: 30716},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1080, col: 5, offset: 30725},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1081, col: 5, offset: 30734},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1083, col: 1, offset: 30740},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 30747},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 5, offset: 30747},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1084, col: 5, offset: 30747},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1084, col: 10, offset: 30752},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1084, col: 14, offset: 30756},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1084, col: 19, offset: 30761},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1084, col: 23, offset: 30765},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1084, col: 28, offset: 30770},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1084, col: 32, offset: 30774},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1086, col: 1, offset: 30811},
			expr: &actionExpr{
				pos: position{line: 1087, col: 5, offset: 30819},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1087, col: 5, offset: 30819},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1087, col: 5, offset: 30819},
							expr: &seqExpr{
								pos: position{line: 1087, col: 8, offset: 30822},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1087, col: 8, offset: 30822},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1087, col: 12, offset: 30826},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1087, col: 16, offset: 30830},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1087, col: 20, offset: 30834},
										expr: &choiceExpr{
											pos: position{line: 1087, col: 22, offset: 30836},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1087, col: 22, offset: 30836},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1087, col: 33, offset: 30847},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1087, col: 39, offset: 30853},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 41, offset: 30855},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1091, col: 1, offset: 31019},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 5, offset: 31037},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1092, col: 5, offset: 31037},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1092, col: 5, offset: 31037},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1092, col: 5, offset: 31037},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1092, col: 7, offset: 31039},
										expr: &ruleRefExpr{
											pos:  position{line: 1092, col: 7, offset: 31039},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1092, col: 17, offset: 31049},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1092, col: 19, offset: 31051},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1095, col: 5, offset: 31115},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1095, col: 5, offset: 31115},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1095, col: 5, offset: 31115},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 7, offset: 31117},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 11, offset: 31121},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1095, col: 13, offset: 31123},
										expr: &ruleRefExpr{
											pos:  position{line: 1095, col: 13, offset: 31123},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1095, col: 23, offset: 31133},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 28, offset: 31138},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1095, col: 30, offset: 31140},
										expr: &ruleRefExpr{
											pos:  position{line: 1095, col: 30, offset: 31140},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 40, offset: 31150},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 42, offset: 31152},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 31251},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 31251},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1098, col: 5, offset: 31251},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 10, offset: 31256},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1098, col: 12, offset: 31258},
										expr: &ruleRefExpr{
											pos:  position{line: 1098, col: 12, offset: 31258},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 22, offset: 31268},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1098, col: 24, offset: 31270},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1101, col: 5, offset: 31341},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1101, col: 5, offset: 31341},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1101, col: 5, offset: 31341},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 7, offset: 31343},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 11, offset: 31347},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1101, col: 13, offset: 31349},
										expr: &ruleRefExpr{
											pos:  position{line: 1101, col: 13, offset: 31349},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 23, offset: 31359},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 31427},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1104, col: 5, offset: 31427},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1108, col: 1, offset: 31464},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 5, offset: 31476},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1109, col: 5, offset: 31476},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 5, offset: 31483},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1112, col: 1, offset: 31488},
			expr: &actionExpr{
				pos: position{line: 1112, col: 12, offset: 31499},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 12, offset: 31499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1112, col: 12, offset: 31499},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 16, offset: 31503},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 18, offset: 31505},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1114, col: 1, offset: 31543},
			expr: &actionExpr{
				pos: position{line: 1114, col: 12, offset: 31554},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1114, col: 12, offset: 31554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1114, col: 12, offset: 31554},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1114, col: 14, offset: 31556},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1114, col: 18, offset: 31560},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1116, col: 1, offset: 31598},
			expr: &actionExpr{
				pos: position{line: 1117, col: 5, offset: 31609},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 5, offset: 31609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1117, col: 5, offset: 31609},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 7, offset: 31611},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1117, col: 10, offset: 31614},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 14, offset: 31618},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 16, offset: 31620},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1121, col: 1, offset: 31693},
			expr: &actionExpr{
				pos: position{line: 1122, col: 5, offset: 31704},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 5, offset: 31704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1122, col: 5, offset: 31704},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 7, offset: 31706},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1122, col: 11, offset: 31710},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 15, offset: 31714},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 17, offset: 31716},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1126, col: 1, offset: 31779},
			expr: &actionExpr{
				pos: position{line: 1127, col: 4, offset: 31787},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1127, col: 4, offset: 31787},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1127, col: 6, offset: 31789},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1129, col: 1, offset: 31829},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 5, offset: 31843},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1130, col: 5, offset: 31843},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 5, offset: 31858},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1133, col: 1, offset: 31874},
			expr: &actionExpr{
				pos: position{line: 1133, col: 14, offset: 31887},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1133, col: 14, offset: 31887},
					expr: &charClassMatcher{
						pos:        position{line: 1133, col: 14, offset: 31887},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1135, col: 1, offset: 31926},
			expr: &actionExpr{
				pos: position{line: 1136, col: 5, offset: 31945},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 5, offset: 31945},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1136, col: 5, offset: 31945},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1136, col: 9, offset: 31949},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1138, col: 1, offset: 31992},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 5, offset: 32008},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 32008},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 32008},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1139, col: 5, offset: 32008},
									expr: &litMatcher{
										pos:        position{line: 1139, col: 5, offset: 32008},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1139, col: 10, offset: 32013},
									expr: &charClassMatcher{
										pos:        position{line: 1139, col: 10, offset: 32013},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 17, offset: 32020},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1139, col: 21, offset: 32024},
									expr: &charClassMatcher{
										pos:        position{line: 1139, col: 21, offset: 32024},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1139, col: 28, offset: 32031},
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 28, offset: 32031},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 32090},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 32090},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1142, col: 5, offset: 32090},
									expr: &litMatcher{
										pos:        position{line: 1142, col: 5, offset: 32090},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1142, col: 10, offset: 32095},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1142, col: 14, offset: 32099},
									expr: &charClassMatcher{
										pos:        position{line: 1142, col: 14, offset: 32099},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1142, col: 21, offset: 32106},
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 21, offset: 32106},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1146, col: 1, offset: 32162},
			expr: &seqExpr{
				pos: position{line: 1146, col: 16, offset: 32177},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1146, col: 16, offset: 32177},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1146, col: 21, offset: 32182},
						expr: &charClassMatcher{
							pos:        position{line: 1146, col: 21, offset: 32182},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 27, offset: 32188},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1148, col: 1, offset: 32200},
			expr: &actionExpr{
				pos: position{line: 1148, col: 7, offset: 32206},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1148, col: 7, offset: 32206},
					expr: &ruleRefExpr{
						pos:  position{line: 1148, col: 7, offset: 32206},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1150, col: 1, offset: 32248},
			expr: &charClassMatcher{
				pos:        position{line: 1150, col: 12, offset: 32259},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1153, col: 1, offset: 32273},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 32290},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1154, col: 5, offset: 32290},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1154, col: 5, offset: 32290},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1154, col: 5, offset: 32290},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 9, offset: 32294},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1154, col: 11, offset: 32296},
										expr: &ruleRefExpr{
											pos:  position{line: 1154, col: 11, offset: 32296},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 29, offset: 32314},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1155, col: 5, offset: 32351},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1155, col: 5, offset: 32351},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 5, offset: 32351},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 9, offset: 32355},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1155, col: 11, offset: 32357},
										expr: &ruleRefExpr{
											pos:  position{line: 1155, col: 11, offset: 32357},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 29, offset: 32375},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1157, col: 1, offset: 32409},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 32430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1158, col: 5, offset: 32430},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1158, col: 5, offset: 32430},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1158, col: 5, offset: 32430},
									expr: &choiceExpr{
										pos: position{line: 1158, col: 7, offset: 32432},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1158, col: 7, offset: 32432},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1158, col: 13, offset: 32438},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1158, col: 26, offset: 32451,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1159, col: 5, offset: 32488},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1159, col: 5, offset: 32488},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1159, col: 5, offset: 32488},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1159, col: 10, offset: 32493},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1159, col: 12, offset: 32495},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1161, col: 1, offset: 32529},
			expr: &actionExpr{
				pos: position{line: 1162, col: 5, offset: 32541},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 5, offset: 32541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1162, col: 5, offset: 32541},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 10, offset: 32546},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 23, offset: 32559},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1162, col: 28, offset: 32564},
								expr: &ruleRefExpr{
									pos:  position{line: 1162, col: 28, offset: 32564},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1164, col: 1, offset: 32626},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 32643},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1165, col: 5, offset: 32643},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 5, offset: 32660},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1168, col: 1, offset: 32672},
			expr: &actionExpr{
				pos: position{line: 1168, col: 16, offset: 32687},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1168, col: 16, offset: 32687},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1170, col: 1, offset: 32736},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 32752},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 5, offset: 32752},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1172, col: 5, offset: 32769},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1174, col: 1, offset: 32776},
			expr: &actionExpr{
				pos: position{line: 1174, col: 14, offset: 32789},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1174, col: 14, offset: 32789},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1174, col: 14, offset: 32789},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1174, col: 19, offset: 32794},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1174, col: 22, offset: 32797},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1174, col: 22, offset: 32797},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 38, offset: 32813},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1176, col: 1, offset: 32849},
			expr: &actionExpr{
				pos: position{line: 1177, col: 5, offset: 32858},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1177, col: 5, offset: 32858},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1177, col: 5, offset: 32858},
							expr: &ruleRefExpr{
								pos:  position{line: 1177, col: 6, offset: 32859},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1177, col: 22, offset: 32875},
							expr: &ruleRefExpr{
								pos:  position{line: 1177, col: 23, offset: 32876},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1177, col: 35, offset: 32888},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1177, col: 40, offset: 32893},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1177, col: 50, offset: 32903},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1177, col: 55, offset: 32908},
								expr: &ruleRefExpr{
									pos:  position{line: 1177, col: 55, offset: 32908},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1181, col: 1, offset: 32992},
			expr: &seqExpr{
				pos: position{line: 1181, col: 19, offset: 33010},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1181, col: 19, offset: 33010},
						expr: &litMatcher{
							pos:        position{line: 1181, col: 19, offset: 33010},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 24, offset: 33015},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1182, col: 1, offset: 33028},
			expr: &seqExpr{
				pos: position{line: 1182, col: 15, offset: 33042},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1182, col: 15, offset: 33042},
						expr: &ruleRefExpr{
							pos:  position{line: 1182, col: 15, offset: 33042},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1182, col: 28, offset: 33055},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1184, col: 1, offset: 33060},
			expr: &choiceExpr{
				pos: position{line: 1185, col: 5, offset: 33074},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1185, col: 5, offset: 33074},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 5, offset: 33091},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 33103},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1187, col: 5, offset: 33103},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1189, col: 1, offset: 33127},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 33140},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1190, col: 5, offset: 33140},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1191, col: 5, offset: 33154},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1193, col: 1, offset: 33161},
			expr: &actionExpr{
				pos: position{line: 1193, col: 11, offset: 33171},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 11, offset: 33171},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1193, col: 11, offset: 33171},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1193, col: 16, offset: 33176},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1193, col: 19, offset: 33179},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1193, col: 19, offset: 33179},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 32, offset: 33192},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1195, col: 1, offset: 33228},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 33243},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 33243},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1196, col: 5, offset: 33243},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 33271},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1197, col: 5, offset: 33271},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1198, col: 5, offset: 33301},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1201, col: 1, offset: 33308},
			expr: &choiceExpr{
				pos: position{line: 1202, col: 5, offset: 33329},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1202, col: 5, offset: 33329},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1202, col: 5, offset: 33329},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1202, col: 5, offset: 33329},
									expr: &choiceExpr{
										pos: position{line: 1202, col: 7, offset: 33331},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1202, col: 7, offset: 33331},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1202, col: 13, offset: 33337},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1202, col: 26, offset: 33350,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1203, col: 5, offset: 33387},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1203, col: 5, offset: 33387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1203, col: 5, offset: 33387},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1203, col: 10, offset: 33392},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1203, col: 12, offset: 33394},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1205, col: 1, offset: 33428},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 5, offset: 33447},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1206, col: 5, offset: 33447},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1206, col: 5, offset: 33447},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1206, col: 5, offset: 33447},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1206, col: 9, offset: 33451},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1206, col: 18, offset: 33460},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 5, offset: 33511},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 5, offset: 33532},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1210, col: 1, offset: 33547},
			expr: &choiceExpr{
				pos: position{line: 1211, col: 5, offset: 33568},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1211, col: 5, offset: 33568},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1212, col: 5, offset: 33576},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1213, col: 5, offset: 33585},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 33594},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 1214, col: 5, offset: 33594},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 33623},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 1215, col: 5, offset: 33623},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 33652},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 1216, col: 5, offset: 33652},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1217, col: 5, offset: 33681},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 1217, col: 5, offset: 33681},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 33710},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 1218, col: 5, offset: 33710},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1219, col: 5, offset: 33739},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 1219, col: 5, offset: 33739},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1221, col: 1, offset: 33765},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 5, offset: 33783},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1222, col: 5, offset: 33783},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1222, col: 5, offset: 33783},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1223, col: 5, offset: 33811},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1223, col: 5, offset: 33811},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1224, col: 5, offset: 33839},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1226, col: 1, offset: 33845},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 5, offset: 33863},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 33863},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1227, col: 5, offset: 33863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1227, col: 5, offset: 33863},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 9, offset: 33867},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1227, col: 16, offset: 33874},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1227, col: 16, offset: 33874},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1227, col: 25, offset: 33883},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1227, col: 34, offset: 33892},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1227, col: 43, offset: 33901},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1230, col: 5, offset: 33964},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1230, col: 5, offset: 33964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1230, col: 5, offset: 33964},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1230, col: 9, offset: 33968},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1230, col: 13, offset: 33972},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1230, col: 20, offset: 33979},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1230, col: 20, offset: 33979},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1230, col: 29, offset: 33988},
												expr: &ruleRefExpr{
													pos:  position{line: 1230, col: 29, offset: 33988},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1230, col: 39, offset: 33998},
												expr: &ruleRefExpr{
													pos:  position{line: 1230, col: 39, offset: 33998},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1230, col: 49, offset: 34008},
												expr: &ruleRefExpr{
													pos:  position{line: 1230, col: 49, offset: 34008},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1230, col: 59, offset: 34018},
												expr: &ruleRefExpr{
													pos:  position{line: 1230, col: 59, offset: 34018},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1230, col: 69, offset: 34028},
												expr: &ruleRefExpr{
													pos:  position{line: 1230, col: 69, offset: 34028},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1230, col: 80, offset: 34039},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1234, col: 1, offset: 34093},
			expr: &actionExpr{
				pos: position{line: 1235, col: 5, offset: 34104},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 5, offset: 34104},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 5, offset: 34104},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 9, offset: 34108},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 14, offset: 34113},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1235, col: 25, offset: 34124},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1235, col: 29, offset: 34128},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 30, offset: 34129},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1237, col: 1, offset: 34164},
			expr: &actionExpr{
				pos: position{line: 1238, col: 5, offset: 34179},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1238, col: 5, offset: 34179},
					expr: &choiceExpr{
						pos: position{line: 1238, col: 6, offset: 34180},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1238, col: 6, offset: 34180},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1238, col: 13, offset: 34187},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1240, col: 1, offset: 34227},
			expr: &charClassMatcher{
				pos:        position{line: 1241, col: 5, offset: 34243},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1243, col: 1, offset: 34258},
			expr: &oneOrMoreExpr{
				pos: position{line: 1243, col: 6, offset: 34263},
				expr: &ruleRefExpr{
					pos:  position{line: 1243, col: 6, offset: 34263},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1245, col: 1, offset: 34274},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1245, col: 6, offset: 34279},
				expr: &ruleRefExpr{
					pos:  position{line: 1245, col: 6, offset: 34279},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1247, col: 1, offset: 34290},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 5, offset: 34303},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1248, col: 5, offset: 34303},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 5, offset: 34318},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 5, offset: 34337},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1252, col: 1, offset: 34346},
			expr: &anyMatcher{
				line: 1253, col: 5, offset: 34366,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1255, col: 1, offset: 34369},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 5, offset: 34397},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1256, col: 5, offset: 34397},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1257, col: 5, offset: 34406},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1258, col: 5, offset: 34415},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1259, col: 5, offset: 34424},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 34432},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1261, col: 5, offset: 34445},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1263, col: 1, offset: 34455},
			expr: &charClassMatcher{
				pos:        position{line: 1264, col: 5, offset: 34474},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1270, col: 1, offset: 34804},
			expr: &ruleRefExpr{
				pos:  position{line: 1273, col: 5, offset: 34875},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1275, col: 1, offset: 34894},
			expr: &seqExpr{
				pos: position{line: 1276, col: 5, offset: 34915},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1276, col: 5, offset: 34915},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1276, col: 10, offset: 34920},
						expr: &seqExpr{
							pos: position{line: 1276, col: 11, offset: 34921},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1276, col: 11, offset: 34921},
									expr: &litMatcher{
										pos:        position{line: 1276, col: 12, offset: 34922},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1276, col: 17, offset: 34927},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1276, col: 35, offset: 34945},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1278, col: 1, offset: 34951},
			expr: &seqExpr{
				pos: position{line: 1279, col: 5, offset: 34973},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1279, col: 5, offset: 34973},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1279, col: 10, offset: 34978},
						expr: &seqExpr{
							pos: position{line: 1279, col: 11, offset: 34979},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1279, col: 11, offset: 34979},
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 12, offset: 34980},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1279, col: 27, offset: 34995},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1281, col: 1, offset: 35014},
			expr: &seqExpr{
				pos: position{line: 1281, col: 7, offset: 35020},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1281, col: 7, offset: 35020},
						expr: &ruleRefExpr{
							pos:  position{line: 1281, col: 7, offset: 35020},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 19, offset: 35032},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1283, col: 1, offset: 35048},
			expr: &choiceExpr{
				pos: position{line: 1283, col: 7, offset: 35054},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1283, col: 7, offset: 35054},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 35058},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1285, col: 1, offset: 35063},
			expr: &notExpr{
				pos: position{line: 1285, col: 7, offset: 35069},
				expr: &anyMatcher{
					line: 1285, col: 8, offset: 35070,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation25(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["f"])
}

func (c *current) onOperation31(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation31(stack["a"])
}

func (c *current) onOperation37(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation37(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["match"])
}

func (c *current) onShortCut17(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut17(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut29(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "Id", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut29(stack["v"])
}

func (c *current) onShortCut37(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonShortCut37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut37(stack["search"])
}

func (c *current) onShortCut45(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut45(stack["v"])
}

func (c *current) onShortCut55() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonShortCut55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut55()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch2(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch2(stack["f"], stack["pattern"])
}

func (c *current) onPatternMatch17(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!",

		"operand": map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}}, nil

}

func (p *parser) callonPatternMatch17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch17(stack["f"], stack["pattern"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "Id", "name": "taste"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "Id", "name": "taste"}}}}}}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal2(stack["typ"])
}

func (c *current) onTypeExternal12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal12(stack["typ"])
}

func (c *current) onTypeExternal23(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal23(stack["typ"])
}

func (c *current) onAmbiguousType2() (interface{}, error) {
	return map[string]interface{}{"kind": "TypeNull"}, nil

}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2()
}

func (c *current) onAmbiguousType6(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType6(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Id", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
