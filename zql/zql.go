// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 16, col: 1, offset: 352},
			expr: &ruleRefExpr{
				pos:  position{line: 17, col: 5, offset: 432},
				name: "Sequential",
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 19, col: 1, offset: 444},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 459},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 20, col: 5, offset: 459},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 20, col: 5, offset: 459},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 20, col: 5, offset: 459},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 20, col: 11, offset: 465},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 20, col: 21, offset: 475},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 20, col: 26, offset: 480},
										expr: &ruleRefExpr{
											pos:  position{line: 20, col: 26, offset: 480},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 23, col: 5, offset: 640},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 23, col: 5, offset: 640},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 8, offset: 643},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 27, col: 1, offset: 755},
			expr: &actionExpr{
				pos: position{line: 27, col: 18, offset: 772},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 27, col: 18, offset: 772},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 27, col: 18, offset: 772},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 27, col: 21, offset: 775},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 25, offset: 779},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 27, col: 28, offset: 782},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 30, offset: 784},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 29, col: 1, offset: 813},
			expr: &choiceExpr{
				pos: position{line: 30, col: 5, offset: 826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 826},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 826},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 30, col: 5, offset: 826},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 11, offset: 832},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 30, col: 22, offset: 843},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 30, col: 27, offset: 848},
										expr: &ruleRefExpr{
											pos:  position{line: 30, col: 27, offset: 848},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 949},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 33, col: 5, offset: 949},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 11, offset: 955},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 37, col: 1, offset: 1014},
			expr: &actionExpr{
				pos: position{line: 38, col: 5, offset: 1031},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 38, col: 5, offset: 1031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 38, col: 5, offset: 1031},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 38, col: 8, offset: 1034},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 38, col: 13, offset: 1039},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 38, col: 16, offset: 1042},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 19, offset: 1045},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 41, col: 1, offset: 1077},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1094},
				run: (*parser).callonSwitchBranch1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1094},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1094},
							label: "filter",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 12, offset: 1101},
								name: "SearchBoolean",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1115},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 29, offset: 1118},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 34, offset: 1123},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 37, offset: 1126},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 42, offset: 1131},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 46, col: 1, offset: 1220},
			expr: &choiceExpr{
				pos: position{line: 47, col: 5, offset: 1231},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 1231},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 1231},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 47, col: 5, offset: 1231},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1237},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 47, col: 24, offset: 1250},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 47, col: 29, offset: 1255},
										expr: &ruleRefExpr{
											pos:  position{line: 47, col: 29, offset: 1255},
											name: "SwitchTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 50, col: 5, offset: 1354},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 50, col: 5, offset: 1354},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 11, offset: 1360},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchTail",
			pos:  position{line: 54, col: 1, offset: 1421},
			expr: &actionExpr{
				pos: position{line: 55, col: 5, offset: 1436},
				run: (*parser).callonSwitchTail1,
				expr: &seqExpr{
					pos: position{line: 55, col: 5, offset: 1436},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 55, col: 5, offset: 1436},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 55, col: 8, offset: 1439},
							name: "CaseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 55, col: 18, offset: 1449},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 55, col: 21, offset: 1452},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 24, offset: 1455},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 57, col: 1, offset: 1488},
			expr: &litMatcher{
				pos:        position{line: 57, col: 13, offset: 1500},
				val:        "case",
				ignoreCase: false,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 59, col: 1, offset: 1508},
			expr: &choiceExpr{
				pos: position{line: 60, col: 5, offset: 1522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1522},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 60, col: 5, offset: 1522},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 60, col: 5, offset: 1522},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 13, offset: 1530},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 60, col: 16, offset: 1533},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 20, offset: 1537},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 60, col: 23, offset: 1540},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 28, offset: 1545},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 60, col: 31, offset: 1548},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 60, col: 41, offset: 1558},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 50, offset: 1567},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 60, col: 53, offset: 1570},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1669},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 63, col: 5, offset: 1669},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 14, offset: 1678},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 17, offset: 1681},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 21, offset: 1685},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 24, offset: 1688},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 34, offset: 1698},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 63, col: 37, offset: 1701},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 63, col: 47, offset: 1711},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 54, offset: 1718},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 57, offset: 1721},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 5, offset: 1818},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1831},
						run: (*parser).callonOperation27,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1831},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 67, col: 5, offset: 1831},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 7, offset: 1833},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 67, col: 16, offset: 1842},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 17, offset: 1843},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 1873},
						run: (*parser).callonOperation33,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 1873},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 68, col: 5, offset: 1873},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 7, offset: 1875},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 68, col: 19, offset: 1887},
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 20, offset: 1888},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 1919},
						run: (*parser).callonOperation39,
						expr: &seqExpr{
							pos: position{line: 69, col: 5, offset: 1919},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 69, col: 5, offset: 1919},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 10, offset: 1924},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 69, col: 24, offset: 1938},
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 25, offset: 1939},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 73, col: 1, offset: 2034},
			expr: &seqExpr{
				pos: position{line: 73, col: 11, offset: 2044},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 73, col: 11, offset: 2044},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 73, col: 15, offset: 2048},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 73, col: 15, offset: 2048},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 73, col: 21, offset: 2054},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 73, col: 28, offset: 2061},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 34, offset: 2067},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 75, col: 1, offset: 2073},
			expr: &seqExpr{
				pos: position{line: 75, col: 13, offset: 2085},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 75, col: 13, offset: 2085},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 75, col: 17, offset: 2089},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 75, col: 18, offset: 2090},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 75, col: 18, offset: 2090},
										expr: &litMatcher{
											pos:        position{line: 75, col: 19, offset: 2091},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 24, offset: 2096},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 38, offset: 2110},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 57, offset: 2129},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 75, col: 82, offset: 2154},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 75, col: 88, offset: 2160},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 76, col: 1, offset: 2165},
			expr: &choiceExpr{
				pos: position{line: 76, col: 12, offset: 2176},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 76, col: 13, offset: 2177},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 76, col: 13, offset: 2177},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 76, col: 16, offset: 2180},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 76, col: 16, offset: 2180},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 76, col: 26, offset: 2190},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 35, offset: 2199},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 76, col: 43, offset: 2207},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 76, col: 43, offset: 2207},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 76, col: 46, offset: 2210},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 78, col: 1, offset: 2216},
			expr: &actionExpr{
				pos: position{line: 79, col: 5, offset: 2234},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 79, col: 5, offset: 2234},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 79, col: 5, offset: 2234},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2240},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 79, col: 21, offset: 2250},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 79, col: 26, offset: 2255},
								expr: &ruleRefExpr{
									pos:  position{line: 79, col: 26, offset: 2255},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 83, col: 1, offset: 2329},
			expr: &actionExpr{
				pos: position{line: 83, col: 16, offset: 2344},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 83, col: 16, offset: 2344},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 83, col: 16, offset: 2344},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 18, offset: 2346},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 26, offset: 2354},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 28, offset: 2356},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 30, offset: 2358},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 85, col: 1, offset: 2408},
			expr: &actionExpr{
				pos: position{line: 86, col: 5, offset: 2422},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 86, col: 5, offset: 2422},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 2422},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 11, offset: 2428},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 2445},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 87, col: 10, offset: 2450},
								expr: &actionExpr{
									pos: position{line: 87, col: 11, offset: 2451},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 87, col: 11, offset: 2451},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 87, col: 11, offset: 2451},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 87, col: 14, offset: 2454},
												expr: &seqExpr{
													pos: position{line: 87, col: 15, offset: 2455},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 87, col: 15, offset: 2455},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 87, col: 24, offset: 2464},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 87, col: 28, offset: 2468},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 87, col: 31, offset: 2471},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 87, col: 36, offset: 2476},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 91, col: 1, offset: 2592},
			expr: &choiceExpr{
				pos: position{line: 92, col: 5, offset: 2609},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 2609},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 92, col: 5, offset: 2609},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 92, col: 6, offset: 2610},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 92, col: 6, offset: 2610},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 92, col: 6, offset: 2610},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 92, col: 15, offset: 2619},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 92, col: 19, offset: 2623},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 92, col: 19, offset: 2623},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 92, col: 23, offset: 2627},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 92, col: 27, offset: 2631},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 92, col: 29, offset: 2633},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2749},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2762},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 2777},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 97, col: 5, offset: 2777},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 97, col: 5, offset: 2777},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 9, offset: 2781},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 97, col: 12, offset: 2784},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 17, offset: 2789},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 97, col: 31, offset: 2803},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 97, col: 34, offset: 2806},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 99, col: 1, offset: 2832},
			expr: &choiceExpr{
				pos: position{line: 100, col: 5, offset: 2845},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 100, col: 5, offset: 2845},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 100, col: 5, offset: 2845},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 100, col: 5, offset: 2845},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 9, offset: 2849},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 100, col: 12, offset: 2852},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 22, offset: 2862},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 36, offset: 2876},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 100, col: 39, offset: 2879},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 41, offset: 2881},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3575},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3575},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 121, col: 5, offset: 3575},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 7, offset: 3577},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 121, col: 12, offset: 3582},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 121, col: 15, offset: 3585},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 20, offset: 3590},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 121, col: 34, offset: 3604},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 121, col: 37, offset: 3607},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 39, offset: 3609},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 121, col: 57, offset: 3627},
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 58, offset: 3628},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3746},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3746},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 124, col: 5, offset: 3746},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 7, offset: 3748},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 19, offset: 3760},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 21, offset: 3762},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 29, offset: 3770},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 124, col: 31, offset: 3772},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 4459},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 4459},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 145, col: 5, offset: 4459},
									expr: &seqExpr{
										pos: position{line: 145, col: 7, offset: 4461},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 145, col: 7, offset: 4461},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 145, col: 19, offset: 4473},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 145, col: 24, offset: 4478},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 26, offset: 4480},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 145, col: 44, offset: 4498},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 45, offset: 4499},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4614},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4614},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 148, col: 5, offset: 4614},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 148, col: 9, offset: 4618},
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 10, offset: 4619},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 152, col: 1, offset: 4729},
			expr: &choiceExpr{
				pos: position{line: 153, col: 5, offset: 4745},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 153, col: 5, offset: 4745},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 4757},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 154, col: 5, offset: 4757},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 7, offset: 4759},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 158, col: 1, offset: 4864},
			expr: &choiceExpr{
				pos: position{line: 159, col: 5, offset: 4886},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 159, col: 5, offset: 4886},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 4898},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 160, col: 5, offset: 4898},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 7, offset: 4900},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 170, col: 1, offset: 5186},
			expr: &actionExpr{
				pos: position{line: 171, col: 5, offset: 5201},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 171, col: 5, offset: 5201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 171, col: 5, offset: 5201},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 171, col: 10, offset: 5206},
								expr: &ruleRefExpr{
									pos:  position{line: 171, col: 10, offset: 5206},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 171, col: 20, offset: 5216},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 171, col: 25, offset: 5221},
								expr: &litMatcher{
									pos:        position{line: 171, col: 26, offset: 5222},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 175, col: 1, offset: 5289},
			expr: &choiceExpr{
				pos: position{line: 176, col: 5, offset: 5302},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5302},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 5302},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 176, col: 5, offset: 5302},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 7, offset: 5304},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 176, col: 13, offset: 5310},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 15, offset: 5312},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 177, col: 5, offset: 5362},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 179, col: 1, offset: 5371},
			expr: &actionExpr{
				pos: position{line: 179, col: 9, offset: 5379},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 179, col: 9, offset: 5379},
					expr: &litMatcher{
						pos:        position{line: 179, col: 9, offset: 5379},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 181, col: 1, offset: 5416},
			expr: &choiceExpr{
				pos: position{line: 182, col: 5, offset: 5432},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 182, col: 5, offset: 5432},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 183, col: 5, offset: 5445},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 5457},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 185, col: 5, offset: 5470},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 5482},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 5494},
						name: "CaseToken",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 191, col: 1, offset: 5553},
			expr: &ruleRefExpr{
				pos:  position{line: 191, col: 14, offset: 5566},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 193, col: 1, offset: 5586},
			expr: &actionExpr{
				pos: position{line: 193, col: 14, offset: 5599},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 193, col: 15, offset: 5600},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 193, col: 15, offset: 5600},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 193, col: 21, offset: 5606},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 193, col: 28, offset: 5613},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 193, col: 35, offset: 5620},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 193, col: 42, offset: 5627},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 193, col: 48, offset: 5633},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 193, col: 55, offset: 5640},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 195, col: 1, offset: 5677},
			expr: &actionExpr{
				pos: position{line: 196, col: 5, offset: 5700},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 196, col: 5, offset: 5700},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 196, col: 5, offset: 5700},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 11, offset: 5706},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 5724},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 197, col: 10, offset: 5729},
								expr: &actionExpr{
									pos: position{line: 197, col: 11, offset: 5730},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 197, col: 11, offset: 5730},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 197, col: 11, offset: 5730},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 197, col: 14, offset: 5733},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 197, col: 17, offset: 5736},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 197, col: 28, offset: 5747},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 197, col: 31, offset: 5750},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 197, col: 36, offset: 5755},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 201, col: 1, offset: 5872},
			expr: &actionExpr{
				pos: position{line: 202, col: 5, offset: 5890},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 202, col: 5, offset: 5890},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 5, offset: 5890},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 11, offset: 5896},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 5, offset: 5914},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 203, col: 10, offset: 5919},
								expr: &actionExpr{
									pos: position{line: 203, col: 11, offset: 5920},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 203, col: 11, offset: 5920},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 203, col: 11, offset: 5920},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 203, col: 14, offset: 5923},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 203, col: 17, offset: 5926},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 203, col: 34, offset: 5943},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 203, col: 37, offset: 5946},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 203, col: 42, offset: 5951},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 207, col: 1, offset: 6068},
			expr: &actionExpr{
				pos: position{line: 208, col: 5, offset: 6086},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 208, col: 5, offset: 6086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 208, col: 5, offset: 6086},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 11, offset: 6092},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 209, col: 5, offset: 6111},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 209, col: 10, offset: 6116},
								expr: &actionExpr{
									pos: position{line: 209, col: 11, offset: 6117},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 209, col: 11, offset: 6117},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 209, col: 11, offset: 6117},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 209, col: 14, offset: 6120},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 209, col: 17, offset: 6123},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 209, col: 40, offset: 6146},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 209, col: 43, offset: 6149},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 209, col: 48, offset: 6154},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 213, col: 1, offset: 6272},
			expr: &choiceExpr{
				pos: position{line: 214, col: 5, offset: 6291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 6291},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 214, col: 5, offset: 6291},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 214, col: 5, offset: 6291},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 7, offset: 6293},
										name: "SearchExprFunc",
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 22, offset: 6308},
									label: "typ",
									expr: &actionExpr{
										pos: position{line: 214, col: 28, offset: 6314},
										run: (*parser).callonSearchExprCast7,
										expr: &seqExpr{
											pos: position{line: 214, col: 28, offset: 6314},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 214, col: 28, offset: 6314},
													val:        ":",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 214, col: 32, offset: 6318},
													label: "typ",
													expr: &ruleRefExpr{
														pos:  position{line: 214, col: 36, offset: 6322},
														name: "PrimitiveType",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 217, col: 5, offset: 6452},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 219, col: 1, offset: 6468},
			expr: &choiceExpr{
				pos: position{line: 220, col: 5, offset: 6487},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 220, col: 5, offset: 6487},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 221, col: 5, offset: 6501},
						run: (*parser).callonSearchExprFunc3,
						expr: &seqExpr{
							pos: position{line: 221, col: 5, offset: 6501},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 221, col: 5, offset: 6501},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 11, offset: 6507},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 221, col: 20, offset: 6516},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 221, col: 25, offset: 6521},
										expr: &ruleRefExpr{
											pos:  position{line: 221, col: 26, offset: 6522},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6594},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6608},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 229, col: 1, offset: 6643},
			expr: &choiceExpr{
				pos: position{line: 230, col: 5, offset: 6659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 6659},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 230, col: 5, offset: 6659},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 230, col: 5, offset: 6659},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 230, col: 11, offset: 6665},
										expr: &ruleRefExpr{
											pos:  position{line: 230, col: 11, offset: 6665},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 230, col: 21, offset: 6675},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 230, col: 26, offset: 6680},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 230, col: 38, offset: 6692},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 230, col: 44, offset: 6698},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 233, col: 5, offset: 6847},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 233, col: 5, offset: 6847},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 233, col: 5, offset: 6847},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 233, col: 11, offset: 6853},
										expr: &ruleRefExpr{
											pos:  position{line: 233, col: 11, offset: 6853},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 233, col: 21, offset: 6863},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 233, col: 30, offset: 6872},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 233, col: 39, offset: 6881},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 233, col: 44, offset: 6886},
										expr: &seqExpr{
											pos: position{line: 233, col: 45, offset: 6887},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 233, col: 45, offset: 6887},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 233, col: 47, offset: 6889},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 233, col: 61, offset: 6903},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 233, col: 67, offset: 6909},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 241, col: 1, offset: 7150},
			expr: &actionExpr{
				pos: position{line: 242, col: 5, offset: 7163},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 242, col: 5, offset: 7163},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 5, offset: 7163},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 14, offset: 7172},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 16, offset: 7174},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 20, offset: 7178},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 29, offset: 7187},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 244, col: 1, offset: 7210},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 7226},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 7226},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 245, col: 5, offset: 7226},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 13, offset: 7234},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 15, offset: 7236},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 23, offset: 7244},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 247, col: 1, offset: 7285},
			expr: &choiceExpr{
				pos: position{line: 248, col: 5, offset: 7298},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 248, col: 5, offset: 7298},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 248, col: 5, offset: 7298},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 248, col: 5, offset: 7298},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 248, col: 7, offset: 7300},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 14, offset: 7307},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 248, col: 16, offset: 7309},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 25, offset: 7318},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 248, col: 27, offset: 7320},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 248, col: 33, offset: 7326},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 7357},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 249, col: 5, offset: 7357},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 254, col: 1, offset: 7617},
			expr: &choiceExpr{
				pos: position{line: 255, col: 5, offset: 7636},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7636},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 7651},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 256, col: 5, offset: 7651},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 10, offset: 7656},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 258, col: 1, offset: 7746},
			expr: &actionExpr{
				pos: position{line: 259, col: 5, offset: 7766},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 259, col: 5, offset: 7766},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 259, col: 5, offset: 7766},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 11, offset: 7772},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 259, col: 26, offset: 7787},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 259, col: 31, offset: 7792},
								expr: &actionExpr{
									pos: position{line: 259, col: 32, offset: 7793},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 259, col: 32, offset: 7793},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 259, col: 32, offset: 7793},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 259, col: 35, offset: 7796},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 259, col: 39, offset: 7800},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 259, col: 42, offset: 7803},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 259, col: 47, offset: 7808},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 263, col: 1, offset: 7930},
			expr: &choiceExpr{
				pos: position{line: 264, col: 5, offset: 7952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7952},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 7952},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 264, col: 5, offset: 7952},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 10, offset: 7957},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 264, col: 15, offset: 7962},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 264, col: 18, offset: 7965},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 264, col: 22, offset: 7969},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 264, col: 25, offset: 7972},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 33, offset: 7980},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 5, offset: 8090},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 267, col: 5, offset: 8090},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 13, offset: 8098},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 271, col: 1, offset: 8204},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 8216},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 8216},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 272, col: 5, offset: 8216},
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 6, offset: 8217},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 272, col: 16, offset: 8227},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 19, offset: 8230},
								name: "ReducerName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 31, offset: 8242},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 272, col: 34, offset: 8245},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 38, offset: 8249},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 41, offset: 8252},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 272, col: 46, offset: 8257},
								expr: &ruleRefExpr{
									pos:  position{line: 272, col: 46, offset: 8257},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 53, offset: 8264},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 272, col: 56, offset: 8267},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 272, col: 60, offset: 8271},
							expr: &seqExpr{
								pos: position{line: 272, col: 62, offset: 8273},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 272, col: 62, offset: 8273},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 272, col: 65, offset: 8276},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 272, col: 70, offset: 8281},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 272, col: 76, offset: 8287},
								expr: &ruleRefExpr{
									pos:  position{line: 272, col: 76, offset: 8287},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerName",
			pos:  position{line: 280, col: 1, offset: 8483},
			expr: &choiceExpr{
				pos: position{line: 281, col: 5, offset: 8499},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 8499},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 8518},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 8531},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 285, col: 1, offset: 8540},
			expr: &actionExpr{
				pos: position{line: 285, col: 15, offset: 8554},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 285, col: 15, offset: 8554},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 285, col: 15, offset: 8554},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 285, col: 17, offset: 8556},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 25, offset: 8564},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 285, col: 27, offset: 8566},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 32, offset: 8571},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 287, col: 1, offset: 8607},
			expr: &actionExpr{
				pos: position{line: 288, col: 5, offset: 8620},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 288, col: 5, offset: 8620},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 5, offset: 8620},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 11, offset: 8626},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 288, col: 29, offset: 8644},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 288, col: 34, offset: 8649},
								expr: &seqExpr{
									pos: position{line: 288, col: 35, offset: 8650},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 288, col: 35, offset: 8650},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 288, col: 38, offset: 8653},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 42, offset: 8657},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 288, col: 45, offset: 8660},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 296, col: 1, offset: 8865},
			expr: &choiceExpr{
				pos: position{line: 297, col: 5, offset: 8878},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 297, col: 5, offset: 8878},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 298, col: 5, offset: 8891},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 299, col: 5, offset: 8903},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 300, col: 5, offset: 8915},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 301, col: 5, offset: 8928},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 302, col: 5, offset: 8941},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 303, col: 5, offset: 8954},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 304, col: 5, offset: 8967},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 305, col: 5, offset: 8982},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 306, col: 5, offset: 8995},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 307, col: 5, offset: 9007},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 308, col: 5, offset: 9022},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 309, col: 5, offset: 9035},
						name: "JoinProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 311, col: 1, offset: 9045},
			expr: &actionExpr{
				pos: position{line: 312, col: 5, offset: 9058},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 312, col: 5, offset: 9058},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 5, offset: 9058},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 312, col: 13, offset: 9066},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 18, offset: 9071},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 312, col: 27, offset: 9080},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 312, col: 32, offset: 9085},
								expr: &actionExpr{
									pos: position{line: 312, col: 33, offset: 9086},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 312, col: 33, offset: 9086},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 312, col: 33, offset: 9086},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 312, col: 35, offset: 9088},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 312, col: 37, offset: 9090},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 326, col: 1, offset: 9509},
			expr: &actionExpr{
				pos: position{line: 326, col: 12, offset: 9520},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 326, col: 12, offset: 9520},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 326, col: 17, offset: 9525},
						expr: &actionExpr{
							pos: position{line: 326, col: 18, offset: 9526},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 326, col: 18, offset: 9526},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 326, col: 18, offset: 9526},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 326, col: 20, offset: 9528},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 326, col: 22, offset: 9530},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 328, col: 1, offset: 9586},
			expr: &choiceExpr{
				pos: position{line: 329, col: 5, offset: 9598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 329, col: 5, offset: 9598},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 329, col: 5, offset: 9598},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 330, col: 5, offset: 9673},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 330, col: 5, offset: 9673},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 330, col: 5, offset: 9673},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 330, col: 14, offset: 9682},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 330, col: 16, offset: 9684},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 330, col: 23, offset: 9691},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 330, col: 24, offset: 9692},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 330, col: 24, offset: 9692},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 330, col: 34, offset: 9702},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 332, col: 1, offset: 9816},
			expr: &actionExpr{
				pos: position{line: 333, col: 5, offset: 9828},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 333, col: 5, offset: 9828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 5, offset: 9828},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 333, col: 12, offset: 9835},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 18, offset: 9841},
								expr: &actionExpr{
									pos: position{line: 333, col: 19, offset: 9842},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 333, col: 19, offset: 9842},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 333, col: 19, offset: 9842},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 333, col: 21, offset: 9844},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 23, offset: 9846},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 47, offset: 9870},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 53, offset: 9876},
								expr: &seqExpr{
									pos: position{line: 333, col: 54, offset: 9877},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 333, col: 54, offset: 9877},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 333, col: 56, offset: 9879},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 67, offset: 9890},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 74, offset: 9897},
								expr: &actionExpr{
									pos: position{line: 333, col: 75, offset: 9898},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 333, col: 75, offset: 9898},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 333, col: 75, offset: 9898},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 333, col: 77, offset: 9900},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 79, offset: 9902},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 347, col: 1, offset: 10253},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 10265},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 10265},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 10265},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 12, offset: 10272},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 14, offset: 10274},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 22, offset: 10282},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 352, col: 1, offset: 10384},
			expr: &actionExpr{
				pos: position{line: 353, col: 5, offset: 10397},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 353, col: 5, offset: 10397},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 5, offset: 10397},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 13, offset: 10405},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 353, col: 15, offset: 10407},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 23, offset: 10415},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 357, col: 1, offset: 10518},
			expr: &actionExpr{
				pos: position{line: 358, col: 5, offset: 10531},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 358, col: 5, offset: 10531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 5, offset: 10531},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 358, col: 13, offset: 10539},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 15, offset: 10541},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 23, offset: 10549},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 362, col: 1, offset: 10647},
			expr: &choiceExpr{
				pos: position{line: 363, col: 5, offset: 10660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 10660},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 363, col: 5, offset: 10660},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 363, col: 5, offset: 10660},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 13, offset: 10668},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 363, col: 15, offset: 10670},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 363, col: 21, offset: 10676},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 10758},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 364, col: 5, offset: 10758},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 366, col: 1, offset: 10836},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10849},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10849},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 10849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 367, col: 5, offset: 10849},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 367, col: 13, offset: 10857},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 367, col: 15, offset: 10859},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 367, col: 21, offset: 10865},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10947},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 368, col: 5, offset: 10947},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 370, col: 1, offset: 11025},
			expr: &actionExpr{
				pos: position{line: 371, col: 5, offset: 11040},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 371, col: 5, offset: 11040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 5, offset: 11040},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 371, col: 15, offset: 11050},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 371, col: 17, offset: 11052},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 20, offset: 11055},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 375, col: 1, offset: 11092},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 11103},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 376, col: 5, offset: 11103},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 376, col: 10, offset: 11108},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 380, col: 1, offset: 11208},
			expr: &choiceExpr{
				pos: position{line: 381, col: 5, offset: 11221},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 11221},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 381, col: 5, offset: 11221},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 381, col: 5, offset: 11221},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 381, col: 13, offset: 11229},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 381, col: 15, offset: 11231},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 11322},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 384, col: 5, offset: 11322},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 388, col: 1, offset: 11414},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 11426},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 11426},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 11426},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 12, offset: 11433},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 14, offset: 11435},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 22, offset: 11443},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 393, col: 1, offset: 11546},
			expr: &actionExpr{
				pos: position{line: 394, col: 5, offset: 11561},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 394, col: 5, offset: 11561},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 5, offset: 11561},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 15, offset: 11571},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 17, offset: 11573},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 23, offset: 11579},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 394, col: 34, offset: 11590},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 394, col: 39, offset: 11595},
								expr: &actionExpr{
									pos: position{line: 394, col: 40, offset: 11596},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 394, col: 40, offset: 11596},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 394, col: 40, offset: 11596},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 394, col: 43, offset: 11599},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 394, col: 47, offset: 11603},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 394, col: 50, offset: 11606},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 394, col: 53, offset: 11609},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 402, col: 1, offset: 12020},
			expr: &actionExpr{
				pos: position{line: 403, col: 5, offset: 12033},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 403, col: 5, offset: 12033},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 5, offset: 12033},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 403, col: 13, offset: 12041},
							expr: &seqExpr{
								pos: position{line: 403, col: 15, offset: 12043},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 403, col: 15, offset: 12043},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 403, col: 18, offset: 12046},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 407, col: 1, offset: 12119},
			expr: &choiceExpr{
				pos: position{line: 408, col: 5, offset: 12132},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 408, col: 5, offset: 12132},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 408, col: 5, offset: 12132},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 408, col: 5, offset: 12132},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 408, col: 13, offset: 12140},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 408, col: 15, offset: 12142},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 408, col: 23, offset: 12150},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 408, col: 31, offset: 12158},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 408, col: 34, offset: 12161},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 408, col: 38, offset: 12165},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 408, col: 41, offset: 12168},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 408, col: 50, offset: 12177},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 408, col: 58, offset: 12185},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 408, col: 66, offset: 12193},
										expr: &seqExpr{
											pos: position{line: 408, col: 67, offset: 12194},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 408, col: 67, offset: 12194},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 408, col: 69, offset: 12196},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12454},
						run: (*parser).callonJoinProc18,
						expr: &seqExpr{
							pos: position{line: 415, col: 5, offset: 12454},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 415, col: 5, offset: 12454},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 13, offset: 12462},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 415, col: 15, offset: 12464},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 415, col: 19, offset: 12468},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 415, col: 27, offset: 12476},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 415, col: 35, offset: 12484},
										expr: &seqExpr{
											pos: position{line: 415, col: 36, offset: 12485},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 415, col: 36, offset: 12485},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 415, col: 38, offset: 12487},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 423, col: 1, offset: 12733},
			expr: &choiceExpr{
				pos: position{line: 424, col: 5, offset: 12745},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 424, col: 5, offset: 12745},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 425, col: 5, offset: 12754},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 425, col: 5, offset: 12754},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 425, col: 5, offset: 12754},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 425, col: 9, offset: 12758},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 425, col: 14, offset: 12763},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 425, col: 19, offset: 12768},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 427, col: 1, offset: 12794},
			expr: &ruleRefExpr{
				pos:  position{line: 427, col: 8, offset: 12801},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 429, col: 1, offset: 12812},
			expr: &ruleRefExpr{
				pos:  position{line: 429, col: 13, offset: 12824},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 431, col: 1, offset: 12830},
			expr: &actionExpr{
				pos: position{line: 432, col: 5, offset: 12845},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 432, col: 5, offset: 12845},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 432, col: 5, offset: 12845},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 11, offset: 12851},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 21, offset: 12861},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 432, col: 26, offset: 12866},
								expr: &seqExpr{
									pos: position{line: 432, col: 27, offset: 12867},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 432, col: 27, offset: 12867},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 432, col: 30, offset: 12870},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 432, col: 34, offset: 12874},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 432, col: 37, offset: 12877},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 442, col: 1, offset: 13076},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13086},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 443, col: 5, offset: 13086},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 11, offset: 13092},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 16, offset: 13097},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 443, col: 21, offset: 13102},
								expr: &seqExpr{
									pos: position{line: 443, col: 22, offset: 13103},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 443, col: 22, offset: 13103},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 443, col: 25, offset: 13106},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 443, col: 29, offset: 13110},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 443, col: 32, offset: 13113},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 453, col: 1, offset: 13307},
			expr: &actionExpr{
				pos: position{line: 454, col: 5, offset: 13322},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 454, col: 5, offset: 13322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 454, col: 5, offset: 13322},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 9, offset: 13326},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 454, col: 14, offset: 13331},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 454, col: 17, offset: 13334},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 454, col: 21, offset: 13338},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 454, col: 24, offset: 13341},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 28, offset: 13345},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 456, col: 1, offset: 13434},
			expr: &ruleRefExpr{
				pos:  position{line: 456, col: 8, offset: 13441},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 458, col: 1, offset: 13458},
			expr: &choiceExpr{
				pos: position{line: 459, col: 5, offset: 13478},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 459, col: 5, offset: 13478},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 459, col: 5, offset: 13478},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 459, col: 5, offset: 13478},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 459, col: 15, offset: 13488},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 29, offset: 13502},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 459, col: 32, offset: 13505},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 36, offset: 13509},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 459, col: 39, offset: 13512},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 459, col: 50, offset: 13523},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 55, offset: 13528},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 459, col: 58, offset: 13531},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 459, col: 62, offset: 13535},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 459, col: 65, offset: 13538},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 459, col: 76, offset: 13549},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 5, offset: 13696},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 464, col: 1, offset: 13711},
			expr: &actionExpr{
				pos: position{line: 465, col: 5, offset: 13729},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 465, col: 5, offset: 13729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 13729},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 11, offset: 13735},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 466, col: 5, offset: 13754},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 466, col: 10, offset: 13759},
								expr: &actionExpr{
									pos: position{line: 466, col: 11, offset: 13760},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 466, col: 11, offset: 13760},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 466, col: 11, offset: 13760},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 466, col: 14, offset: 13763},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 17, offset: 13766},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 466, col: 25, offset: 13774},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 466, col: 28, offset: 13777},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 33, offset: 13782},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 470, col: 1, offset: 13900},
			expr: &actionExpr{
				pos: position{line: 471, col: 5, offset: 13919},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 471, col: 5, offset: 13919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 13919},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 13925},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 472, col: 5, offset: 13949},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 472, col: 10, offset: 13954},
								expr: &actionExpr{
									pos: position{line: 472, col: 11, offset: 13955},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 472, col: 11, offset: 13955},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 472, col: 11, offset: 13955},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 14, offset: 13958},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 17, offset: 13961},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 472, col: 26, offset: 13970},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 29, offset: 13973},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 472, col: 34, offset: 13978},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 476, col: 1, offset: 14101},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14125},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14125},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 477, col: 5, offset: 14125},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 14131},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 478, col: 5, offset: 14148},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 478, col: 10, offset: 14153},
								expr: &actionExpr{
									pos: position{line: 478, col: 11, offset: 14154},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 478, col: 11, offset: 14154},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 478, col: 11, offset: 14154},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 478, col: 14, offset: 14157},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 478, col: 19, offset: 14162},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 478, col: 38, offset: 14181},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 478, col: 41, offset: 14184},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 478, col: 46, offset: 14189},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 482, col: 1, offset: 14307},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 14328},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 483, col: 6, offset: 14329},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 483, col: 6, offset: 14329},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 483, col: 12, offset: 14335},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 485, col: 1, offset: 14373},
			expr: &choiceExpr{
				pos: position{line: 486, col: 5, offset: 14396},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 486, col: 5, offset: 14396},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 487, col: 5, offset: 14417},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 487, col: 5, offset: 14417},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 489, col: 1, offset: 14454},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 14471},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 14471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 490, col: 5, offset: 14471},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 11, offset: 14477},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 5, offset: 14494},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 491, col: 10, offset: 14499},
								expr: &actionExpr{
									pos: position{line: 491, col: 11, offset: 14500},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 491, col: 11, offset: 14500},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 491, col: 11, offset: 14500},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 14, offset: 14503},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 17, offset: 14506},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 491, col: 34, offset: 14523},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 37, offset: 14526},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 42, offset: 14531},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 495, col: 1, offset: 14647},
			expr: &actionExpr{
				pos: position{line: 495, col: 20, offset: 14666},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 495, col: 21, offset: 14667},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 495, col: 21, offset: 14667},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 495, col: 28, offset: 14674},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 495, col: 34, offset: 14680},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 495, col: 41, offset: 14687},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 497, col: 1, offset: 14724},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 14741},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 14741},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 498, col: 5, offset: 14741},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 14747},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 5, offset: 14770},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 499, col: 10, offset: 14775},
								expr: &actionExpr{
									pos: position{line: 499, col: 11, offset: 14776},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 499, col: 11, offset: 14776},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 499, col: 11, offset: 14776},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 499, col: 14, offset: 14779},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 499, col: 17, offset: 14782},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 499, col: 34, offset: 14799},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 499, col: 37, offset: 14802},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 499, col: 42, offset: 14807},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 503, col: 1, offset: 14929},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 14948},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 503, col: 21, offset: 14949},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 503, col: 21, offset: 14949},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 503, col: 27, offset: 14955},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 505, col: 1, offset: 14992},
			expr: &actionExpr{
				pos: position{line: 506, col: 5, offset: 15015},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 506, col: 5, offset: 15015},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 506, col: 5, offset: 15015},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 15021},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 5, offset: 15033},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 507, col: 10, offset: 15038},
								expr: &actionExpr{
									pos: position{line: 507, col: 11, offset: 15039},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 507, col: 11, offset: 15039},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 507, col: 11, offset: 15039},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 507, col: 14, offset: 15042},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 507, col: 17, offset: 15045},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 507, col: 40, offset: 15068},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 507, col: 43, offset: 15071},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 507, col: 48, offset: 15076},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 511, col: 1, offset: 15187},
			expr: &actionExpr{
				pos: position{line: 511, col: 26, offset: 15212},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 511, col: 27, offset: 15213},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 511, col: 27, offset: 15213},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 511, col: 33, offset: 15219},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 513, col: 1, offset: 15256},
			expr: &choiceExpr{
				pos: position{line: 514, col: 5, offset: 15268},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 15268},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 514, col: 5, offset: 15268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 514, col: 5, offset: 15268},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 514, col: 9, offset: 15272},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 514, col: 12, offset: 15275},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 514, col: 14, offset: 15277},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 5, offset: 15390},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 519, col: 1, offset: 15400},
			expr: &choiceExpr{
				pos: position{line: 520, col: 5, offset: 15413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 520, col: 5, offset: 15413},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 520, col: 5, offset: 15413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 520, col: 5, offset: 15413},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 520, col: 7, offset: 15415},
										name: "FuncExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 520, col: 16, offset: 15424},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 520, col: 20, offset: 15428},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 520, col: 24, offset: 15432},
										name: "PrimitiveType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 523, col: 5, offset: 15541},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 525, col: 1, offset: 15551},
			expr: &actionExpr{
				pos: position{line: 526, col: 5, offset: 15569},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 526, col: 9, offset: 15573},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 526, col: 9, offset: 15573},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 526, col: 19, offset: 15583},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 526, col: 29, offset: 15593},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 526, col: 40, offset: 15604},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 526, col: 51, offset: 15615},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 527, col: 9, offset: 15632},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 527, col: 18, offset: 15641},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 527, col: 28, offset: 15651},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 527, col: 38, offset: 15661},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 528, col: 9, offset: 15677},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 528, col: 22, offset: 15690},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 529, col: 9, offset: 15705},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 530, col: 9, offset: 15723},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 530, col: 18, offset: 15732},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 530, col: 28, offset: 15742},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 530, col: 39, offset: 15753},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 531, col: 9, offset: 15771},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 531, col: 16, offset: 15778},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 532, col: 9, offset: 15792},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 532, col: 18, offset: 15801},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 532, col: 28, offset: 15811},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 534, col: 1, offset: 15852},
			expr: &choiceExpr{
				pos: position{line: 535, col: 5, offset: 15865},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 535, col: 5, offset: 15865},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 536, col: 5, offset: 15880},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 537, col: 5, offset: 15894},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 537, col: 5, offset: 15894},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 537, col: 5, offset: 15894},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 15900},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 537, col: 20, offset: 15909},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 537, col: 25, offset: 15914},
										expr: &ruleRefExpr{
											pos:  position{line: 537, col: 26, offset: 15915},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 540, col: 5, offset: 15986},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 16000},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 543, col: 1, offset: 16009},
			expr: &seqExpr{
				pos: position{line: 543, col: 13, offset: 16021},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 543, col: 13, offset: 16021},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 22, offset: 16030},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 543, col: 25, offset: 16033},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 545, col: 1, offset: 16038},
			expr: &choiceExpr{
				pos: position{line: 546, col: 5, offset: 16051},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 546, col: 5, offset: 16051},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 547, col: 5, offset: 16061},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 548, col: 5, offset: 16073},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 550, col: 1, offset: 16083},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16097},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16097},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 551, col: 5, offset: 16097},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 551, col: 13, offset: 16105},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 551, col: 16, offset: 16108},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 551, col: 20, offset: 16112},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 25, offset: 16117},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 551, col: 39, offset: 16131},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 553, col: 1, offset: 16157},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16172},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 16172},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 554, col: 5, offset: 16172},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 14, offset: 16181},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 554, col: 17, offset: 16184},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 21, offset: 16188},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 24, offset: 16191},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 29, offset: 16196},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 42, offset: 16209},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 554, col: 45, offset: 16212},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 554, col: 49, offset: 16216},
							label: "methods",
							expr: &zeroOrMoreExpr{
								pos: position{line: 554, col: 57, offset: 16224},
								expr: &actionExpr{
									pos: position{line: 554, col: 58, offset: 16225},
									run: (*parser).callonSelectExpr13,
									expr: &seqExpr{
										pos: position{line: 554, col: 58, offset: 16225},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 554, col: 58, offset: 16225},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 554, col: 61, offset: 16228},
												val:        ".",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 554, col: 65, offset: 16232},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 554, col: 68, offset: 16235},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 554, col: 70, offset: 16237},
													name: "Function",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 558, col: 1, offset: 16403},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16416},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16416},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 559, col: 5, offset: 16416},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 6, offset: 16417},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 16, offset: 16427},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 19, offset: 16430},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 34, offset: 16445},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 559, col: 37, offset: 16448},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 41, offset: 16452},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 44, offset: 16455},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 49, offset: 16460},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 62, offset: 16473},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 559, col: 65, offset: 16476},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 563, col: 1, offset: 16582},
			expr: &choiceExpr{
				pos: position{line: 564, col: 5, offset: 16599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 564, col: 5, offset: 16599},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 564, col: 5, offset: 16599},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 564, col: 5, offset: 16599},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 564, col: 11, offset: 16605},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 564, col: 16, offset: 16610},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 564, col: 21, offset: 16615},
										expr: &actionExpr{
											pos: position{line: 564, col: 22, offset: 16616},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 564, col: 22, offset: 16616},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 564, col: 22, offset: 16616},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 564, col: 25, offset: 16619},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 564, col: 29, offset: 16623},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 564, col: 32, offset: 16626},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 564, col: 34, offset: 16628},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 16740},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 567, col: 5, offset: 16740},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 569, col: 1, offset: 16776},
			expr: &choiceExpr{
				pos: position{line: 570, col: 5, offset: 16790},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 16790},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 16790},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 570, col: 5, offset: 16790},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 11, offset: 16796},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 570, col: 17, offset: 16802},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 570, col: 22, offset: 16807},
										expr: &ruleRefExpr{
											pos:  position{line: 570, col: 23, offset: 16808},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 16879},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 573, col: 5, offset: 16879},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 573, col: 5, offset: 16879},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 573, col: 11, offset: 16885},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 573, col: 22, offset: 16896},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 573, col: 27, offset: 16901},
										expr: &ruleRefExpr{
											pos:  position{line: 573, col: 28, offset: 16902},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 16973},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 576, col: 5, offset: 16973},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 580, col: 1, offset: 17046},
			expr: &choiceExpr{
				pos: position{line: 581, col: 5, offset: 17056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 581, col: 5, offset: 17056},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 581, col: 5, offset: 17056},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 581, col: 5, offset: 17056},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 581, col: 9, offset: 17060},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 581, col: 15, offset: 17066},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 5, offset: 17290},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 590, col: 5, offset: 17290},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 590, col: 5, offset: 17290},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 590, col: 9, offset: 17294},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 590, col: 13, offset: 17298},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 590, col: 18, offset: 17303},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 590, col: 23, offset: 17308},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 600, col: 1, offset: 17521},
			expr: &choiceExpr{
				pos: position{line: 601, col: 5, offset: 17531},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 601, col: 5, offset: 17531},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 601, col: 5, offset: 17531},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 601, col: 5, offset: 17531},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 601, col: 9, offset: 17535},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 601, col: 14, offset: 17540},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 601, col: 27, offset: 17553},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 601, col: 30, offset: 17556},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 601, col: 34, offset: 17560},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 601, col: 37, offset: 17563},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 601, col: 40, offset: 17566},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 601, col: 53, offset: 17579},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 607, col: 5, offset: 17754},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 607, col: 5, offset: 17754},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 607, col: 5, offset: 17754},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 9, offset: 17758},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 607, col: 12, offset: 17761},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 16, offset: 17765},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 607, col: 19, offset: 17768},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 607, col: 22, offset: 17771},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 607, col: 35, offset: 17784},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 17991},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 613, col: 5, offset: 17991},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 613, col: 5, offset: 17991},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 613, col: 9, offset: 17995},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 14, offset: 18000},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 27, offset: 18013},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 613, col: 30, offset: 18016},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 34, offset: 18020},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 613, col: 37, offset: 18023},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18232},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 18232},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 619, col: 5, offset: 18232},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 619, col: 9, offset: 18236},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 14, offset: 18241},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 619, col: 19, offset: 18246},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 620, col: 5, offset: 18295},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 620, col: 5, offset: 18295},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 620, col: 5, offset: 18295},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 620, col: 9, offset: 18299},
									expr: &litMatcher{
										pos:        position{line: 620, col: 11, offset: 18301},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 620, col: 16, offset: 18306},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 19, offset: 18309},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 622, col: 1, offset: 18360},
			expr: &choiceExpr{
				pos: position{line: 623, col: 5, offset: 18372},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 623, col: 5, offset: 18372},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 624, col: 5, offset: 18384},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 624, col: 5, offset: 18384},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 624, col: 5, offset: 18384},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 624, col: 9, offset: 18388},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 624, col: 12, offset: 18391},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 624, col: 17, offset: 18396},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 624, col: 22, offset: 18401},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 624, col: 25, offset: 18404},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 626, col: 1, offset: 18430},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 18442},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 627, col: 5, offset: 18442},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 5, offset: 18460},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 629, col: 5, offset: 18478},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 630, col: 5, offset: 18496},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 631, col: 5, offset: 18515},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 632, col: 5, offset: 18532},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 633, col: 5, offset: 18551},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 634, col: 5, offset: 18570},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 636, col: 1, offset: 18583},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 18601},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 637, col: 5, offset: 18601},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 637, col: 7, offset: 18603},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 641, col: 1, offset: 18713},
			expr: &actionExpr{
				pos: position{line: 642, col: 5, offset: 18731},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 642, col: 5, offset: 18731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 642, col: 5, offset: 18731},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 7, offset: 18733},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 642, col: 14, offset: 18740},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 15, offset: 18741},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 646, col: 1, offset: 18851},
			expr: &choiceExpr{
				pos: position{line: 647, col: 5, offset: 18869},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 647, col: 5, offset: 18869},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 647, col: 5, offset: 18869},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 647, col: 5, offset: 18869},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 647, col: 7, offset: 18871},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 647, col: 14, offset: 18878},
									expr: &ruleRefExpr{
										pos:  position{line: 647, col: 15, offset: 18879},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 18991},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 650, col: 5, offset: 18991},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 7, offset: 18993},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 654, col: 1, offset: 19094},
			expr: &choiceExpr{
				pos: position{line: 655, col: 5, offset: 19113},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 655, col: 5, offset: 19113},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 655, col: 5, offset: 19113},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 655, col: 5, offset: 19113},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 655, col: 7, offset: 19115},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 655, col: 11, offset: 19119},
									expr: &ruleRefExpr{
										pos:  position{line: 655, col: 12, offset: 19120},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 658, col: 5, offset: 19231},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 658, col: 5, offset: 19231},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 7, offset: 19233},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 662, col: 1, offset: 19329},
			expr: &actionExpr{
				pos: position{line: 663, col: 5, offset: 19346},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 663, col: 5, offset: 19346},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 663, col: 7, offset: 19348},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 667, col: 1, offset: 19458},
			expr: &actionExpr{
				pos: position{line: 668, col: 5, offset: 19477},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 668, col: 5, offset: 19477},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 668, col: 7, offset: 19479},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 672, col: 1, offset: 19585},
			expr: &choiceExpr{
				pos: position{line: 673, col: 5, offset: 19604},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 19604},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 673, col: 5, offset: 19604},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19714},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 674, col: 5, offset: 19714},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 676, col: 1, offset: 19822},
			expr: &actionExpr{
				pos: position{line: 677, col: 5, offset: 19838},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 677, col: 5, offset: 19838},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 679, col: 1, offset: 19941},
			expr: &choiceExpr{
				pos: position{line: 680, col: 5, offset: 19959},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 680, col: 5, offset: 19959},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 680, col: 24, offset: 19978},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 682, col: 1, offset: 19996},
			expr: &actionExpr{
				pos: position{line: 682, col: 12, offset: 20007},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 682, col: 12, offset: 20007},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 683, col: 1, offset: 20036},
			expr: &actionExpr{
				pos: position{line: 683, col: 11, offset: 20046},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 683, col: 11, offset: 20046},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 684, col: 1, offset: 20073},
			expr: &actionExpr{
				pos: position{line: 684, col: 11, offset: 20083},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 684, col: 11, offset: 20083},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 685, col: 1, offset: 20110},
			expr: &actionExpr{
				pos: position{line: 685, col: 12, offset: 20121},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 685, col: 12, offset: 20121},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 686, col: 1, offset: 20150},
			expr: &actionExpr{
				pos: position{line: 686, col: 11, offset: 20160},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 686, col: 11, offset: 20160},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 688, col: 1, offset: 20188},
			expr: &charClassMatcher{
				pos:        position{line: 688, col: 19, offset: 20206},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 689, col: 1, offset: 20217},
			expr: &choiceExpr{
				pos: position{line: 689, col: 18, offset: 20234},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 689, col: 18, offset: 20234},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 689, col: 36, offset: 20252},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 691, col: 1, offset: 20259},
			expr: &actionExpr{
				pos: position{line: 692, col: 5, offset: 20274},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 692, col: 5, offset: 20274},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 692, col: 8, offset: 20277},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 694, col: 1, offset: 20364},
			expr: &choiceExpr{
				pos: position{line: 695, col: 5, offset: 20383},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 20383},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 695, col: 5, offset: 20383},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 695, col: 5, offset: 20383},
									expr: &seqExpr{
										pos: position{line: 695, col: 7, offset: 20385},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 695, col: 7, offset: 20385},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 695, col: 15, offset: 20393},
												expr: &ruleRefExpr{
													pos:  position{line: 695, col: 16, offset: 20394},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 695, col: 32, offset: 20410},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 695, col: 48, offset: 20426},
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 48, offset: 20426},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 20478},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 696, col: 5, offset: 20478},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 20517},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 20517},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 697, col: 5, offset: 20517},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 697, col: 10, offset: 20522},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 13, offset: 20525},
										name: "IdGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 699, col: 1, offset: 20553},
			expr: &choiceExpr{
				pos: position{line: 700, col: 5, offset: 20565},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 700, col: 5, offset: 20565},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 701, col: 5, offset: 20584},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 702, col: 5, offset: 20600},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 704, col: 1, offset: 20613},
			expr: &choiceExpr{
				pos: position{line: 705, col: 5, offset: 20626},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 705, col: 5, offset: 20626},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 706, col: 5, offset: 20638},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 707, col: 5, offset: 20650},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 708, col: 5, offset: 20660},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 708, col: 5, offset: 20660},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 708, col: 11, offset: 20666},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 708, col: 13, offset: 20668},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 708, col: 19, offset: 20674},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 708, col: 21, offset: 20676},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 709, col: 5, offset: 20688},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 710, col: 5, offset: 20697},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 712, col: 1, offset: 20704},
			expr: &choiceExpr{
				pos: position{line: 713, col: 5, offset: 20721},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 713, col: 5, offset: 20721},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 714, col: 5, offset: 20735},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 715, col: 5, offset: 20748},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 716, col: 5, offset: 20759},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 717, col: 5, offset: 20769},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 719, col: 1, offset: 20774},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 20791},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 720, col: 5, offset: 20791},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 721, col: 5, offset: 20805},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 722, col: 5, offset: 20818},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 723, col: 5, offset: 20829},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 724, col: 5, offset: 20839},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 726, col: 1, offset: 20844},
			expr: &choiceExpr{
				pos: position{line: 727, col: 5, offset: 20859},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 727, col: 5, offset: 20859},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 728, col: 5, offset: 20871},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 729, col: 5, offset: 20881},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 730, col: 5, offset: 20890},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 731, col: 5, offset: 20898},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 733, col: 1, offset: 20906},
			expr: &choiceExpr{
				pos: position{line: 733, col: 13, offset: 20918},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 733, col: 13, offset: 20918},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 733, col: 20, offset: 20925},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 733, col: 26, offset: 20931},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 734, col: 1, offset: 20935},
			expr: &choiceExpr{
				pos: position{line: 734, col: 14, offset: 20948},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 734, col: 14, offset: 20948},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 734, col: 22, offset: 20956},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 734, col: 29, offset: 20963},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 734, col: 35, offset: 20969},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 734, col: 40, offset: 20974},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 736, col: 1, offset: 20979},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 20991},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 737, col: 5, offset: 20991},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 737, col: 5, offset: 20991},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 21077},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 738, col: 5, offset: 21077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 738, col: 5, offset: 21077},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 9, offset: 21081},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 14, offset: 21086},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 17, offset: 21089},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 740, col: 1, offset: 21178},
			expr: &choiceExpr{
				pos: position{line: 741, col: 5, offset: 21190},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 741, col: 5, offset: 21190},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 741, col: 5, offset: 21190},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21277},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 742, col: 5, offset: 21277},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 9, offset: 21281},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 14, offset: 21286},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 17, offset: 21289},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 744, col: 1, offset: 21387},
			expr: &choiceExpr{
				pos: position{line: 745, col: 5, offset: 21397},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 21397},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 745, col: 5, offset: 21397},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21484},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 21484},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 746, col: 5, offset: 21484},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 9, offset: 21488},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 14, offset: 21493},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 17, offset: 21496},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 748, col: 1, offset: 21594},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 21603},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 21603},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 749, col: 5, offset: 21603},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 750, col: 5, offset: 21692},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 750, col: 5, offset: 21692},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 750, col: 5, offset: 21692},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 750, col: 9, offset: 21696},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 750, col: 14, offset: 21701},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 750, col: 17, offset: 21704},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 752, col: 1, offset: 21806},
			expr: &choiceExpr{
				pos: position{line: 753, col: 5, offset: 21816},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 21816},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 753, col: 5, offset: 21816},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 21908},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 754, col: 5, offset: 21908},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 754, col: 5, offset: 21908},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 754, col: 9, offset: 21912},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 14, offset: 21917},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 17, offset: 21920},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 757, col: 1, offset: 22051},
			expr: &actionExpr{
				pos: position{line: 758, col: 5, offset: 22058},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 758, col: 5, offset: 22058},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 758, col: 5, offset: 22058},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 758, col: 10, offset: 22063},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 14, offset: 22067},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 758, col: 19, offset: 22072},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 23, offset: 22076},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 758, col: 28, offset: 22081},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 32, offset: 22085},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 760, col: 1, offset: 22122},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 22130},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 761, col: 5, offset: 22130},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 761, col: 5, offset: 22130},
							expr: &seqExpr{
								pos: position{line: 761, col: 8, offset: 22133},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 761, col: 8, offset: 22133},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 761, col: 12, offset: 22137},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 761, col: 16, offset: 22141},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 761, col: 20, offset: 22145},
										expr: &choiceExpr{
											pos: position{line: 761, col: 22, offset: 22147},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 761, col: 22, offset: 22147},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 761, col: 33, offset: 22158},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 761, col: 39, offset: 22164},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 41, offset: 22166},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 765, col: 1, offset: 22330},
			expr: &choiceExpr{
				pos: position{line: 766, col: 5, offset: 22348},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 22348},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 766, col: 5, offset: 22348},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 766, col: 5, offset: 22348},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 766, col: 7, offset: 22350},
										expr: &ruleRefExpr{
											pos:  position{line: 766, col: 7, offset: 22350},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 766, col: 17, offset: 22360},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 19, offset: 22362},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22426},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 769, col: 5, offset: 22426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 769, col: 5, offset: 22426},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 7, offset: 22428},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 769, col: 11, offset: 22432},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 769, col: 13, offset: 22434},
										expr: &ruleRefExpr{
											pos:  position{line: 769, col: 13, offset: 22434},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 769, col: 23, offset: 22444},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 769, col: 28, offset: 22449},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 769, col: 30, offset: 22451},
										expr: &ruleRefExpr{
											pos:  position{line: 769, col: 30, offset: 22451},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 769, col: 40, offset: 22461},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 42, offset: 22463},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 22562},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 772, col: 5, offset: 22562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 772, col: 5, offset: 22562},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 772, col: 10, offset: 22567},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 772, col: 12, offset: 22569},
										expr: &ruleRefExpr{
											pos:  position{line: 772, col: 12, offset: 22569},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 772, col: 22, offset: 22579},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 772, col: 24, offset: 22581},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 22652},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 775, col: 5, offset: 22652},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 775, col: 5, offset: 22652},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 775, col: 7, offset: 22654},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 775, col: 11, offset: 22658},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 775, col: 13, offset: 22660},
										expr: &ruleRefExpr{
											pos:  position{line: 775, col: 13, offset: 22660},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 775, col: 23, offset: 22670},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22738},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 778, col: 5, offset: 22738},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 782, col: 1, offset: 22775},
			expr: &choiceExpr{
				pos: position{line: 783, col: 5, offset: 22787},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 783, col: 5, offset: 22787},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 784, col: 5, offset: 22794},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 786, col: 1, offset: 22799},
			expr: &actionExpr{
				pos: position{line: 786, col: 12, offset: 22810},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 786, col: 12, offset: 22810},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 786, col: 12, offset: 22810},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 786, col: 16, offset: 22814},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 18, offset: 22816},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 787, col: 1, offset: 22853},
			expr: &actionExpr{
				pos: position{line: 787, col: 12, offset: 22864},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 787, col: 12, offset: 22864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 787, col: 12, offset: 22864},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 14, offset: 22866},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 787, col: 18, offset: 22870},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 789, col: 1, offset: 22908},
			expr: &actionExpr{
				pos: position{line: 790, col: 5, offset: 22919},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 790, col: 5, offset: 22919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 790, col: 5, offset: 22919},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 7, offset: 22921},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 790, col: 10, offset: 22924},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 790, col: 14, offset: 22928},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 16, offset: 22930},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 794, col: 1, offset: 23003},
			expr: &actionExpr{
				pos: position{line: 795, col: 5, offset: 23014},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 795, col: 5, offset: 23014},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 795, col: 5, offset: 23014},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 7, offset: 23016},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 795, col: 11, offset: 23020},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 795, col: 15, offset: 23024},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 17, offset: 23026},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 799, col: 1, offset: 23089},
			expr: &actionExpr{
				pos: position{line: 800, col: 4, offset: 23097},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 800, col: 4, offset: 23097},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 800, col: 6, offset: 23099},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 802, col: 1, offset: 23139},
			expr: &choiceExpr{
				pos: position{line: 803, col: 5, offset: 23153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 803, col: 5, offset: 23153},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 804, col: 5, offset: 23168},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 806, col: 1, offset: 23184},
			expr: &actionExpr{
				pos: position{line: 806, col: 14, offset: 23197},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 806, col: 14, offset: 23197},
					expr: &charClassMatcher{
						pos:        position{line: 806, col: 14, offset: 23197},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 808, col: 1, offset: 23236},
			expr: &actionExpr{
				pos: position{line: 809, col: 5, offset: 23255},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 809, col: 5, offset: 23255},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 809, col: 5, offset: 23255},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 9, offset: 23259},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 811, col: 1, offset: 23302},
			expr: &choiceExpr{
				pos: position{line: 812, col: 5, offset: 23318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 812, col: 5, offset: 23318},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 812, col: 5, offset: 23318},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 812, col: 5, offset: 23318},
									expr: &litMatcher{
										pos:        position{line: 812, col: 5, offset: 23318},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 812, col: 10, offset: 23323},
									expr: &charClassMatcher{
										pos:        position{line: 812, col: 10, offset: 23323},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 812, col: 17, offset: 23330},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 812, col: 21, offset: 23334},
									expr: &charClassMatcher{
										pos:        position{line: 812, col: 21, offset: 23334},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 812, col: 28, offset: 23341},
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 28, offset: 23341},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 815, col: 5, offset: 23400},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 815, col: 5, offset: 23400},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 815, col: 5, offset: 23400},
									expr: &litMatcher{
										pos:        position{line: 815, col: 5, offset: 23400},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 815, col: 10, offset: 23405},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 815, col: 14, offset: 23409},
									expr: &charClassMatcher{
										pos:        position{line: 815, col: 14, offset: 23409},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 815, col: 21, offset: 23416},
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 21, offset: 23416},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 819, col: 1, offset: 23472},
			expr: &seqExpr{
				pos: position{line: 819, col: 16, offset: 23487},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 819, col: 16, offset: 23487},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 819, col: 21, offset: 23492},
						expr: &charClassMatcher{
							pos:        position{line: 819, col: 21, offset: 23492},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 819, col: 27, offset: 23498},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 821, col: 1, offset: 23510},
			expr: &actionExpr{
				pos: position{line: 821, col: 7, offset: 23516},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 821, col: 7, offset: 23516},
					expr: &ruleRefExpr{
						pos:  position{line: 821, col: 7, offset: 23516},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 823, col: 1, offset: 23558},
			expr: &charClassMatcher{
				pos:        position{line: 823, col: 12, offset: 23569},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 826, col: 1, offset: 23583},
			expr: &choiceExpr{
				pos: position{line: 827, col: 5, offset: 23600},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 23600},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 827, col: 5, offset: 23600},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 827, col: 5, offset: 23600},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 827, col: 9, offset: 23604},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 827, col: 11, offset: 23606},
										expr: &ruleRefExpr{
											pos:  position{line: 827, col: 11, offset: 23606},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 827, col: 29, offset: 23624},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 828, col: 5, offset: 23661},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 828, col: 5, offset: 23661},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 828, col: 5, offset: 23661},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 828, col: 9, offset: 23665},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 828, col: 11, offset: 23667},
										expr: &ruleRefExpr{
											pos:  position{line: 828, col: 11, offset: 23667},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 828, col: 29, offset: 23685},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 830, col: 1, offset: 23719},
			expr: &choiceExpr{
				pos: position{line: 831, col: 5, offset: 23740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 23740},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 23740},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 831, col: 5, offset: 23740},
									expr: &choiceExpr{
										pos: position{line: 831, col: 7, offset: 23742},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 831, col: 7, offset: 23742},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 831, col: 13, offset: 23748},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 831, col: 26, offset: 23761,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 23798},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 23798},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 832, col: 5, offset: 23798},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 832, col: 10, offset: 23803},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 12, offset: 23805},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 834, col: 1, offset: 23839},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 23851},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 835, col: 5, offset: 23851},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 835, col: 5, offset: 23851},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 10, offset: 23856},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 23, offset: 23869},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 835, col: 28, offset: 23874},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 28, offset: 23874},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 837, col: 1, offset: 23936},
			expr: &choiceExpr{
				pos: position{line: 838, col: 5, offset: 23953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 23953},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 838, col: 5, offset: 23953},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 839, col: 5, offset: 24005},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 841, col: 1, offset: 24017},
			expr: &choiceExpr{
				pos: position{line: 842, col: 5, offset: 24033},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 842, col: 5, offset: 24033},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 843, col: 5, offset: 24050},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 845, col: 1, offset: 24057},
			expr: &actionExpr{
				pos: position{line: 845, col: 14, offset: 24070},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 845, col: 14, offset: 24070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 845, col: 14, offset: 24070},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 845, col: 19, offset: 24075},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 845, col: 22, offset: 24078},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 845, col: 22, offset: 24078},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 845, col: 38, offset: 24094},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 847, col: 1, offset: 24130},
			expr: &choiceExpr{
				pos: position{line: 848, col: 5, offset: 24151},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 24151},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 24151},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 848, col: 5, offset: 24151},
									expr: &choiceExpr{
										pos: position{line: 848, col: 7, offset: 24153},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 848, col: 7, offset: 24153},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 848, col: 13, offset: 24159},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 848, col: 26, offset: 24172,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24209},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 849, col: 5, offset: 24209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 849, col: 5, offset: 24209},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 849, col: 10, offset: 24214},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 12, offset: 24216},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 851, col: 1, offset: 24250},
			expr: &choiceExpr{
				pos: position{line: 852, col: 5, offset: 24269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 24269},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 852, col: 5, offset: 24269},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 852, col: 5, offset: 24269},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 9, offset: 24273},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 852, col: 18, offset: 24282},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 853, col: 5, offset: 24333},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 854, col: 5, offset: 24354},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 856, col: 1, offset: 24369},
			expr: &choiceExpr{
				pos: position{line: 857, col: 5, offset: 24390},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 24390},
						run: (*parser).callonSingleCharEscape2,
						expr: &litMatcher{
							pos:        position{line: 857, col: 5, offset: 24390},
							val:        "'",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 24417},
						run: (*parser).callonSingleCharEscape4,
						expr: &litMatcher{
							pos:        position{line: 858, col: 5, offset: 24417},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 24444},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 859, col: 5, offset: 24444},
							val:        "\\",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 860, col: 5, offset: 24473},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 860, col: 5, offset: 24473},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 24502},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 861, col: 5, offset: 24502},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 862, col: 5, offset: 24531},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 862, col: 5, offset: 24531},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 24560},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 863, col: 5, offset: 24560},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 864, col: 5, offset: 24589},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 864, col: 5, offset: 24589},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 24618},
						run: (*parser).callonSingleCharEscape18,
						expr: &litMatcher{
							pos:        position{line: 865, col: 5, offset: 24618},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 867, col: 1, offset: 24644},
			expr: &choiceExpr{
				pos: position{line: 868, col: 5, offset: 24662},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 868, col: 5, offset: 24662},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 868, col: 5, offset: 24662},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 24690},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 869, col: 5, offset: 24690},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 870, col: 5, offset: 24720},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 872, col: 1, offset: 24726},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 24744},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 24744},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 24744},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 873, col: 5, offset: 24744},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 873, col: 9, offset: 24748},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 873, col: 16, offset: 24755},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 873, col: 16, offset: 24755},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 873, col: 25, offset: 24764},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 873, col: 34, offset: 24773},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 873, col: 43, offset: 24782},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 24845},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 876, col: 5, offset: 24845},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 876, col: 5, offset: 24845},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 876, col: 9, offset: 24849},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 876, col: 13, offset: 24853},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 876, col: 20, offset: 24860},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 876, col: 20, offset: 24860},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 876, col: 29, offset: 24869},
												expr: &ruleRefExpr{
													pos:  position{line: 876, col: 29, offset: 24869},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 876, col: 39, offset: 24879},
												expr: &ruleRefExpr{
													pos:  position{line: 876, col: 39, offset: 24879},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 876, col: 49, offset: 24889},
												expr: &ruleRefExpr{
													pos:  position{line: 876, col: 49, offset: 24889},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 876, col: 59, offset: 24899},
												expr: &ruleRefExpr{
													pos:  position{line: 876, col: 59, offset: 24899},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 876, col: 69, offset: 24909},
												expr: &ruleRefExpr{
													pos:  position{line: 876, col: 69, offset: 24909},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 876, col: 80, offset: 24920},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 880, col: 1, offset: 24974},
			expr: &actionExpr{
				pos: position{line: 881, col: 5, offset: 24985},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 881, col: 5, offset: 24985},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 881, col: 5, offset: 24985},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 881, col: 9, offset: 24989},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 881, col: 14, offset: 24994},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 881, col: 25, offset: 25005},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 883, col: 1, offset: 25031},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 25046},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 884, col: 5, offset: 25046},
					expr: &choiceExpr{
						pos: position{line: 884, col: 6, offset: 25047},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 884, col: 6, offset: 25047},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 884, col: 13, offset: 25054},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 886, col: 1, offset: 25094},
			expr: &charClassMatcher{
				pos:        position{line: 887, col: 5, offset: 25110},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 889, col: 1, offset: 25125},
			expr: &oneOrMoreExpr{
				pos: position{line: 889, col: 6, offset: 25130},
				expr: &ruleRefExpr{
					pos:  position{line: 889, col: 6, offset: 25130},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 890, col: 1, offset: 25140},
			expr: &zeroOrMoreExpr{
				pos: position{line: 890, col: 6, offset: 25145},
				expr: &ruleRefExpr{
					pos:  position{line: 890, col: 6, offset: 25145},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 892, col: 1, offset: 25156},
			expr: &choiceExpr{
				pos: position{line: 893, col: 5, offset: 25169},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 893, col: 5, offset: 25169},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 894, col: 5, offset: 25184},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 5, offset: 25203},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 897, col: 1, offset: 25212},
			expr: &anyMatcher{
				line: 898, col: 5, offset: 25232,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 900, col: 1, offset: 25235},
			expr: &choiceExpr{
				pos: position{line: 901, col: 5, offset: 25263},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 901, col: 5, offset: 25263},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 902, col: 5, offset: 25272},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 903, col: 5, offset: 25281},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 904, col: 5, offset: 25290},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 905, col: 5, offset: 25298},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 906, col: 5, offset: 25311},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 908, col: 1, offset: 25321},
			expr: &charClassMatcher{
				pos:        position{line: 909, col: 5, offset: 25340},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 915, col: 1, offset: 25670},
			expr: &ruleRefExpr{
				pos:  position{line: 918, col: 5, offset: 25741},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 920, col: 1, offset: 25760},
			expr: &seqExpr{
				pos: position{line: 921, col: 5, offset: 25781},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 921, col: 5, offset: 25781},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 921, col: 10, offset: 25786},
						expr: &seqExpr{
							pos: position{line: 921, col: 11, offset: 25787},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 921, col: 11, offset: 25787},
									expr: &litMatcher{
										pos:        position{line: 921, col: 12, offset: 25788},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 921, col: 17, offset: 25793},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 921, col: 35, offset: 25811},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 923, col: 1, offset: 25817},
			expr: &seqExpr{
				pos: position{line: 924, col: 5, offset: 25839},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 924, col: 5, offset: 25839},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 924, col: 10, offset: 25844},
						expr: &seqExpr{
							pos: position{line: 924, col: 11, offset: 25845},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 924, col: 11, offset: 25845},
									expr: &ruleRefExpr{
										pos:  position{line: 924, col: 12, offset: 25846},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 924, col: 27, offset: 25861},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 926, col: 1, offset: 25880},
			expr: &choiceExpr{
				pos: position{line: 926, col: 7, offset: 25886},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 926, col: 7, offset: 25886},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 11, offset: 25890},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 927, col: 1, offset: 25894},
			expr: &notExpr{
				pos: position{line: 927, col: 7, offset: 25900},
				expr: &anyMatcher{
					line: 927, col: 8, offset: 25901,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch1(filter, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"filter": filter, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch1(stack["filter"], stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onSwitchTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonSwitchTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchTail1(stack["ch"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ParallelProc", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SwitchProc", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation27(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation27(stack["f"])
}

func (c *current) onOperation33(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation33(stack["a"])
}

func (c *current) onOperation39(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonOperation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation39(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "=",

					"lhs": map[string]interface{}{"op": "Identifier", "name": "$"},

					"rhs": v}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "@",

			"lhs": map[string]interface{}{"op": "SelectExpr", "selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}}},

			"rhs": map[string]interface{}{"op": "FunctionCall", "function": "map",

				"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "in",

					"lhs": v,

					"rhs": map[string]interface{}{"op": "Identifier", "name": "$"}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast7(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonSearchExprCast7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast7(stack["typ"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc3(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CutProc", "fields": columns}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["columns"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onJoinProc2(leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc18(key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc18(stack["key"], stack["columns"])
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onFuncExpr4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr13(e interface{}) (interface{}, error) {
	return []interface{}{"@", e}, nil
}

func (p *parser) callonSelectExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr13(stack["e"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return makeBinaryExprChain(map[string]interface{}{"op": "SelectExpr", "selectors": args}, methods), nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": "[",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": map[string]interface{}{"op": "Empty"}, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": map[string]interface{}{"op": "Empty"}}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape2() (interface{}, error) {
	return "'", nil
}

func (p *parser) callonSingleCharEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape2()
}

func (c *current) onSingleCharEscape4() (interface{}, error) {
	return '"', nil
}

func (p *parser) callonSingleCharEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape4()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\\", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onSingleCharEscape18() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape18()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
