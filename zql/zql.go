// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "Query",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 22, offset: 47},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 25, offset: 50},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Query",
			pos:  position{line: 12, col: 1, offset: 75},
			expr: &choiceExpr{
				pos: position{line: 13, col: 5, offset: 85},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 85},
						run: (*parser).callonQuery2,
						expr: &labeledExpr{
							pos:   position{line: 13, col: 5, offset: 85},
							label: "procs",
							expr: &ruleRefExpr{
								pos:  position{line: 13, col: 11, offset: 91},
								name: "SequentialProcs",
							},
						},
					},
					&actionExpr{
						pos: position{line: 17, col: 5, offset: 363},
						run: (*parser).callonQuery5,
						expr: &seqExpr{
							pos: position{line: 17, col: 5, offset: 363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 17, col: 5, offset: 363},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 17, col: 7, offset: 365},
										name: "Search",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 14, offset: 372},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 17, col: 17, offset: 375},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 17, col: 22, offset: 380},
										expr: &ruleRefExpr{
											pos:  position{line: 17, col: 22, offset: 380},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 631},
						run: (*parser).callonQuery13,
						expr: &labeledExpr{
							pos:   position{line: 24, col: 5, offset: 631},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 7, offset: 633},
								name: "Search",
							},
						},
					},
				},
			},
		},
		{
			name: "Search",
			pos:  position{line: 29, col: 1, offset: 808},
			expr: &actionExpr{
				pos: position{line: 30, col: 5, offset: 819},
				run: (*parser).callonSearch1,
				expr: &labeledExpr{
					pos:   position{line: 30, col: 5, offset: 819},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 30, col: 10, offset: 824},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 34, col: 1, offset: 921},
			expr: &actionExpr{
				pos: position{line: 35, col: 5, offset: 936},
				run: (*parser).callonSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 35, col: 5, offset: 936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 35, col: 5, offset: 936},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 11, offset: 942},
								name: "SearchTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 35, col: 22, offset: 953},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 35, col: 27, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 35, col: 27, offset: 958},
									name: "OredSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OredSearchTerm",
			pos:  position{line: 39, col: 1, offset: 1037},
			expr: &actionExpr{
				pos: position{line: 39, col: 18, offset: 1054},
				run: (*parser).callonOredSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 39, col: 18, offset: 1054},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 39, col: 18, offset: 1054},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 20, offset: 1056},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 28, offset: 1064},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 30, offset: 1066},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 32, offset: 1068},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 41, col: 1, offset: 1098},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1113},
				run: (*parser).callonSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1113},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 11, offset: 1119},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 24, offset: 1132},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 42, col: 29, offset: 1137},
								expr: &ruleRefExpr{
									pos:  position{line: 42, col: 29, offset: 1137},
									name: "AndedSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndedSearchTerm",
			pos:  position{line: 46, col: 1, offset: 1218},
			expr: &actionExpr{
				pos: position{line: 46, col: 19, offset: 1236},
				run: (*parser).callonAndedSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 46, col: 19, offset: 1236},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 46, col: 19, offset: 1236},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 46, col: 21, offset: 1238},
							expr: &seqExpr{
								pos: position{line: 46, col: 22, offset: 1239},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 46, col: 22, offset: 1239},
										name: "AndToken",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 31, offset: 1248},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 46, col: 35, offset: 1252},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 37, offset: 1254},
								name: "SearchFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 48, col: 1, offset: 1286},
			expr: &choiceExpr{
				pos: position{line: 49, col: 5, offset: 1303},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1303},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1303},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 49, col: 6, offset: 1304},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 49, col: 6, offset: 1304},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 49, col: 6, offset: 1304},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 49, col: 15, offset: 1313},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 49, col: 19, offset: 1317},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 49, col: 19, offset: 1317},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 49, col: 23, offset: 1321},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 49, col: 27, offset: 1325},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 49, col: 29, offset: 1327},
										name: "SearchExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 52, col: 5, offset: 1422},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 52, col: 5, offset: 1422},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 52, col: 5, offset: 1422},
									expr: &litMatcher{
										pos:        position{line: 52, col: 7, offset: 1424},
										val:        "-",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 52, col: 12, offset: 1429},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 52, col: 14, offset: 1431},
										name: "SearchPred",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1464},
						run: (*parser).callonSearchFactor19,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 53, col: 5, offset: 1464},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 9, offset: 1468},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 53, col: 12, offset: 1471},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 17, offset: 1476},
										name: "SearchExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 28, offset: 1487},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 31, offset: 1490},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchPred",
			pos:  position{line: 55, col: 1, offset: 1516},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1531},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1531},
						run: (*parser).callonSearchPred2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1531},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 56, col: 5, offset: 1531},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 9, offset: 1535},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 12, offset: 1538},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 17, offset: 1543},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 31, offset: 1557},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 34, offset: 1560},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 36, offset: 1562},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1699},
						run: (*parser).callonSearchPred11,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 1699},
									val:        "**",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 10, offset: 1704},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 13, offset: 1707},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 18, offset: 1712},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 32, offset: 1726},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 35, offset: 1729},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1731},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1867},
						run: (*parser).callonSearchPred20,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1867},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 62, col: 5, offset: 1867},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 7, offset: 1869},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 12, offset: 1874},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 62, col: 15, offset: 1877},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 20, offset: 1882},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 34, offset: 1896},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 62, col: 37, offset: 1899},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 39, offset: 1901},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 2355},
						run: (*parser).callonSearchPred30,
						expr: &seqExpr{
							pos: position{line: 69, col: 5, offset: 2355},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 69, col: 5, offset: 2355},
									expr: &litMatcher{
										pos:        position{line: 69, col: 6, offset: 2356},
										val:        "len",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 69, col: 12, offset: 2362},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 17, offset: 2367},
										name: "Function",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 26, offset: 2376},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 69, col: 29, offset: 2379},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 34, offset: 2384},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 69, col: 48, offset: 2398},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 69, col: 51, offset: 2401},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 53, offset: 2403},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2531},
						run: (*parser).callonSearchPred42,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2531},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 72, col: 5, offset: 2531},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 7, offset: 2533},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 19, offset: 2545},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 22, offset: 2548},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 30, offset: 2556},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 72, col: 33, offset: 2559},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2688},
						run: (*parser).callonSearchPred50,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2688},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2688},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 7, offset: 2690},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 19, offset: 2702},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 22, offset: 2705},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 30, offset: 2713},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 33, offset: 2716},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 35, offset: 2718},
										name: "FieldExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2847},
						run: (*parser).callonSearchPred59,
						expr: &labeledExpr{
							pos:   position{line: 78, col: 5, offset: 2847},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 7, offset: 2849},
								name: "SearchLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2968},
						run: (*parser).callonSearchPred62,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2968},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 81, col: 5, offset: 2968},
									expr: &seqExpr{
										pos: position{line: 81, col: 7, offset: 2970},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 81, col: 8, offset: 2971},
												name: "SearchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 81, col: 24, offset: 2987},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 81, col: 28, offset: 2991},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 30, offset: 2993},
										name: "SearchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 94, col: 1, offset: 3445},
			expr: &choiceExpr{
				pos: position{line: 95, col: 5, offset: 3461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 3461},
						name: "SearchLiteral",
					},
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 3479},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 3479},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 96, col: 5, offset: 3479},
									expr: &seqExpr{
										pos: position{line: 96, col: 7, offset: 3481},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 96, col: 8, offset: 3482},
												name: "SearchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 96, col: 24, offset: 3498},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 96, col: 27, offset: 3501},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 29, offset: 3503},
										name: "SearchWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywords",
			pos:  position{line: 100, col: 1, offset: 3611},
			expr: &choiceExpr{
				pos: position{line: 101, col: 5, offset: 3630},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 101, col: 5, offset: 3630},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 5, offset: 3643},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3655},
						name: "InToken",
					},
				},
			},
		},
		{
			name: "SearchLiteral",
			pos:  position{line: 105, col: 1, offset: 3664},
			expr: &choiceExpr{
				pos: position{line: 106, col: 5, offset: 3682},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 3682},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 5, offset: 3700},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 5, offset: 3718},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 5, offset: 3736},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 5, offset: 3755},
						name: "FloatLiteral",
					},
					&actionExpr{
						pos: position{line: 114, col: 5, offset: 3922},
						run: (*parser).callonSearchLiteral7,
						expr: &seqExpr{
							pos: position{line: 114, col: 5, offset: 3922},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 114, col: 5, offset: 3922},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 7, offset: 3924},
										name: "IntegerLiteral",
									},
								},
								&notExpr{
									pos: position{line: 114, col: 22, offset: 3939},
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 23, offset: 3940},
										name: "SearchWord",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3974},
						run: (*parser).callonSearchLiteral13,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3974},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 116, col: 5, offset: 3974},
									expr: &seqExpr{
										pos: position{line: 116, col: 7, offset: 3976},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 116, col: 7, offset: 3976},
												name: "SearchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 116, col: 22, offset: 3991},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 25, offset: 3994},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 27, offset: 3996},
										name: "BooleanLiteral",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 4033},
						run: (*parser).callonSearchLiteral21,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 4033},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 117, col: 5, offset: 4033},
									expr: &seqExpr{
										pos: position{line: 117, col: 7, offset: 4035},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 7, offset: 4035},
												name: "SearchKeywords",
											},
											&ruleRefExpr{
												pos:  position{line: 117, col: 22, offset: 4050},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 117, col: 25, offset: 4053},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 27, offset: 4055},
										name: "NullLiteral",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 120, col: 1, offset: 4087},
			expr: &actionExpr{
				pos: position{line: 121, col: 5, offset: 4105},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 121, col: 5, offset: 4105},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 121, col: 7, offset: 4107},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 125, col: 1, offset: 4217},
			expr: &actionExpr{
				pos: position{line: 126, col: 5, offset: 4235},
				run: (*parser).callonRegexpLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 126, col: 5, offset: 4235},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 126, col: 7, offset: 4237},
						name: "Regexp",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 130, col: 1, offset: 4341},
			expr: &choiceExpr{
				pos: position{line: 131, col: 5, offset: 4359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 131, col: 5, offset: 4359},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 131, col: 5, offset: 4359},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 131, col: 5, offset: 4359},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 7, offset: 4361},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 131, col: 14, offset: 4368},
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 15, offset: 4369},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 4481},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 134, col: 5, offset: 4481},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 7, offset: 4483},
								name: "IPNet",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 138, col: 1, offset: 4583},
			expr: &choiceExpr{
				pos: position{line: 139, col: 5, offset: 4602},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 4602},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 139, col: 5, offset: 4602},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 139, col: 5, offset: 4602},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 7, offset: 4604},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 139, col: 11, offset: 4608},
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 12, offset: 4609},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 142, col: 5, offset: 4720},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 142, col: 5, offset: 4720},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 7, offset: 4722},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 146, col: 1, offset: 4818},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 4835},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 147, col: 5, offset: 4835},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 147, col: 7, offset: 4837},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 151, col: 1, offset: 4947},
			expr: &actionExpr{
				pos: position{line: 152, col: 5, offset: 4966},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 152, col: 5, offset: 4966},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 152, col: 7, offset: 4968},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 156, col: 1, offset: 5074},
			expr: &choiceExpr{
				pos: position{line: 157, col: 5, offset: 5093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 157, col: 5, offset: 5093},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 157, col: 5, offset: 5093},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 5203},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 158, col: 5, offset: 5203},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 160, col: 1, offset: 5311},
			expr: &actionExpr{
				pos: position{line: 161, col: 5, offset: 5327},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 161, col: 5, offset: 5327},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "SequentialProcs",
			pos:  position{line: 163, col: 1, offset: 5417},
			expr: &actionExpr{
				pos: position{line: 164, col: 5, offset: 5437},
				run: (*parser).callonSequentialProcs1,
				expr: &seqExpr{
					pos: position{line: 164, col: 5, offset: 5437},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 164, col: 5, offset: 5437},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 11, offset: 5443},
								name: "Proc",
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 16, offset: 5448},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 164, col: 21, offset: 5453},
								expr: &ruleRefExpr{
									pos:  position{line: 164, col: 21, offset: 5453},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 172, col: 1, offset: 5641},
			expr: &actionExpr{
				pos: position{line: 172, col: 18, offset: 5658},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 172, col: 18, offset: 5658},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 172, col: 18, offset: 5658},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 172, col: 21, offset: 5661},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 25, offset: 5665},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 28, offset: 5668},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 30, offset: 5670},
								name: "Proc",
							},
						},
					},
				},
			},
		},
		{
			name: "Proc",
			pos:  position{line: 174, col: 1, offset: 5694},
			expr: &choiceExpr{
				pos: position{line: 175, col: 5, offset: 5703},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 5703},
						name: "NamedProc",
					},
					&ruleRefExpr{
						pos:  position{line: 176, col: 5, offset: 5717},
						name: "GroupByProc",
					},
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 5733},
						run: (*parser).callonProc4,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 5733},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 5, offset: 5733},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 9, offset: 5737},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 177, col: 12, offset: 5740},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 17, offset: 5745},
										name: "Procs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 23, offset: 5751},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 177, col: 26, offset: 5754},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Procs",
			pos:  position{line: 181, col: 1, offset: 5790},
			expr: &actionExpr{
				pos: position{line: 182, col: 5, offset: 5800},
				run: (*parser).callonProcs1,
				expr: &seqExpr{
					pos: position{line: 182, col: 5, offset: 5800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 182, col: 5, offset: 5800},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 11, offset: 5806},
								name: "SequentialProcs",
							},
						},
						&labeledExpr{
							pos:   position{line: 182, col: 27, offset: 5822},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 182, col: 32, offset: 5827},
								expr: &ruleRefExpr{
									pos:  position{line: 182, col: 32, offset: 5827},
									name: "ParallelTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 191, col: 1, offset: 6126},
			expr: &actionExpr{
				pos: position{line: 192, col: 5, offset: 6143},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 192, col: 5, offset: 6143},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 192, col: 5, offset: 6143},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 192, col: 8, offset: 6146},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 12, offset: 6150},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 15, offset: 6153},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 18, offset: 6156},
								name: "SequentialProcs",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupByProc",
			pos:  position{line: 194, col: 1, offset: 6249},
			expr: &actionExpr{
				pos: position{line: 195, col: 5, offset: 6265},
				run: (*parser).callonGroupByProc1,
				expr: &seqExpr{
					pos: position{line: 195, col: 5, offset: 6265},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 6265},
							label: "every",
							expr: &zeroOrOneExpr{
								pos: position{line: 195, col: 11, offset: 6271},
								expr: &ruleRefExpr{
									pos:  position{line: 195, col: 11, offset: 6271},
									name: "EveryDur",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 21, offset: 6281},
							label: "reducers",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 30, offset: 6290},
								name: "Reducers",
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 39, offset: 6299},
							label: "keys",
							expr: &zeroOrOneExpr{
								pos: position{line: 195, col: 44, offset: 6304},
								expr: &ruleRefExpr{
									pos:  position{line: 195, col: 44, offset: 6304},
									name: "GroupByKeys",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 57, offset: 6317},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 195, col: 63, offset: 6323},
								expr: &ruleRefExpr{
									pos:  position{line: 195, col: 63, offset: 6323},
									name: "LimitArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 209, col: 1, offset: 6619},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6632},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 210, col: 5, offset: 6632},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 14, offset: 6641},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 16, offset: 6643},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 20, offset: 6647},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 29, offset: 6656},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 212, col: 1, offset: 6679},
			expr: &actionExpr{
				pos: position{line: 213, col: 5, offset: 6695},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 213, col: 5, offset: 6695},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 213, col: 5, offset: 6695},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 213, col: 7, offset: 6697},
							val:        "by",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 13, offset: 6703},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 15, offset: 6705},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 23, offset: 6713},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 215, col: 1, offset: 6754},
			expr: &actionExpr{
				pos: position{line: 216, col: 5, offset: 6767},
				run: (*parser).callonLimitArg1,
				expr: &seqExpr{
					pos: position{line: 216, col: 5, offset: 6767},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 216, col: 5, offset: 6767},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 216, col: 7, offset: 6769},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 14, offset: 6776},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 216, col: 16, offset: 6778},
							val:        "-limit",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 25, offset: 6787},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 27, offset: 6789},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 33, offset: 6795},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 221, col: 1, offset: 7061},
			expr: &choiceExpr{
				pos: position{line: 222, col: 5, offset: 7080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 222, col: 5, offset: 7080},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 7095},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 223, col: 5, offset: 7095},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 10, offset: 7100},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 225, col: 1, offset: 7178},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 7198},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 7198},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 7198},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 11, offset: 7204},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 26, offset: 7219},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 31, offset: 7224},
								expr: &actionExpr{
									pos: position{line: 226, col: 32, offset: 7225},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 226, col: 32, offset: 7225},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 226, col: 32, offset: 7225},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 226, col: 35, offset: 7228},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 39, offset: 7232},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 42, offset: 7235},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 47, offset: 7240},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 230, col: 1, offset: 7362},
			expr: &choiceExpr{
				pos: position{line: 231, col: 5, offset: 7384},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 7384},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 231, col: 5, offset: 7384},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 231, col: 5, offset: 7384},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 231, col: 10, offset: 7389},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 231, col: 15, offset: 7394},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 231, col: 18, offset: 7397},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 231, col: 22, offset: 7401},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 231, col: 30, offset: 7409},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 234, col: 5, offset: 7519},
						run: (*parser).callonReducerAssignment10,
						expr: &labeledExpr{
							pos:   position{line: 234, col: 5, offset: 7519},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 13, offset: 7527},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 238, col: 1, offset: 7621},
			expr: &actionExpr{
				pos: position{line: 239, col: 5, offset: 7633},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 239, col: 5, offset: 7633},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 239, col: 5, offset: 7633},
							expr: &choiceExpr{
								pos: position{line: 239, col: 7, offset: 7635},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 239, col: 7, offset: 7635},
										val:        "not",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 239, col: 13, offset: 7641},
										val:        "len",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 20, offset: 7648},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 23, offset: 7651},
								name: "FuncName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 32, offset: 7660},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 239, col: 35, offset: 7663},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 39, offset: 7667},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 42, offset: 7670},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 239, col: 47, offset: 7675},
								expr: &ruleRefExpr{
									pos:  position{line: 239, col: 47, offset: 7675},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 54, offset: 7682},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 239, col: 57, offset: 7685},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 239, col: 61, offset: 7689},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 239, col: 67, offset: 7695},
								expr: &ruleRefExpr{
									pos:  position{line: 239, col: 67, offset: 7695},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 247, col: 1, offset: 7878},
			expr: &actionExpr{
				pos: position{line: 247, col: 15, offset: 7892},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 247, col: 15, offset: 7892},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 247, col: 15, offset: 7892},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 247, col: 17, offset: 7894},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 25, offset: 7902},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 27, offset: 7904},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 32, offset: 7909},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 249, col: 1, offset: 7936},
			expr: &actionExpr{
				pos: position{line: 250, col: 5, offset: 7949},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 250, col: 5, offset: 7949},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 250, col: 5, offset: 7949},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 11, offset: 7955},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 250, col: 29, offset: 7973},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 250, col: 34, offset: 7978},
								expr: &seqExpr{
									pos: position{line: 250, col: 35, offset: 7979},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 250, col: 35, offset: 7979},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 250, col: 38, offset: 7982},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 250, col: 42, offset: 7986},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 250, col: 45, offset: 7989},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedProc",
			pos:  position{line: 258, col: 1, offset: 8194},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 8208},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 8208},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 8221},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 8233},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 8245},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 8258},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 8271},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 8286},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 8299},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 8311},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 8326},
						name: "FuseProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 270, col: 1, offset: 8336},
			expr: &actionExpr{
				pos: position{line: 271, col: 5, offset: 8349},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 271, col: 5, offset: 8349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 5, offset: 8349},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 271, col: 13, offset: 8357},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 18, offset: 8362},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 27, offset: 8371},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 271, col: 32, offset: 8376},
								expr: &actionExpr{
									pos: position{line: 271, col: 33, offset: 8377},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 271, col: 33, offset: 8377},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 271, col: 33, offset: 8377},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 271, col: 35, offset: 8379},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 271, col: 37, offset: 8381},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 285, col: 1, offset: 8800},
			expr: &actionExpr{
				pos: position{line: 285, col: 12, offset: 8811},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 285, col: 12, offset: 8811},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 285, col: 17, offset: 8816},
						expr: &actionExpr{
							pos: position{line: 285, col: 18, offset: 8817},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 285, col: 18, offset: 8817},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 285, col: 18, offset: 8817},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 285, col: 20, offset: 8819},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 285, col: 22, offset: 8821},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 287, col: 1, offset: 8877},
			expr: &choiceExpr{
				pos: position{line: 288, col: 5, offset: 8889},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 288, col: 5, offset: 8889},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 288, col: 5, offset: 8889},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 289, col: 5, offset: 8964},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 289, col: 5, offset: 8964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 289, col: 5, offset: 8964},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 289, col: 14, offset: 8973},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 289, col: 16, offset: 8975},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 289, col: 23, offset: 8982},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 289, col: 24, offset: 8983},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 289, col: 24, offset: 8983},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 289, col: 34, offset: 8993},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 291, col: 1, offset: 9107},
			expr: &actionExpr{
				pos: position{line: 292, col: 5, offset: 9119},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 292, col: 5, offset: 9119},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 5, offset: 9119},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 292, col: 12, offset: 9126},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 292, col: 18, offset: 9132},
								expr: &actionExpr{
									pos: position{line: 292, col: 19, offset: 9133},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 292, col: 19, offset: 9133},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 292, col: 19, offset: 9133},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 292, col: 21, offset: 9135},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 292, col: 23, offset: 9137},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 47, offset: 9161},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 292, col: 53, offset: 9167},
								expr: &seqExpr{
									pos: position{line: 292, col: 54, offset: 9168},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 292, col: 54, offset: 9168},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 292, col: 56, offset: 9170},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 67, offset: 9181},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 292, col: 74, offset: 9188},
								expr: &actionExpr{
									pos: position{line: 292, col: 75, offset: 9189},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 292, col: 75, offset: 9189},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 292, col: 75, offset: 9189},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 292, col: 77, offset: 9191},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 292, col: 79, offset: 9193},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 306, col: 1, offset: 9500},
			expr: &actionExpr{
				pos: position{line: 307, col: 5, offset: 9512},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 307, col: 5, offset: 9512},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 307, col: 5, offset: 9512},
							val:        "cut",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 307, col: 12, offset: 9519},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 17, offset: 9524},
								name: "CutArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 25, offset: 9532},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 307, col: 27, offset: 9534},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 35, offset: 9542},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "CutArgs",
			pos:  position{line: 316, col: 1, offset: 9811},
			expr: &actionExpr{
				pos: position{line: 317, col: 5, offset: 9823},
				run: (*parser).callonCutArgs1,
				expr: &labeledExpr{
					pos:   position{line: 317, col: 5, offset: 9823},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 317, col: 10, offset: 9828},
						expr: &actionExpr{
							pos: position{line: 317, col: 11, offset: 9829},
							run: (*parser).callonCutArgs4,
							expr: &seqExpr{
								pos: position{line: 317, col: 11, offset: 9829},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 317, col: 11, offset: 9829},
										name: "_",
									},
									&litMatcher{
										pos:        position{line: 317, col: 13, offset: 9831},
										val:        "-c",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 321, col: 1, offset: 9943},
			expr: &choiceExpr{
				pos: position{line: 322, col: 5, offset: 9956},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 9956},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 322, col: 5, offset: 9956},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 322, col: 5, offset: 9956},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 322, col: 13, offset: 9964},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 322, col: 15, offset: 9966},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 322, col: 21, offset: 9972},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 323, col: 5, offset: 10054},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 323, col: 5, offset: 10054},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 325, col: 1, offset: 10132},
			expr: &choiceExpr{
				pos: position{line: 326, col: 5, offset: 10145},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 326, col: 5, offset: 10145},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 326, col: 5, offset: 10145},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 326, col: 5, offset: 10145},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 326, col: 13, offset: 10153},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 326, col: 15, offset: 10155},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 326, col: 21, offset: 10161},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 10243},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 327, col: 5, offset: 10243},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 329, col: 1, offset: 10321},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 10336},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 10336},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 5, offset: 10336},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 330, col: 15, offset: 10346},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 17, offset: 10348},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 22, offset: 10353},
								name: "SearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 334, col: 1, offset: 10450},
			expr: &choiceExpr{
				pos: position{line: 335, col: 5, offset: 10463},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 335, col: 5, offset: 10463},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 335, col: 5, offset: 10463},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 335, col: 5, offset: 10463},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 13, offset: 10471},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 335, col: 15, offset: 10473},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 338, col: 5, offset: 10564},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 338, col: 5, offset: 10564},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 342, col: 1, offset: 10656},
			expr: &actionExpr{
				pos: position{line: 343, col: 5, offset: 10668},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 343, col: 5, offset: 10668},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 343, col: 5, offset: 10668},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 343, col: 12, offset: 10675},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 343, col: 14, offset: 10677},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 22, offset: 10685},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 347, col: 1, offset: 10788},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 10803},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 10803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 10803},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 15, offset: 10813},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 17, offset: 10815},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 23, offset: 10821},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 34, offset: 10832},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 348, col: 39, offset: 10837},
								expr: &actionExpr{
									pos: position{line: 348, col: 40, offset: 10838},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 348, col: 40, offset: 10838},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 348, col: 40, offset: 10838},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 348, col: 43, offset: 10841},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 348, col: 47, offset: 10845},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 348, col: 50, offset: 10848},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 348, col: 53, offset: 10851},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 352, col: 1, offset: 11021},
			expr: &actionExpr{
				pos: position{line: 353, col: 5, offset: 11034},
				run: (*parser).callonFuseProc1,
				expr: &litMatcher{
					pos:        position{line: 353, col: 5, offset: 11034},
					val:        "fuse",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RootField",
			pos:  position{line: 357, col: 1, offset: 11110},
			expr: &choiceExpr{
				pos: position{line: 358, col: 5, offset: 11124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 11124},
						run: (*parser).callonRootField2,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 11124},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 358, col: 5, offset: 11124},
									expr: &litMatcher{
										pos:        position{line: 358, col: 5, offset: 11124},
										val:        ".",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 358, col: 10, offset: 11129},
									expr: &choiceExpr{
										pos: position{line: 358, col: 12, offset: 11131},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 358, col: 12, offset: 11131},
												name: "BooleanLiteral",
											},
											&ruleRefExpr{
												pos:  position{line: 358, col: 29, offset: 11148},
												name: "NullLiteral",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 358, col: 42, offset: 11161},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 358, col: 48, offset: 11167},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 11320},
						run: (*parser).callonRootField12,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 11320},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 11320},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 359, col: 9, offset: 11324},
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 11, offset: 11326},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 361, col: 1, offset: 11399},
			expr: &ruleRefExpr{
				pos:  position{line: 361, col: 8, offset: 11406},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 363, col: 1, offset: 11417},
			expr: &ruleRefExpr{
				pos:  position{line: 363, col: 13, offset: 11429},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 365, col: 1, offset: 11435},
			expr: &actionExpr{
				pos: position{line: 366, col: 5, offset: 11450},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 366, col: 5, offset: 11450},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 366, col: 5, offset: 11450},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 11, offset: 11456},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 366, col: 21, offset: 11466},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 366, col: 26, offset: 11471},
								expr: &seqExpr{
									pos: position{line: 366, col: 27, offset: 11472},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 366, col: 27, offset: 11472},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 366, col: 30, offset: 11475},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 366, col: 34, offset: 11479},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 366, col: 37, offset: 11482},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 376, col: 1, offset: 11681},
			expr: &actionExpr{
				pos: position{line: 377, col: 5, offset: 11691},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 377, col: 5, offset: 11691},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 377, col: 5, offset: 11691},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 11, offset: 11697},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 16, offset: 11702},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 377, col: 21, offset: 11707},
								expr: &seqExpr{
									pos: position{line: 377, col: 22, offset: 11708},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 377, col: 22, offset: 11708},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 377, col: 25, offset: 11711},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 377, col: 29, offset: 11715},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 377, col: 32, offset: 11718},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 387, col: 1, offset: 11912},
			expr: &actionExpr{
				pos: position{line: 388, col: 5, offset: 11927},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 388, col: 5, offset: 11927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 388, col: 5, offset: 11927},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 9, offset: 11931},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 14, offset: 11936},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 388, col: 17, offset: 11939},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 21, offset: 11943},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 24, offset: 11946},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 28, offset: 11950},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 390, col: 1, offset: 12019},
			expr: &ruleRefExpr{
				pos:  position{line: 390, col: 8, offset: 12026},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 392, col: 1, offset: 12043},
			expr: &choiceExpr{
				pos: position{line: 393, col: 5, offset: 12063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 12063},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 12063},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 393, col: 5, offset: 12063},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 393, col: 15, offset: 12073},
										name: "LogicalORExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 29, offset: 12087},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 393, col: 32, offset: 12090},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 36, offset: 12094},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 393, col: 39, offset: 12097},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 393, col: 50, offset: 12108},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 55, offset: 12113},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 393, col: 58, offset: 12116},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 62, offset: 12120},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 393, col: 65, offset: 12123},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 393, col: 76, offset: 12134},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 5, offset: 12281},
						name: "LogicalORExpr",
					},
				},
			},
		},
		{
			name: "LogicalORExpr",
			pos:  position{line: 398, col: 1, offset: 12296},
			expr: &actionExpr{
				pos: position{line: 399, col: 5, offset: 12314},
				run: (*parser).callonLogicalORExpr1,
				expr: &seqExpr{
					pos: position{line: 399, col: 5, offset: 12314},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 5, offset: 12314},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 11, offset: 12320},
								name: "LogicalANDExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 5, offset: 12339},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 400, col: 10, offset: 12344},
								expr: &actionExpr{
									pos: position{line: 400, col: 11, offset: 12345},
									run: (*parser).callonLogicalORExpr7,
									expr: &seqExpr{
										pos: position{line: 400, col: 11, offset: 12345},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 400, col: 11, offset: 12345},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 400, col: 14, offset: 12348},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 400, col: 17, offset: 12351},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 400, col: 25, offset: 12359},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 400, col: 28, offset: 12362},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 400, col: 33, offset: 12367},
													name: "LogicalANDExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalANDExpr",
			pos:  position{line: 404, col: 1, offset: 12485},
			expr: &actionExpr{
				pos: position{line: 405, col: 5, offset: 12504},
				run: (*parser).callonLogicalANDExpr1,
				expr: &seqExpr{
					pos: position{line: 405, col: 5, offset: 12504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 405, col: 5, offset: 12504},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 11, offset: 12510},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 5, offset: 12534},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 406, col: 10, offset: 12539},
								expr: &actionExpr{
									pos: position{line: 406, col: 11, offset: 12540},
									run: (*parser).callonLogicalANDExpr7,
									expr: &seqExpr{
										pos: position{line: 406, col: 11, offset: 12540},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 406, col: 11, offset: 12540},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 14, offset: 12543},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 17, offset: 12546},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 406, col: 26, offset: 12555},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 29, offset: 12558},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 34, offset: 12563},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 410, col: 1, offset: 12686},
			expr: &actionExpr{
				pos: position{line: 411, col: 5, offset: 12710},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 411, col: 5, offset: 12710},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 411, col: 5, offset: 12710},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 11, offset: 12716},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 5, offset: 12733},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 412, col: 10, offset: 12738},
								expr: &actionExpr{
									pos: position{line: 412, col: 11, offset: 12739},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 412, col: 11, offset: 12739},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 412, col: 11, offset: 12739},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 412, col: 14, offset: 12742},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 412, col: 19, offset: 12747},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 412, col: 38, offset: 12766},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 412, col: 41, offset: 12769},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 412, col: 46, offset: 12774},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 416, col: 1, offset: 12892},
			expr: &actionExpr{
				pos: position{line: 416, col: 20, offset: 12911},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 416, col: 21, offset: 12912},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 416, col: 21, offset: 12912},
							val:        "=~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 416, col: 28, offset: 12919},
							val:        "!~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 416, col: 35, offset: 12926},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 416, col: 41, offset: 12932},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 418, col: 1, offset: 12970},
			expr: &choiceExpr{
				pos: position{line: 419, col: 5, offset: 12993},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 419, col: 5, offset: 12993},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 13014},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 420, col: 5, offset: 13014},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 422, col: 1, offset: 13051},
			expr: &actionExpr{
				pos: position{line: 423, col: 5, offset: 13068},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 423, col: 5, offset: 13068},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 5, offset: 13068},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 11, offset: 13074},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 424, col: 5, offset: 13091},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 424, col: 10, offset: 13096},
								expr: &actionExpr{
									pos: position{line: 424, col: 11, offset: 13097},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 424, col: 11, offset: 13097},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 424, col: 11, offset: 13097},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 424, col: 14, offset: 13100},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 424, col: 17, offset: 13103},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 424, col: 34, offset: 13120},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 424, col: 37, offset: 13123},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 424, col: 42, offset: 13128},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 428, col: 1, offset: 13244},
			expr: &actionExpr{
				pos: position{line: 428, col: 20, offset: 13263},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 428, col: 21, offset: 13264},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 428, col: 21, offset: 13264},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 428, col: 28, offset: 13271},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 428, col: 34, offset: 13277},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 428, col: 41, offset: 13284},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 430, col: 1, offset: 13321},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 13338},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 13338},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 431, col: 5, offset: 13338},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 11, offset: 13344},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 5, offset: 13367},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 432, col: 10, offset: 13372},
								expr: &actionExpr{
									pos: position{line: 432, col: 11, offset: 13373},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 432, col: 11, offset: 13373},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 432, col: 11, offset: 13373},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 432, col: 14, offset: 13376},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 432, col: 17, offset: 13379},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 432, col: 34, offset: 13396},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 432, col: 37, offset: 13399},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 432, col: 42, offset: 13404},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 436, col: 1, offset: 13526},
			expr: &actionExpr{
				pos: position{line: 436, col: 20, offset: 13545},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 436, col: 21, offset: 13546},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 436, col: 21, offset: 13546},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 436, col: 27, offset: 13552},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 438, col: 1, offset: 13589},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 13612},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 13612},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 13612},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 11, offset: 13618},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 5, offset: 13630},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 440, col: 10, offset: 13635},
								expr: &actionExpr{
									pos: position{line: 440, col: 11, offset: 13636},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 440, col: 11, offset: 13636},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 440, col: 11, offset: 13636},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 440, col: 14, offset: 13639},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 17, offset: 13642},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 440, col: 40, offset: 13665},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 440, col: 43, offset: 13668},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 440, col: 48, offset: 13673},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 444, col: 1, offset: 13784},
			expr: &actionExpr{
				pos: position{line: 444, col: 26, offset: 13809},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 444, col: 27, offset: 13810},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 444, col: 27, offset: 13810},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 444, col: 33, offset: 13816},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 446, col: 1, offset: 13853},
			expr: &choiceExpr{
				pos: position{line: 447, col: 5, offset: 13865},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 447, col: 5, offset: 13865},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 447, col: 5, offset: 13865},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 447, col: 5, offset: 13865},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 447, col: 9, offset: 13869},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 447, col: 12, offset: 13872},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 447, col: 14, offset: 13874},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 5, offset: 13987},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 452, col: 1, offset: 13997},
			expr: &choiceExpr{
				pos: position{line: 453, col: 5, offset: 14010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 14010},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 453, col: 5, offset: 14010},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 453, col: 5, offset: 14010},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 453, col: 7, offset: 14012},
										name: "FuncExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 453, col: 16, offset: 14021},
									label: "typ",
									expr: &actionExpr{
										pos: position{line: 453, col: 22, offset: 14027},
										run: (*parser).callonCastExpr7,
										expr: &seqExpr{
											pos: position{line: 453, col: 22, offset: 14027},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 453, col: 22, offset: 14027},
													val:        ":",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 453, col: 26, offset: 14031},
													label: "typ",
													expr: &ruleRefExpr{
														pos:  position{line: 453, col: 30, offset: 14035},
														name: "PrimitiveType",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 456, col: 5, offset: 14165},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 459, col: 1, offset: 14176},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 14194},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 460, col: 9, offset: 14198},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 460, col: 9, offset: 14198},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 460, col: 19, offset: 14208},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 460, col: 29, offset: 14218},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 460, col: 40, offset: 14229},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 460, col: 51, offset: 14240},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 461, col: 9, offset: 14257},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 461, col: 18, offset: 14266},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 461, col: 28, offset: 14276},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 461, col: 38, offset: 14286},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 462, col: 9, offset: 14302},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 462, col: 22, offset: 14315},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 9, offset: 14330},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 464, col: 9, offset: 14348},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 464, col: 18, offset: 14357},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 464, col: 28, offset: 14367},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 464, col: 39, offset: 14378},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 465, col: 9, offset: 14396},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 465, col: 16, offset: 14403},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 466, col: 9, offset: 14417},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 466, col: 18, offset: 14426},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 466, col: 28, offset: 14436},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 468, col: 1, offset: 14477},
			expr: &choiceExpr{
				pos: position{line: 469, col: 5, offset: 14490},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 14490},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 469, col: 5, offset: 14490},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 469, col: 5, offset: 14490},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 11, offset: 14496},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 469, col: 20, offset: 14505},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 469, col: 25, offset: 14510},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 26, offset: 14511},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 5, offset: 14582},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 5, offset: 14596},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 475, col: 1, offset: 14605},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 14618},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 14618},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 14618},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 8, offset: 14621},
								name: "FuncName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 17, offset: 14630},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 476, col: 20, offset: 14633},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 476, col: 24, offset: 14637},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 29, offset: 14642},
								name: "ArgumentList",
							},
						},
						&litMatcher{
							pos:        position{line: 476, col: 42, offset: 14655},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncName",
			pos:  position{line: 480, col: 1, offset: 14761},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 14774},
				run: (*parser).callonFuncName1,
				expr: &seqExpr{
					pos: position{line: 481, col: 5, offset: 14774},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 481, col: 5, offset: 14774},
							name: "FuncNameStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 481, col: 19, offset: 14788},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 19, offset: 14788},
								name: "FuncNameRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FuncNameStart",
			pos:  position{line: 483, col: 1, offset: 14834},
			expr: &charClassMatcher{
				pos:        position{line: 483, col: 17, offset: 14850},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "FuncNameRest",
			pos:  position{line: 484, col: 1, offset: 14859},
			expr: &choiceExpr{
				pos: position{line: 484, col: 16, offset: 14874},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 484, col: 16, offset: 14874},
						name: "FuncNameStart",
					},
					&charClassMatcher{
						pos:        position{line: 484, col: 32, offset: 14890},
						val:        "[.0-9]",
						chars:      []rune{'.'},
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 486, col: 1, offset: 14898},
			expr: &choiceExpr{
				pos: position{line: 487, col: 5, offset: 14915},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 487, col: 5, offset: 14915},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 487, col: 5, offset: 14915},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 487, col: 5, offset: 14915},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 487, col: 11, offset: 14921},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 487, col: 16, offset: 14926},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 487, col: 21, offset: 14931},
										expr: &actionExpr{
											pos: position{line: 487, col: 22, offset: 14932},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 487, col: 22, offset: 14932},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 487, col: 22, offset: 14932},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 487, col: 25, offset: 14935},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 487, col: 29, offset: 14939},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 487, col: 32, offset: 14942},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 487, col: 34, offset: 14944},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 490, col: 5, offset: 15056},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 490, col: 5, offset: 15056},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 492, col: 1, offset: 15092},
			expr: &actionExpr{
				pos: position{line: 493, col: 5, offset: 15106},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 493, col: 5, offset: 15106},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 493, col: 5, offset: 15106},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 15112},
								name: "RootField",
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 21, offset: 15122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 493, col: 26, offset: 15127},
								expr: &ruleRefExpr{
									pos:  position{line: 493, col: 27, offset: 15128},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 497, col: 1, offset: 15196},
			expr: &choiceExpr{
				pos: position{line: 498, col: 5, offset: 15206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 498, col: 5, offset: 15206},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 498, col: 5, offset: 15206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 498, col: 5, offset: 15206},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 498, col: 9, offset: 15210},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 498, col: 14, offset: 15215},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 498, col: 19, offset: 15220},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 499, col: 5, offset: 15269},
						run: (*parser).callonDeref8,
						expr: &seqExpr{
							pos: position{line: 499, col: 5, offset: 15269},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 499, col: 5, offset: 15269},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 499, col: 9, offset: 15273},
									expr: &litMatcher{
										pos:        position{line: 499, col: 11, offset: 15275},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 499, col: 16, offset: 15280},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 499, col: 19, offset: 15283},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 501, col: 1, offset: 15334},
			expr: &choiceExpr{
				pos: position{line: 502, col: 5, offset: 15346},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 502, col: 5, offset: 15346},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 5, offset: 15364},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 5, offset: 15382},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 5, offset: 15400},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 506, col: 5, offset: 15419},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 507, col: 5, offset: 15436},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 508, col: 5, offset: 15455},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 5, offset: 15474},
						name: "NullLiteral",
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15490},
						run: (*parser).callonPrimary10,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 15490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 510, col: 5, offset: 15490},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 510, col: 9, offset: 15494},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 510, col: 12, offset: 15497},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 17, offset: 15502},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 510, col: 22, offset: 15507},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 510, col: 25, offset: 15510},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 512, col: 1, offset: 15536},
			expr: &choiceExpr{
				pos: position{line: 513, col: 5, offset: 15554},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 513, col: 5, offset: 15554},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 513, col: 24, offset: 15573},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 515, col: 1, offset: 15591},
			expr: &actionExpr{
				pos: position{line: 515, col: 12, offset: 15602},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 515, col: 12, offset: 15602},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 516, col: 1, offset: 15640},
			expr: &actionExpr{
				pos: position{line: 516, col: 11, offset: 15650},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 516, col: 11, offset: 15650},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 517, col: 1, offset: 15687},
			expr: &actionExpr{
				pos: position{line: 517, col: 11, offset: 15697},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 517, col: 11, offset: 15697},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 518, col: 1, offset: 15734},
			expr: &actionExpr{
				pos: position{line: 518, col: 12, offset: 15745},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 518, col: 12, offset: 15745},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 520, col: 1, offset: 15784},
			expr: &actionExpr{
				pos: position{line: 520, col: 18, offset: 15801},
				run: (*parser).callonIdentifierName1,
				expr: &seqExpr{
					pos: position{line: 520, col: 18, offset: 15801},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 520, col: 18, offset: 15801},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 520, col: 34, offset: 15817},
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 34, offset: 15817},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 522, col: 1, offset: 15865},
			expr: &charClassMatcher{
				pos:        position{line: 522, col: 19, offset: 15883},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 523, col: 1, offset: 15894},
			expr: &choiceExpr{
				pos: position{line: 523, col: 18, offset: 15911},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 523, col: 18, offset: 15911},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 523, col: 36, offset: 15929},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 525, col: 1, offset: 15936},
			expr: &actionExpr{
				pos: position{line: 526, col: 5, offset: 15951},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 526, col: 5, offset: 15951},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 526, col: 5, offset: 15951},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 526, col: 21, offset: 15967},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 21, offset: 15967},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 528, col: 1, offset: 16067},
			expr: &choiceExpr{
				pos: position{line: 529, col: 5, offset: 16080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 529, col: 5, offset: 16080},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 530, col: 5, offset: 16092},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 531, col: 5, offset: 16104},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 532, col: 5, offset: 16114},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 532, col: 5, offset: 16114},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 16120},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 532, col: 13, offset: 16122},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 19, offset: 16128},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 21, offset: 16130},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 533, col: 5, offset: 16142},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 534, col: 5, offset: 16151},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 536, col: 1, offset: 16158},
			expr: &choiceExpr{
				pos: position{line: 537, col: 5, offset: 16175},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 537, col: 5, offset: 16175},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 538, col: 5, offset: 16189},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 539, col: 5, offset: 16202},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 540, col: 5, offset: 16213},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 541, col: 5, offset: 16223},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 543, col: 1, offset: 16228},
			expr: &choiceExpr{
				pos: position{line: 544, col: 5, offset: 16245},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 544, col: 5, offset: 16245},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 545, col: 5, offset: 16259},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 546, col: 5, offset: 16272},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 547, col: 5, offset: 16283},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 548, col: 5, offset: 16293},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 550, col: 1, offset: 16298},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 16313},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 551, col: 5, offset: 16313},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 552, col: 5, offset: 16325},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 553, col: 5, offset: 16335},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 554, col: 5, offset: 16344},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 555, col: 5, offset: 16352},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 557, col: 1, offset: 16360},
			expr: &choiceExpr{
				pos: position{line: 557, col: 13, offset: 16372},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 557, col: 13, offset: 16372},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 557, col: 20, offset: 16379},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 557, col: 26, offset: 16385},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 558, col: 1, offset: 16389},
			expr: &choiceExpr{
				pos: position{line: 558, col: 14, offset: 16402},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 558, col: 14, offset: 16402},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 558, col: 22, offset: 16410},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 558, col: 29, offset: 16417},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 558, col: 35, offset: 16423},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 558, col: 40, offset: 16428},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 560, col: 1, offset: 16433},
			expr: &choiceExpr{
				pos: position{line: 561, col: 5, offset: 16445},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 561, col: 5, offset: 16445},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 561, col: 5, offset: 16445},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 16531},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 562, col: 5, offset: 16531},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 562, col: 5, offset: 16531},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 562, col: 9, offset: 16535},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 562, col: 14, offset: 16540},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 562, col: 17, offset: 16543},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 564, col: 1, offset: 16632},
			expr: &choiceExpr{
				pos: position{line: 565, col: 5, offset: 16644},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 565, col: 5, offset: 16644},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 565, col: 5, offset: 16644},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 16731},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 566, col: 5, offset: 16731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 566, col: 5, offset: 16731},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 566, col: 9, offset: 16735},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 14, offset: 16740},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 17, offset: 16743},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 568, col: 1, offset: 16841},
			expr: &choiceExpr{
				pos: position{line: 569, col: 5, offset: 16851},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 569, col: 5, offset: 16851},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 569, col: 5, offset: 16851},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 16938},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 16938},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 570, col: 5, offset: 16938},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 9, offset: 16942},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 14, offset: 16947},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 570, col: 17, offset: 16950},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 572, col: 1, offset: 17048},
			expr: &choiceExpr{
				pos: position{line: 573, col: 5, offset: 17057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 17057},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 573, col: 5, offset: 17057},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 17146},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 574, col: 5, offset: 17146},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 574, col: 5, offset: 17146},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 574, col: 9, offset: 17150},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 14, offset: 17155},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 17, offset: 17158},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 576, col: 1, offset: 17260},
			expr: &choiceExpr{
				pos: position{line: 577, col: 5, offset: 17270},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 577, col: 5, offset: 17270},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 577, col: 5, offset: 17270},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 578, col: 5, offset: 17362},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 578, col: 5, offset: 17362},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 578, col: 5, offset: 17362},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 578, col: 9, offset: 17366},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 14, offset: 17371},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 17, offset: 17374},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 581, col: 1, offset: 17505},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17512},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17512},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 582, col: 5, offset: 17512},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 582, col: 10, offset: 17517},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 14, offset: 17521},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 582, col: 19, offset: 17526},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 23, offset: 17530},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 582, col: 28, offset: 17535},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 32, offset: 17539},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 586, col: 1, offset: 17707},
			expr: &choiceExpr{
				pos: position{line: 587, col: 5, offset: 17715},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 587, col: 5, offset: 17715},
						run: (*parser).callonIP62,
						expr: &seqExpr{
							pos: position{line: 587, col: 5, offset: 17715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 587, col: 5, offset: 17715},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 587, col: 7, offset: 17717},
										expr: &ruleRefExpr{
											pos:  position{line: 587, col: 7, offset: 17717},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 587, col: 17, offset: 17727},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 587, col: 19, offset: 17729},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 5, offset: 17793},
						run: (*parser).callonIP69,
						expr: &seqExpr{
							pos: position{line: 590, col: 5, offset: 17793},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 590, col: 5, offset: 17793},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 590, col: 7, offset: 17795},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 590, col: 11, offset: 17799},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 590, col: 13, offset: 17801},
										expr: &ruleRefExpr{
											pos:  position{line: 590, col: 13, offset: 17801},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 590, col: 23, offset: 17811},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 590, col: 28, offset: 17816},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 590, col: 30, offset: 17818},
										expr: &ruleRefExpr{
											pos:  position{line: 590, col: 30, offset: 17818},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 590, col: 40, offset: 17828},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 590, col: 42, offset: 17830},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17929},
						run: (*parser).callonIP622,
						expr: &seqExpr{
							pos: position{line: 593, col: 5, offset: 17929},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 593, col: 5, offset: 17929},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 593, col: 10, offset: 17934},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 593, col: 12, offset: 17936},
										expr: &ruleRefExpr{
											pos:  position{line: 593, col: 12, offset: 17936},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 593, col: 22, offset: 17946},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 593, col: 24, offset: 17948},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 596, col: 5, offset: 18019},
						run: (*parser).callonIP630,
						expr: &seqExpr{
							pos: position{line: 596, col: 5, offset: 18019},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 596, col: 5, offset: 18019},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 596, col: 7, offset: 18021},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 596, col: 11, offset: 18025},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 596, col: 13, offset: 18027},
										expr: &ruleRefExpr{
											pos:  position{line: 596, col: 13, offset: 18027},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 596, col: 23, offset: 18037},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 599, col: 5, offset: 18105},
						run: (*parser).callonIP638,
						expr: &litMatcher{
							pos:        position{line: 599, col: 5, offset: 18105},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 603, col: 1, offset: 18142},
			expr: &choiceExpr{
				pos: position{line: 604, col: 5, offset: 18154},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 604, col: 5, offset: 18154},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 605, col: 5, offset: 18161},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 607, col: 1, offset: 18166},
			expr: &actionExpr{
				pos: position{line: 607, col: 12, offset: 18177},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 607, col: 12, offset: 18177},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 607, col: 12, offset: 18177},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 607, col: 16, offset: 18181},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 18, offset: 18183},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 608, col: 1, offset: 18220},
			expr: &actionExpr{
				pos: position{line: 608, col: 12, offset: 18231},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 608, col: 12, offset: 18231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 608, col: 12, offset: 18231},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 14, offset: 18233},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 608, col: 18, offset: 18237},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IPNet",
			pos:  position{line: 610, col: 1, offset: 18275},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 18285},
				run: (*parser).callonIPNet1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 18285},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 611, col: 5, offset: 18285},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 7, offset: 18287},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 611, col: 10, offset: 18290},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 611, col: 14, offset: 18294},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 16, offset: 18296},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 615, col: 1, offset: 18369},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 18380},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 18380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 18380},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 7, offset: 18382},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 616, col: 11, offset: 18386},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 616, col: 15, offset: 18390},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 17, offset: 18392},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 620, col: 1, offset: 18455},
			expr: &actionExpr{
				pos: position{line: 621, col: 4, offset: 18463},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 621, col: 4, offset: 18463},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 621, col: 6, offset: 18465},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 623, col: 1, offset: 18505},
			expr: &choiceExpr{
				pos: position{line: 624, col: 5, offset: 18519},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 624, col: 5, offset: 18519},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 5, offset: 18534},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 627, col: 1, offset: 18550},
			expr: &actionExpr{
				pos: position{line: 627, col: 14, offset: 18563},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 627, col: 14, offset: 18563},
					expr: &charClassMatcher{
						pos:        position{line: 627, col: 14, offset: 18563},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 629, col: 1, offset: 18602},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18621},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18621},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 630, col: 5, offset: 18621},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 9, offset: 18625},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 632, col: 1, offset: 18668},
			expr: &choiceExpr{
				pos: position{line: 633, col: 5, offset: 18684},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 633, col: 5, offset: 18684},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 633, col: 5, offset: 18684},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 633, col: 5, offset: 18684},
									expr: &litMatcher{
										pos:        position{line: 633, col: 5, offset: 18684},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 633, col: 10, offset: 18689},
									expr: &charClassMatcher{
										pos:        position{line: 633, col: 10, offset: 18689},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 633, col: 17, offset: 18696},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 633, col: 21, offset: 18700},
									expr: &charClassMatcher{
										pos:        position{line: 633, col: 21, offset: 18700},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 633, col: 28, offset: 18707},
									expr: &ruleRefExpr{
										pos:  position{line: 633, col: 28, offset: 18707},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 5, offset: 18766},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 636, col: 5, offset: 18766},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 636, col: 5, offset: 18766},
									expr: &litMatcher{
										pos:        position{line: 636, col: 5, offset: 18766},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 636, col: 10, offset: 18771},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 636, col: 14, offset: 18775},
									expr: &charClassMatcher{
										pos:        position{line: 636, col: 14, offset: 18775},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 636, col: 21, offset: 18782},
									expr: &ruleRefExpr{
										pos:  position{line: 636, col: 21, offset: 18782},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 640, col: 1, offset: 18838},
			expr: &seqExpr{
				pos: position{line: 640, col: 16, offset: 18853},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 640, col: 16, offset: 18853},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 640, col: 21, offset: 18858},
						expr: &charClassMatcher{
							pos:        position{line: 640, col: 21, offset: 18858},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 640, col: 27, offset: 18864},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 642, col: 1, offset: 18876},
			expr: &actionExpr{
				pos: position{line: 642, col: 7, offset: 18882},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 642, col: 7, offset: 18882},
					expr: &ruleRefExpr{
						pos:  position{line: 642, col: 7, offset: 18882},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 644, col: 1, offset: 18924},
			expr: &charClassMatcher{
				pos:        position{line: 644, col: 12, offset: 18935},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "SearchWord",
			pos:  position{line: 646, col: 1, offset: 18948},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 18963},
				run: (*parser).callonSearchWord1,
				expr: &labeledExpr{
					pos:   position{line: 647, col: 5, offset: 18963},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 647, col: 11, offset: 18969},
						expr: &ruleRefExpr{
							pos:  position{line: 647, col: 11, offset: 18969},
							name: "SearchWordPart",
						},
					},
				},
			},
		},
		{
			name: "SearchWordPart",
			pos:  position{line: 649, col: 1, offset: 19019},
			expr: &choiceExpr{
				pos: position{line: 650, col: 5, offset: 19038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 19038},
						run: (*parser).callonSearchWordPart2,
						expr: &seqExpr{
							pos: position{line: 650, col: 5, offset: 19038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 650, col: 5, offset: 19038},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 650, col: 10, offset: 19043},
									label: "s",
									expr: &choiceExpr{
										pos: position{line: 650, col: 13, offset: 19046},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 650, col: 13, offset: 19046},
												name: "EscapeSequence",
											},
											&ruleRefExpr{
												pos:  position{line: 650, col: 30, offset: 19063},
												name: "SearchEscape",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 651, col: 5, offset: 19100},
						run: (*parser).callonSearchWordPart9,
						expr: &seqExpr{
							pos: position{line: 651, col: 5, offset: 19100},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 651, col: 5, offset: 19100},
									expr: &choiceExpr{
										pos: position{line: 651, col: 7, offset: 19102},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 651, col: 7, offset: 19102},
												val:        "[\\x00-\\x1F\\x5C(),!><=\\x22|\\x27;:]",
												chars:      []rune{'\\', '(', ')', ',', '!', '>', '<', '=', '"', '|', '\'', ';', ':'},
												ranges:     []rune{'\x00', '\x1f'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 651, col: 43, offset: 19138},
												name: "WhiteSpace",
											},
										},
									},
								},
								&anyMatcher{
									line: 651, col: 55, offset: 19150,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 653, col: 1, offset: 19184},
			expr: &choiceExpr{
				pos: position{line: 654, col: 5, offset: 19201},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 654, col: 5, offset: 19201},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 654, col: 5, offset: 19201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 654, col: 5, offset: 19201},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 654, col: 9, offset: 19205},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 654, col: 11, offset: 19207},
										expr: &ruleRefExpr{
											pos:  position{line: 654, col: 11, offset: 19207},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 654, col: 29, offset: 19225},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 655, col: 5, offset: 19262},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 655, col: 5, offset: 19262},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 655, col: 5, offset: 19262},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 655, col: 9, offset: 19266},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 655, col: 11, offset: 19268},
										expr: &ruleRefExpr{
											pos:  position{line: 655, col: 11, offset: 19268},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 655, col: 29, offset: 19286},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 657, col: 1, offset: 19320},
			expr: &choiceExpr{
				pos: position{line: 658, col: 5, offset: 19341},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 658, col: 5, offset: 19341},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 658, col: 5, offset: 19341},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 658, col: 5, offset: 19341},
									expr: &choiceExpr{
										pos: position{line: 658, col: 7, offset: 19343},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 658, col: 7, offset: 19343},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 658, col: 13, offset: 19349},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 658, col: 26, offset: 19362,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 5, offset: 19399},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 659, col: 5, offset: 19399},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 659, col: 5, offset: 19399},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 659, col: 10, offset: 19404},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 659, col: 12, offset: 19406},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 661, col: 1, offset: 19440},
			expr: &choiceExpr{
				pos: position{line: 662, col: 5, offset: 19461},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19461},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19461},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 662, col: 5, offset: 19461},
									expr: &choiceExpr{
										pos: position{line: 662, col: 7, offset: 19463},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 662, col: 7, offset: 19463},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 662, col: 13, offset: 19469},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 662, col: 26, offset: 19482,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 663, col: 5, offset: 19519},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 663, col: 5, offset: 19519},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 663, col: 5, offset: 19519},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 663, col: 10, offset: 19524},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 663, col: 12, offset: 19526},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 665, col: 1, offset: 19560},
			expr: &choiceExpr{
				pos: position{line: 666, col: 5, offset: 19579},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 19579},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 666, col: 5, offset: 19579},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 666, col: 5, offset: 19579},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 666, col: 9, offset: 19583},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 666, col: 18, offset: 19592},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 667, col: 5, offset: 19643},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 668, col: 5, offset: 19664},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 670, col: 1, offset: 19679},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 19700},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 671, col: 5, offset: 19700},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 672, col: 5, offset: 19708},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 673, col: 5, offset: 19716},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19725},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 674, col: 5, offset: 19725},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 675, col: 5, offset: 19754},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 675, col: 5, offset: 19754},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 19783},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 676, col: 5, offset: 19783},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 19812},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 677, col: 5, offset: 19812},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 19841},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 678, col: 5, offset: 19841},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 679, col: 5, offset: 19870},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 679, col: 5, offset: 19870},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchEscape",
			pos:  position{line: 681, col: 1, offset: 19896},
			expr: &choiceExpr{
				pos: position{line: 682, col: 5, offset: 19913},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 19913},
						run: (*parser).callonSearchEscape2,
						expr: &litMatcher{
							pos:        position{line: 682, col: 5, offset: 19913},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 19941},
						run: (*parser).callonSearchEscape4,
						expr: &litMatcher{
							pos:        position{line: 683, col: 5, offset: 19941},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 685, col: 1, offset: 19968},
			expr: &choiceExpr{
				pos: position{line: 686, col: 5, offset: 19986},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 19986},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 19986},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 686, col: 5, offset: 19986},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 686, col: 9, offset: 19990},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 686, col: 16, offset: 19997},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 686, col: 16, offset: 19997},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 25, offset: 20006},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 34, offset: 20015},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 686, col: 43, offset: 20024},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20087},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20087},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 689, col: 5, offset: 20087},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 689, col: 9, offset: 20091},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 689, col: 13, offset: 20095},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 689, col: 20, offset: 20102},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 689, col: 20, offset: 20102},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 29, offset: 20111},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 29, offset: 20111},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 39, offset: 20121},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 39, offset: 20121},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 49, offset: 20131},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 49, offset: 20131},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 59, offset: 20141},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 59, offset: 20141},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 689, col: 69, offset: 20151},
												expr: &ruleRefExpr{
													pos:  position{line: 689, col: 69, offset: 20151},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 689, col: 80, offset: 20162},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 693, col: 1, offset: 20216},
			expr: &actionExpr{
				pos: position{line: 694, col: 5, offset: 20227},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 694, col: 5, offset: 20227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 694, col: 5, offset: 20227},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 694, col: 9, offset: 20231},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 14, offset: 20236},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 694, col: 25, offset: 20247},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 696, col: 1, offset: 20273},
			expr: &actionExpr{
				pos: position{line: 697, col: 5, offset: 20288},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 697, col: 5, offset: 20288},
					expr: &choiceExpr{
						pos: position{line: 697, col: 6, offset: 20289},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 697, col: 6, offset: 20289},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 697, col: 13, offset: 20296},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 699, col: 1, offset: 20336},
			expr: &charClassMatcher{
				pos:        position{line: 700, col: 5, offset: 20352},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "WhiteSpace",
			pos:  position{line: 702, col: 1, offset: 20367},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 20382},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 703, col: 5, offset: 20382},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 704, col: 5, offset: 20391},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 705, col: 5, offset: 20400},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 706, col: 5, offset: 20409},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 707, col: 5, offset: 20417},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 708, col: 5, offset: 20430},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 710, col: 1, offset: 20440},
			expr: &oneOrMoreExpr{
				pos: position{line: 710, col: 6, offset: 20445},
				expr: &ruleRefExpr{
					pos:  position{line: 710, col: 6, offset: 20445},
					name: "WhiteSpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 711, col: 1, offset: 20457},
			expr: &zeroOrMoreExpr{
				pos: position{line: 711, col: 6, offset: 20462},
				expr: &ruleRefExpr{
					pos:  position{line: 711, col: 6, offset: 20462},
					name: "WhiteSpace",
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 713, col: 1, offset: 20475},
			expr: &notExpr{
				pos: position{line: 713, col: 7, offset: 20481},
				expr: &anyMatcher{
					line: 713, col: 8, offset: 20482,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onQuery2(procs interface{}) (interface{}, error) {
	var filt = map[string]interface{}{"op": "FilterProc", "filter": map[string]interface{}{"op": "MatchAll"}}
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{filt}, (procs.([]interface{}))...)}, nil

}

func (p *parser) callonQuery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery2(stack["procs"])
}

func (c *current) onQuery5(s, rest interface{}) (interface{}, error) {
	if len(rest.([]interface{})) == 0 {
		return s, nil
	} else {
		return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{s}, (rest.([]interface{}))...)}, nil
	}

}

func (p *parser) callonQuery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery5(stack["s"], stack["rest"])
}

func (c *current) onQuery13(s interface{}) (interface{}, error) {
	// XXX does this ever match?  Rule above shoul;d match first
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{s}}, nil

}

func (p *parser) callonQuery13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery13(stack["s"])
}

func (c *current) onSearch1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearch1(stack["expr"])
}

func (c *current) onSearchExpr1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalOr"), nil

}

func (p *parser) callonSearchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr1(stack["first"], stack["rest"])
}

func (c *current) onOredSearchTerm1(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOredSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOredSearchTerm1(stack["t"])
}

func (c *current) onSearchTerm1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalAnd"), nil

}

func (p *parser) callonSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["first"], stack["rest"])
}

func (c *current) onAndedSearchTerm1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonAndedSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndedSearchTerm1(stack["f"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "LogicalNot", "expr": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["s"])
}

func (c *current) onSearchFactor19(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor19(stack["expr"])
}

func (c *current) onSearchPred2(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": false, "value": v}, nil

}

func (p *parser) callonSearchPred2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred2(stack["comp"], stack["v"])
}

func (c *current) onSearchPred11(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": true, "value": v}, nil

}

func (p *parser) callonSearchPred11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred11(stack["comp"], stack["v"])
}

func (c *current) onSearchPred20(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": comp, "field": f, "value": v}, nil

}

func (p *parser) callonSearchPred20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred20(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onSearchPred30(expr, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpression", "operator": comp, "lhs": expr, "rhs": v}, nil

}

func (p *parser) callonSearchPred30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred30(stack["expr"], stack["comp"], stack["v"])
}

func (c *current) onSearchPred42(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": "in", "recursive": false, "value": v}, nil

}

func (p *parser) callonSearchPred42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred42(stack["v"])
}

func (c *current) onSearchPred50(v, f interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": "in", "field": f, "value": v}, nil

}

func (p *parser) callonSearchPred50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred50(stack["v"], stack["f"])
}

func (c *current) onSearchPred59(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchPred59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred59(stack["v"])
}

func (c *current) onSearchPred62(v interface{}) (interface{}, error) {
	var str = v.(string)
	if str == "*" {
		return map[string]interface{}{"op": "MatchAll"}, nil
	}
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": literal}, nil

}

func (p *parser) callonSearchPred62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred62(stack["v"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onSearchLiteral7(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonSearchLiteral7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchLiteral7(stack["i"])
}

func (c *current) onSearchLiteral13(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonSearchLiteral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchLiteral13(stack["v"])
}

func (c *current) onSearchLiteral21(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonSearchLiteral21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchLiteral21(stack["v"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null"}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onSequentialProcs1(first, rest interface{}) (interface{}, error) {
	if rest != nil {
		return append([]interface{}{first}, (rest.([]interface{}))...), nil
	} else {
		return []interface{}{first}, nil
	}

}

func (p *parser) callonSequentialProcs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialProcs1(stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onProc4(proc interface{}) (interface{}, error) {
	return proc, nil

}

func (p *parser) callonProc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProc4(stack["proc"])
}

func (c *current) onProcs1(first, rest interface{}) (interface{}, error) {
	var fp = map[string]interface{}{"op": "SequentialProc", "procs": first}
	if rest != nil {
		return map[string]interface{}{"op": "ParallelProc", "procs": append([]interface{}{fp}, (rest.([]interface{}))...)}, nil
	} else {
		return fp, nil
	}

}

func (p *parser) callonProcs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProcs1(stack["first"], stack["rest"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": ch}, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onGroupByProc1(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "reducers": reducers}
	if every != nil {
		p["duration"] = every
	}
	if keys != nil {
		p["keys"] = keys
	}
	if limit != nil {
		p["limit"] = limit
	}
	return p, nil

}

func (p *parser) callonGroupByProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByProc1(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg1(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg1(stack["limit"])
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment10(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment10(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc"}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args, columns interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "CutProc", "fields": columns, "complement": false}
	if _, ok := argm["c"]; ok {
		proc["complement"] = true
	}
	return proc, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"], stack["columns"])
}

func (c *current) onCutArgs4() (interface{}, error) {
	return map[string]interface{}{"name": "c", "value": nil}, nil
}

func (p *parser) callonCutArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutArgs4()
}

func (c *current) onCutArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)

}

func (p *parser) callonCutArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutArgs1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onRootField2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".", "lhs": map[string]interface{}{"op": "RootRecord"}, "rhs": field}, nil
}

func (p *parser) callonRootField2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField2(stack["field"])
}

func (c *current) onRootField12() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonRootField12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField12()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalORExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalORExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalORExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalORExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalORExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalANDExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalANDExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalANDExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalANDExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalANDExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr7(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonCastExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr7(stack["typ"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onFuncName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFuncName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncName1()
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["expr"])
}

func (c *current) onDeref8(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref8(stack["id"])
}

func (c *current) onPrimary10(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary10(stack["expr"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onIdentifierName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName1()
}

func (c *current) onIdentifier1() (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": string(c.text)}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP62(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP62(stack["a"], stack["b"])
}

func (c *current) onIP69(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP69(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP622(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP622(stack["a"], stack["b"])
}

func (c *current) onIP630(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP630(stack["a"], stack["b"])
}

func (c *current) onIP638() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP638()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIPNet1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIPNet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIPNet1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onSearchWord1(chars interface{}) (interface{}, error) {
	return joinChars(chars), nil
}

func (p *parser) callonSearchWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchWord1(stack["chars"])
}

func (c *current) onSearchWordPart2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSearchWordPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchWordPart2(stack["s"])
}

func (c *current) onSearchWordPart9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSearchWordPart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchWordPart9()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onSearchEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonSearchEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchEscape2()
}

func (c *current) onSearchEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonSearchEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
